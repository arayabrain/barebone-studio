import os
import shutil

from studio.app.common.core.snakemake.smk import ForceRun, SmkParam
from studio.app.common.core.snakemake.snakemake_executor import (
    delete_dependencies,
    snakemake_execute,
)
from studio.app.common.core.utils.pickle_handler import PickleReader
from studio.app.common.core.workflow.workflow import Edge, Node, NodeData
from studio.app.dir_path import DIRPATH

workspace_id = "default"
unique_id = "snakemake"

suite2p_file_convert_node_id = "suite2p_file_convert_1234"
suite2p_roi_node_id = "suite2p_roi_1234"

smk_param = SmkParam(
    use_conda=True,
    cores=2,
    forceall=True,
    forcetargets=True,
    lock=False,
)

shutil.copytree(
    f"{DIRPATH.DATA_DIR}/output_test/{workspace_id}/{unique_id}",
    f"{DIRPATH.DATA_DIR}/output/{workspace_id}/{unique_id}",
    dirs_exist_ok=True,
)


nodeDict = {
    suite2p_file_convert_node_id: Node(
        id=suite2p_file_convert_node_id,
        type="a",
        data=NodeData(label="suite2p_file_convert", param={}, path="", type=""),
        position={"x": 0, "y": 0},
        style={
            "border": None,
            "borderRadius": 0,
            "height": 100,
            "padding": 0,
            "width": 180,
        },
    ),
    suite2p_roi_node_id: Node(
        id=suite2p_roi_node_id,
        type="a",
        data=NodeData(label="suite2p_roi", param={}, path="", type=""),
        position={"x": 0, "y": 0},
        style={
            "border": None,
            "borderRadius": 0,
            "height": 100,
            "padding": 0,
            "width": 180,
        },
    ),
}


edgeDict = {
    "edge1": Edge(
        id="edge1",
        source="input_0",
        animated=False,
        sourceHandle="",
        style={},
        target=suite2p_file_convert_node_id,
        targetHandle="",
        type={},
    ),
    "edge2": Edge(
        id="edge2",
        source=suite2p_file_convert_node_id,
        animated=False,
        sourceHandle="",
        style={},
        target=suite2p_roi_node_id,
        targetHandle="",
        type={},
    ),
}

output_dirpath = f"{DIRPATH.DATA_DIR}/output/default/snakemake"


# TODO: Do Commonize
def util_check_workflow_pickle_is_valid(data) -> bool:
    is_valid = (data is not None) and (type(data) is not list)
    return is_valid


def test_snakemake_execute(client):
    """
    Test for Run snakemake (suite2p)
    """

    # Run snakemake executor
    snakemake_execute(workspace_id, unique_id, smk_param)

    # Check snakemake execution results
    suite2p_file_convert_pkl_path = (
        f"{output_dirpath}/{suite2p_file_convert_node_id}/suite2p_file_convert.pkl"
    )
    suite2p_roi_pkl_path = f"{output_dirpath}/{suite2p_roi_node_id}/suite2p_roi.pkl"
    assert os.path.exists(suite2p_file_convert_pkl_path), "Workflow pickle not found"
    assert os.path.exists(suite2p_roi_pkl_path), "Workflow pickle not found"

    suite2p_file_convert_pkl = PickleReader.read(suite2p_file_convert_pkl_path)
    suite2p_roi_pkl = PickleReader.read(suite2p_roi_pkl_path)
    assert util_check_workflow_pickle_is_valid(
        suite2p_file_convert_pkl
    ), "Invalid workflow pickle"
    assert util_check_workflow_pickle_is_valid(
        suite2p_roi_pkl
    ), "Invalid workflow pickle"

    # Check for generated "error.log" file
    error_log_filepath = f"{DIRPATH.OUTPUT_DIR}/default/snakemake/error.log"
    assert os.path.exists(error_log_filepath)


def test_snakemake_delete_dependencies():
    """
    Test for delete snakemake dependencies
    """

    suite2p_file_convert_pkl_path = (
        f"{output_dirpath}/{suite2p_file_convert_node_id}/suite2p_file_convert.pkl"
    )
    suite2p_roi_pkl_path = f"{output_dirpath}/{suite2p_roi_node_id}/suite2p_roi.pkl"

    # Existence check of dependencies files
    # *Files are pre-generated by `test_snakemake_execute`
    assert os.path.exists(suite2p_file_convert_pkl_path), "Dependencies files not found"
    assert os.path.exists(suite2p_roi_pkl_path), "Dependencies files not found"

    # Run delete_dependencies
    smk_param.forcerun = [
        ForceRun(
            nodeId=suite2p_file_convert_node_id,
            name="suite2p_file_convert",
        ),
        ForceRun(
            nodeId=suite2p_roi_node_id,
            name="suite2p_roi",
        ),
    ]
    delete_dependencies(
        workspace_id=workspace_id,
        unique_id=unique_id,
        smk_params=smk_param,
        nodeDict=nodeDict,
        edgeDict=edgeDict,
    )

    # Check for deleted dependencies files
    assert not os.path.exists(
        suite2p_file_convert_pkl_path
    ), "Dependencies files remain"
    assert not os.path.exists(suite2p_roi_pkl_path), "Dependencies files remain"
