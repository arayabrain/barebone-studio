"""init

Revision ID: cfec6fb68b66
Revises:
Create Date: 2023-07-13 00:59:13.351913

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "cfec6fb68b66"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "belongs",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column("belong", sa.String(length=100), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "cells",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column(
            "exp_id",
            sa.Integer(),
            nullable=False,
            comment="foregn key for experiments.id",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_cells_exp_id"), "cells", ["exp_id"], unique=False)
    op.create_table(
        "experiments",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column("experiment_id", sa.String(length=100), nullable=False),
        sa.Column("attributes", sa.JSON(), nullable=True),
        sa.Column(
            "publish_status",
            sa.Integer(),
            nullable=True,
            comment="0: private, 1: public",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("experiment_id", name="idx_experiment_id"),
    )
    op.create_table(
        "roles",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column("role", sa.String(length=100), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_roles",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column(
            "user_id", sa.Integer(), nullable=False, comment="foregn key for users.id"
        ),
        sa.Column(
            "role_id", sa.Integer(), nullable=False, comment="foregn key for roles.id"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "role_id", name="idx_user_id"),
    )
    op.create_table(
        "users",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column("uid", sa.String(length=100), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("attributes", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("belong_id", sa.Integer(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uid", name="idx_uid"),
    )
    op.create_table(
        "workspaces",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_workspaces_user_id"), "workspaces", ["user_id"], unique=False
    )
    op.create_table(
        "workspaces_share_users",
        sa.Column("id", mysql.BIGINT(unsigned=True), nullable=False),
        sa.Column(
            "workspace_id",
            sa.Integer(),
            nullable=False,
            comment="foregn key for workspaces.id",
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("workspace_id", "user_id", name="idx_workspace_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("workspaces_share_users")
    op.drop_index(op.f("ix_workspaces_user_id"), table_name="workspaces")
    op.drop_table("workspaces")
    op.drop_table("users")
    op.drop_table("user_roles")
    op.drop_table("roles")
    op.drop_table("experiments")
    op.drop_index(op.f("ix_cells_exp_id"), table_name="cells")
    op.drop_table("cells")
    op.drop_table("belongs")
    # ### end Alembic commands ###
