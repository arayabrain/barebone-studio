{"version":3,"sources":["store/utils/param/ParamUtils.ts","store/slice/AlgorithmNode/AlgorithmNodeSelectors.ts","store/slice/AlgorithmList/AlgorithmListUtils.ts","store/slice/AlgorithmList/AlgorithmListSelectors.ts","store/slice/AlgorithmList/AlgorithmListType.ts","const/API.ts","store/slice/AlgorithmList/AlgorithmListActions.ts","store/slice/InputNode/InputNodeType.ts","store/slice/FlowElement/FlowElementType.ts","const/flowchart.ts","api/experiments/Experiments.ts","store/slice/Experiments/ExperimentsType.ts","store/slice/Experiments/ExperimentsActions.ts","store/slice/InputNode/InputNodeActions.ts","store/slice/FlowElement/FlowElementUtils.ts","api/run/RunUtils.ts","store/slice/FlowElement/FlowElementSlice.ts","components/FlowChart/TreeView.tsx","store/slice/FlowElement/FlowElementSelectors.ts","store/slice/InputNode/InputNodeUtils.ts","store/slice/InputNode/InputNodeSelectors.ts","components/FlowChart/FlowChartNode/HandleColorHook.ts","store/slice/HandleTypeColor/HandleTypeColorSelectors.ts","store/slice/FilesTree/FilesTreeSelectors.ts","store/slice/FilesTree/FilesTreeType.ts","store/slice/FilesTree/FilesTreeAction.ts","components/FileSelectDialog.tsx","components/FlowChart/FlowChartNode/LinerProgressWithLabel.tsx","store/slice/FileUploader/FileUploaderType.ts","store/slice/FileUploader/FileUploaderActions.ts","store/slice/FileUploader/FileUploaderInitlalState.ts","store/slice/FileUploader/FileUploaderSelectors.ts","store/slice/FileUploader/FileUploaderHook.ts","components/FlowChart/FlowChartNode/FileSelect.tsx","components/FlowChart/FlowChartNode/FlowChartUtils.ts","components/FlowChart/FlowChartNode/ImageFileNode.tsx","store/slice/RightDrawer/RightDrawerSlice.ts","store/slice/NWB/NWBSelectors.ts","store/slice/Snakemake/SnakemakeSelectors.ts","store/slice/Pipeline/PipelineType.ts","store/slice/DisplayData/DisplayDataType.ts","store/slice/DisplayData/DisplayDataUtils.ts","store/slice/Pipeline/PipelineUtils.ts","store/slice/Pipeline/PipelineSelectors.ts","components/FlowChart/FlowChartNode/AlgorithmNode.tsx","store/slice/InputNode/InputNodeSlice.ts","store/slice/DisplayData/DisplayDataSelectors.ts","store/slice/DisplayData/DisplayDataActions.ts","components/Visualize/DataContext.tsx","utils/EqualityUtils.ts","store/slice/VisualizeItem/VisualizeItemType.ts","store/slice/VisualizeItem/VisualizeItemUtils.ts","store/slice/VisualizeItem/VisualizeItemSelectors.ts","components/Visualize/Plot/CsvPlot.tsx","components/FlowChart/FlowChartNode/CsvFileNode.tsx","store/slice/HDF5/HDF5Selectors.ts","store/slice/HDF5/HDF5Type.ts","store/slice/HDF5/HDF5Action.ts","components/FlowChart/FlowChartNode/HDF5FileNode.tsx","components/FlowChart/CustomEdge.tsx","store/slice/NWB/NWBAction.ts","store/slice/NWB/NWBType.ts","store/slice/NWB/NWBSlice.ts","components/Accordion.tsx","components/ParamFormItemCreator.tsx","components/FlowChart/NWB.tsx","store/slice/Snakemake/SnakemakeType.ts","store/slice/Snakemake/SnakemakeAction.ts","store/slice/Snakemake/SnakemakeSlice.ts","components/FlowChart/Snakemake.tsx","api/run/Run.ts","store/slice/Pipeline/PipelineActions.ts","store/slice/Pipeline/PipelineSlice.ts","components/RunButtons.tsx","components/ToolBar.tsx","components/FlowChart/ReactFlowComponent.tsx","store/slice/RightDrawer/RightDrawerSelectors.ts","store/slice/AlgorithmNode/AlgorithmNodeType.ts","store/slice/AlgorithmNode/AlgorithmNodeActions.ts","store/slice/AlgorithmNode/AlgorithmNodeSlice.ts","components/FlowChart/AlgorithmParamForm.tsx","components/FlowChart/RightDrawer.tsx","components/FlowChart/FlowChart.tsx","store/slice/VisualizeItem/VisualizeItemSlice.ts","components/Visualize/VisualizeItemAddButton.tsx","store/slice/DisplayData/DisplayDataSlice.ts","components/Visualize/DisplayItemDeleteButton.tsx","components/Visualize/Plot/ImagePlot.tsx","components/Visualize/Plot/TimeSeriesPlot.tsx","components/Visualize/Plot/HeatMapPlot.tsx","components/Visualize/FilePathSelect.tsx","components/Visualize/MultiPlotItem.tsx","components/Visualize/Plot/RoiPlot.tsx","components/Visualize/Plot/ScatterPlot.tsx","components/Visualize/Plot/BarPlot.tsx","components/Visualize/Plot/HTMLPlot.tsx","components/Visualize/DisplayDataItem.tsx","components/Visualize/MultiPlotDeleteButton.tsx","components/Visualize/VisualizeItems.tsx","components/Visualize/Editor/GradientColorPicker.tsx","components/Visualize/Editor/ImageItemEditor.tsx","components/Visualize/Editor/CsvItemEditor.tsx","components/Visualize/Editor/HeatmapItemEditor.tsx","components/Visualize/Editor/TimeSeriesItemEditor.tsx","components/Visualize/Editor/RoiItemEditor.tsx","components/Visualize/Editor/ScatterItemEditor.tsx","components/Visualize/Editor/BarItemEditor.tsx","components/Visualize/VisualizeItemEditor.tsx","components/Visualize/Visualize.tsx","store/slice/Experiments/ExperimentsSelectors.ts","components/Experiment/ExperimentStatusIcon.tsx","components/Experiment/CollapsibleTable.tsx","components/Experiment/ExperimentTable.tsx","components/Experiment/Experiment.tsx","components/Layout.tsx","store/slice/Pipeline/PipelineHook.ts","App.tsx","reportWebVitals.ts","store/slice/AlgorithmList/AlgorithmListSlice.ts","store/slice/FileUploader/FileUploaderSlice.ts","store/slice/FilesTree/FilesTreeUtils.ts","store/slice/FilesTree/FilesTreeSlice.ts","store/slice/HandleTypeColor/HandleTypeColorSlice.ts","store/slice/HDF5/HDF5Utils.ts","store/slice/HDF5/HDF5Slice.ts","store/slice/Experiments/ExperimentsUtils.ts","store/slice/Experiments/ExperimentsSlice.ts","store/store.ts","Theme.ts","index.tsx"],"names":["getChildParam","path","ParamMap","result","Object","values","node","isParamChild","children","param","type","convertToParamMap","dto","keyList","entries","forEach","name","value","kList","Array","isArray","isDictObject","concat","join","push","selectAlgorithmNode","state","algorithmNode","selectAlgorithmName","nodeId","selectAlgorithmParams","params","isAlgoChild","algoNode","getAlgoChild","algoList","algoName","convertToAlgoListType","prototype","hasOwnProperty","call","functionPath","args","returns","selectAlgorithmList","algorithmList","selectAlgorithmListIsLated","isLatest","selectAlgorithmListTree","tree","ALGORITHM_LIST_SLICE_NAME","HOST","process","PORT","BASE_URL","getAlgoList","createAsyncThunk","_","thunkAPI","a","rejectWithValue","axios","get","response","data","INPUT_NODE_SLICE_NAME","FILE_TYPE_SET","NODE_TYPE_SET","INITIAL_ALGO_STYLE","width","height","padding","borderRadius","INITIAL_DATA_STYLE","border","getExperimentsApi","deleteExperimentByUidApi","uid","delete","importExperimentByUidApi","EXPERIMENTS_SLICE_NAME","getExperiments","deleteExperimentByUid","importExperimentByUid","setInputNodeFilePath","createAction","isNodeData","isNode","isAlgorithmNodeData","isInputNodePostData","isInputNodeData","isAlgorithmNodePostData","initialFlowPosition","x","y","zoom","initialElementCoord","initialState","flowElements","id","label","style","position","flowPosition","elementCoord","flowElementSlice","createSlice","reducers","setFlowPosition","action","payload","setFlowElements","deleteFlowElements","removeElements","deleteFlowElementsById","element","find","edge","undefined","addFlowElementNode","targetPosition","Position","Left","sourcePosition","Right","newPosition","editFlowElementPositionById","coord","elementIdx","findIndex","ele","targetItem","extraReducers","builder","addCase","fileName","filePath","split","reverse","targetNode","fulfilled","newNodeList","nodeList","map","edgeList","actions","AlgorithmTreeView","React","memo","dispatch","useDispatch","useSelector","useEffect","TreeView","sx","flexGrow","defaultCollapseIcon","defaultExpandIcon","TreeItem","InputNodeComponent","nodeName","fileType","i","AlgoNodeComponent","onAlgoNodeClick","newNode","nanoid","algoNodeInfo","toFixed","LeafItem","AddButton","onClick","nodeType","componentType","inputNodeInfo","onDataNodeClick","IconButton","size","Typography","variant","textOverflow","overflow","display","styled","treeItemClasses","iconContainer","margin","selectFlowElements","flowElement","selectFlowPosition","selectNodeById","filter","selectNodeLabelById","isCsvInputNode","inputNode","isHDF5InputNode","selectInputNodeById","selectInputNodeDefined","keys","includes","selectInputNodeSelectedFilePath","selectedFilePath","selectFilePathIsUndefined","length","selectCsvInputNodeParam","Error","selectInputNodeHDF5Path","item","hdf5Path","useHandleColor","key","handleColor","colorMap","selectFilesTree","filesTree","FILES_TREE_SLICE_NAME","FILE_TREE_TYPE_SET","getFilesTree","file_type","FileSelectDialog","open","onClickCancel","onClickOk","onClose","title","useState","clickedFilePath","setClickedFilePath","theme","useTheme","Dialog","fullWidth","DialogTitle","DialogContent","dividers","marginBottom","spacing","borderColor","palette","divider","FileTreeView","onClickFile","DialogActions","Button","color","selectFilesTreeNodes","selectFilesIsLatest","isLoading","selectFilesIsLoading","useFileTree","LinearProgress","TreeNode","isDir","icon","htmlColor","nodes","childNode","fontSize","LinearProgressWithLabel","props","Box","alignItems","mr","minWidth","Math","round","FILE_UPLOADER_SLICE_NAME","setUploadProgress","uploadFile","requestId","formData","config","getUploadConfig","percent","total","progess","post","resultPath","file_path","onUpdateProgressFn","onUploadProgress","progressEvent","percentCompleted","loaded","inistialUploaderState","isUninitialized","pending","uploadingProgress","error","selectFileUploader","fileUploader","useFileUploader","useRef","onUploadFile","useCallback","current","uninitialized","selectFileUploadIsUninitialized","selectUploadFilePath","selectFileUploadIsPending","selectFileUploadIsFulfilled","progress","selectFileUploadProgress","selectFileUploadError","FileSelect","onChangeFilePath","uploadedFilePath","marginLeft","marginRight","FileSelectImple","onSelectFile","selectedPath","fileTreeType","selectButtonLabel","uploadButtonLabel","inputRef","setOpen","accept","getFileInputAccept","ButtonGroup","click","ref","onChange","event","preventDefault","target","files","file","FormData","append","visibility","className","toHandleId","getHandleType","handleId","isValidConnection","connection","sourceHandle","targetHandle","sourceHandleStyle","top","ImageFileNode","ImageFileNodeImple","elementSelected","selected","returnType","imageColor","background","alpha","primary","light","right","RIGHT_DRAWER_MODE","mode","currendNodeId","rightDrawerSlice","openRightDrawer","closeRightDrawer","toggleParamForm","toggleNwb","toggleSnakemake","elm","selectNwb","nwb","selectNwbParamsKeyList","selectNwbParam","paramKey","selectNwbParamsValue","selectSnakemakeParams","snakemake","selectSnakemake","selectSnakemakeParamsKeyList","selectSnakemakeParam","selectSnakemakeParamsValue","PIPELINE_SLICE_NAME","RUN_STATUS","NODE_RESULT_STATUS","RUN_BTN_OPTIONS","RUN_NEW","RUN_ALREADY","RUN_BTN_LABELS","DISPLAY_DATA_SLICE_NAME","DATA_TYPE_SET","toDataType","isNodeResultPending","nodeResult","status","isNodeResultSuccess","isStartedPipeline","pipeline","getInitialRunResult","runPostData","initialResult","convertToOutputPath","selectPipelineLatestUid","currentPipeline","selectRunPostData","nwbParam","selectNwbParams","snakemakeParam","edgeListForRun","isEdge","selectEdgeListForRun","selectNodePostDataListForRun","forceRunList","selectForceRunList","selectInputNodeFileType","selectInputNodeParam","isUpdated","selectPipelineNodeResultStatus","selectStartedPipeline","run","selectPipelineRunBtn","runBtn","selectRunResultPendingNodeIdList","runResult","isNodeResultPendingAndNodeId","arg","selectPipelineStatus","selectPipelineIsCanceled","selectPipelineIsStartedSuccess","isNodeResultSuccessAndNodeId","leftHandleStyle","rightHandleStyle","AlgorithmNode","AlgorithmNodeImple","isConnectable","AlgoName","AlgoArgs","AlgoReturns","Message","latestUid","paddingLeft","textAlign","main","algoArgs","algoListChild","selectAlgoArgs","algoInfoListEqualtyFn","info","algoInfo","ArgHandle","algoReturns","selectAlgoReturns","ReturnHandle","isNone","hex_color","isHover","setHover","rgb_color","hex","exec","parseInt","hexToRgb","onMouseEnter","onMouseLeave","Tooltip","placement","arrow","errorMsg","message","selectPipelineNodeResultMessage","anchorElRef","prevOpen","float","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","FormHelperText","success","b","every","v","inputNodeSlice","deleteInputNode","setCsvInputNodeParam","setInputNodeHDF5Path","setColumn","setIndex","transpose","newState","selectDisplayData","displayData","selectTimeSeriesDataIsInitialized","timeSeries","selectHeatMapDataIsInitialized","heatMap","selectImageData","image","selectImageDataIsInitialized","selectImageDataIsPending","selectCsvDataIsInitialized","csv","selectCsvDataError","selectCsvDataIsPending","selectCsvDataIsFulfilled","selectRoiData","roi","selectRoiDataIsInitialized","selectScatterDataIsInitialized","scatter","selectBarDataIsInitialized","bar","selectHTMLDataIsInitialized","html","getTimeSeriesDataById","index","getTimeSeriesAllData","getHeatMapData","getImageData","startIndex","endIndex","start_index","end_index","getCsvData","getRoiData","getScatterData","getBarData","getHTMLData","DisplayDataContext","createContext","dataType","itemId","NaN","arrayEqualityFn","twoDimarrayEqualityFn","VISUALIZE_ITEM_TYPE_SET","isMultiPlotItem","itemType","isDisplayDataItem","isImageItem","isTimeSeriesItem","isCsvItem","isHeatMapItem","isScatterItem","selectSelectedVisualizeItemId","visualaizeItem","selectedItemId","selectVisualizeItems","items","selectVisualizeItemIdList","Number","selectVisualizeItemType","selectMultiPlotImageItem","imageItem","selectMultiPlotImageItemNodeId","selectMultiPlotImageItemFilePath","selectMultiPlotTimeSeriesItem","timeSeriesItem","selectMultiPlotRoiItem","roiItem","selectMultiPlotRoiItemNodeId","selectMultiPlotRoiItemFilePath","selectMultiPlotTimeSeriesItemNodeId","selectMultiPlotTimeSeriesItemFilePath","selectMultiPlotHeatMapItem","heatMapItem","selectMultiPlotHeatMapItemNodeId","selectMultiPlotHeatMapItemFilePath","selectVisualizeDataType","selectVisualizeDataNodeId","selectVisualizeDataFilePath","selectRoiItemFilePath","selectImageItemShowticklabels","showticklabels","selectImageItemZsmooth","zsmooth","selectImageItemStartIndex","selectImageItemEndIndex","selectImageItemShowLine","showline","selectImageItemShowGrid","showgrid","selectImageItemShowScale","showscale","selectImageItemColors","colors","selectTimeSeriesItemOffset","offset","selectTimeSeriesItemSpan","span","selectTimeSeriesItemShowGrid","selectTimeSeriesItemShowLine","selectTimeSeriesItemShowTickLabels","selectTimeSeriesItemZeroLine","zeroline","selectTimeSeriesItemXrange","xrange","selectTimeSeriesItemDisplayNumbers","displayNumbers","selectTimeSeriesItemCheckedList","checkedList","selectRoiItemMaxNumber","roiFilePath","roiData","max","arr","selectHeatMapItemShowScale","selectHeatMapItemColors","selectCsvItemTranspose","selectCsvItemSetColumn","selectCsvItemSetIndex","selectScatterItemXIndex","xIndex","selectScatterItemYIndex","yIndex","CsvPlot","useContext","isInitialized","isPending","isFulfilled","CsvPlotImple","PresentationalCsvPlot","csvData","useMemo","col","row","columns","columnData","field","headerName","idx","rows","row_id","rowObj","fromEntries","CsvFileNode","CsvFileNodeImple","ParamSettingDialog","selectCsvInputNodeParamSetColumn","setSetColumn","selectCsvInputNodeParamSetIndex","setSetIndex","selectCsvInputNodeParamTranspose","setTranspose","p","m","FormControlLabel","control","Switch","checked","TextField","InputLabelProps","shrink","CsvPreview","otherProps","selectHDF5","hdf5","HDF5_SLICE_NAME","getHDF5Tree","HDF5FileNode","HDF5FileNodeImple","ItemSelect","structureFileName","Structure","autoFocus","useHDF5Tree","shape","nbytes","getNWBParams","nwbSlice","updateParam","newValue","Accordion","disableGutters","elevation","square","boxShadow","borderBottom","createParamFormItemComponent","paramSelector","paramValueSelector","paramUpdateActionCreator","useParamValueUpdate","ParamItemForString","updateParamAction","e","multiline","ParamItemForNumber","ParamItemForBoolean","ParamItemForValueType","ParamChildItem","marginTop","verticalAlign","ParamItem","AccordionSummary","expandIcon","AccordionDetails","NWBSettingButton","endIcon","NWBSettingContents","paramKeyList","Component","SNAKEMAKE_SLICE_NAME","getSnakemakeParams","SnakemakeSlice","SnakemakeButton","SnakemakeContents","runApi","runByUidApi","pendingNodeIdList","responseData","runByCurrentUid","currentUid","getState","pollRunResult","pipelineSlice","cancelPipeline","setRunBtnOption","runBtnOption","nodeResultDto","outputPath","outputPaths","convertToRunResult","rejected","meta","addMatcher","isAnyOf","RunButtons","isStartedSuccess","filePathIsUndefined","handleCancelPipeline","handleRunPipeline","handleRunPipelineByUid","dialogOpen","setDialogOpen","enqueueSnackbar","useSnackbar","menuOpen","setMenuOpen","anchorRef","handleClose","contains","uidExists","disabled","Popper","role","transition","disablePortal","TransitionProps","Grow","Paper","ClickAwayListener","onClickAway","MenuList","option","MenuItem","handleMenuItemClick","RunDialog","handleRun","setName","setError","helperText","ToolBar","zIndex","textTransform","componentTypes","edgeTypes","buttonedge","sourceX","sourceY","targetX","targetY","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","getEdgeCenter","edgeCenterX","edgeCenterY","d","foreignObjectSize","ReactFlowComponent","elements","onElementsRemove","elementsToRemove","onConnect","addEdge","animated","onDragOver","dataTransfer","dropEffect","onNodeDragStop","nodeTypes","defaultPosition","defaultZoom","onMoveEnd","selectRightDrawerIsOpen","rightDrawer","selectRightDrawerMode","selectRightDrawerCurrentNodeId","ALGORITHM_NODE_SLICE_NAME","getAlgoParams","algorithmNodeSlice","AlgorithmParamForm","ParamFormContext","algoParamIsLoaded","selectAlgorithmParamsExit","selectAlgorithmParamsKeyList","selectAlgorithmParam","selectAlgorithmParamsValue","Contents","ParamFormConetent","Provider","StyledDrawer","Drawer","flexShrink","drawerClasses","paper","MainContents","RightDrawer","anchor","Toolbar","Divider","FlowChart","RootDiv","DrawerContents","drawerWidth","flexDirection","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","displayDataCommonInitialValue","imageItemInitialValue","rgb","activeIndex","timeSeriesItemInitialValue","left","maxIndex","heatMapItemInitialValue","csvItemInitialValue","roiItemInitialValue","scatterItemInitialValue","barItemInitialValue","hdf5ItemInitialValue","htmlItemInitialValue","getDisplayDataItemInitialValue","MultiPlotItemInitialValue","visualaizeItemSlice","deleteVisualizeItem","addInitialItem","nextId","idList","reduce","getMaxItemId","selectItem","setRoiItemFilePath","setFilePath","setImageItemFilePath","setTimeSeriesItemFilePath","setHeatMapItemFilePath","setDisplayDataPath","setItemType","toggleItemTypeMultiPlot","resetImageActiveIndex","incrementImageActiveIndex","decrementImageActiveIndex","setImageItemShowticklabels","setImageItemZsmooth","setImageItemShowLine","setImageItemShowGrid","setImageItemShowScale","setImageItemColors","setImageItemStartIndex","setImageItemEndIndex","setTimeSeriesItemOffset","setTimeSeriesItemSpan","setTimeSeriesItemShowGrid","setTimeSeriesItemShowLine","setTimeSeriesItemShowTickLabels","setTimeSeriesItemZeroLine","setTimeSeriesItemXrangeLeft","setTimeSeriesItemXrangeRight","setTimeSeriesItemDisplayNumbers","setTimeSeriesItemCheckedList","setTimeSeriesItemMaxIndex","setHeatMapItemShowScale","setHeatMapItemColors","setCsvItemTranspose","setCsvItemSetColumn","setCsvItemSetIndex","setScatterItemXIndex","setScatterItemYIndex","VisualizeItemAddButton","StyledPaper","justifyContent","StyledButton","borderWidth","displayDataSlice","deleteDisplayItem","std","console","log","DisplayItemDeleteButton","stopPropagation","ImagePlot","selectImageDataError","ImagePlotImple","itemStartIndex","itemEndIndex","selectImageItemActiveIndex","MobileStepper","steps","activeStep","nextButton","direction","backButton","ImagePlotChart","imageData","selectActiveImageData","imageDataEqualtyFn","colorscale","timeDataMaxIndex","maxIdx","selectRoiItemIndex","colorscaleRoi","createColormap","colormap","nshades","format","z","parseFloat","offsets","min","hoverongaps","hovertemplate","new_i","floor","zmin","zmax","layout","t","l","dragmode","xaxis","autorange","autotick","ticks","yaxis","automargin","plotlyHeight","getBoundingClientRect","getElementsByClassName","clientHeight","plotContainer","timeSeriesFilePath","selectMultiPlotTimeSeriesItemFilepath","selectMultiPlotTimeSeriesItemDisplayNumbers","displayModeBar","responsive","points","curveNumber","TimeSeriesPlot","selectTimeSeriesDataError","selectTimeSeriesDataIsFulfilled","TimeSeriesPlotImple","timeSeriesData","timeSeriesDataEqualityFn","dataXrange","selectTimeSeriesXrange","dataStd","selectTimeSeriesStd","colorScale","activeIdx","mean","sqrt","pow","String","visible","line","error_y","array","annotations","xref","yref","text","arrowhead","ax","ay","autosize","range","onLegendClick","clickNumber","aArray","bArray","aKey","aValue","bKey","bValue","nestEqualityFun","HeatMapPlot","selectHeatMapDataError","selectHeatMapDataIsFulfilled","HeatMapImple","heatMapData","heatMapDataEqualtyFn","showlegend","FilePathSelect","selectedNodeId","onSelect","inputNodeFilePathInfoList","inputNodes","selectInputNode","toDataTypeFromFileType","inputNodeDataType","algorithmNodeOutputPathInfoList","selectPipelineNodeResultSuccessList","paths","outputKey","onSelectHandle","menuItemList","pathInfo","ListSubheader","FormControl","maxWidth","InputLabel","Select","onOpen","MultiPlotItem","MultiPlot","Grid","container","xs","MultiImagePlot","MultiTimeSeriesPlot","MultiHeatMapPlot","secondary","RoiPlot","selectRoiDataIsFulfilled","selectRoiDataError","RoiPlotImple","ScatterPlot","selectScatterDataError","selectScatterDataIsFulfilled","ScatterPlotImple","scatterData","scatterDataEqualityFn","textposition","textfont","family","marker","font","BarPlot","selectBarDataError","selectBarDataIsFulfilled","BarPlotImple","barData","barDataEqualityFn","HTMLPlot","selectHTMLDataError","selectHTMLDataIsFulfilled","HTMLPlotImple","htmlData","dangerouslySetInnerHTML","__html","DisplayDataItem","DisplayPlot","MultiPlotDeleteButton","VisualizeItems","FlexItemList","itemIdList","flexWrap","Item","isSelected","cursor","ItemByType","DeleteButton","GradientColorPicker","dispatchSetColor","maxStops","paletteHeight","onPaletteChange","colorCode","rgbStr","replace","r","g","flatStyle","WrappedSketchPicker","c","ImageItemEditor","SelectedItemIdContext","roiItemNodeId","selectRoiItemNodeId","roiItemFilePath","Showticklabels","ShowLine","ShowGrid","ShowScale","Zsmooth","StartEndIndex","inputError","CsvItemEditor","Transpose","SetColumn","SetIndex","HeatmapItemEditor","TimeSeriesItemEditor","Offset","Span","defaultValue","ShowTickLabels","ZeroLine","Xrange","newLeft","newRight","LegendSelect","handleChange","ml","Checkbox","RoiItemEditor","ScatterItemEditor","XIndex","YIndex","BarItemEditor","VisualizeItemEditor","ItemTypeSelect","isMultiPlot","selectVisualizeItemTypeIsMultiPlot","Editor","MultiPlotItemEditor","DisplayDataItemEditor","prevItem","setPrevItem","DisplayEditor","StyledDrawerContents","Visualize","selectExperiments","experiments","selectExperimentsSatusIsUninitialized","selectExperimentsSatusIsFulfilled","selectExperimentsSatusIsError","selectExperimentsErrorMessage","selectExperimentList","experimentList","selectExperiment","selectExperimentName","selectExperimentFunction","functions","ExperimentStatusIcon","CollapsibleTable","TableRow","TableCell","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","gutterBottom","component","Table","Head","TableHead","Body","ExperimentUidContext","nodeIdList","selectExperimentFunctionNodeIdList","TableBody","TableRowOfFunction","selectExperimentFunctionName","selectExperimentFunctionStatus","scope","ExperimentTable","isError","ExperimentsErrorView","Alert","severity","AlertTitle","TableImple","order","setOrder","sortTarget","setSortTarget","TableContainer","sortHandler","property","sort","getComparator","expData","TableSortLabel","active","Row","timestamp","selectExperimentTimeStamp","statusList","f","selectExperimentStatus","Fragment","tableCellClasses","root","borderBottomWidth","ImportExperimentButton","unwrap","then","DeleteExperimentButton","orderBy","descendingComparator","Experiment","backgroundColor","StyledAppBar","AppBar","drawer","TabPanel","other","hidden","a11yProps","Layout","setValue","runPipeline","isCanceled","intervalId","setInterval","clearInterval","prevStatus","setPrevStatus","useRunPipeline","Tabs","centered","textColor","Tab","SnackbarCloseButton","snackbarKey","closeSnackbar","App","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","algorithmListSlice","fileUploaderSlice","setFileUploaderStateById","currentState","convertToTreeNodeType","isdir","filesTreeSlice","ImageData","MuiColors","IscellData","TimeSeriesData","Suite2pData","nextKey","handleTypeColorSlice","HDF5Slice","convertToExperimentType","function","unique_id","postion","convertToExperimentStatus","experimentsSlice","convertToExperimentListType","store","configureStore","reducer","algorithmListReducer","algorithmNodeReducer","displayDataReducer","fileUploaderReducer","flowElementReducer","inputNodeReducer","handleTypeColorReducer","filesTreeReducer","nwbReducer","rightDrawerReducer","visualaizeItemReducer","snakemakeReducer","pipelineReducer","hdf5Reducer","experimentsReducer","createTheme","components","MuiTextField","defaultProps","MuiSelect","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c4d008b3.chunk.js","sourcesContent":["import {\n  ParamDTO,\n  ParamChild,\n  ParamParent,\n  ParamType,\n  ParamMap,\n} from './ParamType'\n\nexport function getChildParam(\n  path: string,\n  ParamMap: ParamMap,\n): ParamChild | null {\n  let result: ParamChild | null = null\n  for (const node of Object.values(ParamMap)) {\n    if (isParamChild(node)) {\n      if (node.path === path) {\n        result = node\n      }\n    } else {\n      result = getChildParam(path, node.children)\n    }\n    if (result != null) {\n      break\n    }\n  }\n  return result\n}\n\nexport function isParamChild(param: ParamType): param is ParamChild {\n  return param.type === 'child'\n}\n\nexport function isParamParent(param: ParamType): param is ParamParent {\n  return param.type === 'parent'\n}\n\nfunction isDictObject(value: unknown): value is { [key: string]: unknown } {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\nconst PATH_SEPARATOR = '/'\n\nexport function convertToParamMap(dto: ParamDTO, keyList?: string[]): ParamMap {\n  const ParamMap: ParamMap = {}\n  Object.entries(dto).forEach(([name, value]) => {\n    const kList = keyList ?? []\n    if (isDictObject(value)) {\n      kList.push(name)\n      ParamMap[name] = {\n        type: 'parent',\n        children: convertToParamMap(value, kList),\n      }\n    } else {\n      ParamMap[name] = {\n        type: 'child',\n        value,\n        path: kList.concat([name]).join(PATH_SEPARATOR),\n      }\n    }\n  })\n  return ParamMap\n}\n\nexport function equalsParamMap(a: ParamMap, b: ParamMap) {\n  if (a === b) {\n    return true\n  }\n  const aArray = Object.keys(a)\n  const bArray = Object.keys(b)\n  return (\n    aArray.length === bArray.length &&\n    aArray.every((aKey) => {\n      const aValue = a[aKey]\n      const bValue = b[aKey]\n      return equalsParam(aValue, bValue)\n    })\n  )\n}\n\nfunction equalsParam(a: ParamType, b: ParamType): boolean {\n  if (a === b) {\n    return true\n  }\n  if (isParamChild(a) && isParamChild(b)) {\n    return equalsParamChild(a, b)\n  } else if (isParamParent(a) && isParamParent(b)) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      aArray.length === bArray.length &&\n      aArray.every((aKey) => {\n        const aValue = a.children[aKey]\n        const bValue = b.children[aKey]\n        return equalsParam(aValue, bValue)\n      })\n    )\n  } else {\n    return false\n  }\n}\n\nfunction equalsParamChild(a: ParamChild, b: ParamChild) {\n  return a.path === b.path && a.value === b.value\n}\n","import { RootState } from 'store/store'\n\nimport { getChildParam } from 'store/utils/param/ParamUtils'\n\nexport const selectAlgorithmNode = (state: RootState) => state.algorithmNode\n\nexport const selectAlgorithmNodeDefined =\n  (nodeId: string) => (state: RootState) =>\n    Object.keys(state.algorithmNode).includes(nodeId)\n\nexport const selectAlgorithmFunctionPath =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].functionPath\n\nexport const selectAlgorithmName = (nodeId: string) => (state: RootState) =>\n  selectAlgorithmNode(state)[nodeId].name\n\nexport const selectAlgorithmParams = (nodeId: string) => (state: RootState) =>\n  selectAlgorithmNode(state)[nodeId].params\n\nexport const selectAlgorithmIsUpdated =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].isUpdated\n\nexport const selectAlgorithmParamsExit =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].params !== null\n\nexport const selectAlgorithmParamsKeyList =\n  (nodeId: string) => (state: RootState) =>\n    Object.keys(selectAlgorithmNode(state)[nodeId]?.params ?? {})\n\nexport const selectAlgorithmParamsValue =\n  (nodeId: string, path: string) => (state: RootState) => {\n    const params = selectAlgorithmParams(nodeId)(state)\n    if (params != null) {\n      const target = getChildParam(path, params)\n      return target?.value\n    } else {\n      throw new Error('AlgorithmParam is null')\n    }\n  }\n\nexport const selectAlgorithmParam =\n  (nodeId: string, paramKey: string) => (state: RootState) => {\n    const params = selectAlgorithmParams(nodeId)(state)\n    if (params != null) {\n      return params[paramKey]\n    } else {\n      throw new Error('AlgorithmParam is null')\n    }\n  }\n","import {\n  AlgorithmNodeType,\n  AlgoListDTO,\n  AlgorithmInfo,\n  AlgorithmChild,\n  AlgorithmParent,\n  AlgorithmListTree,\n} from './AlgorithmListType'\n\nexport function isAlgoChild(\n  algoNode: AlgorithmNodeType,\n): algoNode is AlgorithmChild {\n  return algoNode.type === 'child'\n}\n\nexport function isAlgoParent(\n  algoNode: AlgorithmNodeType,\n): algoNode is AlgorithmParent {\n  return algoNode.type === 'parent'\n}\n\nexport function getAlgoChild(\n  algoList: AlgorithmListTree,\n  algoName: string,\n): AlgorithmChild | null {\n  let result: AlgorithmChild | null = null\n  for (const [name, node] of Object.entries(algoList)) {\n    if (isAlgoChild(node)) {\n      if (name === algoName) {\n        result = node\n      }\n    } else {\n      result = getAlgoChild(node.children, algoName)\n    }\n    if (result != null) {\n      break\n    }\n  }\n  return result\n}\n\nexport function convertToAlgoListType(dto: AlgoListDTO) {\n  const algoList: AlgorithmListTree = {}\n  Object.entries(dto).forEach(([name, value]) => {\n    if (Object.prototype.hasOwnProperty.call(value, 'children')) {\n      algoList[name] = {\n        type: 'parent',\n        children: convertToAlgoListType(\n          (\n            value as {\n              children: AlgoListDTO\n            }\n          ).children as AlgoListDTO,\n        ),\n      }\n    } else {\n      const dto = value as {\n        args: AlgorithmInfo[]\n        returns: AlgorithmInfo[]\n        path: string\n      }\n      algoList[name] = {\n        type: 'child',\n        functionPath: dto.path,\n        args: dto.args,\n        returns: dto.returns,\n      }\n    }\n  })\n  return algoList\n}\n","import { RootState } from 'store/store'\nimport { selectAlgorithmName } from '../AlgorithmNode/AlgorithmNodeSelectors'\nimport { getAlgoChild } from './AlgorithmListUtils'\n\nexport const selectAlgorithmList = (state: RootState) => state.algorithmList\n\nexport const selectAlgorithmListIsLated = (state: RootState) =>\n  selectAlgorithmList(state).isLatest\n\nexport const selectAlgorithmListTree = (state: RootState) =>\n  selectAlgorithmList(state).tree\n\nexport const selectAlgoArgs = (nodeId: string) => (state: RootState) => {\n  const algoName = selectAlgorithmName(nodeId)(state)\n  if (algoName != null) {\n    const algoListChild = getAlgoChild(selectAlgorithmListTree(state), algoName)\n    return algoListChild?.args\n  } else {\n    return undefined\n  }\n}\n\nexport const selectAlgoReturns = (nodeId: string) => (state: RootState) => {\n  const algoName = selectAlgorithmName(nodeId)(state)\n  if (algoName != null) {\n    const algoListChild = getAlgoChild(selectAlgorithmListTree(state), algoName)\n    return algoListChild?.returns\n  } else {\n    return undefined\n  }\n}\n","export const ALGORITHM_LIST_SLICE_NAME = 'algorithmList'\n\nexport type AlgorithmListType = {\n  isLatest: boolean\n  tree: AlgorithmListTree\n}\n\nexport type AlgorithmListTree = {\n  [algoName: string]: AlgorithmNodeType\n}\n\nexport type AlgorithmNodeType = AlgorithmChild | AlgorithmParent\nexport type AlgorithmChild = {\n  type: 'child'\n  args: AlgorithmInfo[]\n  returns: AlgorithmInfo[]\n  functionPath: string\n}\nexport type AlgorithmParent = {\n  type: 'parent'\n  children: {\n    [name: string]: AlgorithmNodeType\n  }\n}\nexport type AlgorithmInfo = {\n  name: string\n  type: string\n  isNone?: boolean\n}\n\nexport type AlgoListDTO = {\n  [name: string]:\n    | {\n        args: AlgorithmInfo[]\n        returns: AlgorithmInfo[]\n        path: string\n      }\n    | { children: AlgoListDTO }\n}\n","const HOST = process.env.REACT_APP_SERVER_HOST\nconst PORT = process.env.REACT_APP_SERVER_PORT\n\nexport const BASE_URL = `http://${HOST}:${PORT}`\nexport const WS_BASE_URL = `ws://${HOST}:${PORT}`\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { AlgoListDTO, ALGORITHM_LIST_SLICE_NAME } from './AlgorithmListType'\nimport { BASE_URL } from 'const/API'\n\nexport const getAlgoList = createAsyncThunk<AlgoListDTO, void>(\n  `${ALGORITHM_LIST_SLICE_NAME}/getAlgoList`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/algolist`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","export const INPUT_NODE_SLICE_NAME = 'inputNode'\n\nexport const FILE_TYPE_SET = {\n  CSV: 'csv',\n  IMAGE: 'image',\n  HDF5: 'hdf5',\n  // NWB:\"nwb\"\n  // JSON:\"json\"\n} as const\n\nexport type FILE_TYPE = typeof FILE_TYPE_SET[keyof typeof FILE_TYPE_SET]\n\nexport type InputNode = {\n  [nodeId: string]: InputNodeType\n}\n\nexport type InputNodeType = CsvInputNode | ImageInputNode | HDF5InputNode\n\ninterface InputNodeBaseType<\n  T extends FILE_TYPE,\n  P extends { [key: string]: unknown },\n> {\n  fileType: T\n  selectedFilePath?: string // 複数ファイル指定の予定あり\n  selectedFileName?: string\n  param: P\n}\n\nexport type CsvInputParamType = {\n  setColumn: number | null\n  setIndex: boolean\n  transpose: boolean\n}\n\nexport interface CsvInputNode\n  extends InputNodeBaseType<'csv', CsvInputParamType> {}\n\nexport interface ImageInputNode extends InputNodeBaseType<'image', {}> {}\n\nexport interface HDF5InputNode extends InputNodeBaseType<'hdf5', {}> {\n  hdf5Path?: string\n}\n","import { Elements, FlowTransform } from 'react-flow-renderer'\n\nexport const FLOW_ELEMENT_SLICE_NAME = 'flowElement'\n\nexport const NODE_TYPE_SET = {\n  INPUT: 'input',\n  ALGORITHM: 'algorithm',\n} as const\n\nexport type NODE_TYPE = typeof NODE_TYPE_SET[keyof typeof NODE_TYPE_SET]\n\nexport type NodeData = AlgorithmNodeData | InputNodeData\n\ninterface NodeDataBaseType<T extends NODE_TYPE> {\n  label: string\n  type: T\n}\n\nexport interface InputNodeData\n  extends NodeDataBaseType<typeof NODE_TYPE_SET.INPUT> {}\n\nexport interface AlgorithmNodeData\n  extends NodeDataBaseType<typeof NODE_TYPE_SET.ALGORITHM> {}\n\nexport interface ElementCoord {\n  x: number\n  y: number\n}\n\nexport interface FlowElement {\n  flowElements: Elements<NodeData>\n  flowPosition: FlowTransform\n  elementCoord: ElementCoord\n}\n","export const INITIAL_IMAGE_ELEMENT_ID = '0'\nexport const INITIAL_IMAGE_ELEMENT_NAME = 'NoName'\nexport const INITIAL_ALGO_ELEMENT_ID = '1'\nexport const INITIAL_ALGO_ELEMENT_NAME = 'dummy_image2image'\nexport const INITIAL_EDGE_ID = '2'\n\nexport const INITIAL_ALGO_STYLE: React.CSSProperties = {\n  width: 180,\n  height: 100,\n  padding: 0,\n  borderRadius: 0,\n} as const\n\nexport const INITIAL_DATA_STYLE: React.CSSProperties = {\n  border: '1px solid #777',\n  height: 120,\n} as const\n","import { RunPostData } from 'api/run/Run'\nimport axios from 'axios'\n\nimport { BASE_URL } from 'const/API'\n\nexport type ExperimentsDTO = {\n  [uid: string]: ExperimentDTO\n}\n\nexport type ExperimentDTO = {\n  function: {\n    [name: string]: {\n      position: {\n        x: number\n        y: number\n      }\n      success: string\n      unique_id: string\n    }\n  }\n  name: string\n  success: string\n  timestamp: string\n  unique_id: string\n}\n\nexport async function getExperimentsApi(): Promise<ExperimentsDTO> {\n  const response = await axios.get(`${BASE_URL}/experiments`)\n  return response.data\n}\n\n// export async function getExperimentByUid(uid: string): Promise<{\n//   // todo\n// }> {\n//   const response = await axios.get(`${BASE_URL}/experiments/${uid}`)\n//   return response.data\n// }\n\nexport async function deleteExperimentByUidApi(uid: string): Promise<boolean> {\n  const response = await axios.delete(`${BASE_URL}/experiments/${uid}`)\n  return response.data\n}\n\nexport async function importExperimentByUidApi(\n  uid: string,\n): Promise<RunPostData> {\n  const response = await axios.get(`${BASE_URL}/experiments/import/${uid}`)\n  return response.data\n}\n","export const EXPERIMENTS_SLICE_NAME = 'experiments'\n\nexport type Experiments =\n  | {\n      status: 'fulfilled'\n      experimentList: ExperimentListType\n    }\n  | {\n      status: 'uninitialized'\n    }\n  | {\n      status: 'pending'\n    }\n  | {\n      status: 'error'\n      message?: string\n    }\n\nexport type ExperimentListType = {\n  [uid: string]: ExperimentType\n}\n\nexport type ExperimentType = {\n  uid: string\n  functions: {\n    [nodeId: string]: ExperimentFunction\n  }\n  name: string\n  timestamp: string\n}\n\nexport type ExperimentFunction = {\n  name: string\n  nodeId: string\n  postion: {\n    x: number\n    y: number\n  }\n  status: EXPERIMENTS_STATUS\n}\n\nexport type EXPERIMENTS_STATUS = 'success' | 'error' | 'running'\n\nexport interface Experiment {\n  uid: string\n  name: string\n  timestamp: string\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport {\n  ExperimentsDTO,\n  getExperimentsApi,\n  deleteExperimentByUidApi,\n  importExperimentByUidApi,\n} from 'api/experiments/Experiments'\nimport { RunPostData } from 'api/run/Run'\nimport { EXPERIMENTS_SLICE_NAME } from './ExperimentsType'\n\nexport const getExperiments = createAsyncThunk<ExperimentsDTO, undefined>(\n  `${EXPERIMENTS_SLICE_NAME}/getExperiments`,\n  async (_, thunkAPI) => {\n    try {\n      const response = await getExperimentsApi()\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const deleteExperimentByUid = createAsyncThunk<boolean, string>(\n  `${EXPERIMENTS_SLICE_NAME}/deleteExperimentByUid`,\n  async (uid, thunkAPI) => {\n    try {\n      const response = await deleteExperimentByUidApi(uid)\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const importExperimentByUid = createAsyncThunk<RunPostData, string>(\n  `${EXPERIMENTS_SLICE_NAME}/importExperimentByUid`,\n  async (uid, thunkAPI) => {\n    try {\n      const response = await importExperimentByUidApi(uid)\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import { createAction } from '@reduxjs/toolkit'\n\nimport { INPUT_NODE_SLICE_NAME } from './InputNodeType'\n\nexport const setInputNodeFilePath = createAction<{\n  nodeId: string\n  filePath: string\n}>(`${INPUT_NODE_SLICE_NAME}/setInputNodeFilePath`)\n","import { FlowElement, isNode, Node } from 'react-flow-renderer'\nimport {\n  AlgorithmNodeData,\n  NodeData,\n  NODE_TYPE_SET,\n  InputNodeData,\n} from './FlowElementType'\n\nexport function isNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<NodeData> {\n  return node != null && isNode(node) && node.data != null\n}\n\nexport function isAlgorithmNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<AlgorithmNodeData> {\n  return isNodeData(node) && node.data?.type === NODE_TYPE_SET.ALGORITHM\n}\n\nexport function isInputNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<InputNodeData> {\n  return isNodeData(node) && node.data?.type === NODE_TYPE_SET.INPUT\n}\n","import type { Node } from 'react-flow-renderer'\nimport {\n  isInputNodeData,\n  isAlgorithmNodeData,\n} from 'store/slice/FlowElement/FlowElementUtils'\nimport type {\n  NodePostDataType,\n  InputNodePostData,\n  AlgorithmNodePostData,\n} from './Run'\n\nexport function isInputNodePostData(\n  node: Node<NodePostDataType>,\n): node is Node<InputNodePostData> {\n  return isInputNodeData(node)\n}\n\nexport function isAlgorithmNodePostData(\n  node: Node<NodePostDataType>,\n): node is Node<AlgorithmNodePostData> {\n  return isAlgorithmNodeData(node)\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  Elements,\n  removeElements,\n  Node,\n  Position,\n  isNode,\n  FlowTransform,\n  XYPosition,\n} from 'react-flow-renderer'\nimport {\n  FLOW_ELEMENT_SLICE_NAME,\n  FlowElement,\n  NODE_TYPE_SET,\n  NodeData,\n  ElementCoord,\n} from './FlowElementType'\nimport {\n  INITIAL_ALGO_STYLE,\n  INITIAL_DATA_STYLE,\n  INITIAL_IMAGE_ELEMENT_ID,\n  INITIAL_IMAGE_ELEMENT_NAME,\n} from 'const/flowchart'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\nimport { isInputNodePostData } from 'api/run/RunUtils'\n\nconst initialElements: Elements<NodeData> = [\n  {\n    id: INITIAL_IMAGE_ELEMENT_ID,\n    type: 'ImageFileNode',\n    data: {\n      type: NODE_TYPE_SET.INPUT,\n      label: INITIAL_IMAGE_ELEMENT_NAME,\n    },\n    style: INITIAL_DATA_STYLE,\n    position: { x: 50, y: 150 },\n  },\n]\n\nconst initialFlowPosition: FlowTransform = {\n  x: 0,\n  y: 0,\n  zoom: 0.7,\n}\n\nconst initialElementCoord: ElementCoord = {\n  x: 100,\n  y: 150,\n}\n\nconst initialState: FlowElement = {\n  flowElements: initialElements,\n  flowPosition: initialFlowPosition,\n  elementCoord: initialElementCoord,\n}\n\nexport const flowElementSlice = createSlice({\n  name: FLOW_ELEMENT_SLICE_NAME,\n  initialState,\n  reducers: {\n    setFlowPosition: (state, action: PayloadAction<FlowTransform>) => {\n      state.flowPosition = action.payload\n    },\n    setFlowElements: (state, action: PayloadAction<Elements>) => {\n      state.flowElements = action.payload\n    },\n    deleteFlowElements: (state, action: PayloadAction<Elements>) => {\n      state.flowElements = removeElements(action.payload, state.flowElements)\n    },\n    deleteFlowElementsById: (state, action: PayloadAction<string>) => {\n      const element = state.flowElements.find(\n        (edge) => edge.id === action.payload,\n      )\n      if (element !== undefined) {\n        state.flowElements = removeElements([element], state.flowElements)\n      }\n    },\n    addFlowElementNode: (\n      state,\n      action: PayloadAction<{\n        node: Omit<Node<NodeData>, 'position'>\n        inputNodeInfo?: { fileType: FILE_TYPE }\n        algoNodeInfo?: { functionPath: string; name: string }\n      }>,\n    ) => {\n      let { node } = action.payload\n      if (node.data?.type === NODE_TYPE_SET.INPUT) {\n        node = {\n          ...node,\n          style: {\n            ...node.style,\n            ...INITIAL_DATA_STYLE,\n          },\n          targetPosition: Position.Left,\n          sourcePosition: Position.Right,\n        }\n      } else if (node.data?.type === NODE_TYPE_SET.ALGORITHM) {\n        node = {\n          ...node,\n          style: {\n            ...node.style,\n            ...INITIAL_ALGO_STYLE,\n          },\n          targetPosition: Position.Left,\n          sourcePosition: Position.Right,\n        }\n      }\n      const newPosition: XYPosition = state.elementCoord\n      state.flowElements.push({ ...node, position: newPosition })\n      const { x, y } = state.elementCoord\n      if (x > 800 || y > 200) {\n        state.elementCoord.x = 300\n        state.elementCoord.y = 100\n      } else {\n        state.elementCoord.x += 250\n      }\n    },\n    editFlowElementPositionById: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        coord: {\n          x: number\n          y: number\n        }\n      }>,\n    ) => {\n      let { nodeId, coord } = action.payload\n      const elementIdx = state.flowElements.findIndex(\n        (ele) => ele.id === nodeId,\n      )\n      const targetItem = state.flowElements[elementIdx]\n      if (isNode(targetItem)) {\n        targetItem.position = coord\n      }\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addCase(setInputNodeFilePath, (state, action) => {\n        let { nodeId, filePath } = action.payload\n        const fileName = filePath.split('/').reverse()[0]\n        const elementIdx = state.flowElements.findIndex(\n          (ele) => ele.id === nodeId,\n        )\n        const targetNode = state.flowElements[elementIdx]\n        if (targetNode.data != null) {\n          targetNode.data.label = fileName\n        }\n      })\n      .addCase(importExperimentByUid.fulfilled, (state, action) => {\n        state.flowPosition = initialFlowPosition\n        state.elementCoord = initialElementCoord\n        const newNodeList: Elements<NodeData> = action.payload.nodeList.map(\n          (node) => {\n            if (isInputNodePostData(node)) {\n              return {\n                ...node,\n                data: {\n                  label: node.data?.label ?? '',\n                  type: node.data?.type ?? 'input',\n                },\n              }\n            } else {\n              return {\n                ...node,\n                data: {\n                  label: node.data?.label ?? '',\n                  type: node.data?.type ?? 'algorithm',\n                },\n              }\n            }\n          },\n        )\n        state.flowElements = newNodeList.concat(action.payload.edgeList)\n      }),\n})\n\nexport const {\n  setFlowPosition,\n  setFlowElements,\n  addFlowElementNode,\n  deleteFlowElements,\n  deleteFlowElementsById,\n  editFlowElementPositionById,\n} = flowElementSlice.actions\n\nexport default flowElementSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { nanoid } from '@reduxjs/toolkit'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem'\nimport { styled, Typography } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight'\nimport IconButton from '@mui/material/IconButton'\nimport AddIcon from '@mui/icons-material/Add'\n\nimport {\n  selectAlgorithmListIsLated,\n  selectAlgorithmListTree,\n} from 'store/slice/AlgorithmList/AlgorithmListSelectors'\nimport { AlgorithmNodeType } from 'store/slice/AlgorithmList/AlgorithmListType'\nimport { isAlgoChild } from 'store/slice/AlgorithmList/AlgorithmListUtils'\nimport { getAlgoList } from 'store/slice/AlgorithmList/AlgorithmListActions'\nimport { FILE_TYPE, FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  NODE_TYPE,\n  NODE_TYPE_SET,\n} from 'store/slice/FlowElement/FlowElementType'\nimport { addFlowElementNode } from 'store/slice/FlowElement/FlowElementSlice'\n\nexport const AlgorithmTreeView = React.memo(() => {\n  const dispatch = useDispatch()\n  const algoList = useSelector(selectAlgorithmListTree)\n  const isLatest = useSelector(selectAlgorithmListIsLated)\n\n  useEffect(() => {\n    if (!isLatest) {\n      dispatch(getAlgoList())\n    }\n  }, [dispatch, isLatest])\n\n  const onAlgoNodeClick = (nodeName: string, functionPath: string) => {\n    const name = nodeName\n    const newNode = {\n      id: nanoid(),\n      type: 'AlgorithmNode',\n      data: { label: name, type: NODE_TYPE_SET.ALGORITHM },\n    }\n    dispatch(\n      addFlowElementNode({\n        node: newNode,\n        algoNodeInfo: { name, functionPath },\n      }),\n    )\n  }\n\n  return (\n    <TreeView\n      sx={{\n        flexGrow: 1,\n        height: '100%',\n      }}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      <TreeItem nodeId=\"Data\" label=\"Data\">\n        <InputNodeComponent\n          fileName={'image'}\n          nodeName={'imageData'}\n          fileType={FILE_TYPE_SET.IMAGE}\n        />\n        <InputNodeComponent\n          fileName={'csv'}\n          nodeName={'csvData'}\n          fileType={FILE_TYPE_SET.CSV}\n        />\n        <InputNodeComponent\n          fileName={'hdf5'}\n          nodeName={'hdf5Data'}\n          fileType={FILE_TYPE_SET.HDF5}\n        />\n      </TreeItem>\n      <TreeItem nodeId=\"Algorithm\" label=\"Algorithm\">\n        {Object.entries(algoList).map(([name, node], i) => (\n          <AlgoNodeComponent\n            name={name}\n            node={node}\n            onAlgoNodeClick={(name, functionPath) =>\n              onAlgoNodeClick(name, functionPath)\n            }\n            key={i.toFixed()}\n          />\n        ))}\n      </TreeItem>\n    </TreeView>\n  )\n})\n\nconst InputNodeComponent = React.memo<{\n  fileName: string\n  nodeName: string\n  fileType: FILE_TYPE\n}>(({ fileName, nodeName, fileType }) => {\n  const dispatch = useDispatch()\n\n  const onDataNodeClick = (\n    nodeType: NODE_TYPE,\n    nodeName: string,\n    fileType: FILE_TYPE,\n  ) => {\n    let componentType = ''\n    switch (fileType) {\n      case FILE_TYPE_SET.CSV:\n        componentType = 'CsvFileNode'\n        break\n      case FILE_TYPE_SET.IMAGE:\n        componentType = 'ImageFileNode'\n        fileType = FILE_TYPE_SET.IMAGE\n        break\n      case FILE_TYPE_SET.HDF5:\n        componentType = 'HDF5FileNode'\n        fileType = FILE_TYPE_SET.HDF5\n        break\n    }\n    const newNode = {\n      id: nanoid(),\n      type: componentType,\n      data: { label: nodeName, type: nodeType },\n    }\n    dispatch(addFlowElementNode({ node: newNode, inputNodeInfo: { fileType } }))\n  }\n\n  return (\n    <LeafItem\n      nodeId={fileName}\n      label={\n        <AddButton\n          name={fileName}\n          onClick={() =>\n            onDataNodeClick(NODE_TYPE_SET.INPUT, nodeName, fileType)\n          }\n        />\n      }\n    />\n  )\n})\n\nconst AlgoNodeComponent = React.memo<{\n  name: string\n  node: AlgorithmNodeType\n  onAlgoNodeClick: (nodeName: string, functionPath: string) => void\n}>(({ name, node, onAlgoNodeClick }) => {\n  if (isAlgoChild(node)) {\n    return (\n      <LeafItem\n        nodeId={name}\n        label={\n          <AddButton\n            name={name}\n            onClick={() => onAlgoNodeClick(name, node.functionPath)}\n          />\n        }\n      />\n    )\n  } else {\n    return (\n      <TreeItem nodeId={name} label={name}>\n        {Object.entries(node.children).map(([name, node], i) => (\n          <AlgoNodeComponent\n            name={name}\n            node={node}\n            key={i.toFixed()}\n            onAlgoNodeClick={(name, functionPath) =>\n              onAlgoNodeClick(name, functionPath)\n            }\n          />\n        ))}\n      </TreeItem>\n    )\n  }\n})\n\nconst AddButton = React.memo<{\n  name: string\n  onClick: () => void\n}>(({ name, onClick }) => {\n  return (\n    <>\n      <IconButton aria-label=\"add\" style={{ padding: 2 }} size=\"large\">\n        <AddIcon onClick={() => onClick()} />\n      </IconButton>\n      <Typography\n        variant=\"inherit\"\n        style={{\n          textOverflow: 'ellipsis',\n          overflow: 'visible',\n          width: '8rem',\n          display: 'inline-block',\n        }}\n      >\n        {name}\n      </Typography>\n    </>\n  )\n})\n\n// 未使用icon分の幅を消す\nconst LeafItem = styled(TreeItem)({\n  [`& .${treeItemClasses.iconContainer}`]: {\n    margin: 0,\n    width: 0,\n  },\n})\n","import { isEdge } from 'react-flow-renderer'\nimport { RootState } from 'store/store'\nimport { isNodeData } from './FlowElementUtils'\n\nexport const selectFlowElements = (state: RootState) =>\n  state.flowElement.flowElements\n\nexport const selectFlowPosition = (state: RootState) =>\n  state.flowElement.flowPosition\n\nexport const selectElementCoord = (state: RootState) =>\n  state.flowElement.elementCoord\n\nexport const selectNodeById = (nodeId: string) => (state: RootState) =>\n  selectFlowElements(state)\n    .filter(isNodeData)\n    .find((node) => node.id === nodeId)\n\nexport const selectNodeTypeById = (nodeId: string) => (state: RootState) =>\n  selectNodeById(nodeId)(state)?.data?.type\n\nexport const selectNodeLabelById = (nodeId: string) => (state: RootState) =>\n  selectNodeById(nodeId)(state)?.data?.label\n\nexport const selectEdgeListForRun = (state: RootState) =>\n  selectFlowElements(state).filter(isEdge)\n","import {\n  CsvInputNode,\n  ImageInputNode,\n  HDF5InputNode,\n  InputNodeType,\n  FILE_TYPE_SET,\n} from './InputNodeType'\n\nexport function isImageInputNode(\n  inputNode: InputNodeType,\n): inputNode is ImageInputNode {\n  return inputNode.fileType === FILE_TYPE_SET.IMAGE\n}\n\nexport function isCsvInputNode(\n  inputNode: InputNodeType,\n): inputNode is CsvInputNode {\n  return inputNode.fileType === FILE_TYPE_SET.CSV\n}\n\nexport function isHDF5InputNode(\n  inputNode: InputNodeType,\n): inputNode is HDF5InputNode {\n  return inputNode.fileType === FILE_TYPE_SET.HDF5\n}\n","import { RootState } from 'store/store'\nimport { isHDF5InputNode, isCsvInputNode } from './InputNodeUtils'\n\nexport const selectInputNode = (state: RootState) => state.inputNode\n\nexport const selectInputNodeById = (nodeId: string) => (state: RootState) =>\n  state.inputNode[nodeId]\n\nexport const selectInputNodeDefined = (nodeId: string) => (state: RootState) =>\n  Object.keys(state.inputNode).includes(nodeId)\nexport const selectInputNodeFileType = (nodeId: string) => (state: RootState) =>\n  selectInputNodeById(nodeId)(state).fileType\n\nexport const selectInputNodeSelectedFilePath =\n  (nodeId: string) => (state: RootState) =>\n    selectInputNodeById(nodeId)(state).selectedFilePath\n\nexport const selectFilePathIsUndefined = (state: RootState) =>\n  Object.values(state.inputNode).filter(\n    (inputNode) => inputNode.selectedFilePath === undefined,\n  ).length > 0\n\nexport const selectInputNodeParam = (nodeId: string) => (state: RootState) =>\n  selectInputNodeById(nodeId)(state).param\n\nconst selectCsvInputNodeParam = (nodeId: string) => (state: RootState) => {\n  const inputNode = selectInputNodeById(nodeId)(state)\n  if (isCsvInputNode(inputNode)) {\n    return inputNode.param\n  } else {\n    throw new Error(`The InputNode is not CsvInputNode. (nodeId: ${nodeId})`)\n  }\n}\n\nexport const selectCsvInputNodeParamSetColumn =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).setColumn\n\nexport const selectCsvInputNodeParamSetIndex =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).setIndex\n\nexport const selectCsvInputNodeParamTranspose =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).transpose\n\nexport const selectInputNodeHDF5Path =\n  (nodeId: string) => (state: RootState) => {\n    const item = selectInputNodeById(nodeId)(state)\n    if (isHDF5InputNode(item)) {\n      return item.hdf5Path\n    } else {\n      return undefined\n    }\n  }\n","import { useSelector } from 'react-redux'\nimport { selectHandleTypeColor } from 'store/slice/HandleTypeColor/HandleTypeColorSelectors'\n\nexport function useHandleColor(type: string) {\n  const color = useSelector(selectHandleTypeColor(type))\n  return color\n}\n","import { RootState } from '../../store'\n\nexport const selectHandleTypeColor = (key: string) => (state: RootState) => {\n  if (state.handleColor.colorMap[key] != null) {\n    return state.handleColor.colorMap[key]\n  } else {\n    return undefined\n  }\n}\n","import { RootState } from '../../store'\nimport { FILE_TREE_TYPE } from './FilesTreeType'\n\nexport const selectFilesTree =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) => {\n    if (state.filesTree[fileType] != null) {\n      return state.filesTree[fileType]\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectFilesTreeNodes =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.tree\n\nexport const selectFilesIsLatest =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.isLatest ?? false\n\nexport const selectFilesIsLoading =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.isLoading ?? false\n","export const FILES_TREE_SLICE_NAME = 'filesTree'\n\nexport type TreeNodeTypeDTO = DirNodeDTO | FileNodeDTO\n\nexport interface NodeBaseDTO {\n  path: string\n  name: string\n  isdir: boolean\n}\n\nexport interface DirNodeDTO extends NodeBaseDTO {\n  isdir: true\n  nodes: TreeNodeTypeDTO[]\n}\n\nexport interface FileNodeDTO extends NodeBaseDTO {\n  isdir: false\n}\n\nexport type TreeNodeType = DirNode | FileNode\n\nexport interface NodeBase {\n  path: string\n  name: string\n  isDir: boolean\n}\n\nexport interface DirNode extends NodeBase {\n  isDir: true\n  nodes: TreeNodeType[]\n}\n\nexport interface FileNode extends NodeBase {\n  isDir: false\n}\n\nexport interface FilesTree {\n  [fileType: string]: {\n    isLatest: boolean\n    isLoading: boolean\n    tree: TreeNodeType[]\n  }\n}\n\nexport const FILE_TREE_TYPE_SET = {\n  IMAGE: 'image',\n  CSV: 'csv',\n  HDF5: 'hdf5',\n  ALL: 'all',\n} as const\n\nexport type FILE_TREE_TYPE =\n  typeof FILE_TREE_TYPE_SET[keyof typeof FILE_TREE_TYPE_SET]\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\n\nimport {\n  FILES_TREE_SLICE_NAME,\n  FILE_TREE_TYPE,\n  TreeNodeTypeDTO,\n} from './FilesTreeType'\n\nexport const getFilesTree = createAsyncThunk<TreeNodeTypeDTO[], FILE_TREE_TYPE>(\n  `${FILES_TREE_SLICE_NAME}/getFilesTree`,\n  async (fileType, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/files`, {\n        params: {\n          file_type: fileType,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import Dialog from '@mui/material/Dialog'\nimport { useDispatch, useSelector } from 'react-redux'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem from '@mui/lab/TreeItem'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport Typography from '@mui/material/Typography'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport Button from '@mui/material/Button'\nimport { useTheme } from '@mui/material/styles'\nimport React from 'react'\n\nimport {\n  selectFilesIsLatest,\n  selectFilesIsLoading,\n  selectFilesTreeNodes,\n} from 'store/slice/FilesTree/FilesTreeSelectors'\nimport { getFilesTree } from 'store/slice/FilesTree/FilesTreeAction'\nimport {\n  FILE_TREE_TYPE,\n  FILE_TREE_TYPE_SET,\n  TreeNodeType,\n} from 'store/slice/FilesTree/FilesTreeType'\n\ntype FileSelectDialogProps = {\n  selectedFilePath: string\n  onClickOk: (path: string) => void\n  fileType?: FILE_TREE_TYPE\n  title?: string\n  open: boolean\n  onClickCancel: () => void\n  onClose?: () => void\n}\n\nexport const FileSelectDialog = React.memo<FileSelectDialogProps>(\n  ({\n    open,\n    selectedFilePath,\n    onClickCancel,\n    onClickOk,\n    onClose,\n    title,\n    fileType = FILE_TREE_TYPE_SET.ALL,\n  }) => {\n    const [clickedFilePath, setClickedFilePath] =\n      React.useState(selectedFilePath)\n    const theme = useTheme()\n    return (\n      <Dialog open={open} onClose={onClose} fullWidth>\n        <DialogTitle>{title ?? 'Select File'}</DialogTitle>\n        <DialogContent dividers>\n          <div\n            style={{\n              height: 300,\n              overflow: 'auto',\n              marginBottom: theme.spacing(1),\n              border: '1px solid',\n              padding: theme.spacing(1),\n              borderColor: theme.palette.divider,\n            }}\n          >\n            <FileTreeView\n              onClickFile={setClickedFilePath}\n              fileType={fileType}\n            />\n          </div>\n          <Typography variant=\"subtitle1\">Select File</Typography>\n          <Typography variant=\"subtitle2\">\n            {!!clickedFilePath ? clickedFilePath : '---'}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n            cancel\n          </Button>\n          <Button\n            onClick={() => onClickOk(clickedFilePath)}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  },\n)\n\nconst FileTreeView = React.memo<{\n  onClickFile: (path: string) => void\n  fileType: FILE_TREE_TYPE\n}>(({ onClickFile, fileType }) => {\n  const [tree, isLoading] = useFileTree(fileType)\n  return (\n    <div>\n      {isLoading && <LinearProgress />}\n      <TreeView>\n        {tree?.map((node) => (\n          <TreeNode node={node} onClickFile={onClickFile} />\n        ))}\n      </TreeView>\n    </div>\n  )\n})\n\nconst TreeNode = React.memo<{\n  node: TreeNodeType\n  onClickFile: (path: string) => void\n}>(({ node, onClickFile }) => {\n  if (node.isDir) {\n    return (\n      <TreeItem\n        icon={<FolderIcon htmlColor=\"skyblue\" />}\n        nodeId={node.path}\n        label={node.name}\n      >\n        {node.nodes.map((childNode, i) => (\n          <TreeNode node={childNode} key={i} onClickFile={onClickFile} />\n        ))}\n      </TreeItem>\n    )\n  } else {\n    return (\n      <TreeItem\n        icon={<InsertDriveFileOutlinedIcon fontSize=\"small\" />}\n        nodeId={node.path}\n        label={node.name}\n        onClick={() => onClickFile(node.path)}\n      />\n    )\n  }\n})\n\nfunction useFileTree(\n  fileType: FILE_TREE_TYPE,\n): [TreeNodeType[] | undefined, boolean] {\n  const dispatch = useDispatch()\n  const tree = useSelector(selectFilesTreeNodes(fileType))\n  const isLatest = useSelector(selectFilesIsLatest(fileType))\n  const isLoading = useSelector(selectFilesIsLoading(fileType))\n  React.useEffect(() => {\n    if (!isLatest && !isLoading) {\n      dispatch(getFilesTree(fileType))\n    }\n  }, [isLatest, isLoading, fileType, dispatch])\n  return [tree, isLoading]\n}\n","import React from 'react'\nimport LinearProgress, {\n  LinearProgressProps,\n} from '@mui/material/LinearProgress'\nimport Typography from '@mui/material/Typography'\nimport Box from '@mui/material/Box'\n\nexport const LinearProgressWithLabel = React.memo<\n  LinearProgressProps & { value: number }\n>((props) => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  )\n})\n","export const FILE_UPLOADER_SLICE_NAME = 'fileUploader'\n\nexport type FileUploader = {\n  [id: string]: FileUploaderType\n}\n\nexport type FileUploaderType = {\n  path?: string\n  fileName?: string\n  isUninitialized: boolean\n  pending: boolean\n  fulfilled: boolean\n  uploadingProgress?: number\n  error?: string\n}\n","import { createAsyncThunk, createAction } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\n\nimport { FILE_UPLOADER_SLICE_NAME } from './FileUploaderType'\n\nexport const setUploadProgress = createAction<{\n  requestId: string\n  progess: number\n  total: number\n}>(`${FILE_UPLOADER_SLICE_NAME}/setUploadProgress`)\n\nexport const uploadFile = createAsyncThunk<\n  {\n    resultPath: string\n  },\n  {\n    requestId: string\n    fileName: string\n    formData: FormData\n    fileType?: FILE_TYPE\n  }\n>(\n  `${FILE_UPLOADER_SLICE_NAME}/uploadFile`,\n  async ({ requestId, fileName, formData }, thunkAPI) => {\n    try {\n      const config = getUploadConfig((percent, total) => {\n        thunkAPI.dispatch(\n          setUploadProgress({\n            requestId,\n            progess: percent,\n            total,\n          }),\n        )\n      })\n      const response = await axios.post(\n        `${BASE_URL}/files/upload/${fileName}`,\n        formData,\n        config,\n      )\n      const data = response.data\n      return {\n        resultPath: data.file_path,\n      }\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nfunction getUploadConfig(\n  onUpdateProgressFn: (percent: number, totalSize: number) => void,\n) {\n  return {\n    onUploadProgress: function (progressEvent: any) {\n      const percentCompleted = Math.round(\n        (progressEvent.loaded * 100) / progressEvent.total,\n      )\n      onUpdateProgressFn(percentCompleted, progressEvent.total)\n    },\n  }\n}\n","import { FileUploaderType } from './FileUploaderType'\n\nexport const inistialUploaderState: FileUploaderType = {\n  path: undefined,\n  fileName: undefined,\n  isUninitialized: true,\n  pending: false,\n  fulfilled: false,\n  uploadingProgress: undefined,\n  error: undefined,\n}\n","import { RootState } from 'store/store'\nimport { inistialUploaderState } from './FileUploaderInitlalState'\n\nexport const selectFileUploader = (id: string) => (state: RootState) => {\n  if (Object.keys(state.fileUploader).includes(id)) {\n    return state.fileUploader[id]\n  } else {\n    return inistialUploaderState\n  }\n}\n\nexport const selectUploadFilePath = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).path\n\nexport const selectUploadFileName = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).fileName\n\nexport const selectFileUploadIsUninitialized =\n  (id: string) => (state: RootState) =>\n    selectFileUploader(id)(state).isUninitialized\n\nexport const selectFileUploadIsPending = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).pending\n\nexport const selectFileUploadIsFulfilled = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).fulfilled\n\nexport const selectFileUploadProgress = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).uploadingProgress\n\nexport const selectFileUploadError = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).error\n","import { nanoid } from '@reduxjs/toolkit'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { uploadFile } from './FileUploaderActions'\nimport {\n  selectFileUploadIsPending,\n  selectUploadFilePath,\n  selectFileUploadIsFulfilled,\n  selectFileUploadProgress,\n  selectFileUploadIsUninitialized,\n  selectFileUploadError,\n} from './FileUploaderSelectors'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\n\nexport function useFileUploader(fileType?: FILE_TYPE) {\n  const dispatch = useDispatch()\n  const id = React.useRef(nanoid())\n  // React.useEffect(() => { // todo 解明\n  //   dispatch(setFileUploaderStateById(id.current))\n  // }, [dispatch, id.current])\n  const onUploadFile = React.useCallback(\n    (formData: FormData, fileName: string) => {\n      dispatch(\n        uploadFile({ requestId: id.current, fileName, formData, fileType }),\n      )\n    },\n    [dispatch, fileType],\n  )\n  const uninitialized = useSelector(selectFileUploadIsUninitialized(id.current))\n  const filePath = useSelector(selectUploadFilePath(id.current))\n  const pending = useSelector(selectFileUploadIsPending(id.current))\n  const fulfilled = useSelector(selectFileUploadIsFulfilled(id.current))\n  const progress = useSelector(selectFileUploadProgress(id.current))\n  const error = useSelector(selectFileUploadError(id.current))\n  return {\n    filePath,\n    uninitialized,\n    pending,\n    fulfilled,\n    progress,\n    error,\n    onUploadFile,\n  }\n}\n","import React from 'react'\nimport { Button, Typography } from '@mui/material'\nimport ButtonGroup from '@mui/material/ButtonGroup'\n\nimport { FileSelectDialog } from 'components/FileSelectDialog'\nimport {\n  FILE_TREE_TYPE,\n  FILE_TREE_TYPE_SET,\n} from 'store/slice/FilesTree/FilesTreeType'\nimport { LinearProgressWithLabel } from './LinerProgressWithLabel'\nimport { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\n\ntype FileSelectProps = {\n  filePath: string\n  onUploadFile: (formData: FormData, fileName: string) => void\n  onSelectFile: (path: string) => void\n  fileTreeType?: FILE_TREE_TYPE\n  selectButtonLabel?: string\n  uploadButtonLabel?: string\n}\n\nexport const FileSelect = React.memo<{\n  filePath: string\n  fileType: FILE_TYPE\n  onChangeFilePath: (path: string) => void\n}>(({ filePath, fileType, onChangeFilePath }) => {\n  const {\n    filePath: uploadedFilePath,\n    onUploadFile,\n    pending,\n    uninitialized,\n    progress,\n    error,\n  } = useFileUploader(fileType)\n\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n    if (uploadedFilePath != null) {\n      onChangeFilePath(uploadedFilePath)\n    }\n  }\n\n  const onSelectFile = (selectedPath: string) => {\n    onChangeFilePath(selectedPath)\n  }\n\n  return (\n    <>\n      {!uninitialized && pending && progress != null && (\n        <div style={{ marginLeft: 2, marginRight: 2 }}>\n          <LinearProgressWithLabel value={progress} />\n        </div>\n      )}\n      <FileSelectImple\n        filePath={filePath}\n        onSelectFile={onSelectFile}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={fileType}\n        selectButtonLabel={`Select ${fileType}`}\n      />\n      {error != null && (\n        <Typography variant=\"caption\" color=\"error\">\n          {error}\n        </Typography>\n      )}\n    </>\n  )\n})\n\nexport const FileSelectImple = React.memo<FileSelectProps>(\n  ({\n    filePath,\n    onSelectFile,\n    onUploadFile,\n    fileTreeType,\n    selectButtonLabel,\n    uploadButtonLabel,\n  }) => {\n    const onFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      event.preventDefault()\n      if (event.target.files != null && event.target.files[0] != null) {\n        const file = event.target.files[0]\n        const formData = new FormData()\n        formData.append('file', file)\n        const fileName = file.name\n        onUploadFile(formData, fileName)\n      }\n    }\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const onClick = () => {\n      if (inputRef.current != null) {\n        inputRef.current.click()\n      }\n    }\n    const [open, setOpen] = React.useState(false)\n    const accept = getFileInputAccept(fileTreeType)\n    const fileName = filePath.split('/').reverse()[0]\n    return (\n      <div\n        style={{\n          padding: 5,\n        }}\n      >\n        <ButtonGroup size=\"small\" style={{ marginRight: 4 }}>\n          <Button variant=\"outlined\" onClick={() => setOpen(true)}>\n            {!!selectButtonLabel ? selectButtonLabel : 'Select File'}\n          </Button>\n          <Button onClick={onClick} variant=\"outlined\">\n            {!!uploadButtonLabel ? uploadButtonLabel : 'or Upload'}\n          </Button>\n        </ButtonGroup>\n        <div>\n          <input\n            ref={inputRef}\n            type=\"file\"\n            onChange={onFileInputChange}\n            accept={accept}\n            style={{\n              visibility: 'hidden',\n              width: 0,\n              height: 0,\n            }}\n          />\n          <Typography className=\"selectFilePath\" variant=\"caption\">\n            {!!fileName ? fileName : 'No file is selected.'}\n          </Typography>\n        </div>\n        <FileSelectDialog\n          selectedFilePath={fileName ?? ''}\n          open={open}\n          onClickOk={(path) => {\n            onSelectFile(path)\n            setOpen(false)\n          }}\n          onClickCancel={() => {\n            setOpen(false)\n          }}\n          onClose={() => setOpen(false)}\n          fileType={fileTreeType}\n        />\n      </div>\n    )\n  },\n)\n\nfunction getFileInputAccept(fileType: FILE_TREE_TYPE | undefined) {\n  switch (fileType) {\n    case FILE_TREE_TYPE_SET.IMAGE:\n      return '.tif'\n    case FILE_TREE_TYPE_SET.CSV:\n      return '.csv'\n    case FILE_TREE_TYPE_SET.HDF5:\n      return '.hdf5,.nwb'\n    default:\n      return undefined\n  }\n}\n","import { Connection } from 'react-flow-renderer'\n\nexport function toHandleId(nodeId: string, name: string, type: string) {\n  return `${nodeId}--${name}--${type}`\n}\n\nexport function getHandleType(handleId: string) {\n  return handleId.split('--')[2]\n}\n\nexport function isValidConnection(connection: Connection) {\n  if (connection.sourceHandle != null && connection.targetHandle != null) {\n    return (\n      getHandleType(connection.sourceHandle) ===\n      getHandleType(connection.targetHandle)\n    )\n  } else {\n    return true\n  }\n}\n","import React, { CSSProperties } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport { alpha, useTheme } from '@mui/material/styles'\nimport { IconButton } from '@mui/material'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport {\n  selectInputNodeDefined,\n  selectInputNodeSelectedFilePath,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n\nimport { useHandleColor } from './HandleColorHook'\nimport { FileSelect } from './FileSelect'\nimport { toHandleId, isValidConnection } from './FlowChartUtils'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\n\n// Connection部分のレイアウト\nconst sourceHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  top: 15,\n  border: '1px solid',\n  // borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const ImageFileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <ImageFileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst ImageFileNodeImple = React.memo<NodeProps>(\n  ({ id: nodeId, selected: elementSelected }) => {\n    const dispatch = useDispatch()\n    const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n    const onChangeFilePath = (path: string) => {\n      dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n    }\n\n    const theme = useTheme()\n    const returnType = 'ImageData'\n    const imageColor = useHandleColor(returnType)\n\n    const onClickDeleteIcon = () => {\n      dispatch(deleteFlowElementsById(nodeId))\n    }\n\n    return (\n      <div\n        style={{\n          height: '100%',\n          width: '250px',\n          background: elementSelected\n            ? alpha(theme.palette.primary.light, 0.1)\n            : undefined,\n        }}\n      >\n        <IconButton\n          aria-label=\"delete\"\n          style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n          onClick={onClickDeleteIcon}\n          size=\"large\"\n        >\n          <CloseOutlinedIcon />\n        </IconButton>\n        <FileSelect\n          onChangeFilePath={onChangeFilePath}\n          fileType={FILE_TYPE_SET.IMAGE}\n          filePath={filePath ?? ''}\n        />\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id={toHandleId(nodeId, 'image', returnType)}\n          style={{\n            ...sourceHandleStyle,\n            background: imageColor,\n          }}\n          isValidConnection={isValidConnection}\n        />\n      </div>\n    )\n  },\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\n\ntype RightDrawer = {\n  open: boolean\n  mode: RIGHT_DRAWER_MODE_TYPE\n  currendNodeId: string | null\n}\n\nexport const RIGHT_DRAWER_MODE = {\n  NONE: 'none',\n  NWB: 'nwb',\n  PARAM_FORM: 'paramForm',\n  SNAKEMAKE: 'snakemake',\n} as const\n\nexport type RIGHT_DRAWER_MODE_TYPE =\n  typeof RIGHT_DRAWER_MODE[keyof typeof RIGHT_DRAWER_MODE]\n\nconst initialState: RightDrawer = {\n  open: false,\n  mode: RIGHT_DRAWER_MODE.NONE,\n  currendNodeId: null,\n}\nexport const rightDrawerSlice = createSlice({\n  name: 'rightDrawer',\n  initialState,\n  reducers: {\n    openRightDrawer: (state, action: PayloadAction<RIGHT_DRAWER_MODE_TYPE>) => {\n      state.open = true\n      state.mode = action.payload\n    },\n    closeRightDrawer: (state) => {\n      state.open = false\n      state.mode = RIGHT_DRAWER_MODE.NONE\n    },\n    toggleParamForm: (state, action: PayloadAction<string>) => {\n      if (\n        state.open &&\n        state.mode === RIGHT_DRAWER_MODE.PARAM_FORM &&\n        state.currendNodeId === action.payload\n      ) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n        state.currendNodeId = null\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.PARAM_FORM\n        state.currendNodeId = action.payload\n      }\n    },\n    toggleNwb: (state) => {\n      if (state.open && state.mode === RIGHT_DRAWER_MODE.NWB) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.NWB\n      }\n      state.currendNodeId = null\n    },\n    toggleSnakemake: (state) => {\n      if (state.open && state.mode === RIGHT_DRAWER_MODE.SNAKEMAKE) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.SNAKEMAKE\n      }\n      state.currendNodeId = null\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(deleteFlowElements, (state, action) => {\n        if (\n          action.payload.findIndex((elm) => elm.id === state.currendNodeId) > 0\n        ) {\n          state.currendNodeId = null\n        }\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (action.payload === state.currendNodeId) {\n          state.currendNodeId = null\n        }\n      })\n  },\n})\n\nexport const {\n  toggleParamForm,\n  toggleNwb,\n  toggleSnakemake,\n  openRightDrawer,\n  closeRightDrawer,\n} = rightDrawerSlice.actions\n\nexport default rightDrawerSlice.reducer\n","import { getChildParam } from 'store/utils/param/ParamUtils'\nimport { RootState } from '../../store'\n\nexport const selectNwb = (state: RootState) => state.nwb\n\nexport const selectNwbParams = (state: RootState) => selectNwb(state).params\n\nexport const selectNwbParamsKeyList = (state: RootState) =>\n  Object.keys(selectNwb(state).params)\n\nexport const selectNwbParam = (paramKey: string) => (state: RootState) =>\n  selectNwb(state).params[paramKey]\n\nexport const selectNwbParamsValue = (path: string) => (state: RootState) => {\n  const params = selectNwb(state).params\n  if (params != null) {\n    const target = getChildParam(path, params)\n    return target?.value\n  } else {\n    throw new Error('Param is null')\n  }\n}\n","import { getChildParam } from 'store/utils/param/ParamUtils'\nimport { RootState } from '../../store'\n\nconst selectSnakemake = (state: RootState) => state.snakemake\nexport const selectSnakemakeParams = (state: RootState) =>\n  selectSnakemake(state).params\n\nexport const selectSnakemakeParamsKeyList = (state: RootState) =>\n  Object.keys(selectSnakemakeParams(state))\n\nexport const selectSnakemakeParam = (paramKey: string) => (state: RootState) =>\n  selectSnakemakeParams(state)[paramKey]\n\nexport const selectSnakemakeParamsValue =\n  (path: string) => (state: RootState) => {\n    const params = selectSnakemakeParams(state)\n    if (params != null) {\n      const target = getChildParam(path, params)\n      return target?.value\n    } else {\n      throw new Error('Param is null')\n    }\n  }\n","import { RunPostData } from 'api/run/Run'\nimport { DATA_TYPE } from '../DisplayData/DisplayDataType'\n\nexport const PIPELINE_SLICE_NAME = 'pipeline'\n\nexport type Pipeline = {\n  run: PipelineType\n  currentPipeline?: {\n    uid: string\n  }\n  runBtn: RUN_BTN_TYPE\n}\n\nexport const RUN_STATUS = {\n  /**\n   * 未実行\n   */\n  START_UNINITIALIZED: 'StartUninitialized',\n  /**\n   * 開始リクエスト中\n   */\n  START_PENDING: 'StartPending',\n  /**\n   * 開始できなかった\n   */\n  START_ERROR: 'StartError',\n  /**\n   * 正常に開始した\n   */\n  START_SUCCESS: 'StartSuccess',\n  /**\n   * 全て終了\n   */\n  FINISHED: 'Finished',\n  /**\n   * 途中終了\n   */\n  ABORTED: 'Aborted',\n  /**\n   * キャンセルされた\n   */\n  CANCELED: 'Canceled',\n} as const\n\nexport type RUN_STATUS_TYPE = typeof RUN_STATUS[keyof typeof RUN_STATUS]\n\nexport type PipelineType =\n  | StartedPipeline\n  | {\n      status:\n        | typeof RUN_STATUS.START_ERROR\n        | typeof RUN_STATUS.START_PENDING\n        | typeof RUN_STATUS.START_UNINITIALIZED\n    }\n\nexport type StartedPipeline = {\n  uid: string\n  status:\n    | typeof RUN_STATUS.START_SUCCESS\n    | typeof RUN_STATUS.FINISHED\n    | typeof RUN_STATUS.ABORTED\n    | typeof RUN_STATUS.CANCELED\n  runPostData: RunPostData\n  runResult: RunResult\n}\n\nexport type RunResult = {\n  [nodeId: string]: NodeResult\n}\n\nexport type NodeResult = NodeResultPending | NodeResultSuccess | NodeResultError\n\nexport const NODE_RESULT_STATUS = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  PENDING: 'pending',\n} as const\n\nexport type NODE_RESULT_STATUS_TYPE =\n  typeof NODE_RESULT_STATUS[keyof typeof NODE_RESULT_STATUS]\n\nexport interface NodeResultBaseType<T extends NODE_RESULT_STATUS_TYPE> {\n  status: T\n  message?: string\n  name: string\n}\n\nexport interface NodeResultPending\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.PENDING> {}\n\nexport interface NodeResultSuccess\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.SUCCESS> {\n  outputPaths: OutputPaths\n}\n\nexport type OutputPaths = {\n  [outputKey: string]: {\n    path: string\n    type: DATA_TYPE\n  }\n}\n\nexport interface NodeResultError\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.ERROR> {\n  message: string\n}\n\nexport const RUN_BTN_OPTIONS = {\n  RUN_NEW: 1,\n  RUN_ALREADY: 2,\n} as const\n\nexport type RUN_BTN_TYPE = typeof RUN_BTN_OPTIONS[keyof typeof RUN_BTN_OPTIONS]\n\nexport const RUN_BTN_LABELS = {\n  [RUN_BTN_OPTIONS.RUN_NEW]: 'RUN ALL',\n  [RUN_BTN_OPTIONS.RUN_ALREADY]: 'RUN',\n} as const\n","export const DISPLAY_DATA_SLICE_NAME = 'displayData'\n\nexport type DisplayData = {\n  timeSeries: {\n    [filePath: string]: TimeSeriesDisplayData\n  }\n  heatMap: {\n    [filePath: string]: HeatMapDisplayData\n  }\n  image: {\n    [filePath: string]: ImageDisplayData\n  }\n  csv: {\n    [filePath: string]: CsvDisplayData\n  }\n  roi: {\n    [filePath: string]: RoiDisplayData\n  }\n  scatter: {\n    [filePath: string]: ScatterDisplayData\n  }\n  bar: {\n    [filePath: string]: BarDisplayData\n  }\n  hdf5: {\n    [filePath: string]: HDF5DisplayData\n  }\n  html: {\n    [filePath: string]: HTMLDisplayData\n  }\n}\n\nexport const DATA_TYPE_SET = {\n  TIME_SERIES: 'timeSeries',\n  HEAT_MAP: 'heatMap',\n  IMAGE: 'image',\n  CSV: 'csv',\n  ROI: 'roi',\n  SCATTER: 'scatter',\n  BAR: 'bar',\n  HDF5: 'hdf5',\n  HTML: 'html',\n} as const\n\nexport type DATA_TYPE = typeof DATA_TYPE_SET[keyof typeof DATA_TYPE_SET]\n\ninterface BaseDisplay<T extends DATA_TYPE, Data> {\n  type: T\n  data: Data\n  pending: boolean\n  error: string | null\n  fulfilled: boolean\n}\n\nexport interface TimeSeriesDisplayData\n  extends BaseDisplay<'timeSeries', TimeSeriesData> {\n  xrange: number[]\n  std: TimeSeriesData\n}\nexport type TimeSeriesData = {\n  [key: string]: {\n    [key: number]: number\n  }\n}\n\nexport interface HeatMapDisplayData\n  extends BaseDisplay<'heatMap', HeatMapData> {}\nexport type HeatMapData = number[][]\n\nexport interface ImageDisplayData extends BaseDisplay<'image', ImageData> {}\nexport type ImageData = number[][][]\n\nexport interface CsvDisplayData extends BaseDisplay<'csv', CsvData> {\n  // columns: string[]\n}\nexport type CsvData = number[][]\n\nexport interface RoiDisplayData extends BaseDisplay<'roi', RoiData> {}\nexport type RoiData = number[][][]\n\nexport interface ScatterDisplayData\n  extends BaseDisplay<'scatter', ScatterData> {}\nexport type ScatterData = number[][][]\n\nexport interface BarDisplayData extends BaseDisplay<'bar', BarData> {}\nexport type BarData = number[][][]\n\nexport interface HDF5DisplayData extends BaseDisplay<'hdf5', HDF5Data> {}\nexport type HDF5Data = number[][][]\n\nexport interface HTMLDisplayData extends BaseDisplay<'html', HTMLData> {}\nexport type HTMLData = string\n","import { DATA_TYPE, DATA_TYPE_SET } from './DisplayDataType'\n\n/**\n * サーバーサイドの値をマッピング\n */\nexport function toDataType(value: string): DATA_TYPE {\n  switch (value) {\n    case 'images':\n      return DATA_TYPE_SET.IMAGE\n    case 'timeseries':\n      return DATA_TYPE_SET.TIME_SERIES\n    case 'heatmap':\n      return DATA_TYPE_SET.HEAT_MAP\n    case 'roi':\n      return DATA_TYPE_SET.ROI\n    case 'scatter':\n      return DATA_TYPE_SET.SCATTER\n    case 'bar':\n      return DATA_TYPE_SET.BAR\n    case 'html':\n      return DATA_TYPE_SET.HTML\n    default:\n      throw new Error(`failed to map dataType: ${value}`)\n  }\n}\n","import { RunPostData, RunResultDTO, OutputPathsDTO } from 'api/run/Run'\n\nimport { toDataType } from '../DisplayData/DisplayDataUtils'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport {\n  RunResult,\n  OutputPaths,\n  NODE_RESULT_STATUS,\n  PipelineType,\n  RUN_STATUS,\n  StartedPipeline,\n  NodeResultPending,\n  NodeResultError,\n  NodeResultSuccess,\n  NodeResult,\n} from './PipelineType'\n\nexport function isNodeResultPending(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultPending {\n  return nodeResult.status === NODE_RESULT_STATUS.PENDING\n}\n\nexport function isNodeResultSuccess(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultSuccess {\n  return nodeResult.status === NODE_RESULT_STATUS.SUCCESS\n}\n\nexport function isNodeResultError(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultError {\n  return nodeResult.status === NODE_RESULT_STATUS.ERROR\n}\n\nexport function isStartedPipeline(\n  pipeline: PipelineType,\n): pipeline is StartedPipeline {\n  return (\n    pipeline.status === RUN_STATUS.START_SUCCESS ||\n    pipeline.status === RUN_STATUS.FINISHED ||\n    pipeline.status === RUN_STATUS.ABORTED\n  )\n}\n\nexport function getInitialRunResult(runPostData: RunPostData) {\n  const initialResult: RunResult = {}\n  runPostData.nodeList\n    .filter(({ data }) => data?.type === NODE_TYPE_SET.ALGORITHM)\n    .forEach(({ id, data }) => {\n      initialResult[id] = {\n        status: NODE_RESULT_STATUS.PENDING,\n        name: data?.label ?? '',\n      }\n    })\n  return initialResult\n}\n\nexport function convertToRunResult(dto: RunResultDTO) {\n  const result: RunResult = {}\n  Object.entries(dto).forEach(([nodeId, nodeResultDto]) => {\n    const outputPath = nodeResultDto.outputPaths\n    if (nodeResultDto.status === 'success' && outputPath != null) {\n      result[nodeId] = {\n        status: NODE_RESULT_STATUS.SUCCESS,\n        message: nodeResultDto.message,\n        name: nodeResultDto.name,\n        outputPaths: convertToOutputPath(outputPath),\n      }\n    } else {\n      result[nodeId] = {\n        status: NODE_RESULT_STATUS.ERROR,\n        message: nodeResultDto.message,\n        name: nodeResultDto.name,\n      }\n    }\n  })\n  return result\n}\n\nfunction convertToOutputPath(dto: OutputPathsDTO) {\n  const result: OutputPaths = {}\n  Object.entries(dto).forEach(([functionPath, value]) => {\n    result[functionPath] = {\n      path: value.path,\n      type: toDataType(value.type),\n    }\n  })\n  return result\n}\n","import { Node } from 'react-flow-renderer'\n\nimport {\n  AlgorithmNodePostData,\n  InputNodePostData,\n  NodePostDataType,\n  RunPostData,\n} from 'api/run/Run'\n\nimport { RootState } from 'store/store'\nimport {\n  selectEdgeListForRun,\n  selectFlowElements,\n} from '../FlowElement/FlowElementSelectors'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport {\n  isAlgorithmNodeData,\n  isNodeData,\n} from '../FlowElement/FlowElementUtils'\nimport { selectNwbParams } from '../NWB/NWBSelectors'\nimport { selectSnakemakeParams } from '../Snakemake/SnakemakeSelectors'\nimport {\n  NodeResult,\n  NodeResultPending,\n  NodeResultSuccess,\n  NODE_RESULT_STATUS,\n  RUN_STATUS,\n} from './PipelineType'\nimport {\n  isNodeResultPending,\n  isStartedPipeline,\n  isNodeResultSuccess,\n} from './PipelineUtils'\n\nimport {\n  selectAlgorithmFunctionPath,\n  selectAlgorithmIsUpdated,\n  selectAlgorithmName,\n  selectAlgorithmParams,\n} from '../AlgorithmNode/AlgorithmNodeSelectors'\nimport {\n  selectInputNodeFileType,\n  selectInputNodeHDF5Path,\n  selectInputNodeParam,\n  selectInputNodeSelectedFilePath,\n} from '../InputNode/InputNodeSelectors'\n\nexport const selectPipelineLatestUid = (state: RootState) => {\n  return state.pipeline.currentPipeline?.uid\n}\n\nexport const selectRunPostData = (state: RootState) => {\n  const nwbParam = selectNwbParams(state)\n  const snakemakeParam = selectSnakemakeParams(state)\n  const edgeListForRun = selectEdgeListForRun(state)\n  const nodePostDataList = selectNodePostDataListForRun(state)\n  const forceRunList = selectForceRunList(state)\n  const runPostData: Omit<RunPostData, 'name'> = {\n    nwbParam,\n    snakemakeParam,\n    edgeList: edgeListForRun,\n    nodeList: nodePostDataList,\n    forceRunList,\n  }\n  return runPostData\n}\n\nexport const selectNodePostDataListForRun = (\n  state: RootState,\n): Node<NodePostDataType>[] => {\n  const elements = selectFlowElements(state)\n  const nodeList = elements.filter(isNodeData).map((node) => {\n    if (isAlgorithmNodeData(node)) {\n      const param = selectAlgorithmParams(node.id)(state) ?? {}\n      const functionPath = selectAlgorithmFunctionPath(node.id)(state)\n      const algorithmNodePostData: Node<AlgorithmNodePostData> = {\n        ...node,\n        data: {\n          ...node.data,\n          label: node.data?.label ?? '',\n          type: NODE_TYPE_SET.ALGORITHM,\n          path: functionPath,\n          param,\n        },\n      }\n      return algorithmNodePostData\n    } else {\n      const filePath = selectInputNodeSelectedFilePath(node.id)(state)\n      const fileType = selectInputNodeFileType(node.id)(state)\n      const param = selectInputNodeParam(node.id)(state)\n      const hdf5Path = selectInputNodeHDF5Path(node.id)(state)\n      const inputNodePosyData: Node<InputNodePostData> = {\n        ...node,\n        data: {\n          ...node.data,\n          label: node.data?.label ?? '',\n          type: NODE_TYPE_SET.INPUT,\n          path: filePath ?? '',\n          param,\n          hdf5Path: hdf5Path,\n          fileType,\n        },\n      }\n      return inputNodePosyData\n    }\n  })\n  return nodeList\n}\n\n/**\n * 前回の結果で、エラーまたはParamに変更があるnodeのリストを返す\n */\nconst selectForceRunList = (state: RootState) => {\n  const elements = selectFlowElements(state)\n  // todo\n  return elements\n    .filter(isAlgorithmNodeData)\n    .filter((node) => {\n      const isUpdated = selectAlgorithmIsUpdated(node.id)(state)\n      const status = selectPipelineNodeResultStatus(node.id)(state)\n      return isUpdated || status === NODE_RESULT_STATUS.ERROR\n    })\n    .map((node) => ({\n      nodeId: node.id,\n      name: selectAlgorithmName(node.id)(state),\n    }))\n}\n\nexport const selectStartedPipeline = (state: RootState) => {\n  return state.pipeline.run\n}\n\nexport const selectPipelineRunBtn = (state: RootState) => {\n  return state.pipeline.runBtn\n}\n\nexport const selectRunResultPendingList = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  if (isStartedPipeline(pipeline)) {\n    return Object.values(pipeline.runResult).filter(isNodeResultPending)\n  } else {\n    return []\n  }\n}\n\nexport const selectRunResultPendingNodeIdList = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  if (isStartedPipeline(pipeline)) {\n    return Object.entries(pipeline.runResult)\n      .map(([nodeId, nodeResult]) => ({ nodeId, nodeResult }))\n      .filter(isNodeResultPendingAndNodeId)\n      .map(({ nodeId }) => nodeId)\n  } else {\n    return []\n  }\n}\n\nfunction isNodeResultPendingAndNodeId(arg: {\n  nodeId: string\n  nodeResult: NodeResult\n}): arg is {\n  nodeId: string\n  nodeResult: NodeResultPending\n} {\n  return isNodeResultPending(arg.nodeResult)\n}\n\nexport const selectPipelineStatus = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  return pipeline.status\n}\n\nexport const selectPipelineIsCanceled = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  return pipeline.status === RUN_STATUS.CANCELED\n}\n\nexport const selectPipelineIsStartedSuccess = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  return pipeline.status === RUN_STATUS.START_SUCCESS\n}\n\n// export const selectPipelineRunResult = (state: RootState) => {\n//   const pipeline = selectStartedPipeline(state)\n//   if (isStartedPipeline(pipeline)) {\n//     return pipeline.runResult\n//   } else {\n//     throw new Error(\"todo\")\n//   }\n// }\n\nexport const selectPipelineNodeResultSuccessList = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  if (isStartedPipeline(pipeline)) {\n    return Object.entries(pipeline.runResult)\n      .map(([nodeId, nodeResult]) => {\n        return {\n          nodeId,\n          nodeResult,\n        }\n      })\n      .filter(isNodeResultSuccessAndNodeId)\n  } else {\n    return []\n  }\n}\n\n// selectPipelineNodeResultSuccessListの返り値の型を正しく認識させるためだけに作った\nfunction isNodeResultSuccessAndNodeId(arg: {\n  nodeId: string\n  nodeResult: NodeResult\n}): arg is {\n  nodeId: string\n  nodeResult: NodeResultSuccess\n} {\n  return isNodeResultSuccess(arg.nodeResult)\n}\n\nexport const selectPipelineNodeResultStatus =\n  (nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(state)\n    if (isStartedPipeline(pipeline)) {\n      if (Object.keys(pipeline.runResult).includes(nodeId)) {\n        return pipeline.runResult[nodeId].status\n      }\n    }\n    return null\n  }\n\nexport const selectPipelineNodeResultMessage =\n  (nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(state)\n    if (isStartedPipeline(pipeline)) {\n      if (Object.keys(pipeline.runResult).includes(nodeId)) {\n        return pipeline.runResult[nodeId].message\n      }\n    }\n    return null\n  }\n\nexport const selectPipelineNodeResultOutputKeyList =\n  (nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(state)\n    if (isStartedPipeline(pipeline)) {\n      const nodeResult = pipeline.runResult[nodeId]\n      if (\n        Object.keys(pipeline.runResult).includes(nodeId) &&\n        isNodeResultSuccess(nodeResult)\n      ) {\n        return Object.keys(nodeResult.outputPaths)\n      }\n    }\n    return []\n  }\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport {\n  alpha,\n  Typography,\n  useTheme,\n  Tooltip,\n  FormHelperText,\n  IconButton,\n  Button,\n  LinearProgress,\n} from '@mui/material'\nimport CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded'\nimport ErrorIcon from '@mui/icons-material/Error'\nimport Popover from '@mui/material/Popover'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { AlgorithmInfo } from 'store/slice/AlgorithmList/AlgorithmListType'\nimport {\n  selectAlgoArgs,\n  selectAlgoReturns,\n} from 'store/slice/AlgorithmList/AlgorithmListSelectors'\nimport { selectAlgorithmNodeDefined } from 'store/slice/AlgorithmNode/AlgorithmNodeSelectors'\nimport { NodeData } from 'store/slice/FlowElement/FlowElementType'\n\nimport { useHandleColor } from './HandleColorHook'\nimport { toHandleId, isValidConnection } from './FlowChartUtils'\nimport { toggleParamForm } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectPipelineLatestUid,\n  selectPipelineNodeResultMessage,\n  selectPipelineNodeResultStatus,\n} from 'store/slice/Pipeline/PipelineSelectors'\nimport { RootState } from 'store/store'\nimport { NODE_RESULT_STATUS } from 'store/slice/Pipeline/PipelineType'\n\nconst leftHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  border: '1px solid',\n  borderRadius: 0,\n}\nconst rightHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  border: '1px solid',\n  borderRadius: 0,\n}\n\nexport const AlgorithmNode = React.memo<NodeProps<NodeData>>((element) => {\n  const defined = useSelector(selectAlgorithmNodeDefined(element.id))\n  if (defined) {\n    return <AlgorithmNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst AlgorithmNodeImple = React.memo<NodeProps<NodeData>>(\n  ({ id: nodeId, selected: elementSelected, isConnectable, data }) => {\n    const theme = useTheme()\n    const dispatch = useDispatch()\n\n    const onClickParamButton = () => {\n      dispatch(toggleParamForm(nodeId))\n    }\n\n    const onClickDeleteIcon = () => {\n      dispatch(deleteFlowElementsById(nodeId))\n    }\n\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '110%',\n          background: elementSelected\n            ? alpha(theme.palette.primary.light, 0.15)\n            : undefined,\n          border: '1px solid',\n        }}\n      >\n        <IconButton\n          aria-label=\"delete\"\n          style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n          onClick={onClickDeleteIcon}\n          size=\"large\"\n        >\n          <CloseOutlinedIcon />\n        </IconButton>\n        <AlgoName nodeId={nodeId} data={data} />\n        <div>\n          <Button size=\"small\" variant=\"outlined\" onClick={onClickParamButton}>\n            Param\n            {/* <DehazeIcon fontSize='small'/> */}\n          </Button>\n        </div>\n        <AlgoArgs nodeId={nodeId} />\n        <AlgoReturns nodeId={nodeId} isConnectable={isConnectable} />\n        <Message nodeId={nodeId} />\n      </div>\n    )\n  },\n)\n\nconst AlgoName = React.memo<{\n  nodeId: string\n  data: NodeData\n}>(({ nodeId, data }) => {\n  const theme = useTheme()\n  const latestUid = useSelector(selectPipelineLatestUid)\n\n  const status = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultStatus(nodeId)(state)\n      : 'uninitialized',\n  )\n  return (\n    <div\n      style={{\n        padding: 8,\n        paddingLeft: 8,\n      }}\n      className=\"algoName\"\n    >\n      {status === NODE_RESULT_STATUS.PENDING && <LinearProgress />}\n      <Typography\n        style={{\n          textAlign: 'left',\n          color:\n            status === NODE_RESULT_STATUS.ERROR\n              ? theme.palette.error.main\n              : undefined,\n        }}\n      >\n        {data.label}\n      </Typography>\n    </div>\n  )\n})\n\nconst AlgoArgs = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const algoArgs = useSelector(selectAlgoArgs(nodeId), algoInfoListEqualtyFn)\n\n  return (\n    <>\n      {algoArgs != null\n        ? algoArgs\n            .filter((info) => info.type !== 'params')\n            .map((algoInfo, i) => {\n              return <ArgHandle algoInfo={algoInfo} i={i} nodeId={nodeId} />\n            })\n        : null}\n    </>\n  )\n})\n\nconst AlgoReturns = React.memo<{\n  nodeId: string\n  isConnectable: boolean\n}>(({ nodeId, isConnectable }) => {\n  const algoReturns = useSelector(\n    selectAlgoReturns(nodeId),\n    algoInfoListEqualtyFn,\n  )\n  return (\n    <>\n      {algoReturns != null ? (\n        algoReturns?.map((algoInfo, i) => {\n          return <ReturnHandle algoInfo={algoInfo} i={i} nodeId={nodeId} />\n        })\n      ) : (\n        // algoReturns.lengthが0の場合の応急処置\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id={`${nodeId}`}\n          style={{\n            ...rightHandleStyle,\n            top: 15,\n          }}\n          isConnectable={isConnectable}\n        />\n      )}\n    </>\n  )\n})\n\ntype HandleProps = {\n  algoInfo: AlgorithmInfo\n  nodeId: string\n  i: number\n}\n\nfunction hexToRgb(hex: string | undefined, isNone: boolean | undefined) {\n  if (hex !== undefined) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    if (result !== null) {\n      if (isNone) {\n        return `rgba(${parseInt(result[1], 16)}, ${parseInt(\n          result[2],\n          16,\n        )}, ${parseInt(result[3], 16)}, 0.55)`\n      } else {\n        return `rgba(${parseInt(result[1], 16)}, ${parseInt(\n          result[2],\n          16,\n        )}, ${parseInt(result[3], 16)}, 1)`\n      }\n    } else {\n      return undefined\n    }\n  } else {\n    return undefined\n  }\n}\n\nconst ArgHandle = React.memo<HandleProps>(\n  ({ algoInfo: { name, type, isNone }, nodeId, i }) => {\n    const hex_color = useHandleColor(type)\n    const id = toHandleId(nodeId, name, type)\n    const [isHover, setHover] = React.useState(false)\n    const rgb_color = hexToRgb(hex_color, isNone)\n    return (\n      <Handle\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        key={i.toFixed()}\n        type=\"target\"\n        position={Position.Left}\n        id={id}\n        style={{\n          ...leftHandleStyle,\n          background: rgb_color,\n          top: i * 25 + 15,\n        }}\n        isValidConnection={isValidConnection}\n      >\n        <Tooltip\n          title={\n            <>\n              <Typography color=\"inherit\">name: {name}</Typography>\n              <Typography color=\"inherit\">type: {type}</Typography>\n            </>\n          }\n          open={isHover}\n          placement=\"left-end\"\n          arrow\n        >\n          <div />\n        </Tooltip>\n      </Handle>\n    )\n  },\n)\n\nconst ReturnHandle = React.memo<HandleProps>(\n  ({ algoInfo: { name, type }, nodeId, i }) => {\n    const color = useHandleColor(type)\n    const id = toHandleId(nodeId, name, type)\n    const [isHover, setHover] = React.useState(false)\n    return (\n      <Handle\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        key={i.toFixed()}\n        type=\"source\"\n        position={Position.Right}\n        id={id}\n        style={{\n          ...rightHandleStyle,\n          background: color,\n          top: i * 25 + 15,\n        }}\n        isValidConnection={isValidConnection}\n      >\n        <Tooltip\n          title={\n            <>\n              <Typography color=\"inherit\">name: {name}</Typography>\n              <Typography color=\"inherit\">type: {type}</Typography>\n            </>\n          }\n          open={isHover}\n          placement=\"right-end\"\n          arrow\n        >\n          <div />\n        </Tooltip>\n      </Handle>\n    )\n  },\n)\n\nconst Message = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const latestUid = useSelector(selectPipelineLatestUid)\n  const status = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultStatus(nodeId)(state)\n      : 'uninitialized',\n  )\n\n  const errorMsg = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultMessage(nodeId)(state) ?? null\n      : null,\n  )\n\n  const anchorElRef = React.useRef<HTMLButtonElement | null>(null)\n  const [open, setOpen] = React.useState(false)\n  const theme = useTheme()\n\n  if (status === NODE_RESULT_STATUS.ERROR) {\n    return (\n      <>\n        <IconButton\n          ref={anchorElRef}\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n          size=\"small\"\n          style={{ color: theme.palette.error.main, float: 'right' }}\n        >\n          <ErrorIcon />\n        </IconButton>\n        <Popover\n          open={open}\n          anchorEl={anchorElRef.current}\n          onClose={() => setOpen(false)}\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n          transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n        >\n          <div style={{ margin: 8 }}>\n            <FormHelperText error={true}>{errorMsg}</FormHelperText>\n          </div>\n        </Popover>\n      </>\n    )\n  } else if (status === NODE_RESULT_STATUS.SUCCESS) {\n    return (\n      <IconButton\n        ref={anchorElRef}\n        onClick={() => setOpen((prevOpen) => !prevOpen)}\n        size=\"small\"\n        style={{ color: theme.palette.success.main, float: 'right' }}\n      >\n        <CheckCircleRoundedIcon />\n      </IconButton>\n    )\n  } else {\n    return null\n  }\n})\n\nfunction algoInfoListEqualtyFn(\n  a: AlgorithmInfo[] | undefined,\n  b: AlgorithmInfo[] | undefined,\n) {\n  if (a != null && b != null) {\n    return (\n      a === b ||\n      (a.length === b.length &&\n        a.every((v, i) => v.type === b[i].type && v.name === b[i].name))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { isInputNodePostData } from 'api/run/RunUtils'\nimport { INITIAL_IMAGE_ELEMENT_ID } from 'const/flowchart'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport {\n  addFlowElementNode,\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport { isNodeData } from '../FlowElement/FlowElementUtils'\nimport { setInputNodeFilePath } from './InputNodeActions'\nimport {\n  CsvInputParamType,\n  FILE_TYPE_SET,\n  InputNode,\n  INPUT_NODE_SLICE_NAME,\n} from './InputNodeType'\nimport { isCsvInputNode, isHDF5InputNode } from './InputNodeUtils'\n\nconst initialState: InputNode = {\n  [INITIAL_IMAGE_ELEMENT_ID]: {\n    fileType: FILE_TYPE_SET.IMAGE,\n    param: {},\n  },\n}\n\nexport const inputNodeSlice = createSlice({\n  name: INPUT_NODE_SLICE_NAME,\n  initialState,\n  reducers: {\n    deleteInputNode(state, action: PayloadAction<string>) {\n      delete state[action.payload]\n    },\n    setCsvInputNodeParam(\n      state,\n      action: PayloadAction<{ nodeId: string; param: CsvInputParamType }>,\n    ) {\n      const { nodeId, param } = action.payload\n      const inputNode = state[nodeId]\n      if (isCsvInputNode(inputNode)) {\n        inputNode.param = param\n      }\n    },\n    setInputNodeHDF5Path(\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        path: string\n      }>,\n    ) {\n      const { nodeId, path } = action.payload\n      const item = state[nodeId]\n      if (isHDF5InputNode(item)) {\n        item.hdf5Path = path\n      }\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addCase(setInputNodeFilePath, (state, action) => {\n        const { nodeId, filePath } = action.payload\n        state[nodeId].selectedFilePath = filePath\n      })\n      .addCase(addFlowElementNode, (state, action) => {\n        const { node, inputNodeInfo } = action.payload\n        if (node.data?.type === NODE_TYPE_SET.INPUT && inputNodeInfo != null) {\n          const fileType = inputNodeInfo.fileType\n          switch (fileType) {\n            case FILE_TYPE_SET.CSV:\n              state[node.id] = {\n                fileType,\n                param: {\n                  setColumn: null,\n                  setIndex: false,\n                  transpose: false,\n                },\n              }\n              break\n            case FILE_TYPE_SET.IMAGE:\n              state[node.id] = {\n                fileType,\n                param: {},\n              }\n              break\n            case FILE_TYPE_SET.HDF5:\n              state[node.id] = {\n                fileType,\n                param: {},\n              }\n              break\n          }\n        }\n      })\n      .addCase(deleteFlowElements, (state, action) => {\n        action.payload\n          .filter((node) => isNodeData(node))\n          .forEach((node) => {\n            if (node.data?.type === NODE_TYPE_SET.INPUT) {\n              delete state[node.id]\n            }\n          })\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (Object.keys(state).includes(action.payload)) {\n          delete state[action.payload]\n        }\n      })\n      .addCase(importExperimentByUid.fulfilled, (_, action) => {\n        const newState: InputNode = {}\n        action.payload.nodeList.filter(isInputNodePostData).forEach((node) => {\n          if (node.data != null) {\n            if (node.data.fileType === FILE_TYPE_SET.CSV) {\n              newState[node.id] = {\n                fileType: FILE_TYPE_SET.CSV,\n                selectedFilePath: node.data.path,\n                param: node.data.param as CsvInputParamType,\n              }\n            } else if (node.data.fileType === FILE_TYPE_SET.HDF5) {\n              newState[node.id] = {\n                fileType: FILE_TYPE_SET.HDF5,\n                hdf5Path: node.data.hdf5Path,\n                selectedFilePath: node.data.path,\n                param: {},\n              }\n            } else {\n              newState[node.id] = {\n                fileType: node.data.fileType,\n                selectedFilePath: node.data.path,\n                param: {},\n              }\n            }\n          }\n        })\n        return newState\n      }),\n})\n\nexport const { setCsvInputNodeParam, setInputNodeHDF5Path } =\n  inputNodeSlice.actions\n\nexport default inputNodeSlice.reducer\n","import { RootState } from 'store/store'\n\nconst selectDisplayData = (state: RootState) => state.displayData\n\nexport const selectTimeSeriesData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).timeSeries[filePath].data\n\nexport const selectTimeSeriesXrange =\n  (filePath: string) => (state: RootState) =>\n    selectDisplayData(state).timeSeries[filePath].xrange\n\nexport const selectTimeSeriesStd = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).timeSeries[filePath].std\n\nexport const selectTimeSeriesDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).timeSeries).includes(filePath)\n\nexport const selectTimeSeriesDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).timeSeries[filePath].pending\n\nexport const selectTimeSeriesDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).timeSeries[filePath].fulfilled\n\nexport const selectTimeSeriesDataError =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).timeSeries[filePath].error\n      : null\n\nexport const selectHeatMapData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).heatMap[filePath].data\n\nexport const selectHeatMapDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).heatMap).includes(filePath)\n\nexport const selectHeatMapDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).heatMap[filePath].pending\n\nexport const selectHeatMapDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).heatMap[filePath].fulfilled\n\nexport const selectHeatMapDataError =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).heatMap[filePath].error\n      : null\n\nexport const selectImageData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).image[filePath]\n\nexport const selectImageDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).image).includes(filePath)\n\nexport const selectImageDataError = (filePath: string) => (state: RootState) =>\n  selectImageDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).image[filePath].error\n    : null\n\nexport const selectImageDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectImageDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).image[filePath].pending\n\nexport const selectImageDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectImageDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).image[filePath].fulfilled\n\nexport const selectImageDataStartIndex =\n  (filePath: string) => (state: RootState) => {\n    if (!selectImageDataIsPending(filePath)(state)) {\n      return 0\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectImageDataEndIndex =\n  (filePath: string) => (state: RootState) => {\n    if (!selectImageDataIsPending(filePath)(state)) {\n      return selectImageData(filePath)(state).data.length - 1\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectActiveImageData =\n  (filePath: string, activeIndex: number) => (state: RootState) => {\n    return selectImageData(filePath)(state).data[activeIndex]\n  }\n\nexport const selectCsvData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).csv[filePath].data\n\nexport const selectCsvDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).csv).includes(filePath)\n\nexport const selectCsvDataError = (filePath: string) => (state: RootState) =>\n  selectCsvDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).csv[filePath].error\n    : null\n\nexport const selectCsvDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectCsvDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).csv[filePath].pending\n\nexport const selectCsvDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectCsvDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).csv[filePath].fulfilled\n\nexport const selectRoiData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).roi[filePath]?.data[0] ?? []\n\nexport const selectRoiDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).roi).includes(filePath)\n\nexport const selectRoiDataError = (filePath: string) => (state: RootState) =>\n  selectRoiDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).roi[filePath].error\n    : null\n\nexport const selectRoiDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectRoiDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).roi[filePath].pending\n\nexport const selectRoiDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectRoiDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).roi[filePath].fulfilled\n\nexport const selectScatterData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).scatter[filePath]?.data ?? []\n\nexport const selectScatterDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).scatter).includes(filePath)\n\nexport const selectScatterDataError =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).scatter[filePath].error\n      : null\n\nexport const selectScatterDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).scatter[filePath].pending\n\nexport const selectScatterDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).scatter[filePath].fulfilled\n\nexport const selectBarData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).bar[filePath]?.data ?? []\n\nexport const selectBarDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).bar).includes(filePath)\n\nexport const selectBarDataError = (filePath: string) => (state: RootState) =>\n  selectBarDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).bar[filePath].error\n    : null\n\nexport const selectBarDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectBarDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).bar[filePath].pending\n\nexport const selectBarDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectBarDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).bar[filePath].fulfilled\n\nexport const selectHTMLData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).html[filePath]?.data ?? ''\n\nexport const selectHTMLDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).html).includes(filePath)\n\nexport const selectHTMLDataError = (filePath: string) => (state: RootState) =>\n  selectHTMLDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).html[filePath].error\n    : null\n\nexport const selectHTMLDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectHTMLDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).html[filePath].pending\n\nexport const selectHTMLDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectHTMLDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).html[filePath].fulfilled\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport {\n  ImageData,\n  TimeSeriesData,\n  DISPLAY_DATA_SLICE_NAME,\n  HeatMapData,\n  CsvData,\n  RoiData,\n  ScatterData,\n  BarData,\n  HTMLData,\n} from './DisplayDataType'\n\nexport const getTimeSeriesDataById = createAsyncThunk<\n  { data: TimeSeriesData; xrange: number[]; std: TimeSeriesData },\n  { path: string; index: number }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getTimeSeriesDataById`,\n  async ({ path, index }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/timedata/${path}`, {\n        params: {\n          index: index,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getTimeSeriesAllData = createAsyncThunk<\n  { data: TimeSeriesData; xrange: number[]; std: TimeSeriesData },\n  { path: string }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getTimeSeriesAllData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/outputs/alltimedata/${path}`,\n      )\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getHeatMapData = createAsyncThunk<\n  { data: HeatMapData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getHeatMapData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/data/${path}`)\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getImageData = createAsyncThunk<\n  { data: ImageData },\n  { path: string; startIndex?: number; endIndex?: number }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getImageData`,\n  async ({ path, startIndex, endIndex }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/image/${path}`, {\n        params: {\n          start_index: startIndex,\n          end_index: endIndex,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getCsvData = createAsyncThunk<\n  {\n    data: CsvData\n  },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getCsvData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/csv/${path}`)\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getRoiData = createAsyncThunk<{ data: RoiData }, { path: string }>(\n  `${DISPLAY_DATA_SLICE_NAME}/getRoiData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/image/${path}`, {})\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getScatterData = createAsyncThunk<\n  { data: ScatterData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getScatterData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/data/${path}`, {})\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getBarData = createAsyncThunk<{ data: BarData }, { path: string }>(\n  `${DISPLAY_DATA_SLICE_NAME}/getBarData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/data/${path}`, {})\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getHTMLData = createAsyncThunk<\n  { data: HTMLData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getHTMLData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/html/${path}`, {})\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n","import React from 'react'\nimport { DATA_TYPE } from 'store/slice/DisplayData/DisplayDataType'\n\nexport const DisplayDataContext = React.createContext<{\n  nodeId: string | null\n  filePath: string\n  dataType: DATA_TYPE\n  itemId: number\n}>({ nodeId: '', filePath: '', dataType: 'csv', itemId: NaN })\n","export function arrayEqualityFn<T>(a: T[], b: T[]) {\n  return a === b || (a.length === b.length && a.every((v, i) => v === b[i]))\n}\n\nexport function twoDimarrayEqualityFn<T>(a: T[][], b: T[][]) {\n  return (\n    a === b ||\n    (a.length === b.length && a.every((v, i) => arrayEqualityFn(v, b[i])))\n  )\n}\n","import { DATA_TYPE, DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\n\nexport type VisualaizeItem = {\n  selectedItemId: number | null\n  items: {\n    [itemId: number]: VisualaizeItemType\n  }\n}\n\nexport type VisualaizeItemType = MultiPlotItem | DisplayDataItem\n\nexport interface ItemBaseType<T extends VISUALIZE_ITEM_TYPE> {\n  itemType: T\n}\n\nexport type ColorType = {\n  rgb: string\n  offset: string\n}\n\nexport const VISUALIZE_ITEM_TYPE_SET = {\n  MULTI_PLOT: 'MultiPlot',\n  DISPLAY_DATA: 'displayData',\n} as const\n\nexport type VISUALIZE_ITEM_TYPE =\n  typeof VISUALIZE_ITEM_TYPE_SET[keyof typeof VISUALIZE_ITEM_TYPE_SET]\n\nexport type DisplayDataItem =\n  | ImageItem\n  | TimeSeriesItem\n  | HeatMapItem\n  | CsvItem\n  | RoiItem\n  | ScatterItem\n  | BarItem\n  | HDF5Item\n  | HTMLItem\n\nexport interface DisplayDataItemBaseType extends ItemBaseType<'displayData'> {\n  filePath: string | null\n  nodeId: string | null\n  dataType: DATA_TYPE | null\n}\n\nexport interface MultiPlotItem extends ItemBaseType<'MultiPlot'> {\n  imageItem: ImageItem\n  timeSeriesItem: TimeSeriesItem\n  heatMapItem: HeatMapItem\n  otherItem?: DisplayDataItem\n}\n\nexport interface ImageItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.IMAGE\n  activeIndex: number\n  startIndex: number\n  endIndex: number\n  showticklabels: boolean\n  zsmooth: string | boolean\n  showline: boolean\n  showgrid: boolean\n  showscale: boolean\n  colors: ColorType[]\n  roiItem: RoiItem | null\n}\n\nexport interface TimeSeriesItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.TIME_SERIES\n  offset: boolean\n  span: number\n  showgrid: boolean\n  showline: boolean\n  showticklabels: boolean\n  zeroline: boolean\n  xrange: {\n    left: number | undefined\n    right: number | undefined\n  }\n  maxIndex: number\n  displayNumbers: number[]\n  checkedList: boolean[]\n}\n\nexport interface HeatMapItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HEAT_MAP\n  showscale: boolean\n  colors: ColorType[]\n}\nexport interface CsvItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.CSV\n  setColumn: number | null\n  setIndex: boolean\n  transpose: boolean\n}\nexport interface RoiItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.ROI\n  // colors: ColorType[]\n}\n\nexport interface ScatterItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.SCATTER\n  xIndex: number\n  yIndex: number\n}\n\nexport interface BarItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.BAR\n}\n\nexport interface HDF5Item extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HDF5\n}\n\nexport interface HTMLItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HTML\n}\n","import { DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\nimport {\n  VisualaizeItemType,\n  MultiPlotItem,\n  DisplayDataItem,\n  VISUALIZE_ITEM_TYPE_SET,\n  ImageItem,\n  TimeSeriesItem,\n  HeatMapItem,\n  RoiItem,\n  ScatterItem,\n  CsvItem,\n} from './VisualizeItemType'\n\nexport function isMultiPlotItem(\n  item: VisualaizeItemType,\n): item is MultiPlotItem {\n  return item.itemType === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT\n}\n\nexport function isDisplayDataItem(\n  item: VisualaizeItemType,\n): item is DisplayDataItem {\n  return item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA\n}\n\nexport function isImageItem(item: VisualaizeItemType): item is ImageItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.IMAGE\n  )\n}\n\nexport function isTimeSeriesItem(\n  item: VisualaizeItemType,\n): item is TimeSeriesItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.TIME_SERIES\n  )\n}\n\nexport function isCsvItem(item: VisualaizeItemType): item is CsvItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.CSV\n  )\n}\n\nexport function isHeatMapItem(item: VisualaizeItemType): item is HeatMapItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.HEAT_MAP\n  )\n}\n\nexport function isRoiItem(item: VisualaizeItemType): item is RoiItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.ROI\n  )\n}\n\nexport function isScatterItem(item: VisualaizeItemType): item is ScatterItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.SCATTER\n  )\n}\n","import { RootState } from 'store/store'\nimport { selectRoiData } from '../DisplayData/DisplayDataSelectors'\nimport { VISUALIZE_ITEM_TYPE_SET } from './VisualizeItemType'\nimport {\n  isDisplayDataItem,\n  isImageItem,\n  isTimeSeriesItem,\n  isHeatMapItem,\n  isMultiPlotItem,\n  isCsvItem,\n  isScatterItem,\n} from './VisualizeItemUtils'\n\nexport const selectSelectedVisualizeItemId = (state: RootState) =>\n  state.visualaizeItem.selectedItemId\n\nconst selectVisualizeItems = (state: RootState) => state.visualaizeItem.items\n\nexport const selectVisualizeItemIdList = (state: RootState) =>\n  Object.keys(selectVisualizeItems(state)).map((key) => Number(key))\n\nexport const selectVisualizeItemType = (itemId: number) => (state: RootState) =>\n  selectVisualizeItems(state)[itemId].itemType\n\nexport const selectVisualizeItemTypeIsMultiPlot =\n  (itemId: number) => (state: RootState) =>\n    selectVisualizeItemType(itemId)(state) ===\n    VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT\n\nexport const selectMultiPlotImageItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.imageItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotImageItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotImageItem(itemId)(state).nodeId\n\nexport const selectMultiPlotImageItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotImageItem(itemId)(state).filePath\n\nexport const selectMultiPlotTimeSeriesItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotRoiItem = (itemId: number) => (state: RootState) =>\n  selectMultiPlotImageItem(itemId)(state).roiItem\n\nexport const selectMultiPlotRoiItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotRoiItem(itemId)(state)?.nodeId ?? null\n\nexport const selectMultiPlotRoiItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotRoiItem(itemId)(state)?.filePath ?? null\n\nexport const selectMultiPlotTimeSeriesItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotTimeSeriesItem(itemId)(state).nodeId\n\nexport const selectMultiPlotTimeSeriesItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotTimeSeriesItem(itemId)(state).filePath\n\nexport const selectMultiPlotHeatMapItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.heatMapItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotHeatMapItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotHeatMapItem(itemId)(state).nodeId\n\nexport const selectMultiPlotHeatMapItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotHeatMapItem(itemId)(state).filePath\n\nexport const selectVisualizeDataType =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.dataType\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectVisualizeDataNodeId =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.nodeId\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectVisualizeDataFilePath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.filePath\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.filePath\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectRoiItemNodeId = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.roiItem?.nodeId ?? null\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.roiItem?.nodeId ?? null\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectRoiItemFilePath = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.roiItem?.filePath ?? null\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.roiItem?.filePath ?? null\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectImageItemShowticklabels =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showticklabels\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showticklabels\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemZsmooth =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.zsmooth\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.zsmooth\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemStartIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.startIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.startIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemEndIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.endIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.endIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showline\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowGrid =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showgrid\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showgrid\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowScale =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showscale\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showscale\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemColors = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.colors\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.colors\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectImageItemActiveIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.activeIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.activeIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemOffset =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.offset\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.offset\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemSpan =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.span\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.span\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowGrid =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showgrid\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showgrid\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showline\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowTickLabels =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showticklabels\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showticklabels\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemZeroLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.zeroline\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.zeroline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemXrange =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.xrange\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.xrange\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemDisplayNumbers =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.displayNumbers\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.displayNumbers\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemCheckedList =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.checkedList\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.checkedList\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectRoiItemIndex =\n  (itemId: number, roiFilePath: string | null) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      const maxIdx = item.maxIndex\n      if (maxIdx !== 0) {\n        return maxIdx\n      }\n    } else if (isMultiPlotItem(item)) {\n      const maxIdx = item.timeSeriesItem.maxIndex\n      if (maxIdx !== 0) {\n        return maxIdx\n      }\n    }\n\n    if (roiFilePath !== null) {\n      return selectRoiItemMaxNumber(roiFilePath)(state)\n    } else {\n      return 0\n    }\n  }\n\nexport const selectRoiItemMaxNumber =\n  (roiFilePath: string) => (state: RootState) => {\n    const roiData = selectRoiData(roiFilePath)(state)\n    if (roiData.length !== 0) {\n      return Math.max(...roiData.map((arr) => Math.max(...arr)))\n    } else {\n      return 0\n    }\n  }\n\nexport const selectHeatMapItemShowScale =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isHeatMapItem(item)) {\n      return item.showscale\n    } else if (isMultiPlotItem(item)) {\n      return item.heatMapItem.showscale\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectHeatMapItemColors =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isHeatMapItem(item)) {\n      return item.colors\n    } else if (isMultiPlotItem(item)) {\n      return item.heatMapItem.colors\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemTranspose =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isCsvItem(item)) {\n      return item.transpose\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemSetColumn =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isCsvItem(item)) {\n      return item.setColumn\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemSetIndex = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isCsvItem(item)) {\n    return item.setIndex\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectScatterItemXIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isScatterItem(item)) {\n      return item.xIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectScatterItemYIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isScatterItem(item)) {\n      return item.yIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotTimeSeriesItemFilepath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      const targetItem = selectMultiPlotTimeSeriesItem(itemId)(state)\n      const timeSeriesFilePath = targetItem.filePath\n      return timeSeriesFilePath\n    }\n    return null\n  }\n\nexport const selectMultiPlotTimeSeriesItemDisplayNumbers =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      const targetItem = selectMultiPlotTimeSeriesItem(itemId)(state)\n      const displayNumbers = targetItem.displayNumbers\n      return displayNumbers\n    }\n    return null\n  }\n","import React from 'react'\nimport { LinearProgress, Typography } from '@mui/material'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectCsvData,\n  selectCsvDataError,\n  selectCsvDataIsFulfilled,\n  selectCsvDataIsInitialized,\n  selectCsvDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getCsvData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { CsvData } from 'store/slice/DisplayData/DisplayDataType'\nimport { DataGrid, GridColDef } from '@mui/x-data-grid'\nimport {\n  selectCsvItemSetColumn,\n  selectCsvItemSetIndex,\n  selectCsvItemTranspose,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nexport const CsvPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const isInitialized = useSelector(selectCsvDataIsInitialized(path))\n  const isPending = useSelector(selectCsvDataIsPending(path))\n  const isFulfilled = useSelector(selectCsvDataIsFulfilled(path))\n  const error = useSelector(selectCsvDataError(path))\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getCsvData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <CsvPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst CsvPlotImple = React.memo(() => {\n  const { itemId, filePath: path } = React.useContext(DisplayDataContext)\n  const transpose = useSelector(selectCsvItemTranspose(itemId))\n  const setColumn = useSelector(selectCsvItemSetColumn(itemId))\n  const setIndex = useSelector(selectCsvItemSetIndex(itemId))\n  return (\n    <PresentationalCsvPlot\n      path={path}\n      transpose={transpose}\n      setColumn={setColumn}\n      setIndex={setIndex}\n    />\n  )\n})\n\n/**\n * CsvFileNodeの設定時に表示するプレビューでも使用することを想定\n *\n * DisplayDataContextに依存しない\n */\nexport const PresentationalCsvPlot = React.memo<{\n  path: string\n  transpose: boolean\n  setColumn: number | null\n  setIndex: boolean\n}>(({ path, transpose, setIndex, setColumn }) => {\n  const data = useSelector(\n    selectCsvData(path),\n    (a: CsvData | undefined, b: CsvData | undefined) => {\n      if (a != null && b != null) {\n        return twoDimarrayEqualityFn(a, b)\n      } else {\n        return a === undefined && b === undefined\n      }\n    },\n  )\n\n  const csvData = React.useMemo(() => {\n    if (transpose) {\n      return data[0].map((col, i) => data.map((row) => row[i]))\n    }\n    return data\n  }, [data, transpose])\n\n  const columns: GridColDef[] = React.useMemo(() => {\n    const columnData = () => {\n      if (setColumn === null) {\n        return csvData[0]\n      } else {\n        if (setColumn >= csvData.length) {\n          return csvData[csvData.length - 1]\n        } else {\n          return csvData[setColumn]\n        }\n      }\n    }\n\n    if (setIndex) {\n      return [\n        { field: 'col0', headerName: 'index', width: 150 },\n        ...columnData().map((value, idx) => {\n          return {\n            field: `col${idx + 1}`,\n            headerName: `${setColumn === null ? idx : value}`,\n            width: 150,\n          }\n        }),\n      ]\n    } else {\n      return columnData().map((value, idx) => {\n        return {\n          field: `col${idx + 1}`,\n          headerName: `${setColumn === null ? idx : value}`,\n          width: 150,\n        }\n      })\n    }\n  }, [csvData, setColumn, setIndex])\n  const rows = csvData\n    .map((row, row_id) => {\n      let rowObj = Object.fromEntries(\n        [row_id, ...row].map((value, index) => {\n          return [`col${index}`, value]\n        }),\n      )\n      rowObj['id'] = row_id\n      return rowObj\n    })\n    .filter(\n      (value, idx) =>\n        setColumn === null || (setColumn !== null && idx > setColumn),\n    )\n\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  )\n})\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport { alpha, useTheme } from '@mui/material/styles'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  IconButton,\n  DialogTitle,\n  DialogActions,\n  Switch,\n  FormControlLabel,\n  TextField,\n  Box,\n  LinearProgress,\n  Typography,\n} from '@mui/material'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  selectCsvInputNodeParamSetColumn,\n  selectCsvInputNodeParamSetIndex,\n  selectCsvInputNodeParamTranspose,\n  selectInputNodeDefined,\n  selectInputNodeSelectedFilePath,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport { setCsvInputNodeParam } from 'store/slice/InputNode/InputNodeSlice'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\nimport { toHandleId } from './FlowChartUtils'\nimport { FileSelect } from './FileSelect'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectCsvDataError,\n  selectCsvDataIsFulfilled,\n  selectCsvDataIsInitialized,\n  selectCsvDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getCsvData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { PresentationalCsvPlot } from 'components/Visualize/Plot/CsvPlot'\n\nconst sourceHandleStyle: CSSProperties = {\n  width: 8,\n  height: 15,\n  top: 15,\n  border: '1px solid',\n  borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const CsvFileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <CsvFileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst CsvFileNodeImple = React.memo<NodeProps>(({ id: nodeId, selected }) => {\n  const dispatch = useDispatch()\n  const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n  const onChangeFilePath = (path: string) => {\n    dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n  }\n  const theme = useTheme()\n\n  const onClickDeleteIcon = () => {\n    dispatch(deleteFlowElementsById(nodeId))\n  }\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        width: '230px',\n        background: selected\n          ? alpha(theme.palette.primary.light, 0.1)\n          : undefined,\n      }}\n    >\n      <IconButton\n        aria-label=\"delete\"\n        style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n        onClick={onClickDeleteIcon}\n        size=\"large\"\n      >\n        <CloseOutlinedIcon />\n      </IconButton>\n      <FileSelect\n        onChangeFilePath={onChangeFilePath}\n        fileType={FILE_TYPE_SET.CSV}\n        filePath={filePath ? filePath.split('/').reverse()[0] : ''}\n      />\n      {!!filePath && <ParamSettingDialog nodeId={nodeId} filePath={filePath} />}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={toHandleId(nodeId, 'csv', 'CsvData')}\n        style={sourceHandleStyle}\n      />\n    </div>\n  )\n})\n\nconst ParamSettingDialog = React.memo<{ nodeId: string; filePath: string }>(\n  ({ nodeId, filePath }) => {\n    const [open, setOpen] = React.useState(false)\n    // OK時のみStoreに反映させるため一時的な値をuseStateで保持しておく。\n    // useStateの初期値はselectorで取得。\n    const [setColumn, setSetColumn] = React.useState(\n      useSelector(selectCsvInputNodeParamSetColumn(nodeId)),\n    )\n    const [setIndex, setSetIndex] = React.useState(\n      useSelector(selectCsvInputNodeParamSetIndex(nodeId)),\n    )\n    const [transpose, setTranspose] = React.useState(\n      useSelector(selectCsvInputNodeParamTranspose(nodeId)),\n    )\n    const dispatch = useDispatch()\n    const onClickCancel = () => {\n      setOpen(false)\n    }\n    const onClickOk = () => {\n      setOpen(false)\n      dispatch(\n        setCsvInputNodeParam({\n          nodeId,\n          param: { setColumn, setIndex, transpose },\n        }),\n      )\n    }\n\n    return (\n      <>\n        <Button onClick={() => setOpen(true)}>Settings</Button>\n        <Dialog open={open}>\n          <DialogTitle>Csv Setting</DialogTitle>\n          <DialogContent dividers>\n            <Box sx={{ display: 'flex', p: 1, m: 1, alignItems: 'flex-start' }}>\n              <FormControlLabel\n                sx={{ margin: (theme) => theme.spacing(0, 1, 0, 1) }}\n                control={\n                  <Switch\n                    checked={transpose}\n                    onChange={(event) => setTranspose(event.target.checked)}\n                  />\n                }\n                label=\"Transpose\"\n              />\n              <TextField\n                label=\"Column\"\n                sx={{\n                  width: 100,\n                  margin: (theme) => theme.spacing(0, 1, 0, 1),\n                }}\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={(event) => {\n                  const value = Number(event.target.value)\n                  if (value >= 0) {\n                    setSetColumn(Number(event.target.value))\n                  }\n                }}\n                value={setColumn}\n              />\n              <FormControlLabel\n                sx={{ margin: (theme) => theme.spacing(0, 1, 0, 1) }}\n                control={\n                  <Switch\n                    checked={setIndex}\n                    onChange={(event) => setSetIndex(event.target.checked)}\n                  />\n                }\n                label=\"Set Index\"\n              />\n            </Box>\n            <Typography variant=\"h6\">Preview</Typography>\n            <CsvPreview\n              filePath={filePath}\n              transpose={transpose}\n              setColumn={setColumn}\n              setIndex={setIndex}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n              cancel\n            </Button>\n            <Button onClick={onClickOk} color=\"primary\" variant=\"outlined\">\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </>\n    )\n  },\n)\n\nconst CsvPreview = React.memo<{\n  filePath: string\n  transpose: boolean\n  setColumn: number | null\n  setIndex: boolean\n}>(({ filePath: path, ...otherProps }) => {\n  const isInitialized = useSelector(selectCsvDataIsInitialized(path))\n  const isPending = useSelector(selectCsvDataIsPending(path))\n  const isFulfilled = useSelector(selectCsvDataIsFulfilled(path))\n  const error = useSelector(selectCsvDataError(path))\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getCsvData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <PresentationalCsvPlot path={path} {...otherProps} />\n  } else {\n    return null\n  }\n})\n","import { RootState } from '../../store'\n\nexport const selectHDF5 = (state: RootState) => {\n  if (state.hdf5 != null) {\n    return state.hdf5\n  } else {\n    return undefined\n  }\n}\n\nexport const selectHDF5Nodes = () => (state: RootState) =>\n  selectHDF5(state)?.tree\n\nexport const selectHDF5IsLoading = () => (state: RootState) =>\n  selectHDF5(state)?.isLoading ?? false\n","export const HDF5_SLICE_NAME = 'hdf5'\n\nexport type HDF5TreeDTO = HDF5DirDTO | HDF5FileDTO\n\nexport interface HDF5DirDTO {\n  isDir: true\n  name: string\n  nodes: HDF5TreeDTO[]\n  path: string\n}\n\nexport interface HDF5FileDTO {\n  isDir: false\n  name: string\n  shape: [number]\n  path: string\n  nbytes: string\n}\n\nexport interface HDF5Tree {\n  isLoading: boolean\n  tree: HDF5TreeDTO[]\n}\n\nexport const HDF5_TYPE_SET = {\n  ALL: 'all',\n} as const\n\nexport type HDF5_TYPE = typeof HDF5_TYPE_SET[keyof typeof HDF5_TYPE_SET]\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\n\nimport { HDF5_SLICE_NAME, HDF5TreeDTO } from './HDF5Type'\n\nexport const getHDF5Tree = createAsyncThunk<HDF5TreeDTO[], { path: string }>(\n  `${HDF5_SLICE_NAME}/getHDF5Tree`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/hdf5/${path}`)\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\n\nimport { alpha, useTheme } from '@mui/material/styles'\nimport Dialog from '@mui/material/Dialog'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem from '@mui/lab/TreeItem'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport IconButton from '@mui/material/IconButton'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport Button from '@mui/material/Button'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  selectInputNodeDefined,\n  selectInputNodeHDF5Path,\n  selectInputNodeSelectedFilePath,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport { setInputNodeHDF5Path } from 'store/slice/InputNode/InputNodeSlice'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\nimport { toHandleId } from './FlowChartUtils'\nimport { FileSelect } from './FileSelect'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectHDF5IsLoading,\n  selectHDF5Nodes,\n} from 'store/slice/HDF5/HDF5Selectors'\nimport { getHDF5Tree } from 'store/slice/HDF5/HDF5Action'\nimport { HDF5TreeDTO } from 'store/slice/HDF5/HDF5Type'\nimport { Typography } from '@mui/material'\n\nconst sourceHandleStyle: CSSProperties = {\n  width: 8,\n  height: 15,\n  top: 15,\n  border: '1px solid',\n  borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const HDF5FileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <HDF5FileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst HDF5FileNodeImple = React.memo<NodeProps>(({ id: nodeId, selected }) => {\n  const dispatch = useDispatch()\n  const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n  const onChangeFilePath = (path: string) => {\n    dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n  }\n  const theme = useTheme()\n\n  const onClickDeleteIcon = () => {\n    dispatch(deleteFlowElementsById(nodeId))\n  }\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        width: '230px',\n        background: selected\n          ? alpha(theme.palette.primary.light, 0.1)\n          : undefined,\n      }}\n    >\n      <IconButton\n        aria-label=\"delete\"\n        style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n        onClick={onClickDeleteIcon}\n      >\n        <CloseOutlinedIcon />\n      </IconButton>\n      <FileSelect\n        onChangeFilePath={onChangeFilePath}\n        fileType={FILE_TYPE_SET.HDF5}\n        filePath={filePath ? filePath.split('/').reverse()[0] : ''}\n      />\n      {filePath !== undefined && <ItemSelect nodeId={nodeId} />}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={toHandleId(nodeId, 'hdf5', 'HDF5Data')}\n        style={sourceHandleStyle}\n      />\n    </div>\n  )\n})\n\nconst ItemSelect = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const [open, setOpen] = React.useState(false)\n\n  const structureFileName = useSelector(selectInputNodeHDF5Path(nodeId))\n\n  return (\n    <>\n      <Button variant=\"outlined\" size=\"small\" onClick={() => setOpen(true)}>\n        {'Structure'}\n      </Button>\n      <Typography className=\"selectFilePath\" variant=\"caption\">\n        {!!structureFileName ? structureFileName : 'No structure is selected.'}\n      </Typography>\n\n      <Dialog open={open} onClose={() => setOpen(false)} fullWidth>\n        <DialogTitle>{'Select File'}</DialogTitle>\n        <Structure nodeId={nodeId} />\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} variant=\"outlined\">\n            cancel\n          </Button>\n          <Button\n            onClick={() => setOpen(false)}\n            color=\"primary\"\n            variant=\"outlined\"\n            autoFocus\n          >\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n})\n\nconst Structure = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const theme = useTheme()\n  return (\n    <DialogContent dividers>\n      <div\n        style={{\n          height: 300,\n          overflow: 'auto',\n          marginBottom: theme.spacing(1),\n          border: '1px solid',\n          padding: theme.spacing(1),\n          borderColor: theme.palette.divider,\n        }}\n      >\n        <FileTreeView nodeId={nodeId} />\n      </div>\n    </DialogContent>\n  )\n})\n\nconst FileTreeView = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const [tree, isLoading] = useHDF5Tree(nodeId)\n  return (\n    <div>\n      {isLoading && <LinearProgress />}\n      <TreeView>\n        {tree?.map((node) => (\n          <TreeNode node={node} nodeId={nodeId} />\n        ))}\n      </TreeView>\n    </div>\n  )\n})\n\nconst TreeNode = React.memo<{\n  node: HDF5TreeDTO\n  nodeId: string\n}>(({ node, nodeId }) => {\n  const dispatch = useDispatch()\n\n  const onClickFile = (path: string) => {\n    dispatch(setInputNodeHDF5Path({ nodeId, path }))\n  }\n\n  if (node.isDir) {\n    // Directory\n    return (\n      <TreeItem\n        icon={<FolderIcon htmlColor=\"skyblue\" />}\n        nodeId={node.path}\n        label={node.name}\n      >\n        {node.nodes.map((childNode, i) => (\n          <TreeNode node={childNode} key={i} nodeId={nodeId} />\n        ))}\n      </TreeItem>\n    )\n  } else {\n    // File\n    return (\n      <TreeItem\n        icon={<InsertDriveFileOutlinedIcon fontSize=\"small\" />}\n        nodeId={node.path}\n        label={node.name + `   (shape=${node.shape}, nbytes=${node.nbytes})`}\n        onClick={() => onClickFile(node.path)}\n      />\n    )\n  }\n})\n\nfunction useHDF5Tree(nodeId: string): [HDF5TreeDTO[] | undefined, boolean] {\n  const dispatch = useDispatch()\n  const tree = useSelector(selectHDF5Nodes())\n  const isLoading = useSelector(selectHDF5IsLoading())\n  const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n  React.useEffect(() => {\n    if (!isLoading && filePath) {\n      dispatch(getHDF5Tree({ path: filePath }))\n    }\n  }, [isLoading, filePath, dispatch])\n  return [tree, isLoading]\n}\n","import { useDispatch } from 'react-redux'\nimport {\n  EdgeProps,\n  getBezierPath,\n  getMarkerEnd,\n  getEdgeCenter,\n} from 'react-flow-renderer'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\n\nconst foreignObjectSize = 40\n\nexport const CustomEdge: React.FC<EdgeProps> = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  arrowHeadType,\n  markerEndId,\n}) => {\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  })\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId)\n  const [edgeCenterX, edgeCenterY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  })\n\n  const dispatch = useDispatch()\n\n  const onEdgeClick = () => {\n    dispatch(deleteFlowElementsById(id))\n  }\n\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n      <foreignObject\n        width={foreignObjectSize}\n        height={foreignObjectSize}\n        x={edgeCenterX - foreignObjectSize / 2}\n        y={edgeCenterY - foreignObjectSize / 2}\n        className=\"edgebutton-foreignobject\"\n      >\n        <CloseOutlinedIcon onClick={onEdgeClick} />\n      </foreignObject>\n    </>\n  )\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { NWB_SLICE_NAME } from './NWBType'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\n\nexport const getNWBParams = createAsyncThunk<ParamDTO, void>(\n  `${NWB_SLICE_NAME}/getNWBParams`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/nwb`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const NWB_SLICE_NAME = 'NWB'\n\nexport type NWBType = {\n  params: ParamMap\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { getNWBParams } from './NWBAction'\nimport { NWBType, NWB_SLICE_NAME } from './NWBType'\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\n\nconst initialState: NWBType = {\n  params: {},\n}\n\nexport const nwbSlice = createSlice({\n  name: NWB_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { path, newValue } = action.payload\n      const targetNode = getChildParam(path, state.params)\n      if (targetNode != null) {\n        targetNode.value = newValue\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getNWBParams.fulfilled, (state, action) => {\n      state.params = convertToParamMap(action.payload)\n    })\n  },\n})\n\nexport const { updateParam } = nwbSlice.actions\n\nexport default nwbSlice.reducer\n","import MuiAccordion, { AccordionProps } from '@mui/material/Accordion'\nimport { styled } from '@mui/material/styles'\n\nexport const Accordion = styled((props: AccordionProps) => (\n  <MuiAccordion disableGutters elevation={0} square {...props} />\n))(({ theme }) => ({\n  border: '1px solid',\n  borderColor: theme.palette.divider,\n  boxShadow: 'none',\n  '&:not(:last-child)': {\n    borderBottom: 0,\n  },\n  '&:before': {\n    display: 'none',\n  },\n}))\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AnyAction } from '@reduxjs/toolkit'\nimport Switch from '@mui/material/Switch'\nimport TextField from '@mui/material/TextField'\nimport Box from '@mui/material/Box'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport AccordionDetails from '@mui/material/AccordionDetails'\nimport AccordionSummary from '@mui/material/AccordionSummary'\nimport Typography from '@mui/material/Typography'\n\nimport { isParamChild } from 'store/utils/param/ParamUtils'\nimport { ParamType } from 'store/utils/param/ParamType'\nimport { RootState } from 'store/store'\nimport { Accordion } from 'components/Accordion'\n\ntype ParamSelectorType = (paramKey: string) => (state: RootState) => ParamType\ntype ParamValueSelectorType = (path: string) => (state: RootState) => unknown\ntype ParamUpdateActionCreatorType = (\n  path: string,\n  newValue: unknown,\n) => AnyAction\n\nexport type CreateParamFormItemComponentProps = {\n  paramSelector: ParamSelectorType\n  paramValueSelector: ParamValueSelectorType\n  paramUpdateActionCreator: ParamUpdateActionCreatorType\n}\n\nexport function createParamFormItemComponent({\n  paramSelector,\n  paramValueSelector,\n  paramUpdateActionCreator,\n}: CreateParamFormItemComponentProps): React.FC<{ paramKey: string }> {\n  function useParamValueUpdate(\n    path: string,\n  ): [unknown, (newValue: unknown) => AnyAction] {\n    const value = useSelector(paramValueSelector(path))\n    const updateParamAction = (newValue: unknown) => {\n      return paramUpdateActionCreator(path, newValue)\n    }\n    return [value, updateParamAction]\n  }\n  const ParamItemForString = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    const onChange = (\n      e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n      const newValue = e.target.value as string\n      dispatch(updateParamAction(newValue))\n    }\n    return <TextField value={value} onChange={onChange} multiline />\n  })\n  const ParamItemForNumber = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    if (typeof value === 'number') {\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue =\n          event.target.value === '' ? '' : Number(event.target.value)\n        if (typeof newValue === 'number') {\n          dispatch(updateParamAction(newValue))\n        }\n      }\n      return (\n        <TextField\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={value}\n          onChange={onChange}\n        />\n      )\n    } else {\n      return null\n    }\n  })\n  const ParamItemForBoolean = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    if (typeof value === 'boolean') {\n      const onChange = () => {\n        dispatch(updateParamAction(!value))\n      }\n      return <Switch checked={value} onChange={onChange} />\n    } else {\n      return null\n    }\n  })\n  const ParamItemForValueType = React.memo<ParamChildItemProps>(({ path }) => {\n    const [value] = useParamValueUpdate(path)\n    if (typeof value === 'number') {\n      return <ParamItemForNumber path={path} />\n    } else if (typeof value === 'string') {\n      return <ParamItemForString path={path} />\n    } else if (typeof value === 'boolean') {\n      return <ParamItemForBoolean path={path} />\n    } else {\n      return <ParamItemForString path={path} />\n    }\n  })\n  const ParamChildItem = React.memo<ParamChildItemProps & { name: string }>(\n    ({ path, name }) => {\n      return (\n        <Box\n          sx={{\n            display: 'flex',\n            marginTop: (theme) => theme.spacing(2),\n            marginBottom: (theme) => theme.spacing(2),\n            alignItems: 'center',\n            overflow: 'scroll',\n          }}\n        >\n          <Box\n            style={{ verticalAlign: 'middle' }}\n            sx={{\n              flexGrow: 1,\n              width: '50%',\n            }}\n          >\n            <Typography style={{ overflow: 'scroll' }}>{name}</Typography>\n          </Box>\n          <Box sx={{ width: '50%' }}>\n            <ParamItemForValueType path={path} />\n          </Box>\n        </Box>\n      )\n    },\n  )\n  const ParamItem = React.memo<ParamItemProps>(({ paramKey, param }) => {\n    if (isParamChild(param)) {\n      return <ParamChildItem path={param.path} name={paramKey} />\n    } else {\n      return (\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            {paramKey}\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              {Object.entries(param.children).map(([paramKey, param], i) => (\n                <ParamItem param={param} paramKey={paramKey} />\n              ))}\n            </div>\n          </AccordionDetails>\n        </Accordion>\n      )\n    }\n  })\n  return React.memo<{ paramKey: string }>(({ paramKey }) => {\n    const param = useSelector(paramSelector(paramKey)) // 一階層目\n    return <ParamItem paramKey={paramKey} param={param} />\n  })\n}\n\ntype ParamItemProps = {\n  paramKey: string\n  param: ParamType\n}\n\ntype ParamChildItemProps = {\n  path: string\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Button from '@mui/material/Button'\nimport TuneIcon from '@mui/icons-material/Tune'\nimport { updateParam } from 'store/slice/NWB/NWBSlice'\nimport { getNWBParams } from 'store/slice/NWB/NWBAction'\nimport { toggleNwb } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectNwbParam,\n  selectNwbParamsKeyList,\n  selectNwbParamsValue,\n} from 'store/slice/NWB/NWBSelectors'\nimport { createParamFormItemComponent } from 'components/ParamFormItemCreator'\n\nexport const NWBSettingButton = React.memo(() => {\n  const dispatch = useDispatch()\n  const handleClick = () => {\n    dispatch(toggleNwb())\n  }\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={handleClick}\n      sx={{\n        margin: (theme) => theme.spacing(1),\n      }}\n      endIcon={<TuneIcon />}\n    >\n      NWB setting\n    </Button>\n  )\n})\n\nexport const NWBSettingContents = React.memo(() => {\n  const dispatch = useDispatch()\n\n  const paramKeyList = useSelector(selectNwbParamsKeyList, arrayEqualityFn)\n  useEffect(() => {\n    if (paramKeyList.length === 0) {\n      dispatch(getNWBParams())\n    }\n  })\n\n  return (\n    <div className=\"nwbParam\" style={{ margin: 4 }}>\n      {paramKeyList.map((paramKey, i) => (\n        <ParamItem key={i} paramKey={paramKey} />\n      ))}\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const Component = createParamFormItemComponent({\n    paramSelector: selectNwbParam,\n    paramValueSelector: selectNwbParamsValue,\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const SNAKEMAKE_SLICE_NAME = 'Snakemake'\n\nexport type SnakemakeType = {\n  params: ParamMap\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { SNAKEMAKE_SLICE_NAME } from './SnakemakeType'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\n\nexport const getSnakemakeParams = createAsyncThunk<ParamDTO, void>(\n  `${SNAKEMAKE_SLICE_NAME}/getSnakemakeParams`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/snakemake`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\nimport { getSnakemakeParams } from './SnakemakeAction'\nimport { SnakemakeType, SNAKEMAKE_SLICE_NAME } from './SnakemakeType'\n\nconst initialState: SnakemakeType = {\n  params: {},\n}\n\nexport const SnakemakeSlice = createSlice({\n  name: SNAKEMAKE_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { path, newValue } = action.payload\n      const target = getChildParam(path, state.params)\n      if (target != null) {\n        target.value = newValue\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getSnakemakeParams.fulfilled, (state, action) => {\n      state.params = convertToParamMap(action.payload)\n    })\n  },\n})\n\nexport const { updateParam } = SnakemakeSlice.actions\n\nexport default SnakemakeSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from '@mui/material/Button'\nimport TuneIcon from '@mui/icons-material/Tune'\n\nimport { updateParam } from 'store/slice/Snakemake/SnakemakeSlice'\nimport { getSnakemakeParams } from 'store/slice/Snakemake/SnakemakeAction'\nimport { toggleSnakemake } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport {\n  selectSnakemakeParam,\n  selectSnakemakeParamsKeyList,\n  selectSnakemakeParamsValue,\n} from 'store/slice/Snakemake/SnakemakeSelectors'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { createParamFormItemComponent } from 'components/ParamFormItemCreator'\n\nexport const SnakemakeButton = React.memo(() => {\n  const dispatch = useDispatch()\n  const handleClick = () => {\n    dispatch(toggleSnakemake())\n  }\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={handleClick}\n      sx={{\n        margin: (theme) => theme.spacing(1),\n      }}\n      endIcon={<TuneIcon />}\n    >\n      Snakemake\n    </Button>\n  )\n})\n\nexport const SnakemakeContents = React.memo(() => {\n  const dispatch = useDispatch()\n  const paramKeyList = useSelector(\n    selectSnakemakeParamsKeyList,\n    arrayEqualityFn,\n  )\n  useEffect(() => {\n    if (paramKeyList.length === 0) {\n      dispatch(getSnakemakeParams())\n    }\n  })\n  return (\n    <div className=\"SnakemakeParam\" style={{ margin: 4 }}>\n      {paramKeyList.map((paramKey, i) => (\n        <ParamItem key={i} paramKey={paramKey} />\n      ))}\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const Component = createParamFormItemComponent({\n    paramSelector: selectSnakemakeParam,\n    paramValueSelector: selectSnakemakeParamsValue,\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import axios from 'axios'\n\nimport { BASE_URL } from 'const/API'\n\nimport type { Edge, Node } from 'react-flow-renderer'\nimport type {\n  AlgorithmNodeData,\n  InputNodeData,\n} from 'store/slice/FlowElement/FlowElementType'\nimport type { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport type { ParamMap } from 'store/utils/param/ParamType'\n\nexport type RunPostData = {\n  name: string\n  nodeList: Node<NodePostDataType>[]\n  edgeList: Edge[]\n  nwbParam: ParamMap\n  snakemakeParam: ParamMap\n  forceRunList: { nodeId: string; name: string }[]\n}\n\nexport type NodePostDataType = AlgorithmNodePostData | InputNodePostData\n\nexport interface InputNodePostData extends InputNodeData {\n  path: string\n  fileType: FILE_TYPE\n  param?: {\n    [key: string]: unknown\n  }\n  hdf5Path?: string\n}\n\nexport interface AlgorithmNodePostData extends AlgorithmNodeData {\n  path: string\n  param: ParamMap\n}\n\nexport async function runApi(data: RunPostData): Promise<string> {\n  const response = await axios.post(`${BASE_URL}/run`, data)\n  return response.data\n}\n\nexport async function runByUidApi(\n  uid: string,\n  data: Omit<RunPostData, 'name'>,\n): Promise<string> {\n  const response = await axios.post(`${BASE_URL}/run/${uid}`, data)\n  return response.data\n}\n\nexport type RunResultDTO = {\n  [nodeId: string]: {\n    status: string\n    message: string\n    name: string\n    outputPaths?: OutputPathsDTO\n  }\n}\n\nexport type OutputPathsDTO = {\n  [outputKey: string]: {\n    path: string\n    type: string\n  }\n}\n\nexport async function runResult(data: {\n  uid: string\n  pendingNodeIdList: string[]\n}): Promise<RunResultDTO> {\n  const { uid, pendingNodeIdList } = data\n  const response = await axios.post(`${BASE_URL}/run/result/${uid}`, {\n    pendingNodeIdList,\n  })\n  return response.data\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\n\nimport { ThunkApiConfig } from 'store/store'\nimport { PIPELINE_SLICE_NAME } from './PipelineType'\nimport {\n  runApi,\n  runByUidApi,\n  runResult,\n  RunResultDTO,\n  RunPostData,\n} from 'api/run/Run'\nimport {\n  selectPipelineLatestUid,\n  selectRunResultPendingNodeIdList,\n} from './PipelineSelectors'\n\nexport const run = createAsyncThunk<\n  string,\n  { runPostData: RunPostData },\n  ThunkApiConfig\n>(`${PIPELINE_SLICE_NAME}/run`, async ({ runPostData }, thunkAPI) => {\n  try {\n    const responseData = await runApi(runPostData)\n    return responseData\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const runByCurrentUid = createAsyncThunk<\n  string,\n  { runPostData: Omit<RunPostData, 'name'> },\n  ThunkApiConfig\n>(\n  `${PIPELINE_SLICE_NAME}/runByCurrentUid`,\n  async ({ runPostData }, thunkAPI) => {\n    const currentUid = selectPipelineLatestUid(thunkAPI.getState())\n    if (currentUid != null) {\n      try {\n        const responseData = await runByUidApi(currentUid, runPostData)\n        return responseData\n      } catch (e) {\n        return thunkAPI.rejectWithValue(e)\n      }\n    } else {\n      return thunkAPI.rejectWithValue('currentUid dose not exist.')\n    }\n  },\n)\n\nexport const pollRunResult = createAsyncThunk<\n  RunResultDTO,\n  {\n    uid: string\n  },\n  ThunkApiConfig\n>(`${PIPELINE_SLICE_NAME}/pollRunResult`, async ({ uid }, thunkAPI) => {\n  const pendingNodeIdList = selectRunResultPendingNodeIdList(\n    thunkAPI.getState(),\n  )\n  try {\n    const responseData = await runResult({ uid, pendingNodeIdList })\n    return responseData\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport { pollRunResult, run, runByCurrentUid } from './PipelineActions'\nimport {\n  Pipeline,\n  PIPELINE_SLICE_NAME,\n  RUN_BTN_OPTIONS,\n  RUN_BTN_TYPE,\n  RUN_STATUS,\n} from './PipelineType'\n\nimport {\n  getInitialRunResult,\n  convertToRunResult,\n  isNodeResultPending,\n} from './PipelineUtils'\n\nconst initialState: Pipeline = {\n  run: {\n    status: RUN_STATUS.START_UNINITIALIZED,\n  },\n  runBtn: RUN_BTN_OPTIONS.RUN_NEW,\n}\n\nexport const pipelineSlice = createSlice({\n  name: PIPELINE_SLICE_NAME,\n  initialState,\n  reducers: {\n    cancelPipeline(state) {\n      state.run.status = RUN_STATUS.CANCELED\n    },\n    setRunBtnOption: (\n      state,\n      action: PayloadAction<{\n        runBtnOption: RUN_BTN_TYPE\n      }>,\n    ) => {\n      state.runBtn = action.payload.runBtnOption\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(pollRunResult.fulfilled, (state, action) => {\n        if (state.run.status === RUN_STATUS.START_SUCCESS) {\n          state.run.runResult = {\n            ...state.run.runResult, // pendingのNodeResultはそのままでsuccessもしくはerrorのみ上書き\n            ...convertToRunResult(action.payload),\n          }\n          const runResultPendingList = Object.values(\n            state.run.runResult,\n          ).filter(isNodeResultPending)\n          if (runResultPendingList.length === 0) {\n            // 終了\n            state.run.status = RUN_STATUS.FINISHED\n          }\n        }\n      })\n      .addCase(pollRunResult.rejected, (state, action) => {\n        state.run.status = RUN_STATUS.ABORTED\n      })\n      .addCase(importExperimentByUid.fulfilled, (state, action) => {\n        state.currentPipeline = {\n          uid: action.meta.arg,\n        }\n        state.run = {\n          status: RUN_STATUS.START_UNINITIALIZED,\n        }\n      })\n      .addMatcher(\n        isAnyOf(run.pending, runByCurrentUid.pending),\n        (state, action) => {\n          state.run = {\n            status: RUN_STATUS.START_PENDING,\n          }\n        },\n      )\n      .addMatcher(\n        isAnyOf(run.fulfilled, runByCurrentUid.fulfilled),\n        (state, action) => {\n          const runPostData = action.meta.arg.runPostData\n          const uid = action.payload\n          state.run = {\n            uid,\n            status: RUN_STATUS.START_SUCCESS,\n            runResult: getInitialRunResult({ name: '', ...runPostData }),\n            runPostData: { name: '', ...runPostData },\n          }\n          state.currentPipeline = {\n            uid: action.payload,\n          }\n        },\n      )\n      .addMatcher(\n        isAnyOf(run.rejected, runByCurrentUid.rejected),\n        (state, action) => {\n          state.run = {\n            status: RUN_STATUS.START_ERROR,\n          }\n        },\n      )\n  },\n})\n\nexport const { cancelPipeline, setRunBtnOption } = pipelineSlice.actions\n\nexport default pipelineSlice.reducer\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Button from '@mui/material/Button'\nimport ButtonGroup from '@mui/material/ButtonGroup'\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown'\nimport CloseIcon from '@mui/icons-material/Close'\nimport ClickAwayListener from '@mui/material/ClickAwayListener'\nimport Grow from '@mui/material/Grow'\nimport Paper from '@mui/material/Paper'\nimport Popper from '@mui/material/Popper'\nimport MenuItem from '@mui/material/MenuItem'\nimport MenuList from '@mui/material/MenuList'\nimport TextField from '@mui/material/TextField'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\n\nimport { useSnackbar } from 'notistack'\n\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport {\n  RUN_BTN_LABELS,\n  RUN_BTN_OPTIONS,\n  RUN_BTN_TYPE,\n} from 'store/slice/Pipeline/PipelineType'\nimport { selectPipelineRunBtn } from 'store/slice/Pipeline/PipelineSelectors'\nimport { setRunBtnOption } from 'store/slice/Pipeline/PipelineSlice'\n\nexport const RunButtons = React.memo<UseRunPipelineReturnType>((props) => {\n  const {\n    uid,\n    isStartedSuccess,\n    filePathIsUndefined,\n    handleCancelPipeline,\n    handleRunPipeline,\n    handleRunPipelineByUid,\n  } = props\n\n  const dispatch = useDispatch()\n\n  const runBtnOption = useSelector(selectPipelineRunBtn)\n\n  const [dialogOpen, setDialogOpen] = React.useState(false)\n  const { enqueueSnackbar } = useSnackbar()\n  const handleClick = () => {\n    if (!filePathIsUndefined) {\n      if (runBtnOption === RUN_BTN_OPTIONS.RUN_NEW) {\n        setDialogOpen(true)\n      } else {\n        handleRunPipelineByUid()\n      }\n    } else {\n      enqueueSnackbar('please select input file', { variant: 'error' })\n    }\n  }\n  const onClickDialogRun = (name: string) => {\n    handleRunPipeline(name)\n    setDialogOpen(false)\n  }\n  const onClickCancel = () => {\n    handleCancelPipeline()\n  }\n  const [menuOpen, setMenuOpen] = React.useState(false)\n  const anchorRef = React.useRef<HTMLDivElement>(null)\n\n  const handleMenuItemClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    option: RUN_BTN_TYPE,\n  ) => {\n    dispatch(setRunBtnOption({ runBtnOption: option }))\n    setMenuOpen(false)\n  }\n  const handleToggle = () => {\n    setMenuOpen((prevOpen) => !prevOpen)\n  }\n  const handleClose = (event: Event) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return\n    }\n    setMenuOpen(false)\n  }\n  const uidExists = uid != null\n  return (\n    <>\n      <ButtonGroup\n        sx={{\n          margin: 1,\n        }}\n        variant=\"contained\"\n        ref={anchorRef}\n        disabled={isStartedSuccess}\n      >\n        <Button onClick={handleClick}>{RUN_BTN_LABELS[runBtnOption]}</Button>\n        <Button size=\"small\" onClick={handleToggle}>\n          <ArrowDropDownIcon />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        open={menuOpen}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList>\n                  {Object.values(RUN_BTN_OPTIONS).map((option) => (\n                    <MenuItem\n                      key={option}\n                      disabled={\n                        !uidExists && option === RUN_BTN_OPTIONS.RUN_ALREADY\n                      }\n                      selected={option === runBtnOption}\n                      onClick={(event) => handleMenuItemClick(event, option)}\n                    >\n                      {RUN_BTN_LABELS[option]}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n      <Button\n        variant=\"outlined\"\n        endIcon={<CloseIcon />}\n        onClick={onClickCancel}\n        sx={{\n          margin: 1,\n          marginRight: 4,\n        }}\n      >\n        Cancel\n      </Button>\n      <RunDialog\n        open={dialogOpen}\n        handleRun={onClickDialogRun}\n        handleClose={() => setDialogOpen(false)}\n      />\n    </>\n  )\n})\n\nconst RunDialog = React.memo<{\n  open: boolean\n  handleRun: (name: string) => void\n  handleClose: () => void\n}>(({ open, handleClose, handleRun }) => {\n  const [name, setName] = React.useState('New flow')\n  const [error, setError] = React.useState<string | null>(null)\n  const onClickRun = () => {\n    if (name !== '') {\n      handleRun(name)\n    } else {\n      setError('name is empty')\n    }\n  }\n  const onChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value)\n    if (event.target.value !== '') {\n      setError(null)\n    }\n  }\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <DialogTitle>Name and run flowchart</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"name\"\n          autoFocus\n          margin=\"dense\"\n          fullWidth\n          variant=\"standard\"\n          onChange={onChangeName}\n          error={error != null}\n          helperText={error}\n          value={name}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"inherit\" variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button onClick={onClickRun} color=\"primary\" variant=\"outlined\">\n          Run\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n","import React from 'react'\nimport Box from '@mui/material/Box'\n\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport { NWBSettingButton } from './FlowChart/NWB'\nimport { SnakemakeButton } from './FlowChart/Snakemake'\nimport { RunButtons } from './RunButtons'\n\nexport const ToolBar = React.memo<UseRunPipelineReturnType>((props) => (\n  <Box\n    style={{\n      position: 'absolute',\n      float: 'right',\n      textAlign: 'right',\n      top: -7,\n      right: 10,\n      zIndex: 4,\n      textTransform: 'none',\n    }}\n  >\n    <SnakemakeButton />\n    <NWBSettingButton />\n    <RunButtons {...props} />\n  </Box>\n))\n","import React, { DragEvent, MouseEvent } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  Controls,\n  Elements,\n  Connection,\n  Edge,\n  Node,\n  FlowTransform,\n} from 'react-flow-renderer'\n\nimport 'style/flow.css'\nimport {\n  deleteFlowElements,\n  editFlowElementPositionById,\n  setFlowElements,\n  setFlowPosition,\n} from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectFlowElements,\n  selectFlowPosition,\n} from 'store/slice/FlowElement/FlowElementSelectors'\nimport { ImageFileNode } from './FlowChartNode/ImageFileNode'\nimport { AlgorithmNode } from './FlowChartNode/AlgorithmNode'\nimport { CsvFileNode } from './FlowChartNode/CsvFileNode'\nimport { HDF5FileNode } from './FlowChartNode/HDF5FileNode'\nimport { CustomEdge } from './CustomEdge'\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport { ToolBar } from 'components/ToolBar'\n\nconst componentTypes = {\n  ImageFileNode,\n  CsvFileNode,\n  HDF5FileNode,\n  AlgorithmNode,\n} as const\n\nconst edgeTypes = {\n  buttonedge: CustomEdge,\n} as const\n\nexport const ReactFlowComponent = React.memo<UseRunPipelineReturnType>(\n  (props) => {\n    const flowElements = useSelector(selectFlowElements)\n    const dispatch = useDispatch()\n\n    const onConnect = (params: Connection | Edge) => {\n      dispatch(\n        setFlowElements(\n          addEdge(\n            {\n              ...params,\n              animated: false,\n              style: { width: 5 },\n              type: 'buttonedge',\n            },\n            flowElements,\n          ),\n        ),\n      )\n    }\n\n    const onElementsRemove = (elementsToRemove: Elements) => {\n      dispatch(deleteFlowElements(elementsToRemove))\n    }\n\n    const onDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n    }\n\n    const onNodeDragStop = (event: MouseEvent, node: Node) => {\n      dispatch(\n        editFlowElementPositionById({\n          nodeId: node.id,\n          coord: { x: node.position.x, y: node.position.y },\n        }),\n      )\n    }\n\n    const flowPosition = useSelector(selectFlowPosition)\n\n    const onMoveEnd = (event: FlowTransform | undefined) => {\n      if (event !== undefined) {\n        dispatch(setFlowPosition(event))\n      }\n    }\n\n    return (\n      <div className=\"flow\">\n        <ReactFlowProvider>\n          <div className=\"reactflow-wrapper\">\n            <ReactFlow\n              elements={flowElements}\n              onElementsRemove={onElementsRemove}\n              onConnect={onConnect}\n              onDragOver={onDragOver}\n              onNodeDragStop={onNodeDragStop}\n              nodeTypes={componentTypes}\n              edgeTypes={edgeTypes}\n              defaultPosition={[flowPosition.x, flowPosition.y]}\n              defaultZoom={flowPosition.zoom}\n              onMoveEnd={onMoveEnd}\n            >\n              <ToolBar {...props} />\n              <Controls />\n            </ReactFlow>\n          </div>\n        </ReactFlowProvider>\n      </div>\n    )\n  },\n)\n","import { RootState } from 'store/store'\n\nexport const selectRightDrawerIsOpen = (state: RootState) =>\n  state.rightDrawer.open\n\nexport const selectRightDrawerMode = (state: RootState) =>\n  state.rightDrawer.mode\n\nexport const selectRightDrawerCurrentNodeId = (state: RootState) =>\n  state.rightDrawer.currendNodeId\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const ALGORITHM_NODE_SLICE_NAME = 'algorithmNode'\n\nexport type AlgorithmNode = {\n  [nodeId: string]: AlgrithmNodeType\n}\n\ntype AlgrithmNodeType = {\n  functionPath: string\n  name: string\n  params: ParamMap | null\n  isUpdated: boolean\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\nimport { ALGORITHM_NODE_SLICE_NAME } from './AlgorithmNodeType'\n\nexport const getAlgoParams = createAsyncThunk<\n  ParamDTO,\n  { nodeId: string; algoName: string }\n>(\n  `${ALGORITHM_NODE_SLICE_NAME}/getAlgoParams`,\n  async ({ algoName }, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/params/${algoName}`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit'\n\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\nimport {\n  addFlowElementNode,\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\nimport { isNodeData } from '../FlowElement/FlowElementUtils'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport { getAlgoParams } from './AlgorithmNodeActions'\nimport { ALGORITHM_NODE_SLICE_NAME, AlgorithmNode } from './AlgorithmNodeType'\nimport { isAlgorithmNodePostData } from 'api/run/RunUtils'\nimport { run, runByCurrentUid } from '../Pipeline/PipelineActions'\n\nconst initialState: AlgorithmNode = {}\n\nexport const algorithmNodeSlice = createSlice({\n  name: ALGORITHM_NODE_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        // paramKey: string\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { nodeId, path, newValue } = action.payload\n      const param = state[nodeId].params\n      if (param != null) {\n        const target = getChildParam(path, param)\n        if (target != null) {\n          target.value = newValue\n          state[nodeId].isUpdated = true\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getAlgoParams.fulfilled, (state, action) => {\n        const { nodeId } = action.meta.arg\n        state[nodeId].params = convertToParamMap(action.payload)\n      })\n      .addCase(addFlowElementNode, (state, action) => {\n        const { node, algoNodeInfo } = action.payload\n        if (\n          node.data?.type === NODE_TYPE_SET.ALGORITHM &&\n          algoNodeInfo != null\n        ) {\n          state[node.id] = {\n            ...algoNodeInfo,\n            params: null,\n            isUpdated: false,\n          }\n        }\n      })\n      .addCase(deleteFlowElements, (state, action) => {\n        action.payload\n          .filter((node) => isNodeData(node))\n          .forEach((node) => {\n            if (node.data?.type === NODE_TYPE_SET.ALGORITHM) {\n              delete state[node.id]\n            }\n          })\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (Object.keys(state).includes(action.payload)) {\n          delete state[action.payload]\n        }\n      })\n      .addCase(importExperimentByUid.fulfilled, (_, action) => {\n        const newState: AlgorithmNode = {}\n        action.payload.nodeList\n          .filter(isAlgorithmNodePostData)\n          .forEach((node) => {\n            if (node.data != null) {\n              newState[node.id] = {\n                name: node.data.label,\n                functionPath: node.data.path,\n                params: node.data.param,\n                isUpdated: false,\n              }\n            }\n          })\n        return newState\n      })\n      .addMatcher(\n        isAnyOf(run.fulfilled, runByCurrentUid.fulfilled),\n        (state, action) => {\n          const runPostData = action.meta.arg.runPostData\n          runPostData.nodeList\n            .filter(isAlgorithmNodePostData)\n            .forEach((node) => {\n              state[node.id].isUpdated = false\n            })\n        },\n      )\n  },\n})\n\nexport const { updateParam } = algorithmNodeSlice.actions\nexport default algorithmNodeSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@mui/material/Typography'\n\nimport {\n  selectAlgorithmName,\n  selectAlgorithmParamsExit,\n  selectAlgorithmParamsKeyList,\n  selectAlgorithmParamsValue,\n  selectAlgorithmParam,\n} from 'store/slice/AlgorithmNode/AlgorithmNodeSelectors'\nimport { updateParam } from 'store/slice/AlgorithmNode/AlgorithmNodeSlice'\nimport { getAlgoParams } from 'store/slice/AlgorithmNode/AlgorithmNodeActions'\n\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { createParamFormItemComponent } from '../ParamFormItemCreator'\nimport { ParamFormContext } from './RightDrawer'\n\nexport const AlgorithmParamForm = React.memo(() => {\n  const nodeId = React.useContext(ParamFormContext)\n  const dispatch = useDispatch()\n  const algoName = useSelector(selectAlgorithmName(nodeId))\n  const algoParamIsLoaded = useSelector(selectAlgorithmParamsExit(nodeId))\n  const paramKeyList = useSelector(\n    selectAlgorithmParamsKeyList(nodeId),\n    arrayEqualityFn,\n  )\n  useEffect(() => {\n    if (!algoParamIsLoaded) {\n      dispatch(getAlgoParams({ nodeId, algoName }))\n    }\n  }, [dispatch, nodeId, algoName, algoParamIsLoaded])\n  return (\n    <div style={{ padding: 8 }}>\n      <Typography variant=\"h5\">{algoName}</Typography>\n      <div style={{ paddingLeft: 8 }}>\n        {paramKeyList.map((paramKey) => (\n          <ParamItem key={paramKey} paramKey={paramKey} />\n        ))}\n      </div>\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const nodeId = React.useContext(ParamFormContext)\n  const Component = createParamFormItemComponent({\n    paramSelector: (paramKey) => selectAlgorithmParam(nodeId, paramKey),\n    paramValueSelector: (path) => selectAlgorithmParamsValue(nodeId, path),\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ nodeId, path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport Toolbar from '@mui/material/Toolbar'\nimport Typography from '@mui/material/Typography'\nimport Divider from '@mui/material/Divider'\nimport IconButton from '@mui/material/IconButton'\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight'\nimport Box from '@mui/material/Box'\nimport {\n  selectRightDrawerCurrentNodeId,\n  selectRightDrawerIsOpen,\n  selectRightDrawerMode,\n} from 'store/slice/RightDrawer/RightDrawerSelectors'\nimport {\n  closeRightDrawer,\n  RIGHT_DRAWER_MODE,\n} from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { NWBSettingContents } from './NWB'\nimport { RootState } from 'store/store'\nimport { AlgorithmParamForm } from './AlgorithmParamForm'\nimport { SnakemakeContents } from './Snakemake'\n\nconst RightDrawer: React.FC = () => {\n  const open = useSelector(selectRightDrawerIsOpen)\n  const dispatch = useDispatch()\n  const onClick = () => dispatch(closeRightDrawer())\n  const title = useSelector((state: RootState) => {\n    const mode = selectRightDrawerMode(state)\n    switch (mode) {\n      case RIGHT_DRAWER_MODE.NWB:\n        return 'NWB Setting'\n      case RIGHT_DRAWER_MODE.PARAM_FORM:\n        return 'Param From'\n      case RIGHT_DRAWER_MODE.SNAKEMAKE:\n        return 'Snakemake'\n      default:\n        return 'none'\n    }\n  })\n  return (\n    <StyledDrawer open={open} anchor=\"right\" variant=\"persistent\">\n      <Toolbar />\n      <Box display=\"flex\" alignItems=\"center\">\n        <IconButton color=\"inherit\" onClick={onClick} size=\"large\">\n          <ChevronRightIcon />\n        </IconButton>\n        <Typography variant=\"h6\">{title}</Typography>\n      </Box>\n      <Divider />\n      <MainContents>\n        <Contents />\n      </MainContents>\n    </StyledDrawer>\n  )\n}\n\nconst Contents: React.FC = () => {\n  const mode = useSelector(selectRightDrawerMode)\n  switch (mode) {\n    case RIGHT_DRAWER_MODE.NWB:\n      return <NWBSettingContents />\n    case RIGHT_DRAWER_MODE.PARAM_FORM:\n      return <ParamFormConetent />\n    case RIGHT_DRAWER_MODE.SNAKEMAKE:\n      return <SnakemakeContents />\n    default:\n      return null\n  }\n}\n\n/**\n * nodeId\n */\nexport const ParamFormContext = React.createContext<string>('')\n\nconst ParamFormConetent: React.FC = () => {\n  const nodeId = useSelector(selectRightDrawerCurrentNodeId)\n  if (nodeId != null) {\n    return (\n      <ParamFormContext.Provider value={nodeId}>\n        <AlgorithmParamForm />\n      </ParamFormContext.Provider>\n    )\n  } else {\n    return null\n  }\n}\n\nexport const rightDrawerWidth = 320\n\nconst StyledDrawer = styled(Drawer)({\n  width: rightDrawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: rightDrawerWidth,\n  },\n})\n\nconst MainContents = styled('main')({\n  height: '100%',\n})\n\nexport default RightDrawer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport { AlgorithmTreeView } from './TreeView'\nimport { ReactFlowComponent } from './ReactFlowComponent'\nimport RightDrawer, { rightDrawerWidth } from './RightDrawer'\nimport { selectRightDrawerIsOpen } from 'store/slice/RightDrawer/RightDrawerSelectors'\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\n\nconst FlowChart = React.memo<UseRunPipelineReturnType>((props) => {\n  const open = useSelector(selectRightDrawerIsOpen)\n  return (\n    <RootDiv>\n      <StyledDrawer variant=\"permanent\">\n        <MuiToolbar />\n        <DrawerContents>\n          <AlgorithmTreeView />\n        </DrawerContents>\n      </StyledDrawer>\n\n      <MainContents open={open}>\n        <MuiToolbar />\n        <ReactFlowComponent {...props} />\n      </MainContents>\n      <RightDrawer />\n    </RootDiv>\n  )\n})\n\nexport const drawerWidth = 240\n\nconst RootDiv = styled('div')({\n  display: 'flex',\n})\n\nconst StyledDrawer = styled(Drawer)({\n  width: drawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: drawerWidth,\n  },\n})\n\nconst DrawerContents = styled('div')({\n  overflow: 'auto',\n})\n\nconst MainContents = styled('main')<{ open: boolean }>(\n  ({ theme }) => ({\n    flexDirection: 'column',\n    flexGrow: 1,\n    height: '90vh',\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginRight: -rightDrawerWidth,\n  }),\n  ({ open, theme }) =>\n    open\n      ? {\n          transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n          }),\n          marginRight: 0,\n        }\n      : undefined,\n)\n\nexport default FlowChart\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { DATA_TYPE, DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\n\nimport {\n  MultiPlotItem,\n  HeatMapItem,\n  ImageItem,\n  CsvItem,\n  TimeSeriesItem,\n  RoiItem,\n  ScatterItem,\n  VisualaizeItem,\n  VISUALIZE_ITEM_TYPE_SET,\n  BarItem,\n  HDF5Item,\n  HTMLItem,\n} from './VisualizeItemType'\nimport {\n  isMultiPlotItem,\n  isDisplayDataItem,\n  isHeatMapItem,\n  isImageItem,\n  isTimeSeriesItem,\n  isCsvItem,\n  isScatterItem,\n} from './VisualizeItemUtils'\n\nexport const initialState: VisualaizeItem = {\n  items: {},\n  selectedItemId: null,\n}\nconst displayDataCommonInitialValue = {\n  itemType: VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA,\n  filePath: null,\n  nodeId: null,\n}\nconst imageItemInitialValue: ImageItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.IMAGE,\n  startIndex: 1,\n  endIndex: 10,\n  showticklabels: false,\n  showline: true,\n  zsmooth: 'best',\n  showgrid: false,\n  showscale: false,\n  colors: [\n    { rgb: `rgb(0, 0, 0)`, offset: '0' },\n    { rgb: `rgb(255, 255, 255)`, offset: '1.0' },\n  ],\n  activeIndex: 0,\n  roiItem: null,\n}\nconst timeSeriesItemInitialValue: TimeSeriesItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.TIME_SERIES,\n  offset: false,\n  span: 3,\n  showgrid: true,\n  showline: true,\n  showticklabels: true,\n  zeroline: false,\n  xrange: {\n    left: undefined,\n    right: undefined,\n  },\n  maxIndex: 0,\n  displayNumbers: [0],\n  checkedList: [],\n}\nconst heatMapItemInitialValue: HeatMapItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HEAT_MAP,\n  showscale: true,\n  colors: [\n    { rgb: `rgb(0, 0, 255)`, offset: '0' },\n    { rgb: `rgb(200, 200, 200)`, offset: '0.5' },\n    { rgb: `rgb(255, 0, 0)`, offset: '1.0' },\n  ],\n}\nconst csvItemInitialValue: CsvItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.CSV,\n  setColumn: null,\n  setIndex: false,\n  transpose: false,\n}\nconst roiItemInitialValue: RoiItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.ROI,\n}\nconst scatterItemInitialValue: ScatterItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.SCATTER,\n  xIndex: 0,\n  yIndex: 1,\n}\nconst barItemInitialValue: BarItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.BAR,\n}\nconst hdf5ItemInitialValue: HDF5Item = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HDF5,\n}\nconst htmlItemInitialValue: HTMLItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HTML,\n}\n\nfunction getDisplayDataItemInitialValue(dataType: DATA_TYPE) {\n  switch (dataType) {\n    case DATA_TYPE_SET.IMAGE:\n      return imageItemInitialValue\n    case DATA_TYPE_SET.HEAT_MAP:\n      return heatMapItemInitialValue\n    case DATA_TYPE_SET.TIME_SERIES:\n      return timeSeriesItemInitialValue\n    case DATA_TYPE_SET.CSV:\n      return csvItemInitialValue\n    case DATA_TYPE_SET.ROI:\n      return roiItemInitialValue\n    case DATA_TYPE_SET.SCATTER:\n      return scatterItemInitialValue\n    case DATA_TYPE_SET.BAR:\n      return barItemInitialValue\n    case DATA_TYPE_SET.HDF5:\n      return hdf5ItemInitialValue\n    case DATA_TYPE_SET.HTML:\n      return htmlItemInitialValue\n  }\n}\n\nconst MultiPlotItemInitialValue: MultiPlotItem = {\n  itemType: VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT,\n  imageItem: imageItemInitialValue,\n  timeSeriesItem: timeSeriesItemInitialValue,\n  heatMapItem: heatMapItemInitialValue,\n}\nexport const visualaizeItemSlice = createSlice({\n  name: 'visualaizeItem',\n  initialState,\n  reducers: {\n    deleteVisualizeItem: (state, action: PayloadAction<number>) => {\n      const itemId = action.payload\n      delete state.items[itemId]\n      if (itemId === state.selectedItemId) {\n        state.selectedItemId = null\n      }\n    },\n    addInitialItem: (state) => {\n      const nextId = getMaxItemId(state) + 1\n      state.items[nextId] = getDisplayDataItemInitialValue(DATA_TYPE_SET.IMAGE)\n      state.selectedItemId = nextId\n    },\n    selectItem: (state, action: PayloadAction<number>) => {\n      state.selectedItemId = action.payload\n    },\n    setRoiItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (targetItem.imageItem.roiItem != null) {\n          targetItem.imageItem.roiItem.filePath = filePath\n          targetItem.imageItem.roiItem.nodeId = nodeId\n        } else {\n          targetItem.imageItem.roiItem = {\n            ...roiItemInitialValue,\n            filePath,\n            nodeId,\n          }\n        }\n      } else if (isImageItem(targetItem)) {\n        if (targetItem.roiItem != null) {\n          targetItem.roiItem.filePath = filePath\n          targetItem.roiItem.nodeId = nodeId\n        } else {\n          targetItem.roiItem = {\n            ...roiItemInitialValue,\n            filePath,\n            nodeId,\n          }\n        }\n      }\n    },\n    setFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n        dataType?: string\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId, dataType } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (dataType === DATA_TYPE_SET.IMAGE) {\n          targetItem.imageItem.filePath = filePath\n          targetItem.imageItem.nodeId = nodeId\n        } else if (dataType === DATA_TYPE_SET.TIME_SERIES) {\n          targetItem.timeSeriesItem.filePath = filePath\n          targetItem.timeSeriesItem.nodeId = nodeId\n        } else if (dataType === DATA_TYPE_SET.HEAT_MAP) {\n          targetItem.heatMapItem.filePath = filePath\n          targetItem.heatMapItem.nodeId = nodeId\n        }\n      } else if (isDisplayDataItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      } else {\n        throw new Error('error')\n      }\n    },\n    setImageItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.filePath = filePath\n        targetItem.imageItem.nodeId = nodeId\n      } else if (isImageItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setTimeSeriesItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.filePath = filePath\n        targetItem.timeSeriesItem.nodeId = nodeId\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setHeatMapItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.filePath = filePath\n        targetItem.heatMapItem.nodeId = nodeId\n      } else if (isHeatMapItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setDisplayDataPath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n        dataType?: DATA_TYPE\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId, dataType } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (dataType != null && targetItem.imageItem.dataType !== dataType) {\n          state.items[itemId] = {\n            ...getDisplayDataItemInitialValue(dataType),\n            filePath,\n            nodeId,\n          }\n        } else {\n          targetItem.imageItem.filePath = filePath\n          targetItem.imageItem.nodeId = nodeId\n        }\n      } else if (isDisplayDataItem(targetItem)) {\n        if (dataType != null && targetItem.dataType !== dataType) {\n          state.items[itemId] = {\n            ...getDisplayDataItemInitialValue(dataType),\n            filePath,\n            nodeId,\n          }\n        } else {\n          targetItem.filePath = filePath\n          targetItem.nodeId = nodeId\n        }\n      } else {\n        throw new Error('invalid VisualaizeItemType')\n      }\n    },\n    setItemType: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        type: typeof VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT | DATA_TYPE\n      }>,\n    ) => {\n      const { itemId, type } = action.payload\n      if (type === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT) {\n        state.items[itemId] = MultiPlotItemInitialValue\n      } else {\n        state.items[itemId] = getDisplayDataItemInitialValue(type)\n      }\n    },\n    toggleItemTypeMultiPlot: (state, action: PayloadAction<number>) => {\n      const itemId = action.payload\n      if (state.items[itemId].itemType === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT) {\n        state.items[itemId] = {\n          ...getDisplayDataItemInitialValue(DATA_TYPE_SET.IMAGE), // FIXME dataTypeの型をNullableに変更して影響箇所も修正する\n        }\n      } else {\n        state.items[itemId] = MultiPlotItemInitialValue\n      }\n    },\n    resetImageActiveIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        startIndex?: number\n        endIndex?: number\n      }>,\n    ) => {\n      const { itemId, startIndex, endIndex } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex = 0\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex = 0\n        if (startIndex != null) {\n          targetItem.imageItem.startIndex = startIndex\n        }\n        if (endIndex != null) {\n          targetItem.imageItem.endIndex = endIndex\n        }\n      }\n    },\n    incrementImageActiveIndex: (\n      state,\n      action: PayloadAction<{ itemId: number }>,\n    ) => {\n      const { itemId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex++\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex++\n      }\n    },\n    decrementImageActiveIndex: (\n      state,\n      action: PayloadAction<{ itemId: number }>,\n    ) => {\n      const { itemId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex--\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex--\n      }\n    },\n    setImageItemShowticklabels: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showticklabels: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showticklabels = action.payload.showticklabels\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showticklabels = action.payload.showticklabels\n      }\n    },\n    setImageItemZsmooth: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        zsmooth: string | boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.zsmooth = action.payload.zsmooth\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.zsmooth = action.payload.zsmooth\n      }\n    },\n    setImageItemShowLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showline = action.payload.showline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showline = action.payload.showline\n      }\n    },\n    setImageItemShowGrid: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showgrid: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showgrid = action.payload.showgrid\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showgrid = action.payload.showgrid\n      }\n    },\n    setImageItemShowScale: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showscale: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showscale = action.payload.showscale\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showscale = action.payload.showscale\n      }\n    },\n    setImageItemColors: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        colors: {\n          rgb: string\n          offset: string\n        }[]\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.colors = action.payload.colors\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.colors = action.payload.colors\n      }\n    },\n    setImageItemStartIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        startIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.startIndex = action.payload.startIndex\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.startIndex = action.payload.startIndex\n      }\n    },\n    setImageItemEndIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        endIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.endIndex = action.payload.endIndex\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.endIndex = action.payload.endIndex\n      }\n    },\n    setTimeSeriesItemOffset: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        offset: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.offset = action.payload.offset\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.offset = action.payload.offset\n      }\n    },\n    setTimeSeriesItemSpan: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        span: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.span = action.payload.span\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.span = action.payload.span\n      }\n    },\n    setTimeSeriesItemShowGrid: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showgrid: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showgrid = action.payload.showgrid\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showgrid = action.payload.showgrid\n      }\n    },\n    setTimeSeriesItemShowLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showline = action.payload.showline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showline = action.payload.showline\n      }\n    },\n    setTimeSeriesItemShowTickLabels: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showticklabels: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showticklabels = action.payload.showticklabels\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showticklabels = action.payload.showticklabels\n      }\n    },\n    setTimeSeriesItemZeroLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        zeroline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.zeroline = action.payload.zeroline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.zeroline = action.payload.zeroline\n      }\n    },\n    setTimeSeriesItemXrangeLeft: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        left: number | undefined\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.xrange.left = action.payload.left\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.xrange.left = action.payload.left\n      }\n    },\n    setTimeSeriesItemXrangeRight: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        right: number | undefined\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.xrange.right = action.payload.right\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.xrange.right = action.payload.right\n      }\n    },\n    setTimeSeriesItemDisplayNumbers: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        displayNumbers: number[]\n      }>,\n    ) => {\n      const { itemId, displayNumbers } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.displayNumbers = displayNumbers\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.displayNumbers = displayNumbers\n      }\n    },\n    setTimeSeriesItemCheckedList: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        checkedList: boolean[]\n      }>,\n    ) => {\n      const { itemId, checkedList } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.checkedList = checkedList\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.checkedList = checkedList\n      }\n    },\n    setTimeSeriesItemMaxIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        maxIndex: number\n      }>,\n    ) => {\n      const { itemId, maxIndex } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.maxIndex = maxIndex\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.maxIndex = maxIndex\n      }\n    },\n    setHeatMapItemShowScale: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showscale: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isHeatMapItem(targetItem)) {\n        targetItem.showscale = action.payload.showscale\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.showscale = action.payload.showscale\n      }\n    },\n    setHeatMapItemColors: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        colors: {\n          rgb: string\n          offset: string\n        }[]\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isHeatMapItem(targetItem)) {\n        targetItem.colors = action.payload.colors\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.colors = action.payload.colors\n      }\n    },\n    setCsvItemTranspose: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        transpose: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.transpose = action.payload.transpose\n      }\n    },\n    setCsvItemSetColumn: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        setColumn: number | null\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.setColumn = action.payload.setColumn\n      }\n    },\n    setCsvItemSetIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        setIndex: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.setIndex = action.payload.setIndex\n      }\n    },\n    setScatterItemXIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        xIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isScatterItem(targetItem)) {\n        targetItem.xIndex = action.payload.xIndex\n      }\n    },\n    setScatterItemYIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        yIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isScatterItem(targetItem)) {\n        targetItem.yIndex = action.payload.yIndex\n      }\n    },\n  },\n})\n\nfunction getMaxItemId(state: VisualaizeItem) {\n  const idList = Object.keys(state.items).map((key) => Number(key))\n  const maxId = idList.length > 0 ? idList.reduce((a, b) => Math.max(a, b)) : 0\n  return maxId\n}\n\nexport const {\n  addInitialItem,\n  deleteVisualizeItem,\n  selectItem,\n  setItemType,\n  toggleItemTypeMultiPlot,\n  setFilePath,\n  setHeatMapItemFilePath,\n  setImageItemFilePath,\n  setTimeSeriesItemFilePath,\n  setRoiItemFilePath,\n  setDisplayDataPath,\n  resetImageActiveIndex,\n  incrementImageActiveIndex,\n  decrementImageActiveIndex,\n  setImageItemShowticklabels,\n  setImageItemZsmooth,\n  setImageItemShowLine,\n  setImageItemShowGrid,\n  setImageItemShowScale,\n  setImageItemColors,\n  setImageItemStartIndex,\n  setImageItemEndIndex,\n  setTimeSeriesItemOffset,\n  setTimeSeriesItemSpan,\n  setTimeSeriesItemShowGrid,\n  setTimeSeriesItemShowLine,\n  setTimeSeriesItemShowTickLabels,\n  setTimeSeriesItemZeroLine,\n  setTimeSeriesItemXrangeLeft,\n  setTimeSeriesItemXrangeRight,\n  setTimeSeriesItemDisplayNumbers,\n  setTimeSeriesItemCheckedList,\n  setTimeSeriesItemMaxIndex,\n  setHeatMapItemShowScale,\n  setHeatMapItemColors,\n  setCsvItemTranspose,\n  setCsvItemSetColumn,\n  setCsvItemSetIndex,\n  setScatterItemXIndex,\n  setScatterItemYIndex,\n} = visualaizeItemSlice.actions\n\nexport default visualaizeItemSlice.reducer\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport AddIcon from '@mui/icons-material/Add'\nimport Button from '@mui/material/Button'\nimport { addInitialItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const VisualizeItemAddButton: React.FC = () => {\n  const dispatch = useDispatch()\n  const onClick = () => {\n    dispatch(addInitialItem())\n  }\n  return (\n    <StyledPaper elevation={1} variant=\"outlined\">\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"100%\"\n      >\n        <StyledButton onClick={onClick}>\n          <AddIcon fontSize=\"large\" color=\"primary\" />\n        </StyledButton>\n      </Box>\n    </StyledPaper>\n  )\n}\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  width: 260,\n  height: 255,\n  border: 'dashed',\n  borderWidth: 2,\n  borderColor: theme.palette.divider,\n  margin: theme.spacing(1),\n}))\n\nconst StyledButton = styled(Button)({\n  width: '100%',\n  height: '100%',\n})\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n  DisplayData,\n  DISPLAY_DATA_SLICE_NAME,\n} from './DisplayDataType'\nimport {\n  getCsvData,\n  getHeatMapData,\n  getImageData,\n  getTimeSeriesDataById,\n  getTimeSeriesAllData,\n  getRoiData,\n  getScatterData,\n  getBarData,\n  getHTMLData,\n} from './DisplayDataActions'\n\nconst initialState: DisplayData = {\n  timeSeries: {},\n  heatMap: {},\n  image: {},\n  csv: {},\n  roi: {},\n  scatter: {},\n  bar: {},\n  hdf5: {},\n  html: {},\n}\n\nexport const displayDataSlice = createSlice({\n  name: DISPLAY_DATA_SLICE_NAME,\n  initialState,\n  reducers: {\n    deleteDisplayItem: (\n      state,\n      action: PayloadAction<{\n        dataType: DATA_TYPE\n        filePath: string | null\n      }>,\n    ) => {\n      const { dataType, filePath } = action.payload\n      if (filePath !== null) {\n        if (dataType === DATA_TYPE_SET.IMAGE) {\n          delete state.image[filePath]\n        } else if (dataType === DATA_TYPE_SET.TIME_SERIES) {\n          delete state.timeSeries[filePath]\n        } else if (dataType === DATA_TYPE_SET.CSV) {\n          delete state.csv[filePath]\n        } else if (dataType === DATA_TYPE_SET.HEAT_MAP) {\n          delete state.heatMap[filePath]\n        } else if (dataType === DATA_TYPE_SET.ROI) {\n          delete state.roi[filePath]\n        } else if (dataType === DATA_TYPE_SET.SCATTER) {\n          delete state.scatter[filePath]\n        } else if (dataType === DATA_TYPE_SET.BAR) {\n          delete state.bar[filePath]\n        } else if (dataType === DATA_TYPE_SET.HTML) {\n          delete state.html[filePath]\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getTimeSeriesDataById.pending, (state, action) => {\n        const { path } = action.meta.arg\n        if (!state.timeSeries.hasOwnProperty(path)) {\n          state.timeSeries[path] = {\n            type: 'timeSeries',\n            xrange: [],\n            data: {},\n            std: {},\n            pending: true,\n            fulfilled: false,\n            error: null,\n          }\n        } else {\n          state.timeSeries[path].pending = true\n          state.timeSeries[path].fulfilled = false\n          state.timeSeries[path].error = null\n        }\n      })\n      .addCase(getTimeSeriesDataById.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.timeSeries[path] = {\n          type: 'timeSeries',\n          xrange: [],\n          data: {},\n          std: {},\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getTimeSeriesDataById.fulfilled, (state, action) => {\n        const { path, index } = action.meta.arg\n        state.timeSeries[path].pending = false\n        state.timeSeries[path].fulfilled = true\n        state.timeSeries[path].error = null\n        if (Object.keys(state.timeSeries[path].data).length === 0) {\n          state.timeSeries[path].xrange = action.payload.xrange\n          state.timeSeries[path].data = action.payload.data\n          state.timeSeries[path].std = action.payload.std\n        } else {\n          state.timeSeries[path].data[index] = action.payload.data[index]\n          console.log(action.payload.std)\n          if (action.payload.std[index] !== undefined) {\n            state.timeSeries[path].std[index] = action.payload.std[index]\n          }\n        }\n      })\n      .addCase(getTimeSeriesAllData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        if (!state.timeSeries.hasOwnProperty(path)) {\n          state.timeSeries[path] = {\n            type: 'timeSeries',\n            xrange: [],\n            data: {},\n            std: {},\n            pending: true,\n            fulfilled: false,\n            error: null,\n          }\n        } else {\n          state.timeSeries[path].pending = true\n          state.timeSeries[path].fulfilled = false\n          state.timeSeries[path].error = null\n        }\n      })\n      .addCase(getTimeSeriesAllData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.timeSeries[path] = {\n          type: 'timeSeries',\n          xrange: [],\n          data: {},\n          std: {},\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getTimeSeriesAllData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.timeSeries[path].pending = false\n        state.timeSeries[path].fulfilled = true\n        state.timeSeries[path].error = null\n        state.timeSeries[path].xrange = action.payload.xrange\n        state.timeSeries[path].data = action.payload.data\n        if (action.payload.std !== undefined) {\n          state.timeSeries[path].std = action.payload.std\n        }\n      })\n      .addCase(getHeatMapData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getHeatMapData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getHeatMapData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getImageData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getImageData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getImageData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getCsvData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getCsvData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getCsvData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getRoiData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getRoiData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getRoiData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getScatterData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getScatterData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getScatterData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getBarData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getBarData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getBarData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getHTMLData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.html[path] = {\n          type: 'html',\n          data: '',\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getHTMLData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.html[path] = {\n          type: 'html',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getHTMLData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.html[path] = {\n          type: 'html',\n          data: '',\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n  },\n})\n\nexport const { deleteDisplayItem } = displayDataSlice.actions\n\nexport default displayDataSlice.reducer\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { deleteVisualizeItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport {\n  selectVisualizeDataFilePath,\n  selectVisualizeDataType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { deleteDisplayItem } from 'store/slice/DisplayData/DisplayDataSlice'\n\nexport const DisplayItemDeleteButton = React.memo<{ itemId: number }>(\n  ({ itemId }) => {\n    const dispatch = useDispatch()\n\n    const dataType = useSelector(selectVisualizeDataType(itemId))\n    const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n    const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n      e.stopPropagation() // 親divのonClickを反応させないため\n      dispatch(deleteVisualizeItem(itemId))\n      // visualize Itemで同じpathのデータ個数を調べて、1だったら、displayも削除\n      dispatch(deleteDisplayItem({ dataType, filePath }))\n    }\n    return (\n      <IconButton onClick={onClick} size=\"large\">\n        <CloseIcon />\n      </IconButton>\n    )\n  },\n)\n","import React, { useEffect } from 'react'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  Button,\n  LinearProgress,\n  MobileStepper,\n  Typography,\n  useTheme,\n} from '@mui/material'\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight'\n\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport { DisplayDataContext } from '../DataContext'\n\nimport {\n  selectImageDataError,\n  selectImageDataIsInitialized,\n  selectImageDataIsPending,\n  selectImageDataIsFulfilled,\n  selectActiveImageData,\n  selectRoiData,\n  selectImageDataEndIndex,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport {\n  getImageData,\n  getRoiData,\n  getTimeSeriesDataById,\n} from 'store/slice/DisplayData/DisplayDataActions'\nimport {\n  selectImageItemShowticklabels,\n  selectImageItemZsmooth,\n  selectImageItemShowLine,\n  selectImageItemShowGrid,\n  selectImageItemShowScale,\n  selectImageItemColors,\n  selectImageItemActiveIndex,\n  selectImageItemStartIndex,\n  selectImageItemEndIndex,\n  selectRoiItemFilePath,\n  selectMultiPlotTimeSeriesItemFilepath,\n  selectMultiPlotTimeSeriesItemDisplayNumbers,\n  selectRoiItemIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  decrementImageActiveIndex,\n  incrementImageActiveIndex,\n  setTimeSeriesItemDisplayNumbers,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { RootState } from 'store/store'\nimport { Datum, LayoutAxis, PlotData } from 'plotly.js'\nimport createColormap from 'colormap'\n\nexport const ImagePlot = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  const startIndex = useSelector(selectImageItemStartIndex(itemId))\n  const endIndex = useSelector(selectImageItemEndIndex(itemId))\n  const isPending = useSelector(selectImageDataIsPending(path))\n  const isInitialized = useSelector(selectImageDataIsInitialized(path))\n  const isFulfilled = useSelector(selectImageDataIsFulfilled(path))\n  const error = useSelector(selectImageDataError(path))\n\n  const roiFilePath = useSelector(selectRoiItemFilePath(itemId))\n\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(\n        getImageData({\n          path,\n          startIndex: startIndex ?? 1,\n          endIndex: endIndex ?? 10,\n        }),\n      )\n    }\n    if (roiFilePath != null) {\n      dispatch(getRoiData({ path: roiFilePath }))\n    }\n  }, [dispatch, isInitialized, path, startIndex, endIndex, roiFilePath])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <ImagePlotImple />\n  } else {\n    return null\n  }\n})\n\nconst ImagePlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const itemStartIndex = useSelector(selectImageItemStartIndex(itemId))\n  const itemEndIndex = useSelector(selectImageItemEndIndex(itemId))\n  const endIndex = useSelector(selectImageDataEndIndex(path))\n  const activeIndex = useSelector(selectImageItemActiveIndex(itemId))\n  const dispatch = useDispatch()\n  const handleNext = () => dispatch(incrementImageActiveIndex({ itemId }))\n  const handleBack = () => dispatch(decrementImageActiveIndex({ itemId }))\n  const theme = useTheme()\n  return (\n    <>\n      <MobileStepper\n        steps={itemEndIndex}\n        position=\"static\"\n        variant=\"text\"\n        activeStep={activeIndex + itemStartIndex - 1}\n        nextButton={\n          <Button\n            size=\"small\"\n            onClick={handleNext}\n            disabled={activeIndex === (endIndex ?? 0)}\n          >\n            <Typography>Next</Typography>\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowLeft />\n            ) : (\n              <KeyboardArrowRight />\n            )}\n          </Button>\n        }\n        backButton={\n          <Button\n            size=\"small\"\n            onClick={handleBack}\n            disabled={activeIndex === 0}\n          >\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowRight />\n            ) : (\n              <KeyboardArrowLeft />\n            )}\n            <Typography>Back</Typography>\n          </Button>\n        }\n      />\n      <ImagePlotChart activeIndex={activeIndex} />\n    </>\n  )\n})\n\nconst ImagePlotChart = React.memo<{\n  activeIndex: number\n}>(({ activeIndex }) => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const imageData = useSelector(\n    selectActiveImageData(path, activeIndex),\n    imageDataEqualtyFn,\n  )\n  const roiFilePath = useSelector(selectRoiItemFilePath(itemId))\n  const roiData = useSelector(\n    (state: RootState) =>\n      roiFilePath != null ? selectRoiData(roiFilePath)(state) : [],\n    imageDataEqualtyFn,\n  )\n\n  const showticklabels = useSelector(selectImageItemShowticklabels(itemId))\n  const showline = useSelector(selectImageItemShowLine(itemId))\n  const zsmooth = useSelector(selectImageItemZsmooth(itemId))\n  const showgrid = useSelector(selectImageItemShowGrid(itemId))\n  const showscale = useSelector(selectImageItemShowScale(itemId))\n  const colorscale = useSelector(selectImageItemColors(itemId))\n\n  const timeDataMaxIndex = useSelector(selectRoiItemIndex(itemId, roiFilePath))\n\n  const colorscaleRoi = createColormap({\n    colormap: 'jet',\n    nshades: 100, //timeDataMaxIndex >= 6 ? timeDataMaxIndex : 6,\n    format: 'hex',\n    alpha: 1,\n  })\n\n  const data = React.useMemo(\n    () => [\n      {\n        z: imageData,\n        type: 'heatmap',\n        name: 'images',\n        colorscale: colorscale.map((value) => {\n          let offset: number = parseFloat(value.offset)\n          const offsets: number[] = colorscale.map((v) => {\n            return parseFloat(v.offset)\n          })\n          // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n          if (offset === Math.max(...offsets)) {\n            offset = 1.0\n          }\n          if (offset === Math.min(...offsets)) {\n            offset = 0.0\n          }\n          return [offset, value.rgb]\n        }),\n        hoverongaps: false,\n        showscale: showscale,\n        zsmooth: zsmooth, // ['best', 'fast', false]\n        // showlegend: true,\n      },\n      {\n        z: roiData,\n        type: 'heatmap',\n        name: 'roi',\n        hovertemplate: 'cell id: %{z}',\n        colorscale: [...Array(timeDataMaxIndex)].map((_, i) => {\n          const new_i = Math.floor((i % 10) * 10 + i / 10)\n          const offset = i / (timeDataMaxIndex - 1)\n          const rgb = colorscaleRoi[new_i]\n          return [offset, rgb]\n        }),\n        zmin: 1,\n        zmax: timeDataMaxIndex,\n        hoverongaps: false,\n        zsmooth: false,\n        showscale: false,\n      },\n    ],\n    [\n      imageData,\n      roiData,\n      zsmooth,\n      showscale,\n      colorscale,\n      colorscaleRoi,\n      timeDataMaxIndex,\n    ],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 30, // top\n        l: 120, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      xaxis: {\n        autorange: true,\n        showgrid: showgrid,\n        showline: showline,\n        zeroline: false,\n        autotick: true,\n        ticks: '',\n        showticklabels: showticklabels,\n      },\n      yaxis: {\n        automargin: true,\n        autorange: 'reversed',\n        showgrid: showgrid,\n        showline: showline,\n        zeroline: false,\n        autotick: true, // todo\n        ticks: '',\n        showticklabels: showticklabels, // todo\n      },\n    }),\n    [path, showgrid, showline, showticklabels],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n    height: '100%',\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight, activeIndex])\n\n  const dispatch = useDispatch()\n  const timeSeriesFilePath = useSelector(\n    selectMultiPlotTimeSeriesItemFilepath(itemId),\n  )\n  const displayNumbers = useSelector(\n    selectMultiPlotTimeSeriesItemDisplayNumbers(itemId),\n  )\n\n  const onClick = (event: any) => {\n    const points: PlotDatum = event.points[0]\n    if (\n      timeSeriesFilePath !== null &&\n      displayNumbers !== null &&\n      points.curveNumber >= 1 &&\n      !displayNumbers.includes(points.z - 1)\n    ) {\n      const newValue = [...displayNumbers, points.z - 1]\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: newValue,\n        }),\n      )\n      dispatch(\n        getTimeSeriesDataById({\n          path: timeSeriesFilePath,\n          index: points.z - 1,\n        }),\n      )\n    }\n  }\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart\n        data={data}\n        layout={layout}\n        config={config}\n        onClick={onClick}\n      />\n    </div>\n  )\n})\n\nfunction imageDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\ninterface PlotDatum {\n  curveNumber: number\n  data: PlotData\n  customdata: Datum\n  pointIndex: number\n  pointNumber: number\n  x: Datum\n  xaxis: LayoutAxis\n  y: Datum\n  yaxis: LayoutAxis\n  z: number\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LegendClickEvent } from 'plotly.js'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectTimeSeriesData,\n  selectTimeSeriesDataError,\n  selectTimeSeriesDataIsFulfilled,\n  selectTimeSeriesDataIsInitialized,\n  selectTimeSeriesDataIsPending,\n  selectTimeSeriesStd,\n  selectTimeSeriesXrange,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getTimeSeriesDataById } from 'store/slice/DisplayData/DisplayDataActions'\nimport { TimeSeriesData } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectTimeSeriesItemCheckedList,\n  selectTimeSeriesItemDisplayNumbers,\n  selectTimeSeriesItemOffset,\n  selectTimeSeriesItemShowGrid,\n  selectTimeSeriesItemShowLine,\n  selectTimeSeriesItemShowTickLabels,\n  selectTimeSeriesItemSpan,\n  selectTimeSeriesItemXrange,\n  selectTimeSeriesItemZeroLine,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { setTimeSeriesItemCheckedList } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport createColormap from 'colormap'\nimport { setTimeSeriesItemDisplayNumbers } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const TimeSeriesPlot = React.memo(() => {\n  const { itemId, filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n  const isPending = useSelector(selectTimeSeriesDataIsPending(path))\n  const isInitialized = useSelector(selectTimeSeriesDataIsInitialized(path))\n  const error = useSelector(selectTimeSeriesDataError(path))\n  const isFulfilled = useSelector(selectTimeSeriesDataIsFulfilled(path))\n\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getTimeSeriesDataById({ path, index: 0 }))\n    }\n  }, [dispatch, isInitialized, path, displayNumbers])\n\n  if (!isInitialized) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isPending || isFulfilled) {\n    return <TimeSeriesPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst TimeSeriesPlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  // 0番のデータとkeysだけをとってくる\n  const dispatch = useDispatch()\n  const timeSeriesData = useSelector(\n    selectTimeSeriesData(path),\n    timeSeriesDataEqualityFn,\n  )\n\n  const dataXrange = useSelector(selectTimeSeriesXrange(path))\n  const dataStd = useSelector(selectTimeSeriesStd(path))\n\n  const offset = useSelector(selectTimeSeriesItemOffset(itemId))\n  const span = useSelector(selectTimeSeriesItemSpan(itemId))\n  const showgrid = useSelector(selectTimeSeriesItemShowGrid(itemId))\n  const showline = useSelector(selectTimeSeriesItemShowLine(itemId))\n  const showticklabels = useSelector(selectTimeSeriesItemShowTickLabels(itemId))\n  const zeroline = useSelector(selectTimeSeriesItemZeroLine(itemId))\n  const xrange = useSelector(selectTimeSeriesItemXrange(itemId))\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n  const checkedList = useSelector(selectTimeSeriesItemCheckedList(itemId))\n\n  const colorScale = createColormap({\n    colormap: 'jet',\n    nshades: 100, //maxIndex >= 6 ? maxIndex : 6,\n    format: 'hex',\n    alpha: 1,\n  })\n\n  React.useEffect(() => {\n    const keys = Object.keys(timeSeriesData)\n    if (checkedList.length === 0 && keys.length !== 0) {\n      const checkedList = keys.map((_, i) => {\n        if (i === 0) {\n          return true\n        }\n        return false\n      })\n      dispatch(\n        setTimeSeriesItemCheckedList({\n          itemId,\n          checkedList,\n        }),\n      )\n    }\n  }, [timeSeriesData, dispatch, itemId, checkedList.length])\n\n  const data = React.useMemo(() => {\n    if (timeSeriesData === null) {\n      return []\n    }\n    return Object.keys(timeSeriesData).map((key, i) => {\n      let y = Object.values(timeSeriesData[key])\n      const new_i = Math.floor((i % 10) * 10 + i / 10) % 100\n\n      if (displayNumbers.includes(i)) {\n        if (offset) {\n          const activeIdx: number = displayNumbers.findIndex(\n            (value) => value === i,\n          )\n          const mean: number = y.reduce((a, b) => a + b) / y.length\n          const std: number =\n            span *\n            Math.sqrt(y.reduce((a, b) => a + Math.pow(b - mean, 2)) / y.length)\n          return {\n            name: `(${String(parseInt(key) + 1)})`,\n            x: dataXrange,\n            y: y.map((value) => (value - mean) / std + activeIdx),\n            visible: true,\n            line: { color: colorScale[new_i] },\n            error_y: {\n              type: 'data',\n              array: null,\n              visible: true,\n            },\n          }\n        } else {\n          return {\n            name: `(${String(parseInt(key) + 1)})`,\n            x: dataXrange,\n            y: y,\n            visible: true,\n            line: { color: colorScale[new_i] },\n            error_y: {\n              type: 'data',\n              array: Object.keys(dataStd).includes(key)\n                ? Object.values(dataStd[key])\n                : null,\n              visible: true,\n            },\n          }\n        }\n      } else {\n        return {\n          name: `(${String(parseInt(key) + 1)})`,\n          x: dataXrange,\n          y: y,\n          visible: 'legendonly',\n          line: { color: colorScale[new_i] },\n          error_y: {\n            type: 'data',\n            array: Object.keys(dataStd).includes(key)\n              ? Object.values(dataStd[key])\n              : null,\n            visible: true,\n          },\n        }\n      }\n    })\n  }, [\n    timeSeriesData,\n    displayNumbers,\n    offset,\n    span,\n    colorScale,\n    dataStd,\n    dataXrange,\n  ])\n\n  const annotations = React.useMemo(() => {\n    if (data.length !== 0) {\n      return displayNumbers.map((i) => {\n        return {\n          x: dataXrange[0],\n          y: Math.max(...data[i].y),\n          xref: 'x',\n          yref: 'y',\n          text: `cell: ${i + 1}`,\n          arrowhead: 1,\n          ax: 0,\n          ay: -10,\n        }\n      })\n    } else {\n      return []\n    }\n  }, [data, displayNumbers, dataXrange])\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n      height: 300,\n      xaxis: {\n        range: [xrange.left, xrange.right],\n        showgrid: showgrid,\n        showline: showline,\n        showticklabels: showticklabels,\n        zeroline: zeroline,\n      },\n      yaxis: {\n        showgrid: showgrid,\n        showline: showline,\n        showticklabels: showticklabels,\n        zeroline: zeroline,\n      },\n      annotations: annotations,\n    }),\n    [path, xrange, showgrid, showline, showticklabels, zeroline, annotations],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  const onLegendClick = (event: LegendClickEvent) => {\n    const clickNumber = event.curveNumber\n\n    // set DisplayNumbers\n    if (displayNumbers.includes(clickNumber)) {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: displayNumbers.filter(\n            (value) => value !== clickNumber,\n          ),\n        }),\n      )\n\n      dispatch(\n        setTimeSeriesItemCheckedList({\n          itemId,\n          checkedList: checkedList.map((v, i) => {\n            if (i === clickNumber) {\n              return false\n            }\n            return v\n          }),\n        }),\n      )\n    } else {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: [...displayNumbers, clickNumber],\n        }),\n      )\n\n      dispatch(\n        setTimeSeriesItemCheckedList({\n          itemId,\n          checkedList: checkedList.map((v, i) => {\n            if (i === clickNumber) {\n              return true\n            }\n            return v\n          }),\n        }),\n      )\n\n      dispatch(getTimeSeriesDataById({ path, index: clickNumber }))\n    }\n\n    return false\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight])\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart\n        data={data}\n        layout={layout}\n        config={config}\n        onLegendClick={onLegendClick}\n      />\n    </div>\n  )\n})\n\nfunction timeSeriesDataEqualityFn(\n  a: TimeSeriesData | undefined,\n  b: TimeSeriesData | undefined,\n) {\n  if (a != null && b != null) {\n    const aArray = Object.entries(a)\n    const bArray = Object.entries(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every(([aKey, aValue], i) => {\n          const [bKey, bValue] = bArray[i]\n          return bKey === aKey && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\nfunction nestEqualityFun(\n  a: {\n    [key: number]: number\n  },\n  b: {\n    [key: number]: number\n  },\n) {\n  const aArray = Object.entries(a)\n  const bArray = Object.entries(b)\n  return (\n    a === b ||\n    (aArray.length === bArray.length &&\n      aArray.every(([aKey, aValue], i) => {\n        const [bKey, bValue] = bArray[i]\n        return bKey === aKey && bValue === aValue\n      }))\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectHeatMapData,\n  selectHeatMapDataError,\n  selectHeatMapDataIsFulfilled,\n  selectHeatMapDataIsInitialized,\n  selectHeatMapDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getHeatMapData } from 'store/slice/DisplayData/DisplayDataActions'\nimport {\n  selectHeatMapItemColors,\n  selectHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nexport const HeatMapPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectHeatMapDataIsPending(path))\n  const isInitialized = useSelector(selectHeatMapDataIsInitialized(path))\n  const error = useSelector(selectHeatMapDataError(path))\n  const isFulfilled = useSelector(selectHeatMapDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getHeatMapData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <HeatMapImple />\n  } else {\n    return null\n  }\n})\n\nconst HeatMapImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const heatMapData = useSelector(selectHeatMapData(path), heatMapDataEqualtyFn)\n  const showscale = useSelector(selectHeatMapItemShowScale(itemId))\n  const colorscale = useSelector(selectHeatMapItemColors(itemId))\n\n  const data = React.useMemo(\n    () =>\n      heatMapData != null\n        ? [\n            {\n              z: heatMapData,\n              x: heatMapData.map((_, i) => i),\n              y: heatMapData[0].map((_, i) => i),\n              type: 'heatmap',\n              name: 'heatmap',\n              colorscale: colorscale.map((value) => {\n                let offset: number = parseFloat(value.offset)\n                const offsets: number[] = colorscale.map((v) => {\n                  return parseFloat(v.offset)\n                })\n                // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n                if (offset === Math.max(...offsets)) {\n                  offset = 1.0\n                }\n                if (offset === Math.min(...offsets)) {\n                  offset = 0.0\n                }\n                return [offset, value.rgb]\n              }),\n              hoverongaps: false,\n              showlegend: true,\n              showscale: showscale,\n            },\n          ]\n        : [],\n    [heatMapData, showscale, colorscale],\n  )\n\n  const layout = {\n    title: path.split('/').reverse()[0],\n    dragmode: 'pan',\n    margin: {\n      t: 60, // top\n      l: 50, // left\n      b: 30, // bottom\n    },\n    autosize: true,\n    height: 350,\n  }\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  return <PlotlyChart data={data} layout={layout} config={config} />\n})\n\nfunction heatMapDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport FormControl from '@mui/material/FormControl'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport FormHelperText from '@mui/material/FormHelperText'\nimport Select from '@mui/material/Select'\nimport ListSubheader from '@mui/material/ListSubheader'\n\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport { RootState } from 'store/store'\nimport { selectInputNode } from 'store/slice/InputNode/InputNodeSelectors'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { selectNodeLabelById } from 'store/slice/FlowElement/FlowElementSelectors'\nimport {\n  selectPipelineLatestUid,\n  selectPipelineNodeResultSuccessList,\n} from 'store/slice/Pipeline/PipelineSelectors'\n\nexport const FilePathSelect: React.FC<{\n  dataType?: DATA_TYPE\n  selectedNodeId: string | null\n  selectedFilePath: string | null\n  onSelect: (nodeId: string, filePath: string, dataType: DATA_TYPE) => void\n  label?: string\n}> = ({ dataType, selectedNodeId, selectedFilePath, onSelect, label }) => {\n  const inputNodeFilePathInfoList = useSelector(\n    (state: RootState) => {\n      const inputNodes = selectInputNode(state)\n      return Object.entries(inputNodes)\n        .map(([nodeId, inputNode]) => ({\n          nodeId,\n          filePath: inputNode.selectedFilePath,\n          fileType: inputNode.fileType,\n          dataType: toDataTypeFromFileType(inputNode.fileType),\n          nodeName: selectNodeLabelById(nodeId)(state),\n        }))\n        .filter(({ filePath }) => filePath != null)\n        .filter(({ dataType: inputNodeDataType }) =>\n          dataType != null ? inputNodeDataType === dataType : true,\n        )\n    },\n    // todo 比較関数\n  )\n\n  const latestUid = useSelector(selectPipelineLatestUid)\n\n  const algorithmNodeOutputPathInfoList = useSelector((state: RootState) => {\n    if (latestUid != null) {\n      const runResult = selectPipelineNodeResultSuccessList(state)\n      return runResult.map(({ nodeId, nodeResult }) => {\n        return {\n          nodeId,\n          nodeName: selectNodeLabelById(nodeId)(state),\n          paths: Object.entries(nodeResult.outputPaths)\n            .map(([outputKey, value]) => {\n              return {\n                outputKey,\n                filePath: value.path,\n                type: value.type,\n              }\n            })\n            .filter(({ type }) =>\n              dataType != null ? type === dataType : true,\n            ),\n        }\n      })\n    } else {\n      return []\n    }\n  })\n\n  const [open, setOpen] = React.useState(false)\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const onSelectHandle = (\n    nodeId: string,\n    filePath: string,\n    dataType: DATA_TYPE,\n  ) => {\n    onSelect(nodeId, filePath, dataType)\n    handleClose()\n  }\n\n  const menuItemList: React.ReactElement[] = []\n  inputNodeFilePathInfoList.forEach((pathInfo) => {\n    menuItemList.push(\n      <MenuItem\n        value={`${pathInfo.nodeId}/${pathInfo.filePath}`}\n        onClick={() =>\n          onSelectHandle(\n            pathInfo.nodeId,\n            pathInfo.filePath ?? '',\n            pathInfo.dataType,\n          )\n        }\n        key={pathInfo.nodeId}\n      >\n        {pathInfo.nodeName}\n      </MenuItem>,\n    )\n  })\n  algorithmNodeOutputPathInfoList.forEach((pathInfo) => {\n    menuItemList.push(<ListSubheader>{pathInfo.nodeName}</ListSubheader>)\n    pathInfo.paths.forEach((outputPath, i) => {\n      menuItemList.push(\n        <MenuItem\n          value={`${pathInfo.nodeId}/${outputPath.filePath}`}\n          onClick={() =>\n            onSelectHandle(\n              pathInfo.nodeId,\n              outputPath.filePath,\n              outputPath.type,\n            )\n          }\n          key={`${pathInfo.nodeId}/${outputPath.filePath}`}\n        >\n          {outputPath.outputKey}\n        </MenuItem>,\n      )\n    })\n  })\n\n  return (\n    <FormControl style={{ minWidth: 150, maxWidth: 220 }}>\n      <InputLabel>{!!label ? label : 'Select Item'}</InputLabel>\n      <Select\n        value={`${selectedNodeId}/${selectedFilePath}`}\n        open={open}\n        onClose={handleClose}\n        onOpen={handleOpen}\n      >\n        {menuItemList}\n      </Select>\n      {inputNodeFilePathInfoList.length +\n        algorithmNodeOutputPathInfoList.length ===\n        0 && <FormHelperText error={true}>no data</FormHelperText>}\n    </FormControl>\n  )\n}\n\nfunction toDataTypeFromFileType(fileType: FILE_TYPE) {\n  switch (fileType) {\n    case FILE_TYPE_SET.IMAGE:\n      return DATA_TYPE_SET.IMAGE\n    case FILE_TYPE_SET.CSV:\n      return DATA_TYPE_SET.CSV\n    case FILE_TYPE_SET.HDF5:\n      return DATA_TYPE_SET.HDF5\n  }\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\n\nimport {\n  selectMultiPlotImageItemNodeId,\n  selectMultiPlotImageItemFilePath,\n  selectMultiPlotTimeSeriesItemNodeId,\n  selectMultiPlotTimeSeriesItemFilePath,\n  selectMultiPlotHeatMapItemNodeId,\n  selectMultiPlotHeatMapItemFilePath,\n  selectMultiPlotRoiItemNodeId,\n  selectMultiPlotRoiItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { DATA_TYPE_SET } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  setHeatMapItemFilePath,\n  setImageItemFilePath,\n  setTimeSeriesItemFilePath,\n  setRoiItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { ImagePlot } from './Plot/ImagePlot'\nimport { DisplayDataContext } from './DataContext'\nimport { TimeSeriesPlot } from './Plot/TimeSeriesPlot'\nimport { HeatMapPlot } from './Plot/HeatMapPlot'\nimport { FilePathSelect } from './FilePathSelect'\n\nexport const MultiPlotItem = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const dispatch = useDispatch()\n  return (\n    <>\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.IMAGE}\n        selectedNodeId={useSelector(selectMultiPlotImageItemNodeId(itemId))}\n        selectedFilePath={useSelector(selectMultiPlotImageItemFilePath(itemId))}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setImageItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select image\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.TIME_SERIES}\n        selectedNodeId={useSelector(\n          selectMultiPlotTimeSeriesItemNodeId(itemId),\n        )}\n        selectedFilePath={useSelector(\n          selectMultiPlotTimeSeriesItemFilePath(itemId),\n        )}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setTimeSeriesItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select timeseries\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.HEAT_MAP}\n        selectedNodeId={useSelector(selectMultiPlotHeatMapItemNodeId(itemId))}\n        selectedFilePath={useSelector(\n          selectMultiPlotHeatMapItemFilePath(itemId),\n        )}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setHeatMapItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select heatmap\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.ROI}\n        selectedNodeId={useSelector(selectMultiPlotRoiItemNodeId(itemId))}\n        selectedFilePath={useSelector(selectMultiPlotRoiItemFilePath(itemId))}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setRoiItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select roi\"\n      />\n      <MultiPlot itemId={itemId} />\n    </>\n  )\n})\n\nconst MultiPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  return (\n    <Grid container>\n      <Grid item xs={7}>\n        <StyledPaper>\n          <MultiImagePlot itemId={itemId} />\n        </StyledPaper>\n      </Grid>\n      <Grid item xs={5}>\n        <Grid>\n          <StyledPaper>\n            <MultiTimeSeriesPlot itemId={itemId} />\n          </StyledPaper>\n          <StyledPaper>\n            <MultiHeatMapPlot itemId={itemId} />\n          </StyledPaper>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n})\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(1),\n  margin: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}))\n\nconst MultiImagePlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotImageItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotImageItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType: DATA_TYPE_SET.IMAGE, itemId }}\n      >\n        <ImagePlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst MultiTimeSeriesPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotTimeSeriesItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotTimeSeriesItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{\n          nodeId,\n          filePath,\n          dataType: DATA_TYPE_SET.TIME_SERIES,\n          itemId,\n        }}\n      >\n        <TimeSeriesPlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst MultiHeatMapPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotHeatMapItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotHeatMapItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType: DATA_TYPE_SET.HEAT_MAP, itemId }}\n      >\n        <HeatMapPlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n","import React from 'react'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectRoiData,\n  selectRoiDataError,\n  selectRoiDataIsFulfilled,\n  selectRoiDataIsInitialized,\n  selectRoiDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { LinearProgress, Typography } from '@mui/material'\nimport { getRoiData } from 'store/slice/DisplayData/DisplayDataActions'\nimport createColormap from 'colormap'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const RoiPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const isPending = useSelector(selectRoiDataIsPending(path))\n  const isInitialized = useSelector(selectRoiDataIsInitialized(path))\n  const isFulfilled = useSelector(selectRoiDataIsFulfilled(path))\n  const error = useSelector(selectRoiDataError(path))\n\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getRoiData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <RoiPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst RoiPlotImple = React.memo<{}>(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const imageData = useSelector(selectRoiData(path), imageDataEqualtyFn)\n\n  const colorscale: ColorType[] = createColormap({\n    colormap: 'jet',\n    nshades: 10,\n    format: 'hex',\n    alpha: 1,\n  }).map((v, idx) => {\n    return { rgb: v, offset: String(idx / 9) }\n  })\n\n  const data = React.useMemo(\n    () => [\n      {\n        z: imageData,\n        type: 'heatmap',\n        name: 'roi',\n        colorscale: colorscale.map((value) => {\n          let offset: number = parseFloat(value.offset)\n          const offsets: number[] = colorscale.map((v) => {\n            return parseFloat(v.offset)\n          })\n          // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n          if (offset === Math.max(...offsets)) {\n            offset = 1.0\n          }\n          if (offset === Math.min(...offsets)) {\n            offset = 0.0\n          }\n          return [offset, value.rgb]\n        }),\n        hoverongaps: false,\n        // zsmooth: zsmooth, // ['best', 'fast', false]\n        zsmooth: false,\n        showlegend: true,\n      },\n    ],\n    [imageData, colorscale],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 30, // top\n        l: 120, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      xaxis: {\n        autorange: true,\n        zeroline: false,\n        autotick: true,\n        ticks: '',\n      },\n      yaxis: {\n        autorange: 'reversed',\n        zeroline: false,\n        autotick: true, // todo\n        ticks: '',\n      },\n    }),\n    [path],\n  )\n  const config = {\n    displayModeBar: true,\n    // scrollZoom: true,\n    responsive: true,\n  }\n  return (\n    <div className=\"imagePlotChart\">\n      <PlotlyChart data={data} layout={layout} config={config} />\n    </div>\n  )\n})\n\nfunction imageDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectScatterData,\n  selectScatterDataError,\n  selectScatterDataIsFulfilled,\n  selectScatterDataIsInitialized,\n  selectScatterDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getScatterData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { ScatterData } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectScatterItemXIndex,\n  selectScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nexport const ScatterPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectScatterDataIsPending(path))\n  const isInitialized = useSelector(selectScatterDataIsInitialized(path))\n  const error = useSelector(selectScatterDataError(path))\n  const isFulfilled = useSelector(selectScatterDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getScatterData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <ScatterPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst ScatterPlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  const scatterData = useSelector(\n    selectScatterData(path),\n    scatterDataEqualityFn,\n  )\n\n  const xIndex = useSelector(selectScatterItemXIndex(itemId))\n  const yIndex = useSelector(selectScatterItemYIndex(itemId))\n  const maxIndex = Object.keys(scatterData).length - 1\n\n  const data = React.useMemo(\n    () => [\n      {\n        x:\n          xIndex < maxIndex\n            ? Object.values(scatterData[xIndex])\n            : Object.values(scatterData[maxIndex]),\n        y:\n          yIndex < maxIndex\n            ? Object.values(scatterData[yIndex])\n            : Object.values(scatterData[maxIndex]),\n        type: 'scatter',\n        mode: 'markers', //'markers+text',\n        text: Object.keys(scatterData[0]),\n        textposition: 'top center',\n        textfont: {\n          family: 'Raleway, sans-serif',\n        },\n        marker: {\n          size: 5,\n          color: Object.keys(scatterData[0]),\n        },\n      },\n    ],\n    [scatterData, xIndex, yIndex, maxIndex],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n      xaxis: {\n        title: {\n          text: `x: ${\n            xIndex < Object.keys(scatterData).length ? xIndex : maxIndex\n          }`,\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f',\n          },\n        },\n      },\n      yaxis: {\n        title: {\n          text: `y: ${\n            yIndex < Object.keys(scatterData).length ? yIndex : maxIndex\n          }`,\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f',\n          },\n        },\n      },\n    }),\n    [xIndex, yIndex, maxIndex, path, scatterData],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight])\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart data={data} layout={layout} config={config} />\n    </div>\n  )\n})\n\nfunction scatterDataEqualityFn(\n  a: ScatterData | undefined,\n  b: ScatterData | undefined,\n) {\n  if (a != null && b != null) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every((aKey, i) => {\n          const bKey = bArray[i]\n          return bKey === aKey // && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\n// function nestEqualityFun(\n//   a: {\n//     [key: number]: number\n//   },\n//   b: {\n//     [key: number]: number\n//   },\n// ) {\n//   const aArray = Object.entries(a)\n//   const bArray = Object.entries(b)\n//   return (\n//     a === b ||\n//     (aArray.length === bArray.length &&\n//       aArray.every(([aKey, aValue], i) => {\n//         const [bKey, bValue] = bArray[i]\n//         return bKey === aKey && bValue === aValue\n//       }))\n//   )\n// }\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectBarData,\n  selectBarDataError,\n  selectBarDataIsFulfilled,\n  selectBarDataIsInitialized,\n  selectBarDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getBarData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { BarData } from 'store/slice/DisplayData/DisplayDataType'\n\nexport const BarPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectBarDataIsPending(path))\n  const isInitialized = useSelector(selectBarDataIsInitialized(path))\n  const error = useSelector(selectBarDataError(path))\n  const isFulfilled = useSelector(selectBarDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getBarData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <BarPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst BarPlotImple = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n\n  const barData = useSelector(selectBarData(path), barDataEqualityFn)\n\n  const data = React.useMemo(\n    () => [\n      {\n        x: Object.keys(barData[0]),\n        y: Object.values(barData[0]),\n        type: 'bar',\n      },\n    ],\n    [barData],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n    }),\n    [path],\n  )\n\n  const config = {\n    displayModeBar: true,\n    // scrollZoom: true,\n    responsive: true,\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight])\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart data={data} layout={layout} config={config} />\n    </div>\n  )\n})\n\nfunction barDataEqualityFn(a: BarData | undefined, b: BarData | undefined) {\n  if (a != null && b != null) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every((aKey, i) => {\n          const bKey = bArray[i]\n          return bKey === aKey // && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectHTMLData,\n  selectHTMLDataError,\n  selectHTMLDataIsFulfilled,\n  selectHTMLDataIsInitialized,\n  selectHTMLDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getHTMLData } from 'store/slice/DisplayData/DisplayDataActions'\n\nexport const HTMLPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectHTMLDataIsPending(path))\n  const isInitialized = useSelector(selectHTMLDataIsInitialized(path))\n  const error = useSelector(selectHTMLDataError(path))\n  const isFulfilled = useSelector(selectHTMLDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getHTMLData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <HTMLPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst HTMLPlotImple = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const htmlData = useSelector(selectHTMLData(path))\n\n  return <div dangerouslySetInnerHTML={{ __html: htmlData }} />\n})\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectVisualizeDataFilePath,\n  selectVisualizeDataNodeId,\n  selectVisualizeDataType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { DisplayDataContext } from './DataContext'\nimport { HeatMapPlot } from './Plot/HeatMapPlot'\nimport { ImagePlot } from './Plot/ImagePlot'\nimport { RoiPlot } from './Plot/RoiPlot'\nimport { ScatterPlot } from './Plot/ScatterPlot'\nimport { CsvPlot } from './Plot/CsvPlot'\nimport { TimeSeriesPlot } from './Plot/TimeSeriesPlot'\nimport { BarPlot } from './Plot/BarPlot'\nimport { HTMLPlot } from './Plot/HTMLPlot'\n\nexport const DisplayDataItem = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const nodeId = useSelector(selectVisualizeDataNodeId(itemId))\n  const dataType = useSelector(selectVisualizeDataType(itemId))\n  if (filePath != null && dataType != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType, itemId }}\n      >\n        <DisplayPlot dataType={dataType} />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst DisplayPlot = React.memo<{\n  dataType: DATA_TYPE\n}>(({ dataType }) => {\n  switch (dataType) {\n    case DATA_TYPE_SET.CSV:\n      return <CsvPlot />\n    case DATA_TYPE_SET.TIME_SERIES:\n      return <TimeSeriesPlot />\n    case DATA_TYPE_SET.HEAT_MAP:\n      return <HeatMapPlot />\n    case DATA_TYPE_SET.IMAGE:\n      return <ImagePlot />\n    case DATA_TYPE_SET.ROI:\n      return <RoiPlot />\n    case DATA_TYPE_SET.SCATTER:\n      return <ScatterPlot />\n    case DATA_TYPE_SET.BAR:\n      return <BarPlot />\n    case DATA_TYPE_SET.HTML:\n      return <HTMLPlot />\n    default:\n      return null\n  }\n})\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { deleteVisualizeItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const MultiPlotDeleteButton = React.memo<{ itemId: number }>(\n  ({ itemId }) => {\n    const dispatch = useDispatch()\n\n    const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n      e.stopPropagation() // 親divのonClickを反応させないため\n      dispatch(deleteVisualizeItem(itemId))\n    }\n    return (\n      <IconButton onClick={onClick} size=\"large\">\n        <CloseIcon />\n      </IconButton>\n    )\n  },\n)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useTheme } from '@mui/material/styles'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\n\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\n\nimport {\n  selectSelectedVisualizeItemId,\n  selectVisualizeItemIdList,\n  selectVisualizeItemType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nimport { VisualizeItemAddButton } from './VisualizeItemAddButton'\nimport { DisplayItemDeleteButton } from './DisplayItemDeleteButton'\nimport { MultiPlotItem } from './MultiPlotItem'\nimport { DisplayDataItem } from './DisplayDataItem'\nimport { selectItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { RootState } from 'store/store'\nimport { MultiPlotDeleteButton } from './MultiPlotDeleteButton'\n\nexport const VisualizeItems: React.FC = () => {\n  return (\n    <>\n      <FlexItemList />\n    </>\n  )\n}\n\nconst FlexItemList: React.FC = () => {\n  const itemIdList = useSelector(selectVisualizeItemIdList, arrayEqualityFn)\n  return (\n    <Box display=\"flex\" flexWrap=\"wrap\" p={1} m={1}>\n      {itemIdList.map((itemId) => (\n        <Item itemId={itemId} key={itemId} />\n      ))}\n      <VisualizeItemAddButton />\n    </Box>\n  )\n}\n\nconst Item = React.memo<{ itemId: number }>(({ itemId }) => {\n  const itemType = useSelector(selectVisualizeItemType(itemId))\n\n  const dispatch = useDispatch()\n  const onSelect = () => {\n    dispatch(selectItem(itemId))\n  }\n  const isSelected = useSelector(\n    (state: RootState) => selectSelectedVisualizeItemId(state) === itemId,\n  )\n  const theme = useTheme()\n\n  return (\n    <Paper\n      variant=\"outlined\"\n      key={itemId}\n      style={{\n        width: '100%',\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n        cursor: 'pointer',\n        borderColor: isSelected ? theme.palette.primary.light : undefined,\n      }}\n      onClick={onSelect}\n    >\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n        <Box>\n          <DeleteButton itemType={itemType} itemId={itemId} />\n        </Box>\n      </Box>\n      <ItemByType itemType={itemType} itemId={itemId} />\n    </Paper>\n  )\n})\n\nconst DeleteButton: React.FC<{\n  itemType: string\n  itemId: number\n}> = ({ itemType, itemId }) => {\n  switch (itemType) {\n    case 'displayData':\n      return <DisplayItemDeleteButton itemId={itemId} />\n    case 'MultiPlot':\n      return <MultiPlotDeleteButton itemId={itemId} />\n    default:\n      throw new Error('itemType Error')\n  }\n}\n\nconst ItemByType = React.memo<{\n  itemType: string\n  itemId: number\n}>(({ itemType, itemId }) => {\n  switch (itemType) {\n    case 'MultiPlot':\n      return <MultiPlotItem itemId={itemId} />\n    case 'displayData':\n      return <DisplayDataItem itemId={itemId} />\n    default:\n      throw new Error('itemType Error')\n  }\n})\n","import React, { useState } from 'react'\n\nimport { GradientPickerPopover } from 'react-linear-gradient-picker'\nimport { SketchPicker } from 'react-color'\nimport { PALETTE_COLOR_SHAPE_TYPE } from 'react-linear-gradient-picker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const GradientColorPicker = React.memo<{\n  colors: { rgb: string; offset: string }[]\n  dispatchSetColor: (colorCode: ColorType[]) => void\n}>(({ colors, dispatchSetColor }) => {\n  const palette: PALETTE_COLOR_SHAPE_TYPE[] = colors.map((value) => {\n    return {\n      offset: value.offset,\n      color: value.rgb,\n    }\n  })\n\n  const onPaletteChange = (palette: PALETTE_COLOR_SHAPE_TYPE[]) => {\n    const colorCode = palette.map((value) => {\n      const color = value.color\n      const rgbStr = color.replace(/[^0-9,]/g, '').split(',')\n      const rgb = {\n        r: Number(rgbStr[0]),\n        g: Number(rgbStr[1]),\n        b: Number(rgbStr[2]),\n      }\n      return {\n        rgb: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`,\n        offset: value.offset,\n      }\n    })\n    dispatchSetColor(colorCode)\n  }\n\n  const [open, setOpen] = useState(false)\n\n  return (\n    <GradientPickerPopover\n      open={open}\n      setOpen={() => setOpen(!open)}\n      // showAnglePicker={true}\n      width={150}\n      maxStops={10}\n      paletteHeight={25}\n      palette={palette}\n      onPaletteChange={onPaletteChange}\n      flatStyle={true}\n    >\n      <WrappedSketchPicker />\n    </GradientPickerPopover>\n  )\n})\n\ntype WrapperPropTypes = {\n  onSelect?: (color: string, opacity?: number) => void\n  color?: string\n}\n\nconst WrappedSketchPicker: React.FC<WrapperPropTypes> = ({\n  onSelect,\n  color,\n}) => {\n  return (\n    <SketchPicker\n      color={color}\n      width=\"150px\"\n      // styles={{width: \"10px\"}}\n      onChange={(c) => {\n        const { r, g, b, a } = c.rgb\n        onSelect?.(`rgb(${r}, ${g}, ${b})`, a)\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Switch from '@mui/material/Switch'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\n\nimport {\n  selectImageItemShowGrid,\n  selectImageItemShowLine,\n  selectImageItemShowticklabels,\n  selectImageItemZsmooth,\n  selectImageItemShowScale,\n  selectVisualizeDataFilePath,\n  selectImageItemColors,\n  selectRoiItemNodeId,\n  selectRoiItemFilePath,\n  selectImageItemStartIndex,\n  selectImageItemEndIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\n\nimport {\n  setImageItemShowGrid,\n  setImageItemShowLine,\n  setImageItemShowticklabels,\n  setImageItemZsmooth,\n  setImageItemShowScale,\n  setDisplayDataPath,\n  setImageItemStartIndex,\n  setImageItemEndIndex,\n  setImageItemColors,\n  setRoiItemFilePath,\n  resetImageActiveIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nimport 'react-linear-gradient-picker/dist/index.css'\nimport { FileSelectImple } from 'components/FlowChart/FlowChartNode/FileSelect'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { FILE_TREE_TYPE_SET } from 'store/slice/FilesTree/FilesTreeType'\nimport { Box, TextField } from '@mui/material'\nimport { GradientColorPicker } from './GradientColorPicker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\nimport { FilePathSelect } from '../FilePathSelect'\nimport { DATA_TYPE_SET } from 'store/slice/DisplayData/DisplayDataType'\nimport Button from '@mui/material/Button'\nimport { getImageData } from 'store/slice/DisplayData/DisplayDataActions'\n\nexport const ImageItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const onSelectImageFile = (path: string) => {\n    dispatch(setDisplayDataPath({ nodeId: null, filePath: path, itemId }))\n    dispatch(resetImageActiveIndex({ itemId }))\n  }\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n  const { onUploadFile } = useFileUploader(FILE_TYPE_SET.IMAGE)\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n  }\n\n  const colors = useSelector(selectImageItemColors(itemId))\n  const dispathSetColor = (colorCode: ColorType[]) => {\n    dispatch(setImageItemColors({ itemId, colors: colorCode }))\n  }\n\n  const roiItemNodeId = useSelector(selectRoiItemNodeId(itemId))\n  const roiItemFilePath = useSelector(selectRoiItemFilePath(itemId))\n  const onSelectRoiFilePath = (nodeId: string, filePath: string) => {\n    dispatch(setRoiItemFilePath({ itemId, nodeId, filePath }))\n  }\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <FileSelectImple\n        filePath={filePath ?? ''}\n        onSelectFile={onSelectImageFile}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={FILE_TREE_TYPE_SET.IMAGE}\n        selectButtonLabel=\"Select Image\"\n      />\n      <FilePathSelect\n        selectedFilePath={roiItemFilePath}\n        selectedNodeId={roiItemNodeId}\n        onSelect={onSelectRoiFilePath}\n        dataType={DATA_TYPE_SET.ROI}\n        label={'Select Roi'}\n      />\n      <StartEndIndex />\n      <Showticklabels />\n      <ShowLine />\n      <ShowGrid />\n      <ShowScale />\n      <Zsmooth />\n      <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} />\n    </div>\n  )\n}\n\nconst Showticklabels: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showticklabels = useSelector(selectImageItemShowticklabels(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(\n      setImageItemShowticklabels({ itemId, showticklabels: !showticklabels }),\n    )\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showticklabels} onChange={toggleChecked} />}\n      label=\"Showticklabels\"\n    />\n  )\n}\n\nconst ShowLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showline = useSelector(selectImageItemShowLine(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowLine({ itemId, showline: !showline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showline} onChange={toggleChecked} />}\n      label=\"ShowLine\"\n    />\n  )\n}\n\nconst ShowGrid: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showgrid = useSelector(selectImageItemShowGrid(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowGrid({ itemId, showgrid: !showgrid }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showgrid} onChange={toggleChecked} />}\n      label=\"ShowGrid\"\n    />\n  )\n}\n\nconst ShowScale: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showscale = useSelector(selectImageItemShowScale(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowScale({ itemId, showscale: !showscale }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showscale} onChange={toggleChecked} />}\n      label=\"ShowScale\"\n    />\n  )\n}\n\nconst Zsmooth: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const zsmooth = useSelector(selectImageItemZsmooth(itemId))\n  const dispatch = useDispatch()\n  const handleChange = (event: SelectChangeEvent<string | boolean>) => {\n    dispatch(setImageItemZsmooth({ itemId, zsmooth: event.target.value }))\n  }\n  return (\n    <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\n      <InputLabel>smooth</InputLabel>\n      <Select label=\"smooth\" value={zsmooth} onChange={handleChange}>\n        <MenuItem value={'best'}>best</MenuItem>\n        <MenuItem value={'fast'}>fast</MenuItem>\n        <MenuItem value={'false'}>False</MenuItem>\n      </Select>\n    </FormControl>\n  )\n}\n\nconst StartEndIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const startIndex = useSelector(selectImageItemStartIndex(itemId))\n  const endIndex = useSelector(selectImageItemEndIndex(itemId))\n  const inputError = !(startIndex > 0)\n  const dispatch = useDispatch()\n  const onStartChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      dispatch(setImageItemStartIndex({ itemId, startIndex: newValue }))\n    }\n  }\n  const onEndChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      dispatch(setImageItemEndIndex({ itemId, endIndex: newValue }))\n    }\n  }\n\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const onClickButton = () => {\n    if (startIndex > 0) {\n      dispatch(resetImageActiveIndex({ itemId, startIndex, endIndex }))\n      if (filePath !== null) {\n        dispatch(\n          getImageData({\n            path: filePath,\n            startIndex: startIndex ?? 1,\n            endIndex: endIndex ?? 10,\n          }),\n        )\n      }\n    }\n  }\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n      <TextField\n        error={inputError}\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onStartChange}\n        value={startIndex}\n        helperText={inputError ? 'index > 0' : undefined}\n      />\n      ~\n      <TextField\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onEndChange}\n        value={endIndex}\n      />\n      <Button\n        size=\"small\"\n        className=\"ctrl_btn\"\n        variant=\"contained\"\n        onClick={onClickButton}\n      >\n        load\n      </Button>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FileSelectImple } from 'components/FlowChart/FlowChartNode/FileSelect'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport {\n  selectCsvItemSetColumn,\n  selectCsvItemSetIndex,\n  selectCsvItemTranspose,\n  selectVisualizeDataFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setCsvItemSetColumn,\n  setCsvItemSetIndex,\n  setCsvItemTranspose,\n  setDisplayDataPath,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { FILE_TREE_TYPE_SET } from 'store/slice/FilesTree/FilesTreeType'\nimport { FormControlLabel, Switch, TextField } from '@mui/material'\n\nexport const CsvItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const dispatch = useDispatch()\n  const onSelectFile = (path: string) => {\n    dispatch(setDisplayDataPath({ nodeId: null, filePath: path, itemId }))\n  }\n  const { onUploadFile } = useFileUploader(FILE_TYPE_SET.CSV)\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n  }\n\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <FileSelectImple\n        filePath={filePath ?? ''}\n        onSelectFile={onSelectFile}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={FILE_TREE_TYPE_SET.CSV}\n        selectButtonLabel=\"Select CSV\"\n      />\n      <Transpose />\n      <SetColumn />\n      <SetIndex />\n    </div>\n  )\n}\n\nconst Transpose: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const transpose = useSelector(selectCsvItemTranspose(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setCsvItemTranspose({ itemId, transpose: !transpose }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={transpose} onChange={toggleChecked} />}\n      label=\"transpose\"\n    />\n  )\n}\n\nconst SetColumn: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const setColumn = useSelector(selectCsvItemSetColumn(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeSetColumn = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue === null || newValue >= 0) {\n      dispatch(setCsvItemSetColumn({ itemId, setColumn: newValue }))\n    }\n  }\n\n  return (\n    <div>\n      <TextField\n        label=\"column\"\n        style={{ width: 50 }}\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onChangeSetColumn}\n        value={setColumn}\n      />\n    </div>\n  )\n}\n\nconst SetIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const setIndex = useSelector(selectCsvItemSetIndex(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setCsvItemSetIndex({ itemId, setIndex: !setIndex }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={setIndex} onChange={toggleChecked} />}\n      label=\"setIndex\"\n    />\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, Switch } from '@mui/material'\nimport {\n  selectHeatMapItemColors,\n  selectHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setHeatMapItemColors,\n  setHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport { GradientColorPicker } from './GradientColorPicker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const HeatmapItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const colors = useSelector(selectHeatMapItemColors(itemId))\n  const dispathSetColor = (colorCode: ColorType[]) => {\n    dispatch(setHeatMapItemColors({ itemId, colors: colorCode }))\n  }\n  return (\n    <>\n      <ShowScale />\n      <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} />\n    </>\n  )\n}\n\nconst ShowScale: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showscale = useSelector(selectHeatMapItemShowScale(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setHeatMapItemShowScale({ itemId, showscale: !showscale }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showscale} onChange={toggleChecked} />}\n      label=\"showscale\"\n    />\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, Switch, TextField } from '@mui/material'\nimport Box from '@mui/material/Box'\nimport Checkbox from '@mui/material/Checkbox'\nimport {\n  selectTimeSeriesItemCheckedList,\n  selectTimeSeriesItemDisplayNumbers,\n  selectTimeSeriesItemOffset,\n  selectTimeSeriesItemShowGrid,\n  selectTimeSeriesItemShowLine,\n  selectTimeSeriesItemShowTickLabels,\n  selectTimeSeriesItemSpan,\n  selectTimeSeriesItemXrange,\n  selectTimeSeriesItemZeroLine,\n  selectVisualizeDataFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport {\n  setTimeSeriesItemCheckedList,\n  setTimeSeriesItemDisplayNumbers,\n  setTimeSeriesItemOffset,\n  setTimeSeriesItemShowGrid,\n  setTimeSeriesItemShowLine,\n  setTimeSeriesItemShowTickLabels,\n  setTimeSeriesItemSpan,\n  setTimeSeriesItemXrangeLeft,\n  setTimeSeriesItemXrangeRight,\n  setTimeSeriesItemZeroLine,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport {\n  getTimeSeriesAllData,\n  getTimeSeriesDataById,\n} from 'store/slice/DisplayData/DisplayDataActions'\n\nexport const TimeSeriesItemEditor: React.FC = () => {\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <Offset />\n      <Span />\n      <ShowGrid />\n      <ShowLine />\n      <ShowTickLabels />\n      <ZeroLine />\n      <Xrange />\n      <LegendSelect />\n    </div>\n  )\n}\n\nconst Offset: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const offset = useSelector(selectTimeSeriesItemOffset(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemOffset({ itemId, offset: !offset }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={offset} onChange={toggleChecked} />}\n      label=\"offset\"\n    />\n  )\n}\n\nconst Span: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const span = useSelector(selectTimeSeriesItemSpan(itemId))\n\n  const dispatch = useDispatch()\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number' && newValue > 0) {\n      dispatch(setTimeSeriesItemSpan({ itemId, span: newValue }))\n    }\n  }\n  return (\n    <FormControlLabel\n      control={\n        <TextField\n          type=\"number\"\n          style={{ width: '6vw' }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={onChange}\n          defaultValue={span}\n        />\n      }\n      label=\"offset std\"\n    />\n  )\n}\n\nconst ShowGrid: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showgrid = useSelector(selectTimeSeriesItemShowGrid(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemShowGrid({ itemId, showgrid: !showgrid }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showgrid} onChange={toggleChecked} />}\n      label=\"showgrid\"\n    />\n  )\n}\n\nconst ShowLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showline = useSelector(selectTimeSeriesItemShowLine(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemShowLine({ itemId, showline: !showline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showline} onChange={toggleChecked} />}\n      label=\"showline\"\n    />\n  )\n}\n\nconst ShowTickLabels: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showticklabels = useSelector(selectTimeSeriesItemShowTickLabels(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(\n      setTimeSeriesItemShowTickLabels({\n        itemId,\n        showticklabels: !showticklabels,\n      }),\n    )\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showticklabels} onChange={toggleChecked} />}\n      label=\"showticklabels\"\n    />\n  )\n}\n\nconst ZeroLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const zeroline = useSelector(selectTimeSeriesItemZeroLine(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemZeroLine({ itemId, zeroline: !zeroline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={zeroline} onChange={toggleChecked} />}\n      label=\"zeroline\"\n    />\n  )\n}\n\nconst Xrange: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const xrange = useSelector(selectTimeSeriesItemXrange(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeLeft = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newLeft = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newLeft === 'number') {\n      dispatch(setTimeSeriesItemXrangeLeft({ itemId, left: newLeft }))\n    }\n  }\n  const onChangeRight = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newRight = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newRight === 'number') {\n      dispatch(setTimeSeriesItemXrangeRight({ itemId, right: newRight }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          left:\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeLeft}\n            defaultValue={xrange.left}\n          />\n          right:\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeRight}\n            defaultValue={xrange.right}\n          />\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n\nconst LegendSelect: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const checkedList = useSelector(selectTimeSeriesItemCheckedList(itemId))\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n  const allHandleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(\n      setTimeSeriesItemCheckedList({\n        itemId,\n        checkedList: checkedList.map((_) => {\n          return event.target.checked\n        }),\n      }),\n    )\n\n    if (event.target.checked) {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: checkedList.map((_, i) => {\n            return i\n          }),\n        }),\n      )\n      if (filePath !== null) {\n        dispatch(getTimeSeriesAllData({ path: filePath }))\n      }\n    } else {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: [],\n        }),\n      )\n    }\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const index = parseInt(event.target.value)\n\n    // displayNumbers\n    if (event.target.checked) {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: [...displayNumbers, index],\n        }),\n      )\n    } else {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: displayNumbers.filter((value) => value !== index),\n        }),\n      )\n    }\n\n    // CheckList\n    dispatch(\n      setTimeSeriesItemCheckedList({\n        itemId,\n        checkedList: checkedList.map((v, i) => {\n          if (i === index) {\n            return event.target.checked\n          }\n          return v\n        }),\n      }),\n    )\n\n    if (filePath !== null) {\n      dispatch(getTimeSeriesDataById({ path: filePath, index }))\n    }\n  }\n\n  const children = (\n    <Box sx={{ display: 'flex', flexDirection: 'column', ml: 3 }}>\n      {checkedList.map((v, i) => (\n        <FormControlLabel\n          key={`${i}`}\n          label={`Index ${i + 1}`}\n          control={<Checkbox checked={v} onChange={handleChange} value={i} />}\n        />\n      ))}\n    </Box>\n  )\n\n  return (\n    <div>\n      <FormControlLabel\n        label=\"All Check\"\n        control={\n          <Checkbox\n            checked={checkedList.every((v) => {\n              return v\n            })}\n            onChange={allHandleChange}\n          />\n        }\n      />\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n// import { useSelector, useDispatch } from 'react-redux'\n// import { SelectedItemIdContext } from '../VisualizeItemEditor'\n// import { selectRoiItemColors } from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n// import { setRoiItemColors } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n// import { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\n// import { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n// import { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const RoiItemEditor: React.FC = () => {\n  // const itemId = React.useContext(SelectedItemIdContext)\n  // const dispatch = useDispatch()\n  // const { onUploadFile } = useFileUploader(FILE_TYPE_SET.CSV)\n  // const onUploadFileHandle = (formData: FormData, fileName: string) => {\n  //   onUploadFile(formData, fileName)\n  // }\n\n  // const colors = useSelector(selectRoiItemColors(itemId))\n  // const dispathSetColor = (colorCode: ColorType[]) => {\n  //   dispatch(setRoiItemColors({ itemId, colors: colorCode }))\n  // }\n\n  return (\n    <>\n      {/* <GradientColorPicker /> */}\n      {/* <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} /> */}\n    </>\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, TextField } from '@mui/material'\nimport {\n  selectScatterItemXIndex,\n  selectScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setScatterItemXIndex,\n  setScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\n\nexport const ScatterItemEditor: React.FC = () => {\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <XIndex />\n      <YIndex />\n    </div>\n  )\n}\n\nconst XIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const xIndex = useSelector(selectScatterItemXIndex(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeXIndex = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue !== null && newValue >= 0) {\n      dispatch(setScatterItemXIndex({ itemId, xIndex: newValue }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeXIndex}\n            defaultValue={xIndex}\n          />\n          xIndex\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n\nconst YIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const yIndex = useSelector(selectScatterItemYIndex(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeYIndex = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue !== null && newValue >= 0) {\n      dispatch(setScatterItemYIndex({ itemId, yIndex: newValue }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeYIndex}\n            defaultValue={yIndex}\n          />\n          yIndex\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n","import React from 'react'\n\nexport const BarItemEditor: React.FC = () => {\n  return <div style={{ margin: '10px', padding: 10 }}></div>\n}\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport FormControl from '@mui/material/FormControl'\nimport Box from '@mui/material/Box'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  FormControlLabel,\n  Switch,\n  Typography,\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\nimport {\n  selectSelectedVisualizeItemId,\n  selectVisualizeDataFilePath,\n  selectVisualizeDataNodeId,\n  selectVisualizeDataType,\n  selectVisualizeItemType,\n  selectVisualizeItemTypeIsMultiPlot,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { VISUALIZE_ITEM_TYPE_SET } from 'store/slice/VisualizeItem/VisualizeItemType'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  resetImageActiveIndex,\n  setDisplayDataPath,\n  toggleItemTypeMultiPlot,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { ImageItemEditor } from './Editor/ImageItemEditor'\nimport { CsvItemEditor } from './Editor/CsvItemEditor'\nimport { HeatmapItemEditor } from './Editor/HeatmapItemEditor'\nimport { TimeSeriesItemEditor } from './Editor/TimeSeriesItemEditor'\nimport { RoiItemEditor } from './Editor/RoiItemEditor'\nimport { FilePathSelect } from './FilePathSelect'\nimport { ScatterItemEditor } from './Editor/ScatterItemEditor'\nimport { BarItemEditor } from './Editor/BarItemEditor'\nimport { deleteDisplayItem } from 'store/slice/DisplayData/DisplayDataSlice'\n\nexport const VisualizeItemEditor = () => {\n  const selectedItemId = useSelector(selectSelectedVisualizeItemId)\n  return (\n    <>\n      {selectedItemId != null ? (\n        <SelectedItemIdContext.Provider value={selectedItemId}>\n          <Box m={1}>\n            <ItemTypeSelect />\n            <Editor />\n          </Box>\n        </SelectedItemIdContext.Provider>\n      ) : (\n        'Please select item...'\n      )}\n      <br />\n    </>\n  )\n}\n\nexport const SelectedItemIdContext = React.createContext<number>(NaN)\n\nconst ItemTypeSelect: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const isMultiPlot = useSelector(selectVisualizeItemTypeIsMultiPlot(itemId))\n  const onChageToggle = () => {\n    dispatch(toggleItemTypeMultiPlot(itemId))\n  }\n  return (\n    <FormControl style={{ minWidth: 120, marginBottom: 12 }}>\n      <FormControlLabel\n        control={<Switch checked={isMultiPlot} onChange={onChageToggle} />}\n        label=\"Multi plot\"\n      />\n    </FormControl>\n  )\n}\n\nconst Editor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const itemType = useSelector(selectVisualizeItemType(itemId))\n  switch (itemType) {\n    case VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT:\n      return <MultiPlotItemEditor />\n    case VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA:\n      return <DisplayDataItemEditor />\n  }\n}\n\nconst MultiPlotItemEditor: React.FC = () => {\n  return (\n    <div>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography>ImageEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <ImageItemEditor />\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2a-content\"\n          id=\"panel2a-header\"\n        >\n          <Typography>TimeSeriesEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <TimeSeriesItemEditor />\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel3a-content\"\n          id=\"panel3a-header\"\n        >\n          <Typography>HeatmapEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <HeatmapItemEditor />\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  )\n}\n\nconst DisplayDataItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dataType = useSelector(selectVisualizeDataType(itemId))\n  const selectedNodeId = useSelector(selectVisualizeDataNodeId(itemId))\n  const selectedFilePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n  const [prevItem, setPrevItem] = useState<{\n    dataType: DATA_TYPE\n    filePath: string | null\n  }>({\n    dataType: 'image',\n    filePath: null,\n  })\n\n  useEffect(() => {\n    setPrevItem({ dataType, filePath: selectedFilePath })\n  }, [selectedFilePath, dataType])\n\n  const dispatch = useDispatch()\n  const onSelect = (nodeId: string, filePath: string, dataType: DATA_TYPE) => {\n    dispatch(setDisplayDataPath({ itemId, nodeId, filePath, dataType }))\n    dispatch(resetImageActiveIndex({ itemId }))\n    dispatch(deleteDisplayItem(prevItem))\n  }\n\n  return (\n    <>\n      <FilePathSelect\n        selectedNodeId={selectedNodeId}\n        selectedFilePath={selectedFilePath}\n        onSelect={onSelect}\n      />\n      <div style={{ marginTop: 8 }}>\n        <DisplayEditor dataType={dataType} />\n      </div>\n    </>\n  )\n}\n\nconst DisplayEditor: React.FC<{\n  dataType: DATA_TYPE | null\n}> = ({ dataType }) => {\n  /* 他のtypeのEditorも必要になったら追加する */\n  switch (dataType) {\n    case DATA_TYPE_SET.IMAGE:\n      return <ImageItemEditor />\n    case DATA_TYPE_SET.CSV:\n      return <CsvItemEditor />\n    case DATA_TYPE_SET.HEAT_MAP:\n      return <HeatmapItemEditor />\n    case DATA_TYPE_SET.TIME_SERIES:\n      return <TimeSeriesItemEditor />\n    case DATA_TYPE_SET.ROI:\n      return <RoiItemEditor />\n    case DATA_TYPE_SET.SCATTER:\n      return <ScatterItemEditor />\n    case DATA_TYPE_SET.BAR:\n      return <BarItemEditor />\n    case DATA_TYPE_SET.HTML:\n      return <div>html editor</div>\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport { drawerWidth } from 'components/FlowChart/FlowChart'\nimport { VisualizeItems } from './VisualizeItems'\nimport { VisualizeItemEditor } from './VisualizeItemEditor'\n\nconst Visualize: React.FC = () => {\n  return (\n    <RootDiv>\n      <StyledDrawer variant=\"permanent\">\n        <MuiToolbar />\n        <StyledDrawerContents>\n          <VisualizeItemEditor />\n        </StyledDrawerContents>\n      </StyledDrawer>\n      <MainContents>\n        <MuiToolbar />\n        <VisualizeItems />\n      </MainContents>\n    </RootDiv>\n  )\n}\n\nconst RootDiv = styled('div')({\n  display: 'flex',\n})\n\nconst StyledDrawer = styled(Drawer)({\n  width: drawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: drawerWidth,\n  },\n})\n\nconst StyledDrawerContents = styled('div')({\n  overflow: 'auto',\n})\n\nconst MainContents = styled('main')({\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n  height: '100vh',\n})\n\nexport default Visualize\n","import { RootState } from 'store/store'\nimport { EXPERIMENTS_STATUS } from './ExperimentsType'\n\nconst selectExperiments = (state: RootState) => state.experiments\n\nexport const selectExperimentsSatusIsUninitialized = (state: RootState) =>\n  selectExperiments(state).status === 'uninitialized'\n\nexport const selectExperimentsSatusIsPending = (state: RootState) =>\n  selectExperiments(state).status === 'pending'\n\nexport const selectExperimentsSatusIsFulfilled = (state: RootState) =>\n  selectExperiments(state).status === 'fulfilled'\n\nexport const selectExperimentsSatusIsError = (state: RootState) =>\n  selectExperiments(state).status === 'error'\n\nexport const selectExperimentsErrorMessage = (state: RootState) => {\n  const experiments = selectExperiments(state)\n  if (experiments.status === 'error') {\n    return experiments.message\n  } else {\n    throw new Error('experiments status is not error')\n  }\n}\n\nexport const selectExperimentList = (state: RootState) => {\n  const experiments = selectExperiments(state)\n  if (experiments.status === 'fulfilled') {\n    return experiments.experimentList\n  } else {\n    throw new Error('experiments status is not fulfilled')\n  }\n}\n\nexport const selectExperimentUidList = (state: RootState) =>\n  Object.keys(selectExperimentList(state))\n\nexport const selectExperiment = (uid: string) => (state: RootState) =>\n  selectExperimentList(state)[uid]\n\nexport const selectExperimentTimeStamp = (uid: string) => (state: RootState) =>\n  selectExperiment(uid)(state).timestamp\n\nexport const selectExperimentName = (uid: string) => (state: RootState) =>\n  selectExperiment(uid)(state).name\n\nexport const selectExperimentStatus =\n  (uid: string) =>\n  (state: RootState): EXPERIMENTS_STATUS => {\n    const functions = selectExperimentList(state)[uid].functions\n    const statusList = Object.values(functions).map((f) => f.status)\n    if (statusList.findIndex((status) => status === 'error') >= 0) {\n      return 'error'\n    } else if (statusList.findIndex((status) => status === 'running') >= 0) {\n      return 'running'\n    } else {\n      return 'success'\n    }\n  }\n\nexport const selectExperimentFunctionNodeIdList =\n  (uid: string) => (state: RootState) =>\n    Object.keys(selectExperimentList(state)[uid].functions)\n\nexport const selectExperimentFunction =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentList(state)[uid].functions[nodeId]\n\nexport const selectExperimentFunctionName =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentFunction(uid, nodeId)(state).name\n\nexport const selectExperimentFunctionStatus =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentFunction(uid, nodeId)(state).status\n","import React from 'react'\nimport DoneIcon from '@mui/icons-material/Done'\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline'\nimport HorizontalRuleIcon from '@mui/icons-material/HorizontalRule'\n\nimport { EXPERIMENTS_STATUS } from 'store/slice/Experiments/ExperimentsType'\n\nexport const ExperimentStatusIcon = React.memo<{ status: EXPERIMENTS_STATUS }>(\n  ({ status }) => {\n    switch (status) {\n      case 'error':\n        return <ErrorOutlineIcon color=\"error\" />\n      case 'success':\n        return <DoneIcon color=\"success\" />\n      case 'running':\n        return <HorizontalRuleIcon color=\"inherit\" />\n    }\n  },\n)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Box from '@mui/material/Box'\nimport Collapse from '@mui/material/Collapse'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Typography from '@mui/material/Typography'\n\nimport { ExperimentUidContext } from './ExperimentTable'\nimport {\n  selectExperimentFunctionName,\n  selectExperimentFunctionNodeIdList,\n  selectExperimentFunctionStatus,\n} from 'store/slice/Experiments/ExperimentsSelectors'\nimport { ExperimentStatusIcon } from './ExperimentStatusIcon'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\n\nexport const CollapsibleTable: React.FC<{\n  open: boolean\n}> = ({ open }) => {\n  return (\n    <TableRow>\n      <TableCell sx={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <Box margin={1}>\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\n              Details\n            </Typography>\n            <Table size=\"small\" aria-label=\"purchases\">\n              <Head />\n              <Body />\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nconst Head: React.FC = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell>Function</TableCell>\n        <TableCell>nodeID</TableCell>\n        <TableCell>Success</TableCell>\n      </TableRow>\n    </TableHead>\n  )\n}\n\nconst Body: React.FC = () => {\n  const uid = React.useContext(ExperimentUidContext)\n  const nodeIdList = useSelector(\n    selectExperimentFunctionNodeIdList(uid),\n    arrayEqualityFn,\n  )\n  return (\n    <TableBody>\n      {nodeIdList.map((nodeId) => (\n        <TableRowOfFunction nodeId={nodeId} />\n      ))}\n    </TableBody>\n  )\n}\n\nconst TableRowOfFunction = React.memo<{ nodeId: string }>(({ nodeId }) => {\n  const uid = React.useContext(ExperimentUidContext)\n  const name = useSelector(selectExperimentFunctionName(uid, nodeId))\n  const status = useSelector(selectExperimentFunctionStatus(uid, nodeId))\n  return (\n    <TableRow key={nodeId}>\n      <TableCell component=\"th\" scope=\"row\">\n        {name}\n      </TableCell>\n      <TableCell>{nodeId}</TableCell>\n      <TableCell>\n        <ExperimentStatusIcon status={status} />\n      </TableCell>\n    </TableRow>\n  )\n})\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from '@mui/material/Button'\nimport Box from '@mui/material/Box'\nimport Alert from '@mui/material/Alert'\nimport AlertTitle from '@mui/material/AlertTitle'\nimport IconButton from '@mui/material/IconButton'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline'\nimport GetAppIcon from '@mui/icons-material/GetApp'\nimport ReplayIcon from '@mui/icons-material/Replay'\nimport { useSnackbar } from 'notistack'\n\nimport { CollapsibleTable } from './CollapsibleTable'\nimport {\n  selectExperimentsSatusIsUninitialized,\n  selectExperimentsSatusIsFulfilled,\n  selectExperimentTimeStamp,\n  selectExperimentName,\n  selectExperimentStatus,\n  selectExperimentsSatusIsError,\n  selectExperimentsErrorMessage,\n  selectExperimentList,\n} from 'store/slice/Experiments/ExperimentsSelectors'\nimport {\n  deleteExperimentByUid,\n  importExperimentByUid,\n} from 'store/slice/Experiments/ExperimentsActions'\nimport { getExperiments } from 'store/slice/Experiments/ExperimentsActions'\nimport { ExperimentStatusIcon } from './ExperimentStatusIcon'\nimport { AppDispatch } from 'store/store'\nimport { setRunBtnOption } from 'store/slice/Pipeline/PipelineSlice'\nimport { RUN_BTN_OPTIONS } from 'store/slice/Pipeline/PipelineType'\nimport { Experiment } from 'store/slice/Experiments/ExperimentsType'\nimport { TableSortLabel } from '@mui/material'\n\nexport const ExperimentTable: React.FC = () => {\n  const isUninitialized = useSelector(selectExperimentsSatusIsUninitialized)\n  const isFulfilled = useSelector(selectExperimentsSatusIsFulfilled)\n  const isError = useSelector(selectExperimentsSatusIsError)\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (isUninitialized) {\n      dispatch(getExperiments())\n    }\n  }, [dispatch, isUninitialized])\n  if (isFulfilled) {\n    return <TableImple />\n  } else if (isError) {\n    return <ExperimentsErrorView />\n  } else {\n    return null\n  }\n}\n\nconst ExperimentsErrorView: React.FC = () => {\n  const message = useSelector(selectExperimentsErrorMessage)\n  return (\n    <Alert severity=\"error\">\n      <AlertTitle>failed to get experiments...</AlertTitle>\n      {message}\n    </Alert>\n  )\n}\n\nexport const ExperimentUidContext = React.createContext<string>('')\n\nconst TableImple: React.FC = () => {\n  const experimentList = useSelector(selectExperimentList)\n  const dispatch = useDispatch()\n  const onClickReload = () => {\n    dispatch(getExperiments())\n  }\n\n  const [order, setOrder] = React.useState<Order>('asc')\n  const [sortTarget, setSortTarget] =\n    React.useState<keyof Experiment>('timestamp')\n  const sortHandler =\n    (property: keyof Experiment) => (event: React.MouseEvent<unknown>) => {\n      const isAsc = sortTarget === property && order === 'asc'\n      setOrder(isAsc ? 'desc' : 'asc')\n      setSortTarget(property)\n    }\n\n  return (\n    <Box>\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n        }}\n      >\n        <Button\n          sx={{\n            marginBottom: (theme) => theme.spacing(1),\n          }}\n          variant=\"outlined\"\n          endIcon={<ReplayIcon />}\n          onClick={onClickReload}\n        >\n          Reload\n        </Button>\n      </Box>\n      <TableContainer component={Paper} elevation={0} variant=\"outlined\">\n        <Table aria-label=\"collapsible table\">\n          <TableHead>\n            <Head order={order} sortHandler={sortHandler} />\n          </TableHead>\n          <TableBody>\n            {Object.values(experimentList)\n              .sort(getComparator(order, sortTarget))\n              .map((expData) => (\n                <ExperimentUidContext.Provider\n                  value={expData.uid}\n                  key={expData.uid}\n                >\n                  <Row />\n                </ExperimentUidContext.Provider>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  )\n}\n\nconst Head: React.FC<{\n  order: Order\n  sortHandler: any\n}> = ({ order, sortHandler }) => {\n  return (\n    <TableRow>\n      <TableCell />\n      <TableCell>\n        <TableSortLabel\n          active\n          direction={order}\n          onClick={sortHandler('timestamp')}\n        >\n          Timestamp\n        </TableSortLabel>\n      </TableCell>\n      <TableCell>\n        <TableSortLabel active direction={order} onClick={sortHandler('uid')}>\n          ID\n        </TableSortLabel>\n      </TableCell>\n      <TableCell>\n        <TableSortLabel active direction={order} onClick={sortHandler('name')}>\n          Name\n        </TableSortLabel>\n      </TableCell>\n      <TableCell>Success</TableCell>\n      <TableCell>Import</TableCell>\n      <TableCell>Delete</TableCell>\n    </TableRow>\n  )\n}\n\nconst Row: React.FC = () => {\n  const uid = React.useContext(ExperimentUidContext)\n  const timestamp = useSelector(selectExperimentTimeStamp(uid))\n  const status = useSelector(selectExperimentStatus(uid))\n  const name = useSelector(selectExperimentName(uid))\n  const [open, setOpen] = React.useState(false)\n  return (\n    <React.Fragment>\n      <TableRow\n        sx={{\n          '& > *': {\n            borderBottom: 'unset',\n          },\n          [`& .${tableCellClasses.root}`]: {\n            borderBottomWidth: 0,\n          },\n        }}\n      >\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen((prevOpen) => !prevOpen)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {timestamp}\n        </TableCell>\n        <TableCell>{uid}</TableCell>\n        <TableCell>{name}</TableCell>\n        <TableCell>\n          <ExperimentStatusIcon status={status} />\n        </TableCell>\n        <TableCell>\n          <ImportExperimentButton />\n        </TableCell>\n        <TableCell>\n          <DeleteExperimentButton />\n        </TableCell>\n      </TableRow>\n      <CollapsibleTable open={open} />\n    </React.Fragment>\n  )\n}\n\nconst ImportExperimentButton: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch()\n  const uid = React.useContext(ExperimentUidContext)\n  const { enqueueSnackbar } = useSnackbar()\n\n  const onClick = () => {\n    dispatch(importExperimentByUid(uid))\n      .unwrap()\n      .then(() =>\n        enqueueSnackbar('Successfully imported.', { variant: 'success' }),\n      )\n    dispatch(setRunBtnOption({ runBtnOption: RUN_BTN_OPTIONS.RUN_ALREADY }))\n  }\n  return (\n    <IconButton onClick={onClick}>\n      <GetAppIcon color=\"primary\" />\n    </IconButton>\n  )\n}\n\nconst DeleteExperimentButton: React.FC = () => {\n  const dispatch = useDispatch()\n  const uid = React.useContext(ExperimentUidContext)\n\n  const name = useSelector(selectExperimentName(uid))\n  const [open, setOpen] = React.useState(false)\n\n  const onClickOpen = () => {\n    setOpen(true)\n  }\n  const onClickCancel = () => {\n    setOpen(false)\n  }\n  const onClickOk = () => {\n    setOpen(false)\n    dispatch(deleteExperimentByUid(uid))\n  }\n  return (\n    <>\n      <IconButton onClick={onClickOpen}>\n        <DeleteOutlineIcon color=\"error\" />\n      </IconButton>\n      <Dialog open={open}>\n        <DialogTitle>Are you sure you want to delete {name}?</DialogTitle>\n        <DialogActions>\n          <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n            Cancel\n          </Button>\n          <Button onClick={onClickOk} variant=\"outlined\" autoFocus>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\ntype Order = 'asc' | 'desc'\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n","import React from 'react'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { ExperimentTable } from './ExperimentTable'\n\nconst Experiment: React.FC = () => {\n  return (\n    <div style={{ display: 'flex' }}>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          height: '100vh',\n          padding: 16,\n        }}\n      >\n        <MuiToolbar />\n        {/* <VisualizeItems /> */}\n        <ExperimentTable />\n      </main>\n    </div>\n  )\n}\n\nexport default Experiment\n","import React from 'react'\nimport AppBar from '@mui/material/AppBar'\nimport Tabs from '@mui/material/Tabs'\nimport Tab from '@mui/material/Tab'\nimport Typography from '@mui/material/Typography'\nimport Toolbar from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport FlowChart from './FlowChart/FlowChart'\nimport Visualize from './Visualize/Visualize'\nimport Experiment from './Experiment/Experiment'\nimport { useRunPipeline } from 'store/slice/Pipeline/PipelineHook'\n\nconst Layout: React.FC = () => {\n  const [value, setValue] = React.useState(0)\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue)\n  }\n\n  const runPipeline = useRunPipeline() // タブ切り替えによって結果取得処理が止まってしまうのを回避するため、タブの親レイヤーで呼び出している\n\n  return (\n    <RootDiv>\n      <StyledAppBar position=\"fixed\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\">OPTINIST</Typography>\n          <Tabs\n            sx={{ width: '100%' }}\n            value={value}\n            onChange={handleChange}\n            centered\n            textColor=\"inherit\"\n          >\n            <Tab label=\"Workflow\" {...a11yProps(0)} />\n            <Tab label=\"Visualize\" {...a11yProps(1)} />\n            <Tab label=\"Record\" {...a11yProps(2)} />\n          </Tabs>\n        </Toolbar>\n      </StyledAppBar>\n      <TabPanel value={value} index={0}>\n        <FlowChart {...runPipeline} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Visualize />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Experiment />\n      </TabPanel>\n    </RootDiv>\n  )\n}\n\nconst RootDiv = styled('div')(({ theme }) => ({\n  flexGrow: 1,\n  backgroundColor: theme.palette.background.paper,\n}))\n\nconst StyledAppBar = styled(AppBar)(({ theme }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n}))\n\ninterface TabPanelProps {\n  children?: React.ReactNode\n  index: any\n  value: any\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Typography>{children}</Typography>}\n    </div>\n  )\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  }\n}\n\nexport default Layout\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  selectPipelineIsCanceled,\n  selectPipelineIsStartedSuccess,\n  selectPipelineLatestUid,\n  selectPipelineStatus,\n  selectRunPostData,\n} from './PipelineSelectors'\nimport { run, pollRunResult, runByCurrentUid } from './PipelineActions'\nimport { cancelPipeline } from './PipelineSlice'\nimport { selectFilePathIsUndefined } from '../InputNode/InputNodeSelectors'\nimport { useSnackbar } from 'notistack'\nimport { RUN_STATUS } from './PipelineType'\n\nconst POLLING_INTERVAL = 5000\n\nexport type UseRunPipelineReturnType = ReturnType<typeof useRunPipeline>\n\nexport function useRunPipeline() {\n  const dispatch = useDispatch()\n  const uid = useSelector(selectPipelineLatestUid)\n  const isCanceled = useSelector(selectPipelineIsCanceled)\n  const isStartedSuccess = useSelector(selectPipelineIsStartedSuccess)\n  const filePathIsUndefined = useSelector(selectFilePathIsUndefined)\n  const runPostData = useSelector(selectRunPostData)\n  const handleRunPipeline = React.useCallback(\n    (name: string) => {\n      dispatch(run({ runPostData: { name, ...runPostData, forceRunList: [] } }))\n    },\n    [dispatch, runPostData],\n  )\n  const handleRunPipelineByUid = React.useCallback(() => {\n    dispatch(runByCurrentUid({ runPostData }))\n  }, [dispatch, runPostData])\n  const handleCancelPipeline = React.useCallback(() => {\n    if (uid != null) {\n      dispatch(cancelPipeline())\n    }\n  }, [dispatch, uid])\n  React.useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (isStartedSuccess && !isCanceled && uid != null) {\n        dispatch(pollRunResult({ uid: uid }))\n      }\n    }, POLLING_INTERVAL)\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [dispatch, uid, isCanceled, isStartedSuccess])\n  const status = useSelector(selectPipelineStatus)\n  const { enqueueSnackbar } = useSnackbar()\n  // タブ移動による再レンダリングするたびにスナックバーが実行されてしまう挙動を回避するために前回の値を保持\n  const [prevStatus, setPrevStatus] = React.useState(status)\n  React.useEffect(() => {\n    if (prevStatus !== status) {\n      if (status === RUN_STATUS.FINISHED) {\n        enqueueSnackbar('Finished', { variant: 'success' })\n      } else if (status === RUN_STATUS.ABORTED) {\n        enqueueSnackbar('Aborted', { variant: 'error' })\n      } else if (status === RUN_STATUS.CANCELED) {\n        enqueueSnackbar('Canceled', { variant: 'info' })\n      }\n      setPrevStatus(status)\n    }\n  }, [status, prevStatus, enqueueSnackbar])\n  return {\n    filePathIsUndefined,\n    uid,\n    status,\n    isStartedSuccess,\n    handleRunPipeline,\n    handleRunPipelineByUid,\n    handleCancelPipeline,\n  }\n}\n","import React from 'react'\nimport IconButton from '@mui/material/IconButton'\nimport Close from '@mui/icons-material/Close'\nimport { SnackbarProvider, SnackbarKey, useSnackbar } from 'notistack'\n\nimport AppLayout from './components/Layout'\n\nconst App: React.FC = () => {\n  return (\n    <SnackbarProvider\n      maxSnack={5}\n      action={(snackbarKey) => (\n        <SnackbarCloseButton snackbarKey={snackbarKey} />\n      )}\n    >\n      <AppLayout />\n    </SnackbarProvider>\n  )\n}\n\nconst SnackbarCloseButton: React.FC<{ snackbarKey: SnackbarKey }> = ({\n  snackbarKey,\n}) => {\n  const { closeSnackbar } = useSnackbar()\n  return (\n    <IconButton onClick={() => closeSnackbar(snackbarKey)} size=\"large\">\n      <Close style={{ color: 'white' }} />\n    </IconButton>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { createSlice } from '@reduxjs/toolkit'\nimport {\n  ALGORITHM_LIST_SLICE_NAME,\n  AlgorithmListType,\n} from './AlgorithmListType'\nimport { getAlgoList } from './AlgorithmListActions'\nimport { convertToAlgoListType } from './AlgorithmListUtils'\n\nconst initialState: AlgorithmListType = {\n  isLatest: false,\n  tree: {},\n}\n\nexport const algorithmListSlice = createSlice({\n  name: ALGORITHM_LIST_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getAlgoList.fulfilled, (state, action) => {\n      state.tree = convertToAlgoListType(action.payload)\n      state.isLatest = true\n    })\n  },\n})\n\nexport default algorithmListSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { FileUploader, FILE_UPLOADER_SLICE_NAME } from './FileUploaderType'\nimport { setUploadProgress, uploadFile } from './FileUploaderActions'\nimport { inistialUploaderState } from './FileUploaderInitlalState'\n\nconst initialState: FileUploader = {}\n\nexport const fileUploaderSlice = createSlice({\n  name: FILE_UPLOADER_SLICE_NAME,\n  initialState,\n  reducers: {\n    setFileUploaderStateById(state, action: PayloadAction<string>) {\n      state[action.payload] = inistialUploaderState\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(setUploadProgress, (state, action) => {\n        const { progess, requestId } = action.payload\n        state[requestId].uploadingProgress = progess\n      })\n      .addCase(uploadFile.pending, (state, action) => {\n        const { fileName, requestId } = action.meta.arg\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          fileName,\n          isUninitialized: false,\n          pending: true,\n          fulfilled: false,\n          uploadingProgress: 0,\n        }\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        const { requestId } = action.meta.arg\n        const { resultPath } = action.payload\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          path: resultPath,\n          pending: false,\n          fulfilled: true,\n        }\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        const { requestId } = action.meta.arg\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          pending: false,\n          fulfilled: false,\n          error: action.error.message,\n        }\n      })\n  },\n})\n\nexport const { setFileUploaderStateById } = fileUploaderSlice.actions\n\nexport default fileUploaderSlice.reducer\n","import { TreeNodeTypeDTO, TreeNodeType } from './FilesTreeType'\n\nexport function convertToTreeNodeType(dto: TreeNodeTypeDTO[]): TreeNodeType[] {\n  return dto.map((node) =>\n    node.isdir\n      ? {\n          path: node.path,\n          name: node.name,\n          isDir: true,\n          nodes: convertToTreeNodeType(node.nodes),\n        }\n      : {\n          path: node.path,\n          name: node.name,\n          isDir: false,\n        },\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { uploadFile } from 'store/slice/FileUploader/FileUploaderActions'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n\nimport { getFilesTree } from './FilesTreeAction'\nimport {\n  FilesTree,\n  FILES_TREE_SLICE_NAME,\n  FILE_TREE_TYPE_SET,\n} from './FilesTreeType'\nimport { convertToTreeNodeType } from './FilesTreeUtils'\n\nconst initialState: FilesTree = {}\nexport const filesTreeSlice = createSlice({\n  name: FILES_TREE_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getFilesTree.pending, (state, action) => {\n        const fileType = action.meta.arg\n        state[fileType] = {\n          isLoading: true,\n          isLatest: false,\n          tree: [],\n        }\n      })\n      .addCase(getFilesTree.fulfilled, (state, action) => {\n        const fileTreeType = action.meta.arg\n        state[fileTreeType].tree = convertToTreeNodeType(action.payload)\n        state[fileTreeType].isLatest = true\n        state[fileTreeType].isLoading = false\n      })\n      .addCase(uploadFile.pending, (state, action) => {\n        const { fileType } = action.meta.arg\n        if (fileType === FILE_TYPE_SET.IMAGE) {\n          if (state[FILE_TREE_TYPE_SET.IMAGE] != null) {\n            state[FILE_TREE_TYPE_SET.IMAGE].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.IMAGE] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else if (fileType === FILE_TYPE_SET.CSV) {\n          if (state[FILE_TREE_TYPE_SET.CSV] != null) {\n            state[FILE_TREE_TYPE_SET.CSV].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.CSV] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else if (fileType === FILE_TYPE_SET.HDF5) {\n          if (state[FILE_TREE_TYPE_SET.HDF5] != null) {\n            state[FILE_TREE_TYPE_SET.HDF5].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.HDF5] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else {\n          if (state[FILE_TREE_TYPE_SET.ALL] != null) {\n            state[FILE_TREE_TYPE_SET.ALL].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.ALL] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        }\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        const { fileType } = action.meta.arg\n        if (fileType === FILE_TYPE_SET.IMAGE) {\n          state[FILE_TREE_TYPE_SET.IMAGE].isLatest = false\n        } else if (fileType === FILE_TYPE_SET.CSV) {\n          state[FILE_TREE_TYPE_SET.CSV].isLatest = false\n        } else if (fileType === FILE_TYPE_SET.HDF5) {\n          state[FILE_TREE_TYPE_SET.HDF5].isLatest = false\n        } else {\n          state[FILE_TREE_TYPE_SET.ALL].isLatest = false\n        }\n      })\n  },\n})\n\nexport default filesTreeSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport * as MuiColors from '@mui/material/colors'\n\nexport type HandleTypeColor = {\n  colorMap: { [type: string]: string }\n  /**\n   * HANDLE_COLOR_PRESET_MAPのkey\n   */\n  nextKey: number\n}\n\nconst initialState: HandleTypeColor = {\n  colorMap: {\n    ImageData: MuiColors.red[500],\n    IscellData: MuiColors.indigo[500],\n    TimeSeriesData: MuiColors.yellow[500],\n    Suite2pData: MuiColors.green[500],\n  },\n  nextKey: 0,\n}\n\nconst SLICE_NAME = 'handleTypeColor'\n\nexport const handleTypeColorSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {},\n})\n\nexport default handleTypeColorSlice.reducer\n","import { HDF5TreeDTO } from './HDF5Type'\n\nexport function convertToTreeNodeType(dto: HDF5TreeDTO[]): HDF5TreeDTO[] {\n  return dto.map((node) =>\n    node.isDir\n      ? {\n          name: node.name,\n          isDir: true,\n          nodes: convertToTreeNodeType(node.nodes),\n          path: node.path,\n        }\n      : {\n          name: node.name,\n          isDir: false,\n          shape: node.shape,\n          path: node.path,\n          nbytes: node.nbytes,\n        },\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { getHDF5Tree } from './HDF5Action'\nimport { HDF5Tree, HDF5_SLICE_NAME } from './HDF5Type'\nimport { convertToTreeNodeType } from './HDF5Utils'\n\nconst initialState: HDF5Tree = {\n  isLoading: false,\n  tree: [],\n}\nexport const HDF5Slice = createSlice({\n  name: HDF5_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getHDF5Tree.pending, (state, action) => {\n        state = {\n          isLoading: true,\n          tree: [],\n        }\n      })\n      .addCase(getHDF5Tree.fulfilled, (state, action) => {\n        state.tree = convertToTreeNodeType(action.payload)\n        state.isLoading = false\n      })\n  },\n})\n\nexport default HDF5Slice.reducer\n","import type { ExperimentDTO, ExperimentsDTO } from 'api/experiments/Experiments'\nimport type {\n  ExperimentListType,\n  ExperimentType,\n  ExperimentFunction,\n  EXPERIMENTS_STATUS,\n} from './ExperimentsType'\n\nexport function convertToExperimentListType(\n  dto: ExperimentsDTO,\n): ExperimentListType {\n  const experimentList: ExperimentListType = {}\n  Object.entries(dto).forEach(([uid, value]) => {\n    experimentList[uid] = convertToExperimentType(value)\n  })\n  return experimentList\n}\n\nexport function convertToExperimentType(dto: ExperimentDTO): ExperimentType {\n  const functions: { [nodeId: string]: ExperimentFunction } = {}\n  Object.entries(dto.function).forEach(([name, value]) => {\n    functions[value.unique_id] = {\n      name,\n      nodeId: value.unique_id,\n      postion: value.position,\n      status: convertToExperimentStatus(value.success),\n    }\n  })\n  return {\n    uid: dto.unique_id,\n    timestamp: dto.timestamp,\n    name: dto.name,\n    functions,\n  }\n}\n\nfunction convertToExperimentStatus(dto: string): EXPERIMENTS_STATUS {\n  switch (dto) {\n    case 'running':\n      return 'running'\n    case 'success':\n      return 'success'\n    case 'error':\n      return 'error'\n    default:\n      throw new Error('failed to convert to EXPERIMENTS_STATUS')\n  }\n}\n\nexport function convertToFlowChartList(\n  dto: ExperimentsDTO,\n): ExperimentListType {\n  const experimentList: ExperimentListType = {}\n  Object.entries(dto).forEach(([uid, value]) => {\n    experimentList[uid] = convertToExperimentType(value)\n  })\n  return experimentList\n}\n","import { createSlice, isAnyOf } from '@reduxjs/toolkit'\nimport { EXPERIMENTS_SLICE_NAME, Experiments } from './ExperimentsType'\nimport { getExperiments, deleteExperimentByUid } from './ExperimentsActions'\nimport { convertToExperimentListType } from './ExperimentsUtils'\nimport {\n  pollRunResult,\n  run,\n  runByCurrentUid,\n} from '../Pipeline/PipelineActions'\n\nconst initialState: Experiments = {\n  status: 'uninitialized',\n}\n\nexport const experimentsSlice = createSlice({\n  name: EXPERIMENTS_SLICE_NAME,\n  initialState: initialState as Experiments,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getExperiments.pending, () => {\n        return {\n          status: 'pending',\n        }\n      })\n      .addCase(getExperiments.fulfilled, (state, action) => {\n        const experimentList = convertToExperimentListType(action.payload)\n        return {\n          status: 'fulfilled',\n          experimentList,\n        }\n      })\n      .addCase(getExperiments.rejected, (state, action) => {\n        return {\n          status: 'error',\n          message: action.error.message,\n        }\n      })\n      .addCase(deleteExperimentByUid.fulfilled, (state, action) => {\n        if (action.payload && state.status === 'fulfilled') {\n          delete state.experimentList[action.meta.arg]\n        }\n      })\n      .addCase(pollRunResult.fulfilled, (state, action) => {\n        if (state.status === 'fulfilled') {\n          const uid = action.meta.arg.uid\n          const target = state.experimentList[uid]\n          Object.entries(action.payload).forEach(([nodeId, value]) => {\n            if (value.status === 'success') {\n              target.functions[nodeId].status = 'success'\n            } else if (value.status === 'error') {\n              target.functions[nodeId].status = 'error'\n            }\n          })\n        }\n      })\n      .addMatcher(isAnyOf(run.fulfilled, runByCurrentUid.fulfilled), () => {\n        return {\n          status: 'uninitialized',\n        }\n      })\n  },\n})\n\nexport default experimentsSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport {\n  algorithmListReducer,\n  algorithmNodeReducer,\n  displayDataReducer,\n  fileUploaderReducer,\n  flowElementReducer,\n  inputNodeReducer,\n  nwbReducer,\n  filesTreeReducer,\n  handleTypeColorReducer,\n  rightDrawerReducer,\n  visualaizeItemReducer,\n  snakemakeReducer,\n  pipelineReducer,\n  hdf5Reducer,\n  experimentsReducer,\n} from './slice'\n\nexport const store = configureStore({\n  reducer: {\n    algorithmList: algorithmListReducer,\n    algorithmNode: algorithmNodeReducer,\n    displayData: displayDataReducer,\n    fileUploader: fileUploaderReducer,\n    flowElement: flowElementReducer,\n    inputNode: inputNodeReducer,\n    handleColor: handleTypeColorReducer,\n    filesTree: filesTreeReducer,\n    nwb: nwbReducer,\n    rightDrawer: rightDrawerReducer,\n    visualaizeItem: visualaizeItemReducer,\n    snakemake: snakemakeReducer,\n    pipeline: pipelineReducer,\n    hdf5: hdf5Reducer,\n    experiments: experimentsReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\nexport type ThunkApiConfig<T = unknown, PendingMeta = unknown> = {\n  state: RootState\n  dispatch: AppDispatch\n  rejectValue: T\n  penfingMeta: PendingMeta\n}\n","import { createTheme } from '@mui/material/styles'\n\nexport const theme = createTheme({\n  components: {\n    MuiTextField: {\n      defaultProps: {\n        variant: 'standard',\n      },\n    },\n    MuiSelect: {\n      defaultProps: {\n        variant: 'standard',\n      },\n    },\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { store } from 'store/store'\n\nimport { ThemeProvider } from '@mui/material/styles'\nimport { theme } from './Theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}