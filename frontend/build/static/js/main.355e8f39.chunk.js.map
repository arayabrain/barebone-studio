{"version":3,"sources":["store/utils/param/ParamUtils.ts","store/slice/AlgorithmNode/AlgorithmNodeSelectors.ts","store/slice/AlgorithmList/AlgorithmListUtils.ts","store/slice/AlgorithmList/AlgorithmListSelectors.ts","store/slice/AlgorithmList/AlgorithmListType.ts","const/API.ts","store/slice/AlgorithmList/AlgorithmListActions.ts","store/slice/InputNode/InputNodeType.ts","store/slice/FlowElement/FlowElementType.ts","store/slice/FlowElement/FlowElementActions.ts","components/FlowChart/TreeView.tsx","const/flowchart.ts","api/experiments/Experiments.ts","store/slice/Experiments/ExperimentsType.ts","store/slice/Experiments/ExperimentsActions.ts","store/slice/InputNode/InputNodeActions.ts","store/slice/FlowElement/FlowElementUtils.ts","api/run/RunUtils.ts","store/slice/FlowElement/FlowElementSlice.ts","store/slice/FlowElement/FlowElementSelectors.ts","store/slice/InputNode/InputNodeUtils.ts","store/slice/InputNode/InputNodeSelectors.ts","components/FlowChart/FlowChartNode/HandleColorHook.ts","store/slice/HandleTypeColor/HandleTypeColorSelectors.ts","store/slice/FilesTree/FilesTreeSelectors.ts","store/slice/FilesTree/FilesTreeType.ts","store/slice/FilesTree/FilesTreeAction.ts","store/slice/FilesTree/FilesTreeUtils.ts","components/FileSelectDialog.tsx","components/FlowChart/FlowChartNode/LinerProgressWithLabel.tsx","store/slice/FileUploader/FileUploaderType.ts","store/slice/FileUploader/FileUploaderActions.ts","store/slice/FileUploader/FileUploaderInitlalState.ts","store/slice/FileUploader/FileUploaderSelectors.ts","store/slice/FileUploader/FileUploaderHook.ts","components/FlowChart/FlowChartNode/FileSelect.tsx","components/FlowChart/FlowChartNode/FlowChartUtils.ts","utils/EqualityUtils.ts","components/FlowChart/FlowChartNode/ImageFileNode.tsx","store/slice/RightDrawer/RightDrawerSlice.ts","store/slice/NWB/NWBSelectors.ts","store/slice/Snakemake/SnakemakeSelectors.ts","store/slice/Pipeline/PipelineType.ts","store/slice/DisplayData/DisplayDataType.ts","store/slice/DisplayData/DisplayDataUtils.ts","store/slice/Pipeline/PipelineUtils.ts","store/slice/Pipeline/PipelineSelectors.ts","components/FlowChart/FlowChartNode/AlgorithmNode.tsx","store/slice/InputNode/InputNodeSlice.ts","store/slice/DisplayData/DisplayDataSelectors.ts","store/slice/DisplayData/DisplayDataActions.ts","components/Visualize/DataContext.tsx","store/slice/VisualizeItem/VisualizeItemType.ts","store/slice/VisualizeItem/VisualizeItemUtils.ts","store/slice/VisualizeItem/VisualizeItemSelectors.ts","components/Visualize/Plot/CsvPlot.tsx","components/FlowChart/FlowChartNode/CsvFileNode.tsx","store/slice/HDF5/HDF5Selectors.ts","store/slice/HDF5/HDF5Type.ts","store/slice/HDF5/HDF5Action.ts","components/FlowChart/FlowChartNode/HDF5FileNode.tsx","components/FlowChart/CustomEdge.tsx","store/slice/NWB/NWBAction.ts","store/slice/NWB/NWBType.ts","store/slice/NWB/NWBSlice.ts","components/Accordion.tsx","components/ParamFormItemCreator.tsx","components/FlowChart/NWB.tsx","store/slice/Snakemake/SnakemakeType.ts","store/slice/Snakemake/SnakemakeAction.ts","store/slice/Snakemake/SnakemakeSlice.ts","components/FlowChart/Snakemake.tsx","api/run/Run.ts","store/slice/Pipeline/PipelineActions.ts","store/slice/Pipeline/PipelineSlice.ts","components/RunButtons.tsx","components/ToolBar.tsx","components/FlowChart/ReactFlowComponent.tsx","store/slice/RightDrawer/RightDrawerSelectors.ts","store/slice/AlgorithmNode/AlgorithmNodeType.ts","store/slice/AlgorithmNode/AlgorithmNodeActions.ts","store/slice/AlgorithmNode/AlgorithmNodeSlice.ts","components/FlowChart/AlgorithmParamForm.tsx","components/FlowChart/RightDrawer.tsx","components/FlowChart/FlowChart.tsx","store/slice/VisualizeItem/VisualizeItemSlice.ts","components/Visualize/VisualizeItemAddButton.tsx","store/slice/DisplayData/DisplayDataSlice.ts","components/Visualize/DisplayItemDeleteButton.tsx","components/Visualize/Plot/ImagePlot.tsx","components/Visualize/Plot/TimeSeriesPlot.tsx","components/Visualize/Plot/HeatMapPlot.tsx","components/Visualize/FilePathSelect.tsx","components/Visualize/MultiPlotItem.tsx","components/Visualize/Plot/RoiPlot.tsx","components/Visualize/Plot/ScatterPlot.tsx","components/Visualize/Plot/BarPlot.tsx","components/Visualize/Plot/HTMLPlot.tsx","components/Visualize/DisplayDataItem.tsx","components/Visualize/MultiPlotDeleteButton.tsx","components/Visualize/VisualizeItems.tsx","components/Visualize/Editor/GradientColorPicker.tsx","components/Visualize/Editor/ImageItemEditor.tsx","components/Visualize/Editor/CsvItemEditor.tsx","components/Visualize/Editor/HeatmapItemEditor.tsx","components/Visualize/Editor/TimeSeriesItemEditor.tsx","components/Visualize/Editor/RoiItemEditor.tsx","components/Visualize/Editor/ScatterItemEditor.tsx","components/Visualize/Editor/BarItemEditor.tsx","components/Visualize/VisualizeItemEditor.tsx","components/Visualize/Visualize.tsx","store/slice/Experiments/ExperimentsSelectors.ts","components/Experiment/ExperimentStatusIcon.tsx","components/Experiment/CollapsibleTable.tsx","components/Experiment/ExperimentTable.tsx","components/Experiment/Experiment.tsx","components/optinist.png","components/Layout.tsx","store/slice/Pipeline/PipelineHook.ts","App.tsx","reportWebVitals.ts","store/slice/AlgorithmList/AlgorithmListSlice.ts","store/slice/FileUploader/FileUploaderSlice.ts","store/slice/FilesTree/FilesTreeSlice.ts","store/slice/HandleTypeColor/HandleTypeColorSlice.ts","store/slice/HDF5/HDF5Utils.ts","store/slice/HDF5/HDF5Slice.ts","store/slice/Experiments/ExperimentsUtils.ts","store/slice/Experiments/ExperimentsSlice.ts","store/store.ts","Theme.ts","index.tsx"],"names":["getChildParam","path","ParamMap","result","Object","values","node","isParamChild","children","param","type","convertToParamMap","dto","keyList","entries","forEach","name","value","kList","Array","isArray","isDictObject","concat","join","push","selectAlgorithmNode","state","algorithmNode","selectAlgorithmName","nodeId","selectAlgorithmParams","params","isAlgoChild","algoNode","getAlgoChild","algoList","algoName","convertToAlgoListType","prototype","hasOwnProperty","call","functionPath","args","returns","selectAlgorithmList","algorithmList","selectAlgorithmListIsLated","isLatest","selectAlgorithmListTree","tree","ALGORITHM_LIST_SLICE_NAME","HOST","process","PORT","BASE_URL","getAlgoList","createAsyncThunk","_","thunkAPI","a","rejectWithValue","axios","get","response","data","INPUT_NODE_SLICE_NAME","FILE_TYPE_SET","FLOW_ELEMENT_SLICE_NAME","NODE_TYPE_SET","addAlgorithmNode","addInputNode","createAction","AlgorithmTreeView","React","memo","dispatch","useDispatch","useSelector","useEffect","TreeView","sx","flexGrow","height","defaultCollapseIcon","defaultExpandIcon","TreeItem","label","InputNodeComponent","fileName","nodeName","fileType","map","i","AlgoNodeComponent","onAlgoNodeClick","newNode","id","nanoid","toFixed","LeafItem","AddButton","onClick","nodeType","componentType","onDataNodeClick","IconButton","style","padding","size","Typography","variant","textOverflow","overflow","width","display","styled","treeItemClasses","iconContainer","margin","INITIAL_ALGO_STYLE","borderRadius","INITIAL_DATA_STYLE","border","getExperimentsApi","deleteExperimentByUidApi","uid","delete","importExperimentByUidApi","EXPERIMENTS_SLICE_NAME","getExperiments","deleteExperimentByUid","importExperimentByUid","setInputNodeFilePath","isNodeData","isNode","isAlgorithmNodeData","getLabelByPath","filePath","length","getFileName","split","reverse","isInputNodePostData","isInputNodeData","isAlgorithmNodePostData","initialFlowPosition","x","y","zoom","initialElementCoord","initialState","flowElements","position","flowPosition","elementCoord","flowElementSlice","createSlice","reducers","setFlowPosition","action","payload","setFlowElements","deleteFlowElements","removeElements","deleteFlowElementsById","element","find","edge","undefined","editFlowElementPositionById","coord","elementIdx","findIndex","ele","targetItem","extraReducers","builder","addCase","fulfilled","meta","arg","targetPosition","Position","Left","sourcePosition","Right","newPosition","updateElementCoord","targetNode","newNodeList","nodeList","edgeList","actions","selectFlowElements","flowElement","selectFlowPosition","selectNodeById","filter","selectNodeLabelById","isCsvInputNode","inputNode","isHDF5InputNode","selectInputNodeById","selectInputNodeDefined","keys","includes","selectImageInputNodeSelectedFilePath","selectedFilePath","Error","selectHDF5InputNodeSelectedFilePath","selectFilePathIsUndefined","selectCsvInputNodeParam","selectInputNodeHDF5Path","item","hdf5Path","useHandleColor","key","handleColor","colorMap","selectFilesTree","filesTree","FILES_TREE_SLICE_NAME","FILE_TREE_TYPE_SET","getFilesTree","file_type","convertToTreeNodeType","isdir","isDir","nodes","getNodeByPath","FileSelectDialog","open","initialFilePath","onClickCancel","onClickOk","onClose","title","multiSelect","useState","setSelectedFilePath","theme","useTheme","Dialog","fullWidth","DialogTitle","DialogContent","dividers","marginBottom","spacing","borderColor","palette","divider","FileTreeView","FilePathSelectedListView","DialogActions","Button","color","selectFilesTreeNodes","selectFilesIsLatest","isLoading","selectFilesIsLoading","useFileTree","onCheckFile","selectedPath","onCheckDir","checked","childrenFilePathList","from","Set","LinearProgress","disableSelection","onNodeSelect","event","nodeIds","isDirNodeByPath","TreeNode","allChecked","every","allNotChecked","indeterminate","icon","htmlColor","TreeItemLabel","checkboxProps","e","stopPropagation","onChange","target","childNode","fontSize","Box","alignItems","Checkbox","disableRipple","marginRight","text","LinearProgressWithLabel","props","mr","minWidth","Math","round","FILE_UPLOADER_SLICE_NAME","setUploadProgress","uploadFile","requestId","formData","config","getUploadConfig","percent","total","progess","post","resultPath","file_path","onUpdateProgressFn","onUploadProgress","progressEvent","percentCompleted","loaded","inistialUploaderState","isUninitialized","pending","uploadingProgress","error","selectFileUploader","fileUploader","useFileUploader","useRef","onUploadFile","useCallback","current","uninitialized","selectFileUploadIsUninitialized","selectUploadFilePath","selectFileUploadIsPending","selectFileUploadIsFulfilled","progress","selectFileUploadProgress","selectFileUploadError","FileSelect","onChangeFilePath","uploadedFilePath","marginLeft","FileSelectImple","onSelectFile","fileTreeType","selectButtonLabel","uploadButtonLabel","inputRef","setOpen","accept","getFileInputAccept","ButtonGroup","click","ref","preventDefault","files","file","FormData","append","visibility","className","toHandleId","getHandleType","handleId","isValidConnection","connection","sourceHandle","targetHandle","arrayEqualityFn","b","v","twoDimarrayEqualityFn","sourceHandleStyle","top","ImageFileNode","ImageFileNodeImple","elementSelected","selected","returnType","imageColor","background","alpha","primary","light","right","RIGHT_DRAWER_MODE","mode","currendNodeId","rightDrawerSlice","openRightDrawer","closeRightDrawer","toggleParamForm","toggleNwb","toggleSnakemake","elm","selectNwb","nwb","selectNwbParamsKeyList","selectNwbParam","paramKey","selectNwbParamsValue","selectSnakemakeParams","snakemake","selectSnakemake","selectSnakemakeParamsKeyList","selectSnakemakeParam","selectSnakemakeParamsValue","PIPELINE_SLICE_NAME","RUN_STATUS","NODE_RESULT_STATUS","RUN_BTN_OPTIONS","RUN_NEW","RUN_ALREADY","RUN_BTN_LABELS","DISPLAY_DATA_SLICE_NAME","DATA_TYPE_SET","toDataType","isNodeResultPending","nodeResult","status","isNodeResultSuccess","isStartedPipeline","pipeline","getInitialRunResult","runPostData","initialResult","convertToOutputPath","selectPipelineLatestUid","currentPipeline","selectRunPostData","nwbParam","selectNwbParams","snakemakeParam","edgeListForRun","isEdge","selectEdgeListForRun","selectNodePostDataListForRun","forceRunList","selectForceRunList","selectInputNodeSelectedFilePath","selectInputNodeFileType","selectInputNodeParam","isUpdated","selectPipelineNodeResultStatus","selectStartedPipeline","run","selectPipelineRunBtn","runBtn","selectRunResultPendingNodeIdList","runResult","isNodeResultPendingAndNodeId","selectPipelineStatus","selectPipelineIsCanceled","selectPipelineIsStartedSuccess","isNodeResultSuccessAndNodeId","leftHandleStyle","rightHandleStyle","AlgorithmNode","AlgorithmNodeImple","isConnectable","AlgoName","AlgoArgs","AlgoReturns","Message","latestUid","paddingLeft","textAlign","main","algoArgs","algoListChild","selectAlgoArgs","algoInfoListEqualtyFn","info","algoInfo","ArgHandle","algoReturns","selectAlgoReturns","ReturnHandle","isNone","hex_color","isHover","setHover","rgb_color","hex","exec","parseInt","hexToRgb","onMouseEnter","onMouseLeave","Tooltip","placement","arrow","errorMsg","message","selectPipelineNodeResultMessage","anchorElRef","prevOpen","float","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","FormHelperText","success","inputNodeSlice","deleteInputNode","setCsvInputNodeParam","setInputNodeHDF5Path","setColumn","setIndex","transpose","newState","selectDisplayData","displayData","selectTimeSeriesDataIsInitialized","timeSeries","selectHeatMapDataIsInitialized","heatMap","selectImageData","image","selectImageDataIsInitialized","selectImageDataIsPending","selectCsvDataIsInitialized","csv","selectCsvDataError","selectCsvDataIsPending","selectCsvDataIsFulfilled","selectRoiData","roi","selectRoiDataIsInitialized","selectScatterDataIsInitialized","scatter","selectBarDataIsInitialized","bar","selectHTMLDataIsInitialized","html","getTimeSeriesDataById","index","getTimeSeriesAllData","getHeatMapData","getImageData","startIndex","endIndex","start_index","end_index","getCsvData","getRoiData","getScatterData","getBarData","getHTMLData","DisplayDataContext","createContext","dataType","itemId","NaN","VISUALIZE_ITEM_TYPE_SET","isMultiPlotItem","itemType","isDisplayDataItem","isImageItem","isTimeSeriesItem","isCsvItem","isHeatMapItem","isScatterItem","selectSelectedVisualizeItemId","visualaizeItem","selectedItemId","selectVisualizeItems","items","selectVisualizeItemIdList","Number","selectVisualizeItemType","selectMultiPlotImageItem","imageItem","selectMultiPlotImageItemNodeId","selectMultiPlotImageItemFilePath","selectMultiPlotTimeSeriesItem","timeSeriesItem","selectMultiPlotRoiItem","roiItem","selectMultiPlotRoiItemNodeId","selectMultiPlotRoiItemFilePath","selectMultiPlotTimeSeriesItemNodeId","selectMultiPlotTimeSeriesItemFilePath","selectMultiPlotHeatMapItem","heatMapItem","selectMultiPlotHeatMapItemNodeId","selectMultiPlotHeatMapItemFilePath","selectVisualizeDataType","selectVisualizeDataNodeId","selectVisualizeDataFilePath","selectImageItemFilePath","selectRoiItemFilePath","selectImageItemShowticklabels","showticklabels","selectImageItemZsmooth","zsmooth","selectImageItemStartIndex","selectImageItemEndIndex","selectImageItemShowLine","showline","selectImageItemShowGrid","showgrid","selectImageItemShowScale","showscale","selectImageItemColors","colors","selectImageItemRoiAlpha","roiAlpha","selectTimeSeriesItemOffset","offset","selectTimeSeriesItemSpan","span","selectTimeSeriesItemShowGrid","selectTimeSeriesItemShowLine","selectTimeSeriesItemShowTickLabels","selectTimeSeriesItemZeroLine","zeroline","selectTimeSeriesItemXrange","xrange","selectTimeSeriesItemDisplayNumbers","displayNumbers","selectTimeSeriesItemCheckedList","checkedList","selectRoiItemMaxNumber","roiFilePath","roiData","max","arr","selectHeatMapItemShowScale","selectHeatMapItemColors","selectCsvItemTranspose","selectCsvItemSetColumn","selectCsvItemSetIndex","selectScatterItemXIndex","xIndex","selectScatterItemYIndex","yIndex","CsvPlot","useContext","isInitialized","isPending","isFulfilled","CsvPlotImple","PresentationalCsvPlot","csvData","useMemo","col","row","columns","columnData","field","headerName","idx","rows","row_id","rowObj","fromEntries","CsvFileNode","CsvFileNodeImple","selectCsvInputNodeSelectedFilePath","ParamSettingDialog","selectCsvInputNodeParamSetColumn","setSetColumn","selectCsvInputNodeParamSetIndex","setSetIndex","selectCsvInputNodeParamTranspose","setTranspose","p","m","FormControlLabel","control","Switch","TextField","InputLabelProps","shrink","CsvPreview","otherProps","selectHDF5","hdf5","HDF5_SLICE_NAME","getHDF5Tree","HDF5FileNode","HDF5FileNodeImple","ItemSelect","structureFileName","Structure","autoFocus","useHDF5Tree","shape","nbytes","getNWBParams","nwbSlice","updateParam","newValue","Accordion","disableGutters","elevation","square","boxShadow","borderBottom","createParamFormItemComponent","paramSelector","paramValueSelector","paramUpdateActionCreator","useParamValueUpdate","ParamItemForString","updateParamAction","multiline","ParamItemForNumber","ParamItemForBoolean","ParamItemForValueType","ParamChildItem","marginTop","verticalAlign","ParamItem","AccordionSummary","expandIcon","AccordionDetails","NWBSettingButton","endIcon","NWBSettingContents","paramKeyList","Component","SNAKEMAKE_SLICE_NAME","getSnakemakeParams","SnakemakeSlice","SnakemakeButton","SnakemakeContents","runApi","runByUidApi","pendingNodeIdList","responseData","runByCurrentUid","currentUid","getState","pollRunResult","pipelineSlice","cancelPipeline","setRunBtnOption","runBtnOption","nodeResultDto","outputPath","outputPaths","convertToRunResult","rejected","addMatcher","isAnyOf","RunButtons","isStartedSuccess","filePathIsUndefined","handleCancelPipeline","handleRunPipeline","handleRunPipelineByUid","dialogOpen","setDialogOpen","enqueueSnackbar","useSnackbar","menuOpen","setMenuOpen","anchorRef","handleClose","contains","uidExists","disabled","Popper","role","transition","disablePortal","TransitionProps","Grow","Paper","ClickAwayListener","onClickAway","MenuList","option","MenuItem","handleMenuItemClick","RunDialog","handleRun","setName","setError","helperText","ToolBar","zIndex","textTransform","componentTypes","edgeTypes","buttonedge","sourceX","sourceY","targetX","targetY","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","getEdgeCenter","edgeCenterX","edgeCenterY","d","foreignObjectSize","ReactFlowComponent","elements","onElementsRemove","elementsToRemove","onConnect","addEdge","animated","onDragOver","dataTransfer","dropEffect","onNodeDragStop","nodeTypes","defaultPosition","defaultZoom","onMoveEnd","selectRightDrawerIsOpen","rightDrawer","selectRightDrawerMode","selectRightDrawerCurrentNodeId","ALGORITHM_NODE_SLICE_NAME","getAlgoParams","algorithmNodeSlice","AlgorithmParamForm","ParamFormContext","algoParamIsLoaded","selectAlgorithmParamsExit","selectAlgorithmParamsKeyList","selectAlgorithmParam","selectAlgorithmParamsValue","Contents","ParamFormConetent","Provider","StyledDrawer","Drawer","flexShrink","drawerClasses","paper","MainContents","RightDrawer","anchor","Toolbar","Divider","FlowChart","RootDiv","DrawerContents","drawerWidth","flexDirection","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","displayDataCommonInitialValue","imageItemInitialValue","rgb","activeIndex","timeSeriesItemInitialValue","left","maxIndex","heatMapItemInitialValue","csvItemInitialValue","roiItemInitialValue","scatterItemInitialValue","barItemInitialValue","hdf5ItemInitialValue","htmlItemInitialValue","getDisplayDataItemInitialValue","MultiPlotItemInitialValue","visualaizeItemSlice","deleteVisualizeItem","addInitialItem","nextId","idList","reduce","getMaxItemId","selectItem","setRoiItemFilePath","setFilePath","setImageItemFilePath","setTimeSeriesItemFilePath","setHeatMapItemFilePath","setDisplayDataPath","resetImageActiveIndexFn","setItemType","toggleItemTypeMultiPlot","resetImageActiveIndex","incrementImageActiveIndex","decrementImageActiveIndex","setImageActiveIndex","setImageItemShowticklabels","setImageItemZsmooth","setImageItemShowLine","setImageItemShowGrid","setImageItemShowScale","setImageItemColors","setImageItemStartIndex","setImageItemEndIndex","setImageItemRoiAlpha","setImageItemDuration","setTimeSeriesItemOffset","setTimeSeriesItemSpan","setTimeSeriesItemShowGrid","setTimeSeriesItemShowLine","setTimeSeriesItemShowTickLabels","setTimeSeriesItemZeroLine","setTimeSeriesItemXrangeLeft","setTimeSeriesItemXrangeRight","setTimeSeriesItemDisplayNumbers","setTimeSeriesItemCheckedList","setTimeSeriesItemMaxIndex","setHeatMapItemShowScale","setHeatMapItemColors","setCsvItemTranspose","setCsvItemSetColumn","setCsvItemSetIndex","setScatterItemXIndex","setScatterItemYIndex","VisualizeItemAddButton","StyledPaper","justifyContent","StyledButton","borderWidth","displayDataSlice","deleteDisplayItem","std","console","log","DisplayItemDeleteButton","ImagePlot","selectImageDataError","ImagePlotImple","selectImageItemActiveIndex","ImagePlotChart","imageData","selectActiveImageData","imageDataEqualtyFn","maxSize","colorscale","selectImageItemDuration","timeDataMaxIndex","maxIdx","selectRoiItemIndex","colorscaleRoi","createColormap","colormap","nshades","format","z","parseFloat","offsets","min","hoverongaps","hovertemplate","new_i","floor","rgba","r","g","outParts","toString","substring","part","rgba2hex","zmin","zmax","layout","t","l","dragmode","xaxis","autorange","autotick","ticks","yaxis","automargin","plotlyHeight","getBoundingClientRect","getElementsByClassName","clientHeight","plotContainer","timeSeriesFilePath","selectMultiPlotTimeSeriesItemFilepath","selectMultiPlotTimeSeriesItemDisplayNumbers","intervalRef","clearInterval","onPlayClick","setInterval","onDurationChange","displayModeBar","responsive","points","curveNumber","inputProps","step","Slider","defaultValue","valueLabelDisplay","marks","activeThumb","newIndex","TimeSeriesPlot","selectTimeSeriesDataError","selectTimeSeriesDataIsFulfilled","TimeSeriesPlotImple","timeSeriesData","timeSeriesDataEqualityFn","dataXrange","selectTimeSeriesXrange","dataStd","selectTimeSeriesStd","colorScale","activeIdx","mean","sqrt","pow","String","visible","line","error_y","array","annotations","xref","yref","arrowhead","ax","ay","autosize","range","onLegendClick","clickNumber","aArray","bArray","aKey","aValue","bKey","bValue","nestEqualityFun","HeatMapPlot","selectHeatMapDataError","selectHeatMapDataIsFulfilled","HeatMapImple","heatMapData","heatMapDataEqualtyFn","showlegend","FilePathSelect","selectedNodeId","onSelect","inputNodeFilePathInfoList","inputNodes","selectInputNode","toDataTypeFromFileType","inputNodeDataType","algorithmNodeOutputPathInfoList","selectPipelineNodeResultSuccessList","paths","outputKey","onSelectHandle","menuItemList","pathInfo","pathElm","ListSubheader","FormControl","maxWidth","InputLabel","Select","onOpen","MultiPlotItem","MultiPlot","Grid","container","xs","MultiImagePlot","MultiTimeSeriesPlot","MultiHeatMapPlot","secondary","RoiPlot","selectRoiDataIsFulfilled","selectRoiDataError","RoiPlotImple","ScatterPlot","selectScatterDataError","selectScatterDataIsFulfilled","ScatterPlotImple","scatterData","scatterDataEqualityFn","textposition","textfont","family","marker","font","BarPlot","selectBarDataError","selectBarDataIsFulfilled","BarPlotImple","barData","barDataEqualityFn","HTMLPlot","selectHTMLDataError","selectHTMLDataIsFulfilled","HTMLPlotImple","htmlData","dangerouslySetInnerHTML","__html","DisplayDataItem","DisplayPlot","MultiPlotDeleteButton","VisualizeItems","FlexItemList","itemIdList","flexWrap","Item","isSelected","cursor","ItemByType","DeleteButton","GradientColorPicker","dispatchSetColor","maxStops","paletteHeight","onPaletteChange","colorCode","rgbStr","replace","flatStyle","WrappedSketchPicker","c","ImageItemEditor","SelectedItemIdContext","roiItemNodeId","selectRoiItemNodeId","roiItemFilePath","onSelectImageFile","Showticklabels","ShowLine","ShowGrid","ShowScale","Zsmooth","RoiAlpha","inputError","StartEndIndex","onChangeStartIndex","onChangeEndIndex","CsvItemEditor","Transpose","SetColumn","SetIndex","HeatmapItemEditor","TimeSeriesItemEditor","Offset","Span","ShowTickLabels","ZeroLine","Xrange","newLeft","newRight","LegendSelect","selectTimeSeriesItemFilePath","handleChange","ml","RoiItemEditor","ScatterItemEditor","XIndex","YIndex","BarItemEditor","VisualizeItemEditor","ItemTypeSelect","isMultiPlot","selectVisualizeItemTypeIsMultiPlot","Editor","MultiPlotItemEditor","DisplayDataItemEditor","prevItem","setPrevItem","DisplayEditor","StyledDrawerContents","Visualize","selectExperiments","experiments","selectExperimentsSatusIsUninitialized","selectExperimentsSatusIsFulfilled","selectExperimentsSatusIsError","selectExperimentsErrorMessage","selectExperimentList","experimentList","selectExperiment","selectExperimentName","selectExperimentFunction","functions","ExperimentStatusIcon","CollapsibleTable","TableRow","TableCell","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","gutterBottom","component","Table","Head","TableHead","Body","ExperimentUidContext","nodeIdList","selectExperimentFunctionNodeIdList","TableBody","TableRowOfFunction","selectExperimentFunctionName","selectExperimentFunctionStatus","scope","ExperimentTable","isError","ExperimentsErrorView","Alert","severity","AlertTitle","TableImple","order","setOrder","sortTarget","setSortTarget","TableContainer","sortHandler","property","sort","getComparator","expData","TableSortLabel","active","direction","Row","timestamp","selectExperimentTimeStamp","statusList","f","selectExperimentStatus","Fragment","tableCellClasses","root","borderBottomWidth","ImportExperimentButton","unwrap","then","DeleteExperimentButton","orderBy","descendingComparator","Experiment","backgroundColor","StyledAppBar","AppBar","drawer","TabPanel","other","hidden","a11yProps","Layout","setValue","runPipeline","isCanceled","intervalId","prevStatus","setPrevStatus","useRunPipeline","src","optinistLogo","alt","Tabs","centered","textColor","Tab","SnackbarCloseButton","snackbarKey","closeSnackbar","App","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","algorithmListSlice","fileUploaderSlice","setFileUploaderStateById","currentState","filesTreeSlice","ImageData","MuiColors","IscellData","TimeSeriesData","Suite2pData","nextKey","handleTypeColorSlice","HDF5Slice","convertToExperimentType","function","unique_id","postion","convertToExperimentStatus","experimentsSlice","convertToExperimentListType","store","configureStore","reducer","algorithmListReducer","algorithmNodeReducer","displayDataReducer","fileUploaderReducer","flowElementReducer","inputNodeReducer","handleTypeColorReducer","filesTreeReducer","nwbReducer","rightDrawerReducer","visualaizeItemReducer","snakemakeReducer","pipelineReducer","hdf5Reducer","experimentsReducer","createTheme","components","MuiTextField","defaultProps","MuiSelect","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.355e8f39.chunk.js","sourcesContent":["import {\n  ParamDTO,\n  ParamChild,\n  ParamParent,\n  ParamType,\n  ParamMap,\n} from './ParamType'\n\nexport function getChildParam(\n  path: string,\n  ParamMap: ParamMap,\n): ParamChild | null {\n  let result: ParamChild | null = null\n  for (const node of Object.values(ParamMap)) {\n    if (isParamChild(node)) {\n      if (node.path === path) {\n        result = node\n      }\n    } else {\n      result = getChildParam(path, node.children)\n    }\n    if (result != null) {\n      break\n    }\n  }\n  return result\n}\n\nexport function isParamChild(param: ParamType): param is ParamChild {\n  return param.type === 'child'\n}\n\nexport function isParamParent(param: ParamType): param is ParamParent {\n  return param.type === 'parent'\n}\n\nfunction isDictObject(value: unknown): value is { [key: string]: unknown } {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\nconst PATH_SEPARATOR = '/'\n\nexport function convertToParamMap(dto: ParamDTO, keyList?: string[]): ParamMap {\n  const ParamMap: ParamMap = {}\n  Object.entries(dto).forEach(([name, value]) => {\n    const kList = keyList ?? []\n    if (isDictObject(value)) {\n      kList.push(name)\n      ParamMap[name] = {\n        type: 'parent',\n        children: convertToParamMap(value, kList),\n      }\n    } else {\n      ParamMap[name] = {\n        type: 'child',\n        value,\n        path: kList.concat([name]).join(PATH_SEPARATOR),\n      }\n    }\n  })\n  return ParamMap\n}\n\nexport function equalsParamMap(a: ParamMap, b: ParamMap) {\n  if (a === b) {\n    return true\n  }\n  const aArray = Object.keys(a)\n  const bArray = Object.keys(b)\n  return (\n    aArray.length === bArray.length &&\n    aArray.every((aKey) => {\n      const aValue = a[aKey]\n      const bValue = b[aKey]\n      return equalsParam(aValue, bValue)\n    })\n  )\n}\n\nfunction equalsParam(a: ParamType, b: ParamType): boolean {\n  if (a === b) {\n    return true\n  }\n  if (isParamChild(a) && isParamChild(b)) {\n    return equalsParamChild(a, b)\n  } else if (isParamParent(a) && isParamParent(b)) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      aArray.length === bArray.length &&\n      aArray.every((aKey) => {\n        const aValue = a.children[aKey]\n        const bValue = b.children[aKey]\n        return equalsParam(aValue, bValue)\n      })\n    )\n  } else {\n    return false\n  }\n}\n\nfunction equalsParamChild(a: ParamChild, b: ParamChild) {\n  return a.path === b.path && a.value === b.value\n}\n","import { RootState } from 'store/store'\n\nimport { getChildParam } from 'store/utils/param/ParamUtils'\n\nexport const selectAlgorithmNode = (state: RootState) => state.algorithmNode\n\nexport const selectAlgorithmNodeDefined =\n  (nodeId: string) => (state: RootState) =>\n    Object.keys(state.algorithmNode).includes(nodeId)\n\nexport const selectAlgorithmFunctionPath =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].functionPath\n\nexport const selectAlgorithmName = (nodeId: string) => (state: RootState) =>\n  selectAlgorithmNode(state)[nodeId].name\n\nexport const selectAlgorithmParams = (nodeId: string) => (state: RootState) =>\n  selectAlgorithmNode(state)[nodeId].params\n\nexport const selectAlgorithmIsUpdated =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].isUpdated\n\nexport const selectAlgorithmParamsExit =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].params !== null\n\nexport const selectAlgorithmParamsKeyList =\n  (nodeId: string) => (state: RootState) =>\n    Object.keys(selectAlgorithmNode(state)[nodeId]?.params ?? {})\n\nexport const selectAlgorithmParamsValue =\n  (nodeId: string, path: string) => (state: RootState) => {\n    const params = selectAlgorithmParams(nodeId)(state)\n    if (params != null) {\n      const target = getChildParam(path, params)\n      return target?.value\n    } else {\n      throw new Error('AlgorithmParam is null')\n    }\n  }\n\nexport const selectAlgorithmParam =\n  (nodeId: string, paramKey: string) => (state: RootState) => {\n    const params = selectAlgorithmParams(nodeId)(state)\n    if (params != null) {\n      return params[paramKey]\n    } else {\n      throw new Error('AlgorithmParam is null')\n    }\n  }\n","import {\n  AlgorithmNodeType,\n  AlgoListDTO,\n  AlgorithmInfo,\n  AlgorithmChild,\n  AlgorithmParent,\n  AlgorithmListTree,\n} from './AlgorithmListType'\n\nexport function isAlgoChild(\n  algoNode: AlgorithmNodeType,\n): algoNode is AlgorithmChild {\n  return algoNode.type === 'child'\n}\n\nexport function isAlgoParent(\n  algoNode: AlgorithmNodeType,\n): algoNode is AlgorithmParent {\n  return algoNode.type === 'parent'\n}\n\nexport function getAlgoChild(\n  algoList: AlgorithmListTree,\n  algoName: string,\n): AlgorithmChild | null {\n  let result: AlgorithmChild | null = null\n  for (const [name, node] of Object.entries(algoList)) {\n    if (isAlgoChild(node)) {\n      if (name === algoName) {\n        result = node\n      }\n    } else {\n      result = getAlgoChild(node.children, algoName)\n    }\n    if (result != null) {\n      break\n    }\n  }\n  return result\n}\n\nexport function convertToAlgoListType(dto: AlgoListDTO) {\n  const algoList: AlgorithmListTree = {}\n  Object.entries(dto).forEach(([name, value]) => {\n    if (Object.prototype.hasOwnProperty.call(value, 'children')) {\n      algoList[name] = {\n        type: 'parent',\n        children: convertToAlgoListType(\n          (\n            value as {\n              children: AlgoListDTO\n            }\n          ).children as AlgoListDTO,\n        ),\n      }\n    } else {\n      const dto = value as {\n        args: AlgorithmInfo[]\n        returns: AlgorithmInfo[]\n        path: string\n      }\n      algoList[name] = {\n        type: 'child',\n        functionPath: dto.path,\n        args: dto.args,\n        returns: dto.returns,\n      }\n    }\n  })\n  return algoList\n}\n","import { RootState } from 'store/store'\nimport { selectAlgorithmName } from '../AlgorithmNode/AlgorithmNodeSelectors'\nimport { getAlgoChild } from './AlgorithmListUtils'\n\nexport const selectAlgorithmList = (state: RootState) => state.algorithmList\n\nexport const selectAlgorithmListIsLated = (state: RootState) =>\n  selectAlgorithmList(state).isLatest\n\nexport const selectAlgorithmListTree = (state: RootState) =>\n  selectAlgorithmList(state).tree\n\nexport const selectAlgoArgs = (nodeId: string) => (state: RootState) => {\n  const algoName = selectAlgorithmName(nodeId)(state)\n  if (algoName != null) {\n    const algoListChild = getAlgoChild(selectAlgorithmListTree(state), algoName)\n    return algoListChild?.args\n  } else {\n    return undefined\n  }\n}\n\nexport const selectAlgoReturns = (nodeId: string) => (state: RootState) => {\n  const algoName = selectAlgorithmName(nodeId)(state)\n  if (algoName != null) {\n    const algoListChild = getAlgoChild(selectAlgorithmListTree(state), algoName)\n    return algoListChild?.returns\n  } else {\n    return undefined\n  }\n}\n","export const ALGORITHM_LIST_SLICE_NAME = 'algorithmList'\n\nexport type AlgorithmListType = {\n  isLatest: boolean\n  tree: AlgorithmListTree\n}\n\nexport type AlgorithmListTree = {\n  [algoName: string]: AlgorithmNodeType\n}\n\nexport type AlgorithmNodeType = AlgorithmChild | AlgorithmParent\nexport type AlgorithmChild = {\n  type: 'child'\n  args: AlgorithmInfo[]\n  returns: AlgorithmInfo[]\n  functionPath: string\n}\nexport type AlgorithmParent = {\n  type: 'parent'\n  children: {\n    [name: string]: AlgorithmNodeType\n  }\n}\nexport type AlgorithmInfo = {\n  name: string\n  type: string\n  isNone?: boolean\n}\n\nexport type AlgoListDTO = {\n  [name: string]:\n    | {\n        args: AlgorithmInfo[]\n        returns: AlgorithmInfo[]\n        path: string\n      }\n    | { children: AlgoListDTO }\n}\n","const HOST = process.env.REACT_APP_SERVER_HOST\nconst PORT = process.env.REACT_APP_SERVER_PORT\n\nexport const BASE_URL = `http://${HOST}:${PORT}`\nexport const WS_BASE_URL = `ws://${HOST}:${PORT}`\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { AlgoListDTO, ALGORITHM_LIST_SLICE_NAME } from './AlgorithmListType'\nimport { BASE_URL } from 'const/API'\n\nexport const getAlgoList = createAsyncThunk<AlgoListDTO, void>(\n  `${ALGORITHM_LIST_SLICE_NAME}/getAlgoList`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/algolist`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","export const INPUT_NODE_SLICE_NAME = 'inputNode'\n\nexport const FILE_TYPE_SET = {\n  CSV: 'csv',\n  IMAGE: 'image',\n  HDF5: 'hdf5',\n  // NWB:\"nwb\"\n  // JSON:\"json\"\n} as const\n\nexport type FILE_TYPE = typeof FILE_TYPE_SET[keyof typeof FILE_TYPE_SET]\n\nexport type InputNode = {\n  [nodeId: string]: InputNodeType\n}\n\nexport type InputNodeType = CsvInputNode | ImageInputNode | HDF5InputNode\n\ninterface InputNodeBaseType<\n  T extends FILE_TYPE,\n  P extends { [key: string]: unknown },\n> {\n  fileType: T\n  selectedFilePath?: string | string[]\n  selectedFileName?: string\n  param: P\n}\n\nexport type CsvInputParamType = {\n  setColumn: number | null\n  setIndex: boolean\n  transpose: boolean\n}\n\nexport interface CsvInputNode\n  extends InputNodeBaseType<'csv', CsvInputParamType> {\n  selectedFilePath?: string\n}\n\nexport interface ImageInputNode extends InputNodeBaseType<'image', {}> {\n  selectedFilePath?: string[]\n}\n\nexport interface HDF5InputNode extends InputNodeBaseType<'hdf5', {}> {\n  selectedFilePath?: string\n  hdf5Path?: string\n}\n","import { Elements, FlowTransform } from 'react-flow-renderer'\n\nexport const FLOW_ELEMENT_SLICE_NAME = 'flowElement'\n\nexport const NODE_TYPE_SET = {\n  INPUT: 'input',\n  ALGORITHM: 'algorithm',\n} as const\n\nexport type NODE_TYPE = typeof NODE_TYPE_SET[keyof typeof NODE_TYPE_SET]\n\nexport type NodeData = AlgorithmNodeData | InputNodeData\n\ninterface NodeDataBaseType<T extends NODE_TYPE> {\n  label: string\n  type: T\n}\n\nexport interface InputNodeData\n  extends NodeDataBaseType<typeof NODE_TYPE_SET.INPUT> {}\n\nexport interface AlgorithmNodeData\n  extends NodeDataBaseType<typeof NODE_TYPE_SET.ALGORITHM> {}\n\nexport interface ElementCoord {\n  x: number\n  y: number\n}\n\nexport interface FlowElement {\n  flowElements: Elements<NodeData>\n  flowPosition: FlowTransform\n  elementCoord: ElementCoord\n}\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit'\nimport { Node } from 'react-flow-renderer'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\nimport { FLOW_ELEMENT_SLICE_NAME, NodeData } from './FlowElementType'\n\nexport const addAlgorithmNode = createAsyncThunk<\n  ParamDTO,\n  {\n    node: Omit<Node<NodeData>, 'position'>\n    functionPath: string\n    name: string\n  }\n>(`${FLOW_ELEMENT_SLICE_NAME}/addAlgorithmNode`, async ({ name }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/params/${name}`)\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const addInputNode = createAction<{\n  node: Omit<Node<NodeData>, 'position'>\n  fileType: FILE_TYPE\n}>(`${FLOW_ELEMENT_SLICE_NAME}/addInputNode`)\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { nanoid } from '@reduxjs/toolkit'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem'\nimport { styled, Typography } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight'\nimport IconButton from '@mui/material/IconButton'\nimport AddIcon from '@mui/icons-material/Add'\n\nimport {\n  selectAlgorithmListIsLated,\n  selectAlgorithmListTree,\n} from 'store/slice/AlgorithmList/AlgorithmListSelectors'\nimport { AlgorithmNodeType } from 'store/slice/AlgorithmList/AlgorithmListType'\nimport { isAlgoChild } from 'store/slice/AlgorithmList/AlgorithmListUtils'\nimport { getAlgoList } from 'store/slice/AlgorithmList/AlgorithmListActions'\nimport { FILE_TYPE, FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  NODE_TYPE,\n  NODE_TYPE_SET,\n} from 'store/slice/FlowElement/FlowElementType'\nimport {\n  addAlgorithmNode,\n  addInputNode,\n} from 'store/slice/FlowElement/FlowElementActions'\n\nexport const AlgorithmTreeView = React.memo(() => {\n  const dispatch = useDispatch()\n  const algoList = useSelector(selectAlgorithmListTree)\n  const isLatest = useSelector(selectAlgorithmListIsLated)\n\n  useEffect(() => {\n    if (!isLatest) {\n      dispatch(getAlgoList())\n    }\n  }, [dispatch, isLatest])\n\n  const onAlgoNodeClick = (nodeName: string, functionPath: string) => {\n    const name = nodeName\n    const newNode = {\n      id: nanoid(),\n      type: 'AlgorithmNode',\n      data: { label: name, type: NODE_TYPE_SET.ALGORITHM },\n    }\n    dispatch(\n      addAlgorithmNode({\n        node: newNode,\n        name,\n        functionPath,\n      }),\n    )\n  }\n\n  return (\n    <TreeView\n      sx={{\n        flexGrow: 1,\n        height: '100%',\n      }}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      <TreeItem nodeId=\"Data\" label=\"Data\">\n        <InputNodeComponent\n          fileName={'image'}\n          nodeName={'imageData'}\n          fileType={FILE_TYPE_SET.IMAGE}\n        />\n        <InputNodeComponent\n          fileName={'csv'}\n          nodeName={'csvData'}\n          fileType={FILE_TYPE_SET.CSV}\n        />\n        <InputNodeComponent\n          fileName={'hdf5'}\n          nodeName={'hdf5Data'}\n          fileType={FILE_TYPE_SET.HDF5}\n        />\n      </TreeItem>\n      <TreeItem nodeId=\"Algorithm\" label=\"Algorithm\">\n        {Object.entries(algoList).map(([name, node], i) => (\n          <AlgoNodeComponent\n            name={name}\n            node={node}\n            onAlgoNodeClick={(name, functionPath) =>\n              onAlgoNodeClick(name, functionPath)\n            }\n            key={i.toFixed()}\n          />\n        ))}\n      </TreeItem>\n    </TreeView>\n  )\n})\n\nconst InputNodeComponent = React.memo<{\n  fileName: string\n  nodeName: string\n  fileType: FILE_TYPE\n}>(({ fileName, nodeName, fileType }) => {\n  const dispatch = useDispatch()\n\n  const onDataNodeClick = (\n    nodeType: NODE_TYPE,\n    nodeName: string,\n    fileType: FILE_TYPE,\n  ) => {\n    let componentType = ''\n    switch (fileType) {\n      case FILE_TYPE_SET.CSV:\n        componentType = 'CsvFileNode'\n        break\n      case FILE_TYPE_SET.IMAGE:\n        componentType = 'ImageFileNode'\n        fileType = FILE_TYPE_SET.IMAGE\n        break\n      case FILE_TYPE_SET.HDF5:\n        componentType = 'HDF5FileNode'\n        fileType = FILE_TYPE_SET.HDF5\n        break\n    }\n    const newNode = {\n      id: nanoid(),\n      type: componentType,\n      data: { label: nodeName, type: nodeType },\n    }\n    dispatch(addInputNode({ node: newNode, fileType }))\n  }\n\n  return (\n    <LeafItem\n      nodeId={fileName}\n      label={\n        <AddButton\n          name={fileName}\n          onClick={() =>\n            onDataNodeClick(NODE_TYPE_SET.INPUT, nodeName, fileType)\n          }\n        />\n      }\n    />\n  )\n})\n\nconst AlgoNodeComponent = React.memo<{\n  name: string\n  node: AlgorithmNodeType\n  onAlgoNodeClick: (nodeName: string, functionPath: string) => void\n}>(({ name, node, onAlgoNodeClick }) => {\n  if (isAlgoChild(node)) {\n    return (\n      <LeafItem\n        nodeId={name}\n        label={\n          <AddButton\n            name={name}\n            onClick={() => onAlgoNodeClick(name, node.functionPath)}\n          />\n        }\n      />\n    )\n  } else {\n    return (\n      <TreeItem nodeId={name} label={name}>\n        {Object.entries(node.children).map(([name, node], i) => (\n          <AlgoNodeComponent\n            name={name}\n            node={node}\n            key={i.toFixed()}\n            onAlgoNodeClick={(name, functionPath) =>\n              onAlgoNodeClick(name, functionPath)\n            }\n          />\n        ))}\n      </TreeItem>\n    )\n  }\n})\n\nconst AddButton = React.memo<{\n  name: string\n  onClick: () => void\n}>(({ name, onClick }) => {\n  return (\n    <>\n      <IconButton aria-label=\"add\" style={{ padding: 2 }} size=\"large\">\n        <AddIcon onClick={() => onClick()} />\n      </IconButton>\n      <Typography\n        variant=\"inherit\"\n        style={{\n          textOverflow: 'ellipsis',\n          overflow: 'visible',\n          width: '8rem',\n          display: 'inline-block',\n        }}\n      >\n        {name}\n      </Typography>\n    </>\n  )\n})\n\n// 未使用icon分の幅を消す\nconst LeafItem = styled(TreeItem)({\n  [`& .${treeItemClasses.iconContainer}`]: {\n    margin: 0,\n    width: 0,\n  },\n})\n","export const INITIAL_IMAGE_ELEMENT_ID = '0'\nexport const INITIAL_IMAGE_ELEMENT_NAME = 'NoName'\nexport const INITIAL_ALGO_ELEMENT_ID = '1'\nexport const INITIAL_ALGO_ELEMENT_NAME = 'dummy_image2image'\nexport const INITIAL_EDGE_ID = '2'\n\nexport const INITIAL_ALGO_STYLE: React.CSSProperties = {\n  width: 180,\n  height: 100,\n  padding: 0,\n  borderRadius: 0,\n} as const\n\nexport const INITIAL_DATA_STYLE: React.CSSProperties = {\n  border: '1px solid #777',\n  height: 120,\n} as const\n","import { RunPostData } from 'api/run/Run'\nimport axios from 'axios'\n\nimport { BASE_URL } from 'const/API'\n\nexport type ExperimentsDTO = {\n  [uid: string]: ExperimentDTO\n}\n\nexport type ExperimentDTO = {\n  function: {\n    [uid: string]: {\n      name: string\n      position: {\n        x: number\n        y: number\n      }\n      success: string\n      unique_id: string\n    }\n  }\n  name: string\n  success: string\n  timestamp: string\n  unique_id: string\n}\n\nexport async function getExperimentsApi(): Promise<ExperimentsDTO> {\n  const response = await axios.get(`${BASE_URL}/experiments`)\n  return response.data\n}\n\n// export async function getExperimentByUid(uid: string): Promise<{\n//   // todo\n// }> {\n//   const response = await axios.get(`${BASE_URL}/experiments/${uid}`)\n//   return response.data\n// }\n\nexport async function deleteExperimentByUidApi(uid: string): Promise<boolean> {\n  const response = await axios.delete(`${BASE_URL}/experiments/${uid}`)\n  return response.data\n}\n\nexport async function importExperimentByUidApi(\n  uid: string,\n): Promise<RunPostData> {\n  const response = await axios.get(`${BASE_URL}/experiments/import/${uid}`)\n  return response.data\n}\n","export const EXPERIMENTS_SLICE_NAME = 'experiments'\n\nexport type Experiments =\n  | {\n      status: 'fulfilled'\n      experimentList: ExperimentListType\n    }\n  | {\n      status: 'uninitialized'\n    }\n  | {\n      status: 'pending'\n    }\n  | {\n      status: 'error'\n      message?: string\n    }\n\nexport type ExperimentListType = {\n  [uid: string]: ExperimentType\n}\n\nexport type ExperimentType = {\n  uid: string\n  functions: {\n    [nodeId: string]: ExperimentFunction\n  }\n  name: string\n  timestamp: string\n}\n\nexport type ExperimentFunction = {\n  name: string\n  nodeId: string\n  postion: {\n    x: number\n    y: number\n  }\n  status: EXPERIMENTS_STATUS\n}\n\nexport type EXPERIMENTS_STATUS = 'success' | 'error' | 'running'\n\nexport interface Experiment {\n  uid: string\n  name: string\n  timestamp: string\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport {\n  ExperimentsDTO,\n  getExperimentsApi,\n  deleteExperimentByUidApi,\n  importExperimentByUidApi,\n} from 'api/experiments/Experiments'\nimport { RunPostData } from 'api/run/Run'\nimport { EXPERIMENTS_SLICE_NAME } from './ExperimentsType'\n\nexport const getExperiments = createAsyncThunk<ExperimentsDTO, undefined>(\n  `${EXPERIMENTS_SLICE_NAME}/getExperiments`,\n  async (_, thunkAPI) => {\n    try {\n      const response = await getExperimentsApi()\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const deleteExperimentByUid = createAsyncThunk<boolean, string>(\n  `${EXPERIMENTS_SLICE_NAME}/deleteExperimentByUid`,\n  async (uid, thunkAPI) => {\n    try {\n      const response = await deleteExperimentByUidApi(uid)\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const importExperimentByUid = createAsyncThunk<RunPostData, string>(\n  `${EXPERIMENTS_SLICE_NAME}/importExperimentByUid`,\n  async (uid, thunkAPI) => {\n    try {\n      const response = await importExperimentByUidApi(uid)\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import { createAction } from '@reduxjs/toolkit'\n\nimport { INPUT_NODE_SLICE_NAME } from './InputNodeType'\n\nexport const setInputNodeFilePath = createAction<{\n  nodeId: string\n  filePath: string | string[]\n}>(`${INPUT_NODE_SLICE_NAME}/setInputNodeFilePath`)\n","import { FlowElement, isNode, Node } from 'react-flow-renderer'\nimport {\n  AlgorithmNodeData,\n  NodeData,\n  NODE_TYPE_SET,\n  InputNodeData,\n} from './FlowElementType'\n\nexport function isNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<NodeData> {\n  return node != null && isNode(node) && node.data != null\n}\n\nexport function isAlgorithmNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<AlgorithmNodeData> {\n  return isNodeData(node) && node.data?.type === NODE_TYPE_SET.ALGORITHM\n}\n\nexport function isInputNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<InputNodeData> {\n  return isNodeData(node) && node.data?.type === NODE_TYPE_SET.INPUT\n}\n\nexport function getLabelByPath(filePath: string | string[]) {\n  if (Array.isArray(filePath)) {\n    if (filePath.length === 0) {\n      return ''\n    } else if (filePath.length === 1) {\n      return getFileName(filePath[0])\n    } else {\n      return getFileName(filePath[0]) + ` ... and ${filePath.length - 1} files`\n    }\n  } else {\n    return getFileName(filePath)\n  }\n}\n\nexport function getFileName(filePath: string) {\n  return filePath.split('/').reverse()[0]\n}\n","import type { Node } from 'react-flow-renderer'\nimport {\n  isInputNodeData,\n  isAlgorithmNodeData,\n} from 'store/slice/FlowElement/FlowElementUtils'\nimport type {\n  NodePostDataType,\n  InputNodePostData,\n  AlgorithmNodePostData,\n} from './Run'\n\nexport function isInputNodePostData(\n  node: Node<NodePostDataType>,\n): node is Node<InputNodePostData> {\n  return isInputNodeData(node)\n}\n\nexport function isAlgorithmNodePostData(\n  node: Node<NodePostDataType>,\n): node is Node<AlgorithmNodePostData> {\n  return isAlgorithmNodeData(node)\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  Elements,\n  removeElements,\n  Position,\n  isNode,\n  FlowTransform,\n  XYPosition,\n} from 'react-flow-renderer'\nimport {\n  FLOW_ELEMENT_SLICE_NAME,\n  FlowElement,\n  NODE_TYPE_SET,\n  NodeData,\n  ElementCoord,\n} from './FlowElementType'\nimport {\n  INITIAL_ALGO_STYLE,\n  INITIAL_DATA_STYLE,\n  INITIAL_IMAGE_ELEMENT_ID,\n  INITIAL_IMAGE_ELEMENT_NAME,\n} from 'const/flowchart'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\nimport { isInputNodePostData } from 'api/run/RunUtils'\nimport { addAlgorithmNode, addInputNode } from './FlowElementActions'\nimport { getLabelByPath } from './FlowElementUtils'\n\nconst initialElements: Elements<NodeData> = [\n  {\n    id: INITIAL_IMAGE_ELEMENT_ID,\n    type: 'ImageFileNode',\n    data: {\n      type: NODE_TYPE_SET.INPUT,\n      label: INITIAL_IMAGE_ELEMENT_NAME,\n    },\n    style: INITIAL_DATA_STYLE,\n    position: { x: 50, y: 150 },\n  },\n]\n\nconst initialFlowPosition: FlowTransform = {\n  x: 0,\n  y: 0,\n  zoom: 0.7,\n}\n\nconst initialElementCoord: ElementCoord = {\n  x: 100,\n  y: 150,\n}\n\nconst initialState: FlowElement = {\n  flowElements: initialElements,\n  flowPosition: initialFlowPosition,\n  elementCoord: initialElementCoord,\n}\n\nexport const flowElementSlice = createSlice({\n  name: FLOW_ELEMENT_SLICE_NAME,\n  initialState,\n  reducers: {\n    setFlowPosition: (state, action: PayloadAction<FlowTransform>) => {\n      state.flowPosition = action.payload\n    },\n    setFlowElements: (state, action: PayloadAction<Elements>) => {\n      state.flowElements = action.payload\n    },\n    deleteFlowElements: (state, action: PayloadAction<Elements>) => {\n      state.flowElements = removeElements(action.payload, state.flowElements)\n    },\n    deleteFlowElementsById: (state, action: PayloadAction<string>) => {\n      const element = state.flowElements.find(\n        (edge) => edge.id === action.payload,\n      )\n      if (element !== undefined) {\n        state.flowElements = removeElements([element], state.flowElements)\n      }\n    },\n    editFlowElementPositionById: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        coord: {\n          x: number\n          y: number\n        }\n      }>,\n    ) => {\n      let { nodeId, coord } = action.payload\n      const elementIdx = state.flowElements.findIndex(\n        (ele) => ele.id === nodeId,\n      )\n      const targetItem = state.flowElements[elementIdx]\n      if (isNode(targetItem)) {\n        targetItem.position = coord\n      }\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addCase(addAlgorithmNode.fulfilled, (state, action) => {\n        let { node } = action.meta.arg\n        if (node.data?.type === NODE_TYPE_SET.ALGORITHM) {\n          node = {\n            ...node,\n            style: {\n              ...node.style,\n              ...INITIAL_ALGO_STYLE,\n            },\n            targetPosition: Position.Left,\n            sourcePosition: Position.Right,\n          }\n        }\n        const newPosition: XYPosition = state.elementCoord\n        state.flowElements.push({ ...node, position: newPosition })\n        updateElementCoord(state)\n      })\n      .addCase(addInputNode, (state, action) => {\n        let { node } = action.payload\n        if (node.data?.type === NODE_TYPE_SET.INPUT) {\n          node = {\n            ...node,\n            style: {\n              ...node.style,\n              ...INITIAL_DATA_STYLE,\n            },\n            targetPosition: Position.Left,\n            sourcePosition: Position.Right,\n          }\n        }\n        const newPosition: XYPosition = state.elementCoord\n        state.flowElements.push({ ...node, position: newPosition })\n        updateElementCoord(state)\n      })\n      .addCase(setInputNodeFilePath, (state, action) => {\n        let { nodeId, filePath } = action.payload\n        const label = getLabelByPath(filePath)\n        const elementIdx = state.flowElements.findIndex(\n          (ele) => ele.id === nodeId,\n        )\n        const targetNode = state.flowElements[elementIdx]\n        if (targetNode.data != null) {\n          targetNode.data.label = label\n        }\n      })\n      .addCase(importExperimentByUid.fulfilled, (state, action) => {\n        state.flowPosition = initialFlowPosition\n        state.elementCoord = initialElementCoord\n        const newNodeList: Elements<NodeData> = action.payload.nodeList.map(\n          (node) => {\n            if (isInputNodePostData(node)) {\n              return {\n                ...node,\n                data: {\n                  label: node.data?.label ?? '',\n                  type: node.data?.type ?? 'input',\n                },\n              }\n            } else {\n              return {\n                ...node,\n                data: {\n                  label: node.data?.label ?? '',\n                  type: node.data?.type ?? 'algorithm',\n                },\n              }\n            }\n          },\n        )\n        state.flowElements = newNodeList.concat(action.payload.edgeList)\n      }),\n})\n\nfunction updateElementCoord(state: FlowElement) {\n  const { x, y } = state.elementCoord\n  if (x > 800 || y > 200) {\n    state.elementCoord.x = 300\n    state.elementCoord.y = 100\n  } else {\n    state.elementCoord.x += 250\n  }\n}\n\nexport const {\n  setFlowPosition,\n  setFlowElements,\n  deleteFlowElements,\n  deleteFlowElementsById,\n  editFlowElementPositionById,\n} = flowElementSlice.actions\n\nexport default flowElementSlice.reducer\n","import { isEdge } from 'react-flow-renderer'\nimport { RootState } from 'store/store'\nimport { isNodeData } from './FlowElementUtils'\n\nexport const selectFlowElements = (state: RootState) =>\n  state.flowElement.flowElements\n\nexport const selectFlowPosition = (state: RootState) =>\n  state.flowElement.flowPosition\n\nexport const selectElementCoord = (state: RootState) =>\n  state.flowElement.elementCoord\n\nexport const selectNodeById = (nodeId: string) => (state: RootState) =>\n  selectFlowElements(state)\n    .filter(isNodeData)\n    .find((node) => node.id === nodeId)\n\nexport const selectNodeTypeById = (nodeId: string) => (state: RootState) =>\n  selectNodeById(nodeId)(state)?.data?.type\n\nexport const selectNodeLabelById = (nodeId: string) => (state: RootState) =>\n  selectNodeById(nodeId)(state)?.data?.label\n\nexport const selectEdgeListForRun = (state: RootState) =>\n  selectFlowElements(state).filter(isEdge)\n","import {\n  CsvInputNode,\n  ImageInputNode,\n  HDF5InputNode,\n  InputNodeType,\n  FILE_TYPE_SET,\n} from './InputNodeType'\n\nexport function isImageInputNode(\n  inputNode: InputNodeType,\n): inputNode is ImageInputNode {\n  return inputNode.fileType === FILE_TYPE_SET.IMAGE\n}\n\nexport function isCsvInputNode(\n  inputNode: InputNodeType,\n): inputNode is CsvInputNode {\n  return inputNode.fileType === FILE_TYPE_SET.CSV\n}\n\nexport function isHDF5InputNode(\n  inputNode: InputNodeType,\n): inputNode is HDF5InputNode {\n  return inputNode.fileType === FILE_TYPE_SET.HDF5\n}\n","import { RootState } from 'store/store'\nimport {\n  isHDF5InputNode,\n  isCsvInputNode,\n  isImageInputNode,\n} from './InputNodeUtils'\n\nexport const selectInputNode = (state: RootState) => state.inputNode\n\nexport const selectInputNodeById = (nodeId: string) => (state: RootState) =>\n  state.inputNode[nodeId]\n\nexport const selectInputNodeDefined = (nodeId: string) => (state: RootState) =>\n  Object.keys(state.inputNode).includes(nodeId)\nexport const selectInputNodeFileType = (nodeId: string) => (state: RootState) =>\n  selectInputNodeById(nodeId)(state).fileType\n\nexport const selectInputNodeSelectedFilePath =\n  (nodeId: string) => (state: RootState) =>\n    selectInputNodeById(nodeId)(state).selectedFilePath\n\nexport const selectCsvInputNodeSelectedFilePath =\n  (nodeId: string) => (state: RootState) => {\n    const node = selectInputNodeById(nodeId)(state)\n    if (isCsvInputNode(node)) {\n      return node.selectedFilePath\n    } else {\n      throw new Error('invaid input node type')\n    }\n  }\n\nexport const selectImageInputNodeSelectedFilePath =\n  (nodeId: string) => (state: RootState) => {\n    const node = selectInputNodeById(nodeId)(state)\n    if (isImageInputNode(node)) {\n      return node.selectedFilePath\n    } else {\n      throw new Error('invaid input node type')\n    }\n  }\n\nexport const selectHDF5InputNodeSelectedFilePath =\n  (nodeId: string) => (state: RootState) => {\n    const node = selectInputNodeById(nodeId)(state)\n    if (isHDF5InputNode(node)) {\n      return node.selectedFilePath\n    } else {\n      throw new Error('invaid input node type')\n    }\n  }\n\nexport const selectFilePathIsUndefined = (state: RootState) =>\n  Object.values(state.inputNode).filter(\n    (inputNode) => inputNode.selectedFilePath === undefined,\n  ).length > 0\n\nexport const selectInputNodeParam = (nodeId: string) => (state: RootState) =>\n  selectInputNodeById(nodeId)(state).param\n\nconst selectCsvInputNodeParam = (nodeId: string) => (state: RootState) => {\n  const inputNode = selectInputNodeById(nodeId)(state)\n  if (isCsvInputNode(inputNode)) {\n    return inputNode.param\n  } else {\n    throw new Error(`The InputNode is not CsvInputNode. (nodeId: ${nodeId})`)\n  }\n}\n\nexport const selectCsvInputNodeParamSetColumn =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).setColumn\n\nexport const selectCsvInputNodeParamSetIndex =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).setIndex\n\nexport const selectCsvInputNodeParamTranspose =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).transpose\n\nexport const selectInputNodeHDF5Path =\n  (nodeId: string) => (state: RootState) => {\n    const item = selectInputNodeById(nodeId)(state)\n    if (isHDF5InputNode(item)) {\n      return item.hdf5Path\n    } else {\n      return undefined\n    }\n  }\n","import { useSelector } from 'react-redux'\nimport { selectHandleTypeColor } from 'store/slice/HandleTypeColor/HandleTypeColorSelectors'\n\nexport function useHandleColor(type: string) {\n  const color = useSelector(selectHandleTypeColor(type))\n  return color\n}\n","import { RootState } from '../../store'\n\nexport const selectHandleTypeColor = (key: string) => (state: RootState) => {\n  if (state.handleColor.colorMap[key] != null) {\n    return state.handleColor.colorMap[key]\n  } else {\n    return undefined\n  }\n}\n","import { RootState } from '../../store'\nimport { FILE_TREE_TYPE } from './FilesTreeType'\n\nexport const selectFilesTree =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) => {\n    if (state.filesTree[fileType] != null) {\n      return state.filesTree[fileType]\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectFilesTreeNodes =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.tree\n\nexport const selectFilesIsLatest =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.isLatest ?? false\n\nexport const selectFilesIsLoading =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.isLoading ?? false\n","export const FILES_TREE_SLICE_NAME = 'filesTree'\n\nexport type TreeNodeTypeDTO = DirNodeDTO | FileNodeDTO\n\nexport interface NodeBaseDTO {\n  path: string\n  name: string\n  isdir: boolean\n}\n\nexport interface DirNodeDTO extends NodeBaseDTO {\n  isdir: true\n  nodes: TreeNodeTypeDTO[]\n}\n\nexport interface FileNodeDTO extends NodeBaseDTO {\n  isdir: false\n}\n\nexport type TreeNodeType = DirNode | FileNode\n\nexport interface NodeBase {\n  path: string\n  name: string\n  isDir: boolean\n}\n\nexport interface DirNode extends NodeBase {\n  isDir: true\n  nodes: TreeNodeType[]\n}\n\nexport interface FileNode extends NodeBase {\n  isDir: false\n}\n\nexport interface FilesTree {\n  [fileType: string]: {\n    isLatest: boolean\n    isLoading: boolean\n    tree: TreeNodeType[]\n  }\n}\n\nexport const FILE_TREE_TYPE_SET = {\n  IMAGE: 'image',\n  CSV: 'csv',\n  HDF5: 'hdf5',\n  ALL: 'all',\n} as const\n\nexport type FILE_TREE_TYPE =\n  typeof FILE_TREE_TYPE_SET[keyof typeof FILE_TREE_TYPE_SET]\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\n\nimport {\n  FILES_TREE_SLICE_NAME,\n  FILE_TREE_TYPE,\n  TreeNodeTypeDTO,\n} from './FilesTreeType'\n\nexport const getFilesTree = createAsyncThunk<TreeNodeTypeDTO[], FILE_TREE_TYPE>(\n  `${FILES_TREE_SLICE_NAME}/getFilesTree`,\n  async (fileType, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/files`, {\n        params: {\n          file_type: fileType,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import { TreeNodeTypeDTO, TreeNodeType } from './FilesTreeType'\n\nexport function convertToTreeNodeType(dto: TreeNodeTypeDTO[]): TreeNodeType[] {\n  return dto.map((node) =>\n    node.isdir\n      ? {\n          path: node.path,\n          name: node.name,\n          isDir: true,\n          nodes: convertToTreeNodeType(node.nodes),\n        }\n      : {\n          path: node.path,\n          name: node.name,\n          isDir: false,\n        },\n  )\n}\n\nexport function isDirNodeByPath(path: string, tree: TreeNodeType[]): boolean {\n  const node = getNodeByPath(path, tree)\n  if (node != null) {\n    return node.isDir\n  } else {\n    throw new Error(`failed to get node: ${path}`)\n  }\n}\n\nexport function getNodeByPath(\n  path: string,\n  tree: TreeNodeType[],\n): TreeNodeType | null {\n  let targetNode: TreeNodeType | null = null\n  for (const node of tree) {\n    if (path === node.path) {\n      targetNode = node\n      break\n    } else {\n      if (node.isDir) {\n        targetNode = getNodeByPath(path, node.nodes)\n        if (targetNode != null) {\n          break\n        }\n      }\n    }\n  }\n  return targetNode\n}\n","import Dialog from '@mui/material/Dialog'\nimport { useDispatch, useSelector } from 'react-redux'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem from '@mui/lab/TreeItem'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport Typography from '@mui/material/Typography'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport Button from '@mui/material/Button'\nimport Checkbox, { CheckboxProps } from '@mui/material/Checkbox'\n\nimport Box from '@mui/material/Box'\nimport { useTheme } from '@mui/material/styles'\nimport React from 'react'\n\nimport {\n  selectFilesIsLatest,\n  selectFilesIsLoading,\n  selectFilesTreeNodes,\n} from 'store/slice/FilesTree/FilesTreeSelectors'\nimport { getFilesTree } from 'store/slice/FilesTree/FilesTreeAction'\nimport {\n  FILE_TREE_TYPE,\n  FILE_TREE_TYPE_SET,\n  TreeNodeType,\n} from 'store/slice/FilesTree/FilesTreeType'\nimport {\n  getNodeByPath,\n  isDirNodeByPath,\n} from 'store/slice/FilesTree/FilesTreeUtils'\n\ntype FileSelectDialogProps = {\n  initialFilePath: string[] | string\n  onClickOk: (path: string[] | string) => void\n  fileType?: FILE_TREE_TYPE\n  title?: string\n  open: boolean\n  onClickCancel: () => void\n  onClose?: () => void\n  multiSelect: boolean\n}\n\nexport const FileSelectDialog = React.memo<FileSelectDialogProps>(\n  function FileSelectDialog({\n    open,\n    initialFilePath,\n    onClickCancel,\n    onClickOk,\n    onClose,\n    title,\n    fileType = FILE_TREE_TYPE_SET.ALL,\n    multiSelect,\n  }) {\n    const [selectedFilePath, setSelectedFilePath] =\n      React.useState(initialFilePath)\n    const onCancel = () => {\n      setSelectedFilePath(initialFilePath) // 選択内容を反映させない\n      onClickCancel()\n    }\n    const onOk = () => {\n      onClickOk(selectedFilePath)\n    }\n    const theme = useTheme()\n    return (\n      <Dialog open={open} onClose={onClose} fullWidth>\n        <DialogTitle>{title ?? 'Select File'}</DialogTitle>\n        <DialogContent dividers>\n          <div\n            style={{\n              height: 300,\n              overflow: 'auto',\n              marginBottom: theme.spacing(1),\n              border: '1px solid',\n              padding: theme.spacing(1),\n              borderColor: theme.palette.divider,\n            }}\n          >\n            <FileTreeView\n              setSelectedFilePath={setSelectedFilePath}\n              multiSelect={multiSelect}\n              fileType={fileType}\n              selectedFilePath={selectedFilePath}\n            />\n          </div>\n          <Typography variant=\"subtitle1\">Select File</Typography>\n          <FilePathSelectedListView path={selectedFilePath} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onCancel} variant=\"outlined\" color=\"inherit\">\n            cancel\n          </Button>\n          <Button onClick={onOk} color=\"primary\" variant=\"outlined\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  },\n)\n\nconst FileTreeView = React.memo<{\n  setSelectedFilePath: (path: string[] | string) => void\n  selectedFilePath: string[] | string\n  multiSelect: boolean\n  fileType: FILE_TREE_TYPE\n}>(({ setSelectedFilePath, selectedFilePath, fileType, multiSelect }) => {\n  const [tree, isLoading] = useFileTree(fileType)\n  const onNodeSelectHandler = (\n    event: React.SyntheticEvent,\n    nodeIds: Array<string> | string,\n  ) => {\n    if (!multiSelect && tree != null) {\n      // multiSelectがfalseの場合、ディレクトリは選択しない\n      const path = nodeIds as string\n      if (!isDirNodeByPath(path, tree)) {\n        setSelectedFilePath(path)\n      }\n    }\n  }\n  // multiSelectでチェックボックスを使用する時用のハンドラ\n  const onCheckFile = (path: string) => {\n    if (Array.isArray(selectedFilePath)) {\n      if (selectedFilePath.includes(path)) {\n        setSelectedFilePath(\n          selectedFilePath.filter((selectedPath) => path !== selectedPath),\n        )\n      } else {\n        setSelectedFilePath(selectedFilePath.concat(path))\n      }\n    }\n  }\n  const onCheckDir = (path: string, checked: boolean) => {\n    if (tree != null && Array.isArray(selectedFilePath)) {\n      const node = getNodeByPath(path, tree)\n      if (node != null && node.isDir) {\n        const childrenFilePathList = node.nodes\n          .filter((node) => !node.isDir)\n          .map((node) => node.path)\n        if (checked) {\n          setSelectedFilePath(\n            // concat時の重複を削除\n            Array.from(new Set(selectedFilePath.concat(childrenFilePathList))),\n          )\n        } else {\n          setSelectedFilePath(\n            selectedFilePath.filter(\n              (selectedPath) => !childrenFilePathList.includes(selectedPath),\n            ),\n          )\n        }\n      }\n    }\n  }\n  return (\n    <div>\n      {isLoading && <LinearProgress />}\n      <TreeView\n        disableSelection={multiSelect}\n        multiSelect={multiSelect}\n        onNodeSelect={onNodeSelectHandler}\n      >\n        {tree?.map((node) => (\n          <TreeNode\n            node={node}\n            selectedFilePath={selectedFilePath}\n            multiSelect={multiSelect}\n            onCheckDir={onCheckDir}\n            onCheckFile={onCheckFile}\n          />\n        ))}\n      </TreeView>\n    </div>\n  )\n})\n\nconst TreeNode = React.memo<{\n  node: TreeNodeType\n  selectedFilePath: string[] | string\n  multiSelect: boolean\n  onCheckFile: (path: string) => void\n  onCheckDir: (path: string, checked: boolean) => void\n}>(({ node, selectedFilePath, multiSelect, onCheckDir, onCheckFile }) => {\n  if (node.isDir) {\n    const allChecked =\n      Array.isArray(selectedFilePath) &&\n      node.nodes\n        .filter((node) => !node.isDir)\n        .map((node) => node.path)\n        .every((filePath) => selectedFilePath.includes(filePath))\n    const allNotChecked =\n      Array.isArray(selectedFilePath) &&\n      node.nodes\n        .filter((node) => !node.isDir)\n        .map((node) => node.path)\n        .every((filePath) => !selectedFilePath.includes(filePath))\n    const indeterminate = !(allChecked || allNotChecked)\n    return (\n      <TreeItem\n        icon={<FolderIcon htmlColor=\"skyblue\" />}\n        nodeId={node.path}\n        label={\n          multiSelect && node.nodes.filter((node) => !node.isDir).length > 0 ? (\n            <TreeItemLabel\n              label={node.name}\n              checkboxProps={{\n                indeterminate,\n                checked: allChecked,\n                onClick: (e) => {\n                  e.stopPropagation() // on/offのクリックにつられてTreeを開閉させないようにする\n                },\n                onChange: (e) => onCheckDir(node.path, e.target.checked),\n              }}\n            />\n          ) : (\n            node.name\n          )\n        }\n      >\n        {node.nodes.map((childNode, i) => (\n          <TreeNode\n            node={childNode}\n            selectedFilePath={selectedFilePath}\n            key={i}\n            multiSelect={multiSelect}\n            onCheckDir={onCheckDir}\n            onCheckFile={onCheckFile}\n          />\n        ))}\n      </TreeItem>\n    )\n  } else {\n    return (\n      <TreeItem\n        icon={<InsertDriveFileOutlinedIcon fontSize=\"small\" />}\n        nodeId={node.path}\n        label={\n          multiSelect ? (\n            <TreeItemLabel\n              label={node.name}\n              checkboxProps={{\n                checked:\n                  Array.isArray(selectedFilePath) &&\n                  selectedFilePath.includes(node.path),\n                onChange: () => onCheckFile(node.path),\n              }}\n            />\n          ) : (\n            node.name\n          )\n        }\n        onClick={() => onCheckFile(node.path)}\n      />\n    )\n  }\n})\n\nconst TreeItemLabel = React.memo<{\n  label: string\n  checkboxProps: CheckboxProps\n}>(({ label, checkboxProps }) => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box flexGrow={1}>{label}</Box>\n      <Box>\n        <Checkbox\n          {...checkboxProps}\n          disableRipple\n          size=\"small\"\n          sx={{\n            marginRight: '4px',\n            padding: '2px',\n          }}\n        />\n      </Box>\n    </Box>\n  )\n})\n\nconst FilePathSelectedListView = React.memo<{ path: string | string[] }>(\n  ({ path }) => {\n    return (\n      <Typography variant=\"subtitle2\">\n        {!!path\n          ? Array.isArray(path)\n            ? path.map((text) => <li>{text}</li>)\n            : path\n          : '---'}\n      </Typography>\n    )\n  },\n)\n\nfunction useFileTree(\n  fileType: FILE_TREE_TYPE,\n): [TreeNodeType[] | undefined, boolean] {\n  const dispatch = useDispatch()\n  const tree = useSelector(selectFilesTreeNodes(fileType))\n  const isLatest = useSelector(selectFilesIsLatest(fileType))\n  const isLoading = useSelector(selectFilesIsLoading(fileType))\n  React.useEffect(() => {\n    if (!isLatest && !isLoading) {\n      dispatch(getFilesTree(fileType))\n    }\n  }, [isLatest, isLoading, fileType, dispatch])\n  return [tree, isLoading]\n}\n","import React from 'react'\nimport LinearProgress, {\n  LinearProgressProps,\n} from '@mui/material/LinearProgress'\nimport Typography from '@mui/material/Typography'\nimport Box from '@mui/material/Box'\n\nexport const LinearProgressWithLabel = React.memo<\n  LinearProgressProps & { value: number }\n>((props) => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  )\n})\n","export const FILE_UPLOADER_SLICE_NAME = 'fileUploader'\n\nexport type FileUploader = {\n  [id: string]: FileUploaderType\n}\n\nexport type FileUploaderType = {\n  path?: string\n  fileName?: string\n  isUninitialized: boolean\n  pending: boolean\n  fulfilled: boolean\n  uploadingProgress?: number\n  error?: string\n}\n","import { createAsyncThunk, createAction } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\n\nimport { FILE_UPLOADER_SLICE_NAME } from './FileUploaderType'\n\nexport const setUploadProgress = createAction<{\n  requestId: string\n  progess: number\n  total: number\n}>(`${FILE_UPLOADER_SLICE_NAME}/setUploadProgress`)\n\nexport const uploadFile = createAsyncThunk<\n  {\n    resultPath: string\n  },\n  {\n    requestId: string\n    fileName: string\n    formData: FormData\n    fileType?: FILE_TYPE\n  }\n>(\n  `${FILE_UPLOADER_SLICE_NAME}/uploadFile`,\n  async ({ requestId, fileName, formData }, thunkAPI) => {\n    try {\n      const config = getUploadConfig((percent, total) => {\n        thunkAPI.dispatch(\n          setUploadProgress({\n            requestId,\n            progess: percent,\n            total,\n          }),\n        )\n      })\n      const response = await axios.post(\n        `${BASE_URL}/files/upload/${fileName}`,\n        formData,\n        config,\n      )\n      const data = response.data\n      return {\n        resultPath: data.file_path,\n      }\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nfunction getUploadConfig(\n  onUpdateProgressFn: (percent: number, totalSize: number) => void,\n) {\n  return {\n    onUploadProgress: function (progressEvent: any) {\n      const percentCompleted = Math.round(\n        (progressEvent.loaded * 100) / progressEvent.total,\n      )\n      onUpdateProgressFn(percentCompleted, progressEvent.total)\n    },\n  }\n}\n","import { FileUploaderType } from './FileUploaderType'\n\nexport const inistialUploaderState: FileUploaderType = {\n  path: undefined,\n  fileName: undefined,\n  isUninitialized: true,\n  pending: false,\n  fulfilled: false,\n  uploadingProgress: undefined,\n  error: undefined,\n}\n","import { RootState } from 'store/store'\nimport { inistialUploaderState } from './FileUploaderInitlalState'\n\nexport const selectFileUploader = (id: string) => (state: RootState) => {\n  if (Object.keys(state.fileUploader).includes(id)) {\n    return state.fileUploader[id]\n  } else {\n    return inistialUploaderState\n  }\n}\n\nexport const selectUploadFilePath = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).path\n\nexport const selectUploadFileName = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).fileName\n\nexport const selectFileUploadIsUninitialized =\n  (id: string) => (state: RootState) =>\n    selectFileUploader(id)(state).isUninitialized\n\nexport const selectFileUploadIsPending = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).pending\n\nexport const selectFileUploadIsFulfilled = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).fulfilled\n\nexport const selectFileUploadProgress = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).uploadingProgress\n\nexport const selectFileUploadError = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).error\n","import { nanoid } from '@reduxjs/toolkit'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { uploadFile } from './FileUploaderActions'\nimport {\n  selectFileUploadIsPending,\n  selectUploadFilePath,\n  selectFileUploadIsFulfilled,\n  selectFileUploadProgress,\n  selectFileUploadIsUninitialized,\n  selectFileUploadError,\n} from './FileUploaderSelectors'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\n\nexport function useFileUploader(fileType?: FILE_TYPE) {\n  const dispatch = useDispatch()\n  const id = React.useRef(nanoid())\n  const onUploadFile = React.useCallback(\n    (formData: FormData, fileName: string) => {\n      dispatch(\n        uploadFile({ requestId: id.current, fileName, formData, fileType }),\n      )\n    },\n    [dispatch, fileType],\n  )\n  const uninitialized = useSelector(selectFileUploadIsUninitialized(id.current))\n  const filePath = useSelector(selectUploadFilePath(id.current))\n  const pending = useSelector(selectFileUploadIsPending(id.current))\n  const fulfilled = useSelector(selectFileUploadIsFulfilled(id.current))\n  const progress = useSelector(selectFileUploadProgress(id.current))\n  const error = useSelector(selectFileUploadError(id.current))\n  return {\n    filePath,\n    uninitialized,\n    pending,\n    fulfilled,\n    progress,\n    error,\n    onUploadFile,\n  }\n}\n","import React from 'react'\nimport { Button, Typography } from '@mui/material'\nimport ButtonGroup from '@mui/material/ButtonGroup'\n\nimport { FileSelectDialog } from 'components/FileSelectDialog'\nimport {\n  FILE_TREE_TYPE,\n  FILE_TREE_TYPE_SET,\n} from 'store/slice/FilesTree/FilesTreeType'\nimport { LinearProgressWithLabel } from './LinerProgressWithLabel'\nimport { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\nimport { getLabelByPath } from 'store/slice/FlowElement/FlowElementUtils'\n\nexport const FileSelect = React.memo<{\n  multiSelect?: boolean\n  filePath: string | string[]\n  fileType: FILE_TYPE\n  onChangeFilePath: (path: string | string[]) => void\n}>(({ multiSelect = false, filePath, fileType, onChangeFilePath }) => {\n  const {\n    filePath: uploadedFilePath,\n    onUploadFile,\n    pending,\n    uninitialized,\n    progress,\n    error,\n  } = useFileUploader(fileType)\n\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n    if (uploadedFilePath != null) {\n      onChangeFilePath(uploadedFilePath)\n    }\n  }\n\n  return (\n    <>\n      {!uninitialized && pending && progress != null && (\n        <div style={{ marginLeft: 2, marginRight: 2 }}>\n          <LinearProgressWithLabel value={progress} />\n        </div>\n      )}\n      <FileSelectImple\n        multiSelect={multiSelect}\n        filePath={filePath}\n        onSelectFile={onChangeFilePath}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={fileType}\n        selectButtonLabel={`Select ${fileType}`}\n      />\n      {error != null && (\n        <Typography variant=\"caption\" color=\"error\">\n          {error}\n        </Typography>\n      )}\n    </>\n  )\n})\n\ntype FileSelectImpleProps = {\n  multiSelect?: boolean\n  filePath: string | string[]\n  onUploadFile: (formData: FormData, fileName: string) => void\n  onSelectFile: (path: string | string[]) => void\n  fileTreeType?: FILE_TREE_TYPE\n  selectButtonLabel?: string\n  uploadButtonLabel?: string\n}\n\nexport const FileSelectImple = React.memo<FileSelectImpleProps>(\n  ({\n    multiSelect = false,\n    filePath,\n    onSelectFile,\n    onUploadFile,\n    fileTreeType,\n    selectButtonLabel,\n    uploadButtonLabel,\n  }) => {\n    const onFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      event.preventDefault()\n      if (event.target.files != null && event.target.files[0] != null) {\n        const file = event.target.files[0]\n        const formData = new FormData()\n        formData.append('file', file)\n        const fileName = file.name\n        onUploadFile(formData, fileName)\n      }\n    }\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const onClick = () => {\n      if (inputRef.current != null) {\n        inputRef.current.click()\n      }\n    }\n    const [open, setOpen] = React.useState(false)\n    const accept = getFileInputAccept(fileTreeType)\n    const fileName = getLabelByPath(filePath)\n    return (\n      <div\n        style={{\n          padding: 5,\n        }}\n      >\n        <ButtonGroup size=\"small\" style={{ marginRight: 4 }}>\n          <Button variant=\"outlined\" onClick={() => setOpen(true)}>\n            {!!selectButtonLabel ? selectButtonLabel : 'Select File'}\n          </Button>\n          <Button onClick={onClick} variant=\"outlined\">\n            {!!uploadButtonLabel ? uploadButtonLabel : 'or Upload'}\n          </Button>\n        </ButtonGroup>\n        <div>\n          <input\n            ref={inputRef}\n            type=\"file\"\n            onChange={onFileInputChange}\n            accept={accept}\n            style={{\n              visibility: 'hidden',\n              width: 0,\n              height: 0,\n            }}\n          />\n          <Typography className=\"selectFilePath\" variant=\"caption\">\n            {!!fileName ? fileName : 'No file is selected.'}\n          </Typography>\n        </div>\n        <FileSelectDialog\n          multiSelect={multiSelect}\n          initialFilePath={filePath}\n          open={open}\n          onClickOk={(path) => {\n            onSelectFile(path)\n            setOpen(false)\n          }}\n          onClickCancel={() => {\n            setOpen(false)\n          }}\n          onClose={() => setOpen(false)}\n          fileType={fileTreeType}\n        />\n      </div>\n    )\n  },\n)\n\nfunction getFileInputAccept(fileType: FILE_TREE_TYPE | undefined) {\n  switch (fileType) {\n    case FILE_TREE_TYPE_SET.IMAGE:\n      return '.tif'\n    case FILE_TREE_TYPE_SET.CSV:\n      return '.csv'\n    case FILE_TREE_TYPE_SET.HDF5:\n      return '.hdf5,.nwb'\n    default:\n      return undefined\n  }\n}\n","import { Connection } from 'react-flow-renderer'\n\nexport function toHandleId(nodeId: string, name: string, type: string) {\n  return `${nodeId}--${name}--${type}`\n}\n\nexport function getHandleType(handleId: string) {\n  return handleId.split('--')[2]\n}\n\nexport function isValidConnection(connection: Connection) {\n  if (connection.sourceHandle != null && connection.targetHandle != null) {\n    return (\n      getHandleType(connection.sourceHandle) ===\n      getHandleType(connection.targetHandle)\n    )\n  } else {\n    return true\n  }\n}\n","export function arrayEqualityFn<T>(a: T[], b: T[]) {\n  return a === b || (a.length === b.length && a.every((v, i) => v === b[i]))\n}\n\nexport function twoDimarrayEqualityFn<T>(a: T[][], b: T[][]) {\n  return (\n    a === b ||\n    (a.length === b.length && a.every((v, i) => arrayEqualityFn(v, b[i])))\n  )\n}\n","import React, { CSSProperties } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport { alpha, useTheme } from '@mui/material/styles'\nimport { IconButton } from '@mui/material'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport {\n  selectImageInputNodeSelectedFilePath,\n  selectInputNodeDefined,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n\nimport { useHandleColor } from './HandleColorHook'\nimport { FileSelect } from './FileSelect'\nimport { toHandleId, isValidConnection } from './FlowChartUtils'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\n\n// Connection部分のレイアウト\nconst sourceHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  top: 15,\n  border: '1px solid',\n  // borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const ImageFileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <ImageFileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst ImageFileNodeImple = React.memo<NodeProps>(\n  ({ id: nodeId, selected: elementSelected }) => {\n    const dispatch = useDispatch()\n    const filePath = useSelector(\n      selectImageInputNodeSelectedFilePath(nodeId),\n      (a, b) => (a != null && b != null ? arrayEqualityFn(a, b) : a === b),\n    )\n    const onChangeFilePath = (path: string[]) => {\n      dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n    }\n\n    const theme = useTheme()\n    const returnType = 'ImageData'\n    const imageColor = useHandleColor(returnType)\n\n    const onClickDeleteIcon = () => {\n      dispatch(deleteFlowElementsById(nodeId))\n    }\n\n    return (\n      <div\n        style={{\n          height: '100%',\n          width: '250px',\n          background: elementSelected\n            ? alpha(theme.palette.primary.light, 0.1)\n            : undefined,\n        }}\n      >\n        <IconButton\n          aria-label=\"delete\"\n          style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n          onClick={onClickDeleteIcon}\n          size=\"large\"\n        >\n          <CloseOutlinedIcon />\n        </IconButton>\n        <FileSelect\n          multiSelect\n          onChangeFilePath={(path) => {\n            if (Array.isArray(path)) {\n              onChangeFilePath(path)\n            }\n          }}\n          fileType={FILE_TYPE_SET.IMAGE}\n          filePath={filePath ?? []}\n        />\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id={toHandleId(nodeId, 'image', returnType)}\n          style={{\n            ...sourceHandleStyle,\n            background: imageColor,\n          }}\n          isValidConnection={isValidConnection}\n        />\n      </div>\n    )\n  },\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport {\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\n\ntype RightDrawer = {\n  open: boolean\n  mode: RIGHT_DRAWER_MODE_TYPE\n  currendNodeId: string | null\n}\n\nexport const RIGHT_DRAWER_MODE = {\n  NONE: 'none',\n  NWB: 'nwb',\n  PARAM_FORM: 'paramForm',\n  SNAKEMAKE: 'snakemake',\n} as const\n\nexport type RIGHT_DRAWER_MODE_TYPE =\n  typeof RIGHT_DRAWER_MODE[keyof typeof RIGHT_DRAWER_MODE]\n\nconst initialState: RightDrawer = {\n  open: false,\n  mode: RIGHT_DRAWER_MODE.NONE,\n  currendNodeId: null,\n}\nexport const rightDrawerSlice = createSlice({\n  name: 'rightDrawer',\n  initialState,\n  reducers: {\n    openRightDrawer: (state, action: PayloadAction<RIGHT_DRAWER_MODE_TYPE>) => {\n      state.open = true\n      state.mode = action.payload\n    },\n    closeRightDrawer: (state) => {\n      state.open = false\n      state.mode = RIGHT_DRAWER_MODE.NONE\n    },\n    toggleParamForm: (state, action: PayloadAction<string>) => {\n      if (\n        state.open &&\n        state.mode === RIGHT_DRAWER_MODE.PARAM_FORM &&\n        state.currendNodeId === action.payload\n      ) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n        state.currendNodeId = null\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.PARAM_FORM\n        state.currendNodeId = action.payload\n      }\n    },\n    toggleNwb: (state) => {\n      if (state.open && state.mode === RIGHT_DRAWER_MODE.NWB) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.NWB\n      }\n      state.currendNodeId = null\n    },\n    toggleSnakemake: (state) => {\n      if (state.open && state.mode === RIGHT_DRAWER_MODE.SNAKEMAKE) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.SNAKEMAKE\n      }\n      state.currendNodeId = null\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(deleteFlowElements, (state, action) => {\n        if (\n          action.payload.findIndex((elm) => elm.id === state.currendNodeId) > 0\n        ) {\n          state.currendNodeId = null\n        }\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (action.payload === state.currendNodeId) {\n          state.currendNodeId = null\n        }\n      })\n      .addCase(importExperimentByUid.fulfilled, () => {\n        return initialState\n      })\n  },\n})\n\nexport const {\n  toggleParamForm,\n  toggleNwb,\n  toggleSnakemake,\n  openRightDrawer,\n  closeRightDrawer,\n} = rightDrawerSlice.actions\n\nexport default rightDrawerSlice.reducer\n","import { getChildParam } from 'store/utils/param/ParamUtils'\nimport { RootState } from '../../store'\n\nexport const selectNwb = (state: RootState) => state.nwb\n\nexport const selectNwbParams = (state: RootState) => selectNwb(state).params\n\nexport const selectNwbParamsKeyList = (state: RootState) =>\n  Object.keys(selectNwb(state).params)\n\nexport const selectNwbParam = (paramKey: string) => (state: RootState) =>\n  selectNwb(state).params[paramKey]\n\nexport const selectNwbParamsValue = (path: string) => (state: RootState) => {\n  const params = selectNwb(state).params\n  if (params != null) {\n    const target = getChildParam(path, params)\n    return target?.value\n  } else {\n    throw new Error('Param is null')\n  }\n}\n","import { getChildParam } from 'store/utils/param/ParamUtils'\nimport { RootState } from '../../store'\n\nconst selectSnakemake = (state: RootState) => state.snakemake\nexport const selectSnakemakeParams = (state: RootState) =>\n  selectSnakemake(state).params\n\nexport const selectSnakemakeParamsKeyList = (state: RootState) =>\n  Object.keys(selectSnakemakeParams(state))\n\nexport const selectSnakemakeParam = (paramKey: string) => (state: RootState) =>\n  selectSnakemakeParams(state)[paramKey]\n\nexport const selectSnakemakeParamsValue =\n  (path: string) => (state: RootState) => {\n    const params = selectSnakemakeParams(state)\n    if (params != null) {\n      const target = getChildParam(path, params)\n      return target?.value\n    } else {\n      throw new Error('Param is null')\n    }\n  }\n","import { RunPostData } from 'api/run/Run'\nimport { DATA_TYPE } from '../DisplayData/DisplayDataType'\n\nexport const PIPELINE_SLICE_NAME = 'pipeline'\n\nexport type Pipeline = {\n  run: PipelineType\n  currentPipeline?: {\n    uid: string\n  }\n  runBtn: RUN_BTN_TYPE\n}\n\nexport const RUN_STATUS = {\n  /**\n   * 未実行\n   */\n  START_UNINITIALIZED: 'StartUninitialized',\n  /**\n   * 開始リクエスト中\n   */\n  START_PENDING: 'StartPending',\n  /**\n   * 開始できなかった\n   */\n  START_ERROR: 'StartError',\n  /**\n   * 正常に開始した\n   */\n  START_SUCCESS: 'StartSuccess',\n  /**\n   * 全て終了\n   */\n  FINISHED: 'Finished',\n  /**\n   * 途中終了\n   */\n  ABORTED: 'Aborted',\n  /**\n   * キャンセルされた\n   */\n  CANCELED: 'Canceled',\n} as const\n\nexport type RUN_STATUS_TYPE = typeof RUN_STATUS[keyof typeof RUN_STATUS]\n\nexport type PipelineType =\n  | StartedPipeline\n  | {\n      status:\n        | typeof RUN_STATUS.START_ERROR\n        | typeof RUN_STATUS.START_PENDING\n        | typeof RUN_STATUS.START_UNINITIALIZED\n    }\n\nexport type StartedPipeline = {\n  uid: string\n  status:\n    | typeof RUN_STATUS.START_SUCCESS\n    | typeof RUN_STATUS.FINISHED\n    | typeof RUN_STATUS.ABORTED\n    | typeof RUN_STATUS.CANCELED\n  runPostData: RunPostData\n  runResult: RunResult\n}\n\nexport type RunResult = {\n  [nodeId: string]: NodeResult\n}\n\nexport type NodeResult = NodeResultPending | NodeResultSuccess | NodeResultError\n\nexport const NODE_RESULT_STATUS = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  PENDING: 'pending',\n} as const\n\nexport type NODE_RESULT_STATUS_TYPE =\n  typeof NODE_RESULT_STATUS[keyof typeof NODE_RESULT_STATUS]\n\nexport interface NodeResultBaseType<T extends NODE_RESULT_STATUS_TYPE> {\n  status: T\n  message?: string\n  name: string\n}\n\nexport interface NodeResultPending\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.PENDING> {}\n\nexport interface NodeResultSuccess\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.SUCCESS> {\n  outputPaths: OutputPaths\n}\n\nexport type OutputPaths = {\n  [outputKey: string]: {\n    path: string\n    type: DATA_TYPE\n  }\n}\n\nexport interface NodeResultError\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.ERROR> {\n  message: string\n}\n\nexport const RUN_BTN_OPTIONS = {\n  RUN_NEW: 1,\n  RUN_ALREADY: 2,\n} as const\n\nexport type RUN_BTN_TYPE = typeof RUN_BTN_OPTIONS[keyof typeof RUN_BTN_OPTIONS]\n\nexport const RUN_BTN_LABELS = {\n  [RUN_BTN_OPTIONS.RUN_NEW]: 'RUN ALL',\n  [RUN_BTN_OPTIONS.RUN_ALREADY]: 'RUN',\n} as const\n","export const DISPLAY_DATA_SLICE_NAME = 'displayData'\n\nexport type DisplayData = {\n  timeSeries: {\n    [filePath: string]: TimeSeriesDisplayData\n  }\n  heatMap: {\n    [filePath: string]: HeatMapDisplayData\n  }\n  image: {\n    [filePath: string]: ImageDisplayData\n  }\n  csv: {\n    [filePath: string]: CsvDisplayData\n  }\n  roi: {\n    [filePath: string]: RoiDisplayData\n  }\n  scatter: {\n    [filePath: string]: ScatterDisplayData\n  }\n  bar: {\n    [filePath: string]: BarDisplayData\n  }\n  hdf5: {\n    [filePath: string]: HDF5DisplayData\n  }\n  html: {\n    [filePath: string]: HTMLDisplayData\n  }\n}\n\nexport const DATA_TYPE_SET = {\n  TIME_SERIES: 'timeSeries',\n  HEAT_MAP: 'heatMap',\n  IMAGE: 'image',\n  CSV: 'csv',\n  ROI: 'roi',\n  SCATTER: 'scatter',\n  BAR: 'bar',\n  HDF5: 'hdf5',\n  HTML: 'html',\n} as const\n\nexport type DATA_TYPE = typeof DATA_TYPE_SET[keyof typeof DATA_TYPE_SET]\n\ninterface BaseDisplay<T extends DATA_TYPE, Data> {\n  type: T\n  data: Data\n  pending: boolean\n  error: string | null\n  fulfilled: boolean\n}\n\nexport interface TimeSeriesDisplayData\n  extends BaseDisplay<'timeSeries', TimeSeriesData> {\n  xrange: number[]\n  std: TimeSeriesData\n}\nexport type TimeSeriesData = {\n  [key: string]: {\n    [key: number]: number\n  }\n}\n\nexport interface HeatMapDisplayData\n  extends BaseDisplay<'heatMap', HeatMapData> {}\nexport type HeatMapData = number[][]\n\nexport interface ImageDisplayData extends BaseDisplay<'image', ImageData> {}\nexport type ImageData = number[][][]\n\nexport interface CsvDisplayData extends BaseDisplay<'csv', CsvData> {\n  // columns: string[]\n}\nexport type CsvData = number[][]\n\nexport interface RoiDisplayData extends BaseDisplay<'roi', RoiData> {}\nexport type RoiData = number[][][]\n\nexport interface ScatterDisplayData\n  extends BaseDisplay<'scatter', ScatterData> {}\nexport type ScatterData = number[][][]\n\nexport interface BarDisplayData extends BaseDisplay<'bar', BarData> {}\nexport type BarData = number[][][]\n\nexport interface HDF5DisplayData extends BaseDisplay<'hdf5', HDF5Data> {}\nexport type HDF5Data = number[][][]\n\nexport interface HTMLDisplayData extends BaseDisplay<'html', HTMLData> {}\nexport type HTMLData = string\n","import { DATA_TYPE, DATA_TYPE_SET } from './DisplayDataType'\n\n/**\n * サーバーサイドの値をマッピング\n */\nexport function toDataType(value: string): DATA_TYPE {\n  switch (value) {\n    case 'images':\n      return DATA_TYPE_SET.IMAGE\n    case 'timeseries':\n      return DATA_TYPE_SET.TIME_SERIES\n    case 'heatmap':\n      return DATA_TYPE_SET.HEAT_MAP\n    case 'roi':\n      return DATA_TYPE_SET.ROI\n    case 'scatter':\n      return DATA_TYPE_SET.SCATTER\n    case 'bar':\n      return DATA_TYPE_SET.BAR\n    case 'html':\n      return DATA_TYPE_SET.HTML\n    default:\n      throw new Error(`failed to map dataType: ${value}`)\n  }\n}\n","import { RunPostData, RunResultDTO, OutputPathsDTO } from 'api/run/Run'\n\nimport { toDataType } from '../DisplayData/DisplayDataUtils'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport {\n  RunResult,\n  OutputPaths,\n  NODE_RESULT_STATUS,\n  PipelineType,\n  RUN_STATUS,\n  StartedPipeline,\n  NodeResultPending,\n  NodeResultError,\n  NodeResultSuccess,\n  NodeResult,\n} from './PipelineType'\n\nexport function isNodeResultPending(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultPending {\n  return nodeResult.status === NODE_RESULT_STATUS.PENDING\n}\n\nexport function isNodeResultSuccess(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultSuccess {\n  return nodeResult.status === NODE_RESULT_STATUS.SUCCESS\n}\n\nexport function isNodeResultError(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultError {\n  return nodeResult.status === NODE_RESULT_STATUS.ERROR\n}\n\nexport function isStartedPipeline(\n  pipeline: PipelineType,\n): pipeline is StartedPipeline {\n  return (\n    pipeline.status === RUN_STATUS.START_SUCCESS ||\n    pipeline.status === RUN_STATUS.FINISHED ||\n    pipeline.status === RUN_STATUS.ABORTED\n  )\n}\n\nexport function getInitialRunResult(runPostData: RunPostData) {\n  const initialResult: RunResult = {}\n  runPostData.nodeList\n    .filter(({ data }) => data?.type === NODE_TYPE_SET.ALGORITHM)\n    .forEach(({ id, data }) => {\n      initialResult[id] = {\n        status: NODE_RESULT_STATUS.PENDING,\n        name: data?.label ?? '',\n      }\n    })\n  return initialResult\n}\n\nexport function convertToRunResult(dto: RunResultDTO) {\n  const result: RunResult = {}\n  Object.entries(dto).forEach(([nodeId, nodeResultDto]) => {\n    const outputPath = nodeResultDto.outputPaths\n    if (nodeResultDto.status === 'success' && outputPath != null) {\n      result[nodeId] = {\n        status: NODE_RESULT_STATUS.SUCCESS,\n        message: nodeResultDto.message,\n        name: nodeResultDto.name,\n        outputPaths: convertToOutputPath(outputPath),\n      }\n    } else {\n      result[nodeId] = {\n        status: NODE_RESULT_STATUS.ERROR,\n        message: nodeResultDto.message,\n        name: nodeResultDto.name,\n      }\n    }\n  })\n  return result\n}\n\nfunction convertToOutputPath(dto: OutputPathsDTO) {\n  const result: OutputPaths = {}\n  Object.entries(dto).forEach(([functionPath, value]) => {\n    result[functionPath] = {\n      path: value.path,\n      type: toDataType(value.type),\n    }\n  })\n  return result\n}\n","import { Node } from 'react-flow-renderer'\n\nimport {\n  AlgorithmNodePostData,\n  InputNodePostData,\n  NodePostDataType,\n  RunPostData,\n} from 'api/run/Run'\n\nimport { RootState } from 'store/store'\nimport {\n  selectEdgeListForRun,\n  selectFlowElements,\n} from '../FlowElement/FlowElementSelectors'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport {\n  isAlgorithmNodeData,\n  isNodeData,\n} from '../FlowElement/FlowElementUtils'\nimport { selectNwbParams } from '../NWB/NWBSelectors'\nimport { selectSnakemakeParams } from '../Snakemake/SnakemakeSelectors'\nimport {\n  NodeResult,\n  NodeResultPending,\n  NodeResultSuccess,\n  NODE_RESULT_STATUS,\n  RUN_STATUS,\n} from './PipelineType'\nimport {\n  isNodeResultPending,\n  isStartedPipeline,\n  isNodeResultSuccess,\n} from './PipelineUtils'\n\nimport {\n  selectAlgorithmFunctionPath,\n  selectAlgorithmIsUpdated,\n  selectAlgorithmName,\n  selectAlgorithmParams,\n} from '../AlgorithmNode/AlgorithmNodeSelectors'\nimport {\n  selectInputNodeFileType,\n  selectInputNodeHDF5Path,\n  selectInputNodeParam,\n  selectInputNodeSelectedFilePath,\n} from '../InputNode/InputNodeSelectors'\n\nexport const selectPipelineLatestUid = (state: RootState) => {\n  return state.pipeline.currentPipeline?.uid\n}\n\nexport const selectRunPostData = (state: RootState) => {\n  const nwbParam = selectNwbParams(state)\n  const snakemakeParam = selectSnakemakeParams(state)\n  const edgeListForRun = selectEdgeListForRun(state)\n  const nodePostDataList = selectNodePostDataListForRun(state)\n  const forceRunList = selectForceRunList(state)\n  const runPostData: Omit<RunPostData, 'name'> = {\n    nwbParam,\n    snakemakeParam,\n    edgeList: edgeListForRun,\n    nodeList: nodePostDataList,\n    forceRunList,\n  }\n  return runPostData\n}\n\nexport const selectNodePostDataListForRun = (\n  state: RootState,\n): Node<NodePostDataType>[] => {\n  const elements = selectFlowElements(state)\n  const nodeList = elements.filter(isNodeData).map((node) => {\n    if (isAlgorithmNodeData(node)) {\n      const param = selectAlgorithmParams(node.id)(state) ?? {}\n      const functionPath = selectAlgorithmFunctionPath(node.id)(state)\n      const algorithmNodePostData: Node<AlgorithmNodePostData> = {\n        ...node,\n        data: {\n          ...node.data,\n          label: node.data?.label ?? '',\n          type: NODE_TYPE_SET.ALGORITHM,\n          path: functionPath,\n          param,\n        },\n      }\n      return algorithmNodePostData\n    } else {\n      const filePath = selectInputNodeSelectedFilePath(node.id)(state)\n      const fileType = selectInputNodeFileType(node.id)(state)\n      const param = selectInputNodeParam(node.id)(state)\n      const hdf5Path = selectInputNodeHDF5Path(node.id)(state)\n      const inputNodePosyData: Node<InputNodePostData> = {\n        ...node,\n        data: {\n          ...node.data,\n          label: node.data?.label ?? '',\n          type: NODE_TYPE_SET.INPUT,\n          path: filePath ?? '',\n          param,\n          hdf5Path: hdf5Path,\n          fileType,\n        },\n      }\n      return inputNodePosyData\n    }\n  })\n  return nodeList\n}\n\n/**\n * 前回の結果で、エラーまたはParamに変更があるnodeのリストを返す\n */\nconst selectForceRunList = (state: RootState) => {\n  const elements = selectFlowElements(state)\n  // todo\n  return elements\n    .filter(isAlgorithmNodeData)\n    .filter((node) => {\n      const isUpdated = selectAlgorithmIsUpdated(node.id)(state)\n      const status = selectPipelineNodeResultStatus(node.id)(state)\n      return isUpdated || status === NODE_RESULT_STATUS.ERROR\n    })\n    .map((node) => ({\n      nodeId: node.id,\n      name: selectAlgorithmName(node.id)(state),\n    }))\n}\n\nexport const selectStartedPipeline = (state: RootState) => {\n  return state.pipeline.run\n}\n\nexport const selectPipelineRunBtn = (state: RootState) => {\n  return state.pipeline.runBtn\n}\n\nexport const selectRunResultPendingList = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  if (isStartedPipeline(pipeline)) {\n    return Object.values(pipeline.runResult).filter(isNodeResultPending)\n  } else {\n    return []\n  }\n}\n\nexport const selectRunResultPendingNodeIdList = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  if (isStartedPipeline(pipeline)) {\n    return Object.entries(pipeline.runResult)\n      .map(([nodeId, nodeResult]) => ({ nodeId, nodeResult }))\n      .filter(isNodeResultPendingAndNodeId)\n      .map(({ nodeId }) => nodeId)\n  } else {\n    return []\n  }\n}\n\nfunction isNodeResultPendingAndNodeId(arg: {\n  nodeId: string\n  nodeResult: NodeResult\n}): arg is {\n  nodeId: string\n  nodeResult: NodeResultPending\n} {\n  return isNodeResultPending(arg.nodeResult)\n}\n\nexport const selectPipelineStatus = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  return pipeline.status\n}\n\nexport const selectPipelineIsCanceled = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  return pipeline.status === RUN_STATUS.CANCELED\n}\n\nexport const selectPipelineIsStartedSuccess = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  return pipeline.status === RUN_STATUS.START_SUCCESS\n}\n\n// export const selectPipelineRunResult = (state: RootState) => {\n//   const pipeline = selectStartedPipeline(state)\n//   if (isStartedPipeline(pipeline)) {\n//     return pipeline.runResult\n//   } else {\n//     throw new Error(\"todo\")\n//   }\n// }\n\nexport const selectPipelineNodeResultSuccessList = (state: RootState) => {\n  const pipeline = selectStartedPipeline(state)\n  if (isStartedPipeline(pipeline)) {\n    return Object.entries(pipeline.runResult)\n      .map(([nodeId, nodeResult]) => {\n        return {\n          nodeId,\n          nodeResult,\n        }\n      })\n      .filter(isNodeResultSuccessAndNodeId)\n  } else {\n    return []\n  }\n}\n\n// selectPipelineNodeResultSuccessListの返り値の型を正しく認識させるためだけに作った\nfunction isNodeResultSuccessAndNodeId(arg: {\n  nodeId: string\n  nodeResult: NodeResult\n}): arg is {\n  nodeId: string\n  nodeResult: NodeResultSuccess\n} {\n  return isNodeResultSuccess(arg.nodeResult)\n}\n\nexport const selectPipelineNodeResultStatus =\n  (nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(state)\n    if (isStartedPipeline(pipeline)) {\n      if (Object.keys(pipeline.runResult).includes(nodeId)) {\n        return pipeline.runResult[nodeId].status\n      }\n    }\n    return null\n  }\n\nexport const selectPipelineNodeResultMessage =\n  (nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(state)\n    if (isStartedPipeline(pipeline)) {\n      if (Object.keys(pipeline.runResult).includes(nodeId)) {\n        return pipeline.runResult[nodeId].message\n      }\n    }\n    return null\n  }\n\nexport const selectPipelineNodeResultOutputKeyList =\n  (nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(state)\n    if (isStartedPipeline(pipeline)) {\n      const nodeResult = pipeline.runResult[nodeId]\n      if (\n        Object.keys(pipeline.runResult).includes(nodeId) &&\n        isNodeResultSuccess(nodeResult)\n      ) {\n        return Object.keys(nodeResult.outputPaths)\n      }\n    }\n    return []\n  }\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport {\n  alpha,\n  Typography,\n  useTheme,\n  Tooltip,\n  FormHelperText,\n  IconButton,\n  Button,\n  LinearProgress,\n} from '@mui/material'\nimport CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded'\nimport ErrorIcon from '@mui/icons-material/Error'\nimport Popover from '@mui/material/Popover'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { AlgorithmInfo } from 'store/slice/AlgorithmList/AlgorithmListType'\nimport {\n  selectAlgoArgs,\n  selectAlgoReturns,\n} from 'store/slice/AlgorithmList/AlgorithmListSelectors'\nimport { selectAlgorithmNodeDefined } from 'store/slice/AlgorithmNode/AlgorithmNodeSelectors'\nimport { NodeData } from 'store/slice/FlowElement/FlowElementType'\n\nimport { useHandleColor } from './HandleColorHook'\nimport { toHandleId, isValidConnection } from './FlowChartUtils'\nimport { toggleParamForm } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectPipelineLatestUid,\n  selectPipelineNodeResultMessage,\n  selectPipelineNodeResultStatus,\n} from 'store/slice/Pipeline/PipelineSelectors'\nimport { RootState } from 'store/store'\nimport { NODE_RESULT_STATUS } from 'store/slice/Pipeline/PipelineType'\n\nconst leftHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  border: '1px solid',\n  borderRadius: 0,\n}\nconst rightHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  border: '1px solid',\n  borderRadius: 0,\n}\n\nexport const AlgorithmNode = React.memo<NodeProps<NodeData>>((element) => {\n  const defined = useSelector(selectAlgorithmNodeDefined(element.id))\n  if (defined) {\n    return <AlgorithmNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst AlgorithmNodeImple = React.memo<NodeProps<NodeData>>(\n  ({ id: nodeId, selected: elementSelected, isConnectable, data }) => {\n    const theme = useTheme()\n    const dispatch = useDispatch()\n\n    const onClickParamButton = () => {\n      dispatch(toggleParamForm(nodeId))\n    }\n\n    const onClickDeleteIcon = () => {\n      dispatch(deleteFlowElementsById(nodeId))\n    }\n\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '110%',\n          background: elementSelected\n            ? alpha(theme.palette.primary.light, 0.15)\n            : undefined,\n          border: '1px solid',\n        }}\n      >\n        <IconButton\n          aria-label=\"delete\"\n          style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n          onClick={onClickDeleteIcon}\n          size=\"large\"\n        >\n          <CloseOutlinedIcon />\n        </IconButton>\n        <AlgoName nodeId={nodeId} data={data} />\n        <div>\n          <Button size=\"small\" variant=\"outlined\" onClick={onClickParamButton}>\n            Param\n            {/* <DehazeIcon fontSize='small'/> */}\n          </Button>\n        </div>\n        <AlgoArgs nodeId={nodeId} />\n        <AlgoReturns nodeId={nodeId} isConnectable={isConnectable} />\n        <Message nodeId={nodeId} />\n      </div>\n    )\n  },\n)\n\nconst AlgoName = React.memo<{\n  nodeId: string\n  data: NodeData\n}>(({ nodeId, data }) => {\n  const theme = useTheme()\n  const latestUid = useSelector(selectPipelineLatestUid)\n\n  const status = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultStatus(nodeId)(state)\n      : 'uninitialized',\n  )\n  return (\n    <div\n      style={{\n        padding: 8,\n        paddingLeft: 8,\n      }}\n      className=\"algoName\"\n    >\n      {status === NODE_RESULT_STATUS.PENDING && <LinearProgress />}\n      <Typography\n        style={{\n          textAlign: 'left',\n          color:\n            status === NODE_RESULT_STATUS.ERROR\n              ? theme.palette.error.main\n              : undefined,\n        }}\n      >\n        {data.label}\n      </Typography>\n    </div>\n  )\n})\n\nconst AlgoArgs = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const algoArgs = useSelector(selectAlgoArgs(nodeId), algoInfoListEqualtyFn)\n\n  return (\n    <>\n      {algoArgs != null\n        ? algoArgs\n            .filter((info) => info.type !== 'params')\n            .map((algoInfo, i) => {\n              return <ArgHandle algoInfo={algoInfo} i={i} nodeId={nodeId} />\n            })\n        : null}\n    </>\n  )\n})\n\nconst AlgoReturns = React.memo<{\n  nodeId: string\n  isConnectable: boolean\n}>(({ nodeId, isConnectable }) => {\n  const algoReturns = useSelector(\n    selectAlgoReturns(nodeId),\n    algoInfoListEqualtyFn,\n  )\n  return (\n    <>\n      {algoReturns != null ? (\n        algoReturns?.map((algoInfo, i) => {\n          return <ReturnHandle algoInfo={algoInfo} i={i} nodeId={nodeId} />\n        })\n      ) : (\n        // algoReturns.lengthが0の場合の応急処置\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id={`${nodeId}`}\n          style={{\n            ...rightHandleStyle,\n            top: 15,\n          }}\n          isConnectable={isConnectable}\n        />\n      )}\n    </>\n  )\n})\n\ntype HandleProps = {\n  algoInfo: AlgorithmInfo\n  nodeId: string\n  i: number\n}\n\nfunction hexToRgb(hex: string | undefined, isNone: boolean | undefined) {\n  if (hex !== undefined) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    if (result !== null) {\n      if (isNone) {\n        return `rgba(${parseInt(result[1], 16)}, ${parseInt(\n          result[2],\n          16,\n        )}, ${parseInt(result[3], 16)}, 0.55)`\n      } else {\n        return `rgba(${parseInt(result[1], 16)}, ${parseInt(\n          result[2],\n          16,\n        )}, ${parseInt(result[3], 16)}, 1)`\n      }\n    } else {\n      return undefined\n    }\n  } else {\n    return undefined\n  }\n}\n\nconst ArgHandle = React.memo<HandleProps>(\n  ({ algoInfo: { name, type, isNone }, nodeId, i }) => {\n    const hex_color = useHandleColor(type)\n    const id = toHandleId(nodeId, name, type)\n    const [isHover, setHover] = React.useState(false)\n    const rgb_color = hexToRgb(hex_color, isNone)\n    return (\n      <Handle\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        key={i.toFixed()}\n        type=\"target\"\n        position={Position.Left}\n        id={id}\n        style={{\n          ...leftHandleStyle,\n          background: rgb_color,\n          top: i * 25 + 15,\n        }}\n        isValidConnection={isValidConnection}\n      >\n        <Tooltip\n          title={\n            <>\n              <Typography color=\"inherit\">name: {name}</Typography>\n              <Typography color=\"inherit\">type: {type}</Typography>\n            </>\n          }\n          open={isHover}\n          placement=\"left-end\"\n          arrow\n        >\n          <div />\n        </Tooltip>\n      </Handle>\n    )\n  },\n)\n\nconst ReturnHandle = React.memo<HandleProps>(\n  ({ algoInfo: { name, type }, nodeId, i }) => {\n    const color = useHandleColor(type)\n    const id = toHandleId(nodeId, name, type)\n    const [isHover, setHover] = React.useState(false)\n    return (\n      <Handle\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        key={i.toFixed()}\n        type=\"source\"\n        position={Position.Right}\n        id={id}\n        style={{\n          ...rightHandleStyle,\n          background: color,\n          top: i * 25 + 15,\n        }}\n        isValidConnection={isValidConnection}\n      >\n        <Tooltip\n          title={\n            <>\n              <Typography color=\"inherit\">name: {name}</Typography>\n              <Typography color=\"inherit\">type: {type}</Typography>\n            </>\n          }\n          open={isHover}\n          placement=\"right-end\"\n          arrow\n        >\n          <div />\n        </Tooltip>\n      </Handle>\n    )\n  },\n)\n\nconst Message = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const latestUid = useSelector(selectPipelineLatestUid)\n  const status = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultStatus(nodeId)(state)\n      : 'uninitialized',\n  )\n\n  const errorMsg = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultMessage(nodeId)(state) ?? null\n      : null,\n  )\n\n  const anchorElRef = React.useRef<HTMLButtonElement | null>(null)\n  const [open, setOpen] = React.useState(false)\n  const theme = useTheme()\n\n  if (status === NODE_RESULT_STATUS.ERROR) {\n    return (\n      <>\n        <IconButton\n          ref={anchorElRef}\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n          size=\"small\"\n          style={{ color: theme.palette.error.main, float: 'right' }}\n        >\n          <ErrorIcon />\n        </IconButton>\n        <Popover\n          open={open}\n          anchorEl={anchorElRef.current}\n          onClose={() => setOpen(false)}\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n          transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n        >\n          <div style={{ margin: 8 }}>\n            <FormHelperText error={true}>{errorMsg}</FormHelperText>\n          </div>\n        </Popover>\n      </>\n    )\n  } else if (status === NODE_RESULT_STATUS.SUCCESS) {\n    return (\n      <IconButton\n        ref={anchorElRef}\n        onClick={() => setOpen((prevOpen) => !prevOpen)}\n        size=\"small\"\n        style={{ color: theme.palette.success.main, float: 'right' }}\n      >\n        <CheckCircleRoundedIcon />\n      </IconButton>\n    )\n  } else {\n    return null\n  }\n})\n\nfunction algoInfoListEqualtyFn(\n  a: AlgorithmInfo[] | undefined,\n  b: AlgorithmInfo[] | undefined,\n) {\n  if (a != null && b != null) {\n    return (\n      a === b ||\n      (a.length === b.length &&\n        a.every((v, i) => v.type === b[i].type && v.name === b[i].name))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { isInputNodePostData } from 'api/run/RunUtils'\nimport { INITIAL_IMAGE_ELEMENT_ID } from 'const/flowchart'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport { addInputNode } from '../FlowElement/FlowElementActions'\nimport {\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport { isNodeData } from '../FlowElement/FlowElementUtils'\nimport { setInputNodeFilePath } from './InputNodeActions'\nimport {\n  CsvInputParamType,\n  FILE_TYPE_SET,\n  InputNode,\n  INPUT_NODE_SLICE_NAME,\n} from './InputNodeType'\nimport { isCsvInputNode, isHDF5InputNode } from './InputNodeUtils'\n\nconst initialState: InputNode = {\n  [INITIAL_IMAGE_ELEMENT_ID]: {\n    fileType: FILE_TYPE_SET.IMAGE,\n    param: {},\n  },\n}\n\nexport const inputNodeSlice = createSlice({\n  name: INPUT_NODE_SLICE_NAME,\n  initialState,\n  reducers: {\n    deleteInputNode(state, action: PayloadAction<string>) {\n      delete state[action.payload]\n    },\n    setCsvInputNodeParam(\n      state,\n      action: PayloadAction<{ nodeId: string; param: CsvInputParamType }>,\n    ) {\n      const { nodeId, param } = action.payload\n      const inputNode = state[nodeId]\n      if (isCsvInputNode(inputNode)) {\n        inputNode.param = param\n      }\n    },\n    setInputNodeHDF5Path(\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        path: string\n      }>,\n    ) {\n      const { nodeId, path } = action.payload\n      const item = state[nodeId]\n      if (isHDF5InputNode(item)) {\n        item.hdf5Path = path\n      }\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addCase(setInputNodeFilePath, (state, action) => {\n        const { nodeId, filePath } = action.payload\n        state[nodeId].selectedFilePath = filePath\n      })\n      .addCase(addInputNode, (state, action) => {\n        const { node, fileType } = action.payload\n        if (node.data?.type === NODE_TYPE_SET.INPUT) {\n          switch (fileType) {\n            case FILE_TYPE_SET.CSV:\n              state[node.id] = {\n                fileType,\n                param: {\n                  setColumn: null,\n                  setIndex: false,\n                  transpose: false,\n                },\n              }\n              break\n            case FILE_TYPE_SET.IMAGE:\n              state[node.id] = {\n                fileType,\n                param: {},\n              }\n              break\n            case FILE_TYPE_SET.HDF5:\n              state[node.id] = {\n                fileType,\n                param: {},\n              }\n              break\n          }\n        }\n      })\n      .addCase(deleteFlowElements, (state, action) => {\n        action.payload\n          .filter((node) => isNodeData(node))\n          .forEach((node) => {\n            if (node.data?.type === NODE_TYPE_SET.INPUT) {\n              delete state[node.id]\n            }\n          })\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (Object.keys(state).includes(action.payload)) {\n          delete state[action.payload]\n        }\n      })\n      .addCase(importExperimentByUid.fulfilled, (_, action) => {\n        const newState: InputNode = {}\n        action.payload.nodeList.filter(isInputNodePostData).forEach((node) => {\n          if (node.data != null) {\n            if (node.data.fileType === FILE_TYPE_SET.CSV) {\n              newState[node.id] = {\n                fileType: FILE_TYPE_SET.CSV,\n                selectedFilePath: node.data.path as string,\n                param: node.data.param as CsvInputParamType,\n              }\n            } else if (node.data.fileType === FILE_TYPE_SET.HDF5) {\n              newState[node.id] = {\n                fileType: FILE_TYPE_SET.HDF5,\n                hdf5Path: node.data.hdf5Path,\n                selectedFilePath: node.data.path as string,\n                param: {},\n              }\n            } else {\n              newState[node.id] = {\n                fileType: node.data.fileType,\n                selectedFilePath: node.data.path as string[],\n                param: {},\n              }\n            }\n          }\n        })\n        return newState\n      }),\n})\n\nexport const { setCsvInputNodeParam, setInputNodeHDF5Path } =\n  inputNodeSlice.actions\n\nexport default inputNodeSlice.reducer\n","import { RootState } from 'store/store'\n\nconst selectDisplayData = (state: RootState) => state.displayData\n\nexport const selectTimeSeriesData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).timeSeries[filePath].data\n\nexport const selectTimeSeriesXrange =\n  (filePath: string) => (state: RootState) =>\n    selectDisplayData(state).timeSeries[filePath].xrange\n\nexport const selectTimeSeriesStd = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).timeSeries[filePath].std\n\nexport const selectTimeSeriesDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).timeSeries).includes(filePath)\n\nexport const selectTimeSeriesDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).timeSeries[filePath].pending\n\nexport const selectTimeSeriesDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).timeSeries[filePath].fulfilled\n\nexport const selectTimeSeriesDataError =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).timeSeries[filePath].error\n      : null\n\nexport const selectHeatMapData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).heatMap[filePath].data\n\nexport const selectHeatMapDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).heatMap).includes(filePath)\n\nexport const selectHeatMapDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).heatMap[filePath].pending\n\nexport const selectHeatMapDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).heatMap[filePath].fulfilled\n\nexport const selectHeatMapDataError =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).heatMap[filePath].error\n      : null\n\nexport const selectImageData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).image[filePath]\n\nexport const selectImageDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).image).includes(filePath)\n\nexport const selectImageDataError = (filePath: string) => (state: RootState) =>\n  selectImageDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).image[filePath].error\n    : null\n\nexport const selectImageDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectImageDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).image[filePath].pending\n\nexport const selectImageDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectImageDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).image[filePath].fulfilled\n\nexport const selectImageDataStartIndex =\n  (filePath: string) => (state: RootState) => {\n    if (!selectImageDataIsPending(filePath)(state)) {\n      return 0\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectImageDataEndIndex =\n  (filePath: string) => (state: RootState) => {\n    if (!selectImageDataIsPending(filePath)(state)) {\n      return selectImageData(filePath)(state).data.length - 1\n    } else {\n      return 0\n    }\n  }\n\nexport const selectActiveImageData =\n  (filePath: string, activeIndex: number) => (state: RootState) => {\n    return selectImageData(filePath)(state).data[activeIndex]\n  }\n\nexport const selectCsvData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).csv[filePath].data\n\nexport const selectCsvDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).csv).includes(filePath)\n\nexport const selectCsvDataError = (filePath: string) => (state: RootState) =>\n  selectCsvDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).csv[filePath].error\n    : null\n\nexport const selectCsvDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectCsvDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).csv[filePath].pending\n\nexport const selectCsvDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectCsvDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).csv[filePath].fulfilled\n\nexport const selectRoiData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).roi[filePath]?.data[0] ?? []\n\nexport const selectRoiDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).roi).includes(filePath)\n\nexport const selectRoiDataError = (filePath: string) => (state: RootState) =>\n  selectRoiDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).roi[filePath].error\n    : null\n\nexport const selectRoiDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectRoiDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).roi[filePath].pending\n\nexport const selectRoiDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectRoiDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).roi[filePath].fulfilled\n\nexport const selectScatterData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).scatter[filePath]?.data ?? []\n\nexport const selectScatterDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).scatter).includes(filePath)\n\nexport const selectScatterDataError =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).scatter[filePath].error\n      : null\n\nexport const selectScatterDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).scatter[filePath].pending\n\nexport const selectScatterDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).scatter[filePath].fulfilled\n\nexport const selectBarData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).bar[filePath]?.data ?? []\n\nexport const selectBarDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).bar).includes(filePath)\n\nexport const selectBarDataError = (filePath: string) => (state: RootState) =>\n  selectBarDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).bar[filePath].error\n    : null\n\nexport const selectBarDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectBarDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).bar[filePath].pending\n\nexport const selectBarDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectBarDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).bar[filePath].fulfilled\n\nexport const selectHTMLData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).html[filePath]?.data ?? ''\n\nexport const selectHTMLDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).html).includes(filePath)\n\nexport const selectHTMLDataError = (filePath: string) => (state: RootState) =>\n  selectHTMLDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).html[filePath].error\n    : null\n\nexport const selectHTMLDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectHTMLDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).html[filePath].pending\n\nexport const selectHTMLDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectHTMLDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).html[filePath].fulfilled\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport {\n  ImageData,\n  TimeSeriesData,\n  DISPLAY_DATA_SLICE_NAME,\n  HeatMapData,\n  CsvData,\n  RoiData,\n  ScatterData,\n  BarData,\n  HTMLData,\n} from './DisplayDataType'\n\nexport const getTimeSeriesDataById = createAsyncThunk<\n  { data: TimeSeriesData; xrange: number[]; std: TimeSeriesData },\n  { path: string; index: number }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getTimeSeriesDataById`,\n  async ({ path, index }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/timedata/${path}`, {\n        params: {\n          index: index,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getTimeSeriesAllData = createAsyncThunk<\n  { data: TimeSeriesData; xrange: number[]; std: TimeSeriesData },\n  { path: string }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getTimeSeriesAllData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/outputs/alltimedata/${path}`,\n      )\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getHeatMapData = createAsyncThunk<\n  { data: HeatMapData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getHeatMapData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/data/${path}`)\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getImageData = createAsyncThunk<\n  { data: ImageData },\n  { path: string; startIndex?: number; endIndex?: number }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getImageData`,\n  async ({ path, startIndex, endIndex }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/image/${path}`, {\n        params: {\n          start_index: startIndex,\n          end_index: endIndex,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getCsvData = createAsyncThunk<\n  {\n    data: CsvData\n  },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getCsvData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/csv/${path}`)\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getRoiData = createAsyncThunk<{ data: RoiData }, { path: string }>(\n  `${DISPLAY_DATA_SLICE_NAME}/getRoiData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/image/${path}`, {})\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getScatterData = createAsyncThunk<\n  { data: ScatterData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getScatterData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/data/${path}`, {})\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getBarData = createAsyncThunk<{ data: BarData }, { path: string }>(\n  `${DISPLAY_DATA_SLICE_NAME}/getBarData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/data/${path}`, {})\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getHTMLData = createAsyncThunk<\n  { data: HTMLData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getHTMLData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/html/${path}`, {})\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n","import React from 'react'\nimport { DATA_TYPE } from 'store/slice/DisplayData/DisplayDataType'\n\nexport const DisplayDataContext = React.createContext<{\n  nodeId: string | null\n  filePath: string\n  dataType: DATA_TYPE\n  itemId: number\n}>({ nodeId: '', filePath: '', dataType: 'csv', itemId: NaN })\n","import { DATA_TYPE, DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\n\nexport type VisualaizeItem = {\n  selectedItemId: number | null\n  items: {\n    [itemId: number]: VisualaizeItemType\n  }\n}\n\nexport type VisualaizeItemType = MultiPlotItem | DisplayDataItem\n\nexport interface ItemBaseType<T extends VISUALIZE_ITEM_TYPE> {\n  itemType: T\n}\n\nexport type ColorType = {\n  rgb: string\n  offset: string\n}\n\nexport const VISUALIZE_ITEM_TYPE_SET = {\n  MULTI_PLOT: 'MultiPlot',\n  DISPLAY_DATA: 'displayData',\n} as const\n\nexport type VISUALIZE_ITEM_TYPE =\n  typeof VISUALIZE_ITEM_TYPE_SET[keyof typeof VISUALIZE_ITEM_TYPE_SET]\n\nexport type DisplayDataItem =\n  | ImageItem\n  | TimeSeriesItem\n  | HeatMapItem\n  | CsvItem\n  | RoiItem\n  | ScatterItem\n  | BarItem\n  | HDF5Item\n  | HTMLItem\n\nexport interface DisplayDataItemBaseType extends ItemBaseType<'displayData'> {\n  filePath: string | null\n  nodeId: string | null\n  dataType: DATA_TYPE | null\n}\n\nexport interface MultiPlotItem extends ItemBaseType<'MultiPlot'> {\n  imageItem: ImageItem\n  timeSeriesItem: TimeSeriesItem\n  heatMapItem: HeatMapItem\n  otherItem?: DisplayDataItem\n}\n\nexport interface ImageItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.IMAGE\n  activeIndex: number\n  startIndex: number\n  endIndex: number\n  showticklabels: boolean\n  zsmooth: string | boolean\n  showline: boolean\n  showgrid: boolean\n  showscale: boolean\n  colors: ColorType[]\n  roiItem: RoiItem | null\n  roiAlpha: number\n  duration: number\n}\n\nexport interface TimeSeriesItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.TIME_SERIES\n  offset: boolean\n  span: number\n  showgrid: boolean\n  showline: boolean\n  showticklabels: boolean\n  zeroline: boolean\n  xrange: {\n    left: number | undefined\n    right: number | undefined\n  }\n  maxIndex: number\n  displayNumbers: number[]\n  checkedList: boolean[]\n}\n\nexport interface HeatMapItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HEAT_MAP\n  showscale: boolean\n  colors: ColorType[]\n}\nexport interface CsvItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.CSV\n  setColumn: number | null\n  setIndex: boolean\n  transpose: boolean\n}\nexport interface RoiItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.ROI\n  // colors: ColorType[]\n}\n\nexport interface ScatterItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.SCATTER\n  xIndex: number\n  yIndex: number\n}\n\nexport interface BarItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.BAR\n}\n\nexport interface HDF5Item extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HDF5\n}\n\nexport interface HTMLItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HTML\n}\n","import { DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\nimport {\n  VisualaizeItemType,\n  MultiPlotItem,\n  DisplayDataItem,\n  VISUALIZE_ITEM_TYPE_SET,\n  ImageItem,\n  TimeSeriesItem,\n  HeatMapItem,\n  RoiItem,\n  ScatterItem,\n  CsvItem,\n} from './VisualizeItemType'\n\nexport function isMultiPlotItem(\n  item: VisualaizeItemType,\n): item is MultiPlotItem {\n  return item.itemType === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT\n}\n\nexport function isDisplayDataItem(\n  item: VisualaizeItemType,\n): item is DisplayDataItem {\n  return item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA\n}\n\nexport function isImageItem(item: VisualaizeItemType): item is ImageItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.IMAGE\n  )\n}\n\nexport function isTimeSeriesItem(\n  item: VisualaizeItemType,\n): item is TimeSeriesItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.TIME_SERIES\n  )\n}\n\nexport function isCsvItem(item: VisualaizeItemType): item is CsvItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.CSV\n  )\n}\n\nexport function isHeatMapItem(item: VisualaizeItemType): item is HeatMapItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.HEAT_MAP\n  )\n}\n\nexport function isRoiItem(item: VisualaizeItemType): item is RoiItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.ROI\n  )\n}\n\nexport function isScatterItem(item: VisualaizeItemType): item is ScatterItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.SCATTER\n  )\n}\n","import { RootState } from 'store/store'\nimport { selectRoiData } from '../DisplayData/DisplayDataSelectors'\nimport { VISUALIZE_ITEM_TYPE_SET } from './VisualizeItemType'\nimport {\n  isDisplayDataItem,\n  isImageItem,\n  isTimeSeriesItem,\n  isHeatMapItem,\n  isMultiPlotItem,\n  isCsvItem,\n  isScatterItem,\n} from './VisualizeItemUtils'\n\nexport const selectSelectedVisualizeItemId = (state: RootState) =>\n  state.visualaizeItem.selectedItemId\n\nconst selectVisualizeItems = (state: RootState) => state.visualaizeItem.items\n\nexport const selectVisualizeItemIdList = (state: RootState) =>\n  Object.keys(selectVisualizeItems(state)).map((key) => Number(key))\n\nexport const selectVisualizeItemType = (itemId: number) => (state: RootState) =>\n  selectVisualizeItems(state)[itemId].itemType\n\nexport const selectVisualizeItemTypeIsMultiPlot =\n  (itemId: number) => (state: RootState) =>\n    selectVisualizeItemType(itemId)(state) ===\n    VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT\n\nexport const selectMultiPlotImageItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.imageItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotImageItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotImageItem(itemId)(state).nodeId\n\nexport const selectMultiPlotImageItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotImageItem(itemId)(state).filePath\n\nexport const selectMultiPlotTimeSeriesItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotRoiItem = (itemId: number) => (state: RootState) =>\n  selectMultiPlotImageItem(itemId)(state).roiItem\n\nexport const selectMultiPlotRoiItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotRoiItem(itemId)(state)?.nodeId ?? null\n\nexport const selectMultiPlotRoiItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotRoiItem(itemId)(state)?.filePath ?? null\n\nexport const selectMultiPlotTimeSeriesItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotTimeSeriesItem(itemId)(state).nodeId\n\nexport const selectMultiPlotTimeSeriesItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotTimeSeriesItem(itemId)(state).filePath\n\nexport const selectMultiPlotHeatMapItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.heatMapItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotHeatMapItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotHeatMapItem(itemId)(state).nodeId\n\nexport const selectMultiPlotHeatMapItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotHeatMapItem(itemId)(state).filePath\n\nexport const selectVisualizeDataType =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.dataType\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectVisualizeDataNodeId =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.nodeId\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectVisualizeDataFilePath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.filePath\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemFilePath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.filePath\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.filePath\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemFilePath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.filePath\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.filePath\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectRoiItemNodeId = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.roiItem?.nodeId ?? null\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.roiItem?.nodeId ?? null\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectRoiItemFilePath = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.roiItem?.filePath ?? null\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.roiItem?.filePath ?? null\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectImageItemShowticklabels =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showticklabels\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showticklabels\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemZsmooth =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.zsmooth\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.zsmooth\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemStartIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.startIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.startIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemEndIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.endIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.endIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showline\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowGrid =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showgrid\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showgrid\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowScale =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showscale\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showscale\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemColors = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.colors\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.colors\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectImageItemActiveIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.activeIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.activeIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemRoiAlpha =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.roiAlpha\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.roiAlpha\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemDuration =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.duration\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.duration\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemOffset =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.offset\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.offset\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemSpan =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.span\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.span\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowGrid =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showgrid\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showgrid\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showline\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowTickLabels =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showticklabels\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showticklabels\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemZeroLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.zeroline\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.zeroline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemXrange =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.xrange\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.xrange\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemDisplayNumbers =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.displayNumbers\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.displayNumbers\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemCheckedList =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.checkedList\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.checkedList\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectRoiItemIndex =\n  (itemId: number, roiFilePath: string | null) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      const maxIdx = item.maxIndex\n      if (maxIdx !== 0) {\n        return maxIdx\n      }\n    } else if (isMultiPlotItem(item)) {\n      const maxIdx = item.timeSeriesItem.maxIndex\n      if (maxIdx !== 0) {\n        return maxIdx\n      }\n    }\n\n    if (roiFilePath !== null) {\n      return selectRoiItemMaxNumber(roiFilePath)(state)\n    } else {\n      return 0\n    }\n  }\n\nexport const selectRoiItemMaxNumber =\n  (roiFilePath: string) => (state: RootState) => {\n    const roiData = selectRoiData(roiFilePath)(state)\n    if (roiData.length !== 0) {\n      return Math.max(...roiData.map((arr) => Math.max(...arr)))\n    } else {\n      return 0\n    }\n  }\n\nexport const selectHeatMapItemShowScale =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isHeatMapItem(item)) {\n      return item.showscale\n    } else if (isMultiPlotItem(item)) {\n      return item.heatMapItem.showscale\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectHeatMapItemColors =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isHeatMapItem(item)) {\n      return item.colors\n    } else if (isMultiPlotItem(item)) {\n      return item.heatMapItem.colors\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemTranspose =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isCsvItem(item)) {\n      return item.transpose\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemSetColumn =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isCsvItem(item)) {\n      return item.setColumn\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemSetIndex = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isCsvItem(item)) {\n    return item.setIndex\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectScatterItemXIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isScatterItem(item)) {\n      return item.xIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectScatterItemYIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isScatterItem(item)) {\n      return item.yIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotTimeSeriesItemFilepath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      const targetItem = selectMultiPlotTimeSeriesItem(itemId)(state)\n      const timeSeriesFilePath = targetItem.filePath\n      return timeSeriesFilePath\n    }\n    return null\n  }\n\nexport const selectMultiPlotTimeSeriesItemDisplayNumbers =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      const targetItem = selectMultiPlotTimeSeriesItem(itemId)(state)\n      const displayNumbers = targetItem.displayNumbers\n      return displayNumbers\n    }\n    return null\n  }\n","import React from 'react'\nimport { LinearProgress, Typography } from '@mui/material'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectCsvData,\n  selectCsvDataError,\n  selectCsvDataIsFulfilled,\n  selectCsvDataIsInitialized,\n  selectCsvDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getCsvData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { CsvData } from 'store/slice/DisplayData/DisplayDataType'\nimport { DataGrid, GridColDef } from '@mui/x-data-grid'\nimport {\n  selectCsvItemSetColumn,\n  selectCsvItemSetIndex,\n  selectCsvItemTranspose,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nexport const CsvPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const isInitialized = useSelector(selectCsvDataIsInitialized(path))\n  const isPending = useSelector(selectCsvDataIsPending(path))\n  const isFulfilled = useSelector(selectCsvDataIsFulfilled(path))\n  const error = useSelector(selectCsvDataError(path))\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getCsvData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <CsvPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst CsvPlotImple = React.memo(() => {\n  const { itemId, filePath: path } = React.useContext(DisplayDataContext)\n  const transpose = useSelector(selectCsvItemTranspose(itemId))\n  const setColumn = useSelector(selectCsvItemSetColumn(itemId))\n  const setIndex = useSelector(selectCsvItemSetIndex(itemId))\n  return (\n    <PresentationalCsvPlot\n      path={path}\n      transpose={transpose}\n      setColumn={setColumn}\n      setIndex={setIndex}\n    />\n  )\n})\n\n/**\n * CsvFileNodeの設定時に表示するプレビューでも使用することを想定\n *\n * DisplayDataContextに依存しない\n */\nexport const PresentationalCsvPlot = React.memo<{\n  path: string\n  transpose: boolean\n  setColumn: number | null\n  setIndex: boolean\n}>(({ path, transpose, setIndex, setColumn }) => {\n  const data = useSelector(\n    selectCsvData(path),\n    (a: CsvData | undefined, b: CsvData | undefined) => {\n      if (a != null && b != null) {\n        return twoDimarrayEqualityFn(a, b)\n      } else {\n        return a === undefined && b === undefined\n      }\n    },\n  )\n\n  const csvData = React.useMemo(() => {\n    if (transpose) {\n      return data[0].map((col, i) => data.map((row) => row[i]))\n    }\n    return data\n  }, [data, transpose])\n\n  const columns: GridColDef[] = React.useMemo(() => {\n    const columnData = () => {\n      if (setColumn === null) {\n        return csvData[0]\n      } else {\n        if (setColumn >= csvData.length) {\n          return csvData[csvData.length - 1]\n        } else {\n          return csvData[setColumn]\n        }\n      }\n    }\n\n    if (setIndex) {\n      return [\n        { field: 'col0', headerName: 'index', width: 150 },\n        ...columnData().map((value, idx) => {\n          return {\n            field: `col${idx + 1}`,\n            headerName: `${setColumn === null ? idx : value}`,\n            width: 150,\n          }\n        }),\n      ]\n    } else {\n      return columnData().map((value, idx) => {\n        return {\n          field: `col${idx + 1}`,\n          headerName: `${setColumn === null ? idx : value}`,\n          width: 150,\n        }\n      })\n    }\n  }, [csvData, setColumn, setIndex])\n  const rows = csvData\n    .map((row, row_id) => {\n      let rowObj = Object.fromEntries(\n        [row_id, ...row].map((value, index) => {\n          return [`col${index}`, value]\n        }),\n      )\n      rowObj['id'] = row_id\n      return rowObj\n    })\n    .filter(\n      (value, idx) =>\n        setColumn === null || (setColumn !== null && idx > setColumn),\n    )\n\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  )\n})\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport { alpha, useTheme } from '@mui/material/styles'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  IconButton,\n  DialogTitle,\n  DialogActions,\n  Switch,\n  FormControlLabel,\n  TextField,\n  Box,\n  LinearProgress,\n  Typography,\n} from '@mui/material'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  selectCsvInputNodeParamSetColumn,\n  selectCsvInputNodeParamSetIndex,\n  selectCsvInputNodeParamTranspose,\n  selectCsvInputNodeSelectedFilePath,\n  selectInputNodeDefined,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport { setCsvInputNodeParam } from 'store/slice/InputNode/InputNodeSlice'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\nimport { toHandleId } from './FlowChartUtils'\nimport { FileSelect } from './FileSelect'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectCsvDataError,\n  selectCsvDataIsFulfilled,\n  selectCsvDataIsInitialized,\n  selectCsvDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getCsvData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { PresentationalCsvPlot } from 'components/Visualize/Plot/CsvPlot'\n\nconst sourceHandleStyle: CSSProperties = {\n  width: 8,\n  height: 15,\n  top: 15,\n  border: '1px solid',\n  borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const CsvFileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <CsvFileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst CsvFileNodeImple = React.memo<NodeProps>(({ id: nodeId, selected }) => {\n  const dispatch = useDispatch()\n  const filePath = useSelector(selectCsvInputNodeSelectedFilePath(nodeId))\n  const onChangeFilePath = (path: string) => {\n    dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n  }\n  const theme = useTheme()\n\n  const onClickDeleteIcon = () => {\n    dispatch(deleteFlowElementsById(nodeId))\n  }\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        width: '230px',\n        background: selected\n          ? alpha(theme.palette.primary.light, 0.1)\n          : undefined,\n      }}\n    >\n      <IconButton\n        aria-label=\"delete\"\n        style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n        onClick={onClickDeleteIcon}\n        size=\"large\"\n      >\n        <CloseOutlinedIcon />\n      </IconButton>\n      <FileSelect\n        onChangeFilePath={(path) => {\n          if (!Array.isArray(path)) {\n            onChangeFilePath(path)\n          }\n        }}\n        fileType={FILE_TYPE_SET.CSV}\n        filePath={filePath ?? ''}\n      />\n      {!!filePath && <ParamSettingDialog nodeId={nodeId} filePath={filePath} />}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={toHandleId(nodeId, 'csv', 'CsvData')}\n        style={sourceHandleStyle}\n      />\n    </div>\n  )\n})\n\nconst ParamSettingDialog = React.memo<{ nodeId: string; filePath: string }>(\n  ({ nodeId, filePath }) => {\n    const [open, setOpen] = React.useState(false)\n    // OK時のみStoreに反映させるため一時的な値をuseStateで保持しておく。\n    // useStateの初期値はselectorで取得。\n    const [setColumn, setSetColumn] = React.useState(\n      useSelector(selectCsvInputNodeParamSetColumn(nodeId)),\n    )\n    const [setIndex, setSetIndex] = React.useState(\n      useSelector(selectCsvInputNodeParamSetIndex(nodeId)),\n    )\n    const [transpose, setTranspose] = React.useState(\n      useSelector(selectCsvInputNodeParamTranspose(nodeId)),\n    )\n    const dispatch = useDispatch()\n    const onClickCancel = () => {\n      setOpen(false)\n    }\n    const onClickOk = () => {\n      setOpen(false)\n      dispatch(\n        setCsvInputNodeParam({\n          nodeId,\n          param: { setColumn, setIndex, transpose },\n        }),\n      )\n    }\n\n    return (\n      <>\n        <Button onClick={() => setOpen(true)}>Settings</Button>\n        <Dialog open={open}>\n          <DialogTitle>Csv Setting</DialogTitle>\n          <DialogContent dividers>\n            <Box sx={{ display: 'flex', p: 1, m: 1, alignItems: 'flex-start' }}>\n              <FormControlLabel\n                sx={{ margin: (theme) => theme.spacing(0, 1, 0, 1) }}\n                control={\n                  <Switch\n                    checked={transpose}\n                    onChange={(event) => setTranspose(event.target.checked)}\n                  />\n                }\n                label=\"Transpose\"\n              />\n              <TextField\n                label=\"Column\"\n                sx={{\n                  width: 100,\n                  margin: (theme) => theme.spacing(0, 1, 0, 1),\n                }}\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={(event) => {\n                  const value = Number(event.target.value)\n                  if (value >= 0) {\n                    setSetColumn(Number(event.target.value))\n                  }\n                }}\n                value={setColumn}\n              />\n              <FormControlLabel\n                sx={{ margin: (theme) => theme.spacing(0, 1, 0, 1) }}\n                control={\n                  <Switch\n                    checked={setIndex}\n                    onChange={(event) => setSetIndex(event.target.checked)}\n                  />\n                }\n                label=\"Set Index\"\n              />\n            </Box>\n            <Typography variant=\"h6\">Preview</Typography>\n            <CsvPreview\n              filePath={filePath}\n              transpose={transpose}\n              setColumn={setColumn}\n              setIndex={setIndex}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n              cancel\n            </Button>\n            <Button onClick={onClickOk} color=\"primary\" variant=\"outlined\">\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </>\n    )\n  },\n)\n\nconst CsvPreview = React.memo<{\n  filePath: string\n  transpose: boolean\n  setColumn: number | null\n  setIndex: boolean\n}>(({ filePath: path, ...otherProps }) => {\n  const isInitialized = useSelector(selectCsvDataIsInitialized(path))\n  const isPending = useSelector(selectCsvDataIsPending(path))\n  const isFulfilled = useSelector(selectCsvDataIsFulfilled(path))\n  const error = useSelector(selectCsvDataError(path))\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getCsvData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <PresentationalCsvPlot path={path} {...otherProps} />\n  } else {\n    return null\n  }\n})\n","import { RootState } from '../../store'\n\nexport const selectHDF5 = (state: RootState) => {\n  if (state.hdf5 != null) {\n    return state.hdf5\n  } else {\n    return undefined\n  }\n}\n\nexport const selectHDF5Nodes = () => (state: RootState) =>\n  selectHDF5(state)?.tree\n\nexport const selectHDF5IsLoading = () => (state: RootState) =>\n  selectHDF5(state)?.isLoading ?? false\n","export const HDF5_SLICE_NAME = 'hdf5'\n\nexport type HDF5TreeDTO = HDF5DirDTO | HDF5FileDTO\n\nexport interface HDF5DirDTO {\n  isDir: true\n  name: string\n  nodes: HDF5TreeDTO[]\n  path: string\n}\n\nexport interface HDF5FileDTO {\n  isDir: false\n  name: string\n  shape: [number]\n  path: string\n  nbytes: string\n}\n\nexport interface HDF5Tree {\n  isLoading: boolean\n  tree: HDF5TreeDTO[]\n}\n\nexport const HDF5_TYPE_SET = {\n  ALL: 'all',\n} as const\n\nexport type HDF5_TYPE = typeof HDF5_TYPE_SET[keyof typeof HDF5_TYPE_SET]\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\n\nimport { HDF5_SLICE_NAME, HDF5TreeDTO } from './HDF5Type'\n\nexport const getHDF5Tree = createAsyncThunk<HDF5TreeDTO[], { path: string }>(\n  `${HDF5_SLICE_NAME}/getHDF5Tree`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/hdf5/${path}`)\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\n\nimport { alpha, useTheme } from '@mui/material/styles'\nimport Dialog from '@mui/material/Dialog'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem from '@mui/lab/TreeItem'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport IconButton from '@mui/material/IconButton'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport Button from '@mui/material/Button'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  selectHDF5InputNodeSelectedFilePath,\n  selectInputNodeDefined,\n  selectInputNodeHDF5Path,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport { setInputNodeHDF5Path } from 'store/slice/InputNode/InputNodeSlice'\nimport { setInputNodeFilePath } from 'store/slice/InputNode/InputNodeActions'\nimport { toHandleId } from './FlowChartUtils'\nimport { FileSelect } from './FileSelect'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectHDF5IsLoading,\n  selectHDF5Nodes,\n} from 'store/slice/HDF5/HDF5Selectors'\nimport { getHDF5Tree } from 'store/slice/HDF5/HDF5Action'\nimport { HDF5TreeDTO } from 'store/slice/HDF5/HDF5Type'\nimport { Typography } from '@mui/material'\n\nconst sourceHandleStyle: CSSProperties = {\n  width: 8,\n  height: 15,\n  top: 15,\n  border: '1px solid',\n  borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const HDF5FileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <HDF5FileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst HDF5FileNodeImple = React.memo<NodeProps>(({ id: nodeId, selected }) => {\n  const dispatch = useDispatch()\n  const filePath = useSelector(selectHDF5InputNodeSelectedFilePath(nodeId))\n  const onChangeFilePath = (path: string) => {\n    dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n  }\n  const theme = useTheme()\n\n  const onClickDeleteIcon = () => {\n    dispatch(deleteFlowElementsById(nodeId))\n  }\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        width: '230px',\n        background: selected\n          ? alpha(theme.palette.primary.light, 0.1)\n          : undefined,\n      }}\n    >\n      <IconButton\n        aria-label=\"delete\"\n        style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n        onClick={onClickDeleteIcon}\n      >\n        <CloseOutlinedIcon />\n      </IconButton>\n      <FileSelect\n        onChangeFilePath={(path) => {\n          if (!Array.isArray(path)) {\n            onChangeFilePath(path)\n          }\n        }}\n        fileType={FILE_TYPE_SET.HDF5}\n        filePath={filePath ?? ''}\n      />\n      {filePath !== undefined && <ItemSelect nodeId={nodeId} />}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={toHandleId(nodeId, 'hdf5', 'HDF5Data')}\n        style={sourceHandleStyle}\n      />\n    </div>\n  )\n})\n\nconst ItemSelect = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const [open, setOpen] = React.useState(false)\n\n  const structureFileName = useSelector(selectInputNodeHDF5Path(nodeId))\n\n  return (\n    <>\n      <Button variant=\"outlined\" size=\"small\" onClick={() => setOpen(true)}>\n        {'Structure'}\n      </Button>\n      <Typography className=\"selectFilePath\" variant=\"caption\">\n        {!!structureFileName ? structureFileName : 'No structure is selected.'}\n      </Typography>\n\n      <Dialog open={open} onClose={() => setOpen(false)} fullWidth>\n        <DialogTitle>{'Select File'}</DialogTitle>\n        <Structure nodeId={nodeId} />\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} variant=\"outlined\">\n            cancel\n          </Button>\n          <Button\n            onClick={() => setOpen(false)}\n            color=\"primary\"\n            variant=\"outlined\"\n            autoFocus\n          >\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n})\n\nconst Structure = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const theme = useTheme()\n  return (\n    <DialogContent dividers>\n      <div\n        style={{\n          height: 300,\n          overflow: 'auto',\n          marginBottom: theme.spacing(1),\n          border: '1px solid',\n          padding: theme.spacing(1),\n          borderColor: theme.palette.divider,\n        }}\n      >\n        <FileTreeView nodeId={nodeId} />\n      </div>\n    </DialogContent>\n  )\n})\n\nconst FileTreeView = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const [tree, isLoading] = useHDF5Tree(nodeId)\n  return (\n    <div>\n      {isLoading && <LinearProgress />}\n      <TreeView>\n        {tree?.map((node) => (\n          <TreeNode node={node} nodeId={nodeId} />\n        ))}\n      </TreeView>\n    </div>\n  )\n})\n\nconst TreeNode = React.memo<{\n  node: HDF5TreeDTO\n  nodeId: string\n}>(({ node, nodeId }) => {\n  const dispatch = useDispatch()\n\n  const onClickFile = (path: string) => {\n    dispatch(setInputNodeHDF5Path({ nodeId, path }))\n  }\n\n  if (node.isDir) {\n    // Directory\n    return (\n      <TreeItem\n        icon={<FolderIcon htmlColor=\"skyblue\" />}\n        nodeId={node.path}\n        label={node.name}\n      >\n        {node.nodes.map((childNode, i) => (\n          <TreeNode node={childNode} key={i} nodeId={nodeId} />\n        ))}\n      </TreeItem>\n    )\n  } else {\n    // File\n    return (\n      <TreeItem\n        icon={<InsertDriveFileOutlinedIcon fontSize=\"small\" />}\n        nodeId={node.path}\n        label={node.name + `   (shape=${node.shape}, nbytes=${node.nbytes})`}\n        onClick={() => onClickFile(node.path)}\n      />\n    )\n  }\n})\n\nfunction useHDF5Tree(nodeId: string): [HDF5TreeDTO[] | undefined, boolean] {\n  const dispatch = useDispatch()\n  const tree = useSelector(selectHDF5Nodes())\n  const isLoading = useSelector(selectHDF5IsLoading())\n  const filePath = useSelector(selectHDF5InputNodeSelectedFilePath(nodeId))\n  React.useEffect(() => {\n    if (!isLoading && filePath) {\n      dispatch(getHDF5Tree({ path: filePath }))\n    }\n  }, [isLoading, filePath, dispatch])\n  return [tree, isLoading]\n}\n","import { useDispatch } from 'react-redux'\nimport {\n  EdgeProps,\n  getBezierPath,\n  getMarkerEnd,\n  getEdgeCenter,\n} from 'react-flow-renderer'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\n\nconst foreignObjectSize = 40\n\nexport const CustomEdge: React.FC<EdgeProps> = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  arrowHeadType,\n  markerEndId,\n}) => {\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  })\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId)\n  const [edgeCenterX, edgeCenterY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  })\n\n  const dispatch = useDispatch()\n\n  const onEdgeClick = () => {\n    dispatch(deleteFlowElementsById(id))\n  }\n\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n      <foreignObject\n        width={foreignObjectSize}\n        height={foreignObjectSize}\n        x={edgeCenterX - foreignObjectSize / 2}\n        y={edgeCenterY - foreignObjectSize / 2}\n        className=\"edgebutton-foreignobject\"\n      >\n        <CloseOutlinedIcon onClick={onEdgeClick} />\n      </foreignObject>\n    </>\n  )\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { NWB_SLICE_NAME } from './NWBType'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\n\nexport const getNWBParams = createAsyncThunk<ParamDTO, void>(\n  `${NWB_SLICE_NAME}/getNWBParams`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/nwb`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const NWB_SLICE_NAME = 'NWB'\n\nexport type NWBType = {\n  params: ParamMap\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { getNWBParams } from './NWBAction'\nimport { NWBType, NWB_SLICE_NAME } from './NWBType'\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\n\nconst initialState: NWBType = {\n  params: {},\n}\n\nexport const nwbSlice = createSlice({\n  name: NWB_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { path, newValue } = action.payload\n      const targetNode = getChildParam(path, state.params)\n      if (targetNode != null) {\n        targetNode.value = newValue\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getNWBParams.fulfilled, (state, action) => {\n      state.params = convertToParamMap(action.payload)\n    })\n  },\n})\n\nexport const { updateParam } = nwbSlice.actions\n\nexport default nwbSlice.reducer\n","import MuiAccordion, { AccordionProps } from '@mui/material/Accordion'\nimport { styled } from '@mui/material/styles'\n\nexport const Accordion = styled((props: AccordionProps) => (\n  <MuiAccordion disableGutters elevation={0} square {...props} />\n))(({ theme }) => ({\n  border: '1px solid',\n  borderColor: theme.palette.divider,\n  boxShadow: 'none',\n  '&:not(:last-child)': {\n    borderBottom: 0,\n  },\n  '&:before': {\n    display: 'none',\n  },\n}))\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AnyAction } from '@reduxjs/toolkit'\nimport Switch from '@mui/material/Switch'\nimport TextField from '@mui/material/TextField'\nimport Box from '@mui/material/Box'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport AccordionDetails from '@mui/material/AccordionDetails'\nimport AccordionSummary from '@mui/material/AccordionSummary'\nimport Typography from '@mui/material/Typography'\n\nimport { isParamChild } from 'store/utils/param/ParamUtils'\nimport { ParamType } from 'store/utils/param/ParamType'\nimport { RootState } from 'store/store'\nimport { Accordion } from 'components/Accordion'\n\ntype ParamSelectorType = (paramKey: string) => (state: RootState) => ParamType\ntype ParamValueSelectorType = (path: string) => (state: RootState) => unknown\ntype ParamUpdateActionCreatorType = (\n  path: string,\n  newValue: unknown,\n) => AnyAction\n\nexport type CreateParamFormItemComponentProps = {\n  paramSelector: ParamSelectorType\n  paramValueSelector: ParamValueSelectorType\n  paramUpdateActionCreator: ParamUpdateActionCreatorType\n}\n\nexport function createParamFormItemComponent({\n  paramSelector,\n  paramValueSelector,\n  paramUpdateActionCreator,\n}: CreateParamFormItemComponentProps): React.FC<{ paramKey: string }> {\n  function useParamValueUpdate(\n    path: string,\n  ): [unknown, (newValue: unknown) => AnyAction] {\n    const value = useSelector(paramValueSelector(path))\n    const updateParamAction = (newValue: unknown) => {\n      return paramUpdateActionCreator(path, newValue)\n    }\n    return [value, updateParamAction]\n  }\n  const ParamItemForString = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    const onChange = (\n      e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n      const newValue = e.target.value as string\n      dispatch(updateParamAction(newValue))\n    }\n    return <TextField value={value} onChange={onChange} multiline />\n  })\n  const ParamItemForNumber = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    if (typeof value === 'number') {\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue =\n          event.target.value === '' ? '' : Number(event.target.value)\n        if (typeof newValue === 'number') {\n          dispatch(updateParamAction(newValue))\n        }\n      }\n      return (\n        <TextField\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={value}\n          onChange={onChange}\n        />\n      )\n    } else {\n      return null\n    }\n  })\n  const ParamItemForBoolean = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    if (typeof value === 'boolean') {\n      const onChange = () => {\n        dispatch(updateParamAction(!value))\n      }\n      return <Switch checked={value} onChange={onChange} />\n    } else {\n      return null\n    }\n  })\n  const ParamItemForValueType = React.memo<ParamChildItemProps>(({ path }) => {\n    const [value] = useParamValueUpdate(path)\n    if (typeof value === 'number') {\n      return <ParamItemForNumber path={path} />\n    } else if (typeof value === 'string') {\n      return <ParamItemForString path={path} />\n    } else if (typeof value === 'boolean') {\n      return <ParamItemForBoolean path={path} />\n    } else {\n      return <ParamItemForString path={path} />\n    }\n  })\n  const ParamChildItem = React.memo<ParamChildItemProps & { name: string }>(\n    ({ path, name }) => {\n      return (\n        <Box\n          sx={{\n            display: 'flex',\n            marginTop: (theme) => theme.spacing(2),\n            marginBottom: (theme) => theme.spacing(2),\n            alignItems: 'center',\n            overflow: 'scroll',\n          }}\n        >\n          <Box\n            style={{ verticalAlign: 'middle' }}\n            sx={{\n              flexGrow: 1,\n              width: '50%',\n            }}\n          >\n            <Typography style={{ overflow: 'scroll' }}>{name}</Typography>\n          </Box>\n          <Box sx={{ width: '50%' }}>\n            <ParamItemForValueType path={path} />\n          </Box>\n        </Box>\n      )\n    },\n  )\n  const ParamItem = React.memo<ParamItemProps>(({ paramKey, param }) => {\n    if (isParamChild(param)) {\n      return <ParamChildItem path={param.path} name={paramKey} />\n    } else {\n      return (\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            {paramKey}\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              {Object.entries(param.children).map(([paramKey, param], i) => (\n                <ParamItem param={param} paramKey={paramKey} />\n              ))}\n            </div>\n          </AccordionDetails>\n        </Accordion>\n      )\n    }\n  })\n  return React.memo<{ paramKey: string }>(({ paramKey }) => {\n    const param = useSelector(paramSelector(paramKey)) // 一階層目\n    return <ParamItem paramKey={paramKey} param={param} />\n  })\n}\n\ntype ParamItemProps = {\n  paramKey: string\n  param: ParamType\n}\n\ntype ParamChildItemProps = {\n  path: string\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Button from '@mui/material/Button'\nimport TuneIcon from '@mui/icons-material/Tune'\nimport { updateParam } from 'store/slice/NWB/NWBSlice'\nimport { getNWBParams } from 'store/slice/NWB/NWBAction'\nimport { toggleNwb } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectNwbParam,\n  selectNwbParamsKeyList,\n  selectNwbParamsValue,\n} from 'store/slice/NWB/NWBSelectors'\nimport { createParamFormItemComponent } from 'components/ParamFormItemCreator'\n\nexport const NWBSettingButton = React.memo(() => {\n  const dispatch = useDispatch()\n  const handleClick = () => {\n    dispatch(toggleNwb())\n  }\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={handleClick}\n      sx={{\n        margin: (theme) => theme.spacing(1),\n      }}\n      endIcon={<TuneIcon />}\n    >\n      NWB setting\n    </Button>\n  )\n})\n\nexport const NWBSettingContents = React.memo(() => {\n  const dispatch = useDispatch()\n\n  const paramKeyList = useSelector(selectNwbParamsKeyList, arrayEqualityFn)\n  useEffect(() => {\n    if (paramKeyList.length === 0) {\n      dispatch(getNWBParams())\n    }\n  })\n\n  return (\n    <div className=\"nwbParam\" style={{ margin: 4 }}>\n      {paramKeyList.map((paramKey, i) => (\n        <ParamItem key={i} paramKey={paramKey} />\n      ))}\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const Component = createParamFormItemComponent({\n    paramSelector: selectNwbParam,\n    paramValueSelector: selectNwbParamsValue,\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const SNAKEMAKE_SLICE_NAME = 'Snakemake'\n\nexport type SnakemakeType = {\n  params: ParamMap\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { SNAKEMAKE_SLICE_NAME } from './SnakemakeType'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\n\nexport const getSnakemakeParams = createAsyncThunk<ParamDTO, void>(\n  `${SNAKEMAKE_SLICE_NAME}/getSnakemakeParams`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/snakemake`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\nimport { getSnakemakeParams } from './SnakemakeAction'\nimport { SnakemakeType, SNAKEMAKE_SLICE_NAME } from './SnakemakeType'\n\nconst initialState: SnakemakeType = {\n  params: {},\n}\n\nexport const SnakemakeSlice = createSlice({\n  name: SNAKEMAKE_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { path, newValue } = action.payload\n      const target = getChildParam(path, state.params)\n      if (target != null) {\n        target.value = newValue\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getSnakemakeParams.fulfilled, (state, action) => {\n      state.params = convertToParamMap(action.payload)\n    })\n  },\n})\n\nexport const { updateParam } = SnakemakeSlice.actions\n\nexport default SnakemakeSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from '@mui/material/Button'\nimport TuneIcon from '@mui/icons-material/Tune'\n\nimport { updateParam } from 'store/slice/Snakemake/SnakemakeSlice'\nimport { getSnakemakeParams } from 'store/slice/Snakemake/SnakemakeAction'\nimport { toggleSnakemake } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport {\n  selectSnakemakeParam,\n  selectSnakemakeParamsKeyList,\n  selectSnakemakeParamsValue,\n} from 'store/slice/Snakemake/SnakemakeSelectors'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { createParamFormItemComponent } from 'components/ParamFormItemCreator'\n\nexport const SnakemakeButton = React.memo(() => {\n  const dispatch = useDispatch()\n  const handleClick = () => {\n    dispatch(toggleSnakemake())\n  }\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={handleClick}\n      sx={{\n        margin: (theme) => theme.spacing(1),\n      }}\n      endIcon={<TuneIcon />}\n    >\n      Snakemake\n    </Button>\n  )\n})\n\nexport const SnakemakeContents = React.memo(() => {\n  const dispatch = useDispatch()\n  const paramKeyList = useSelector(\n    selectSnakemakeParamsKeyList,\n    arrayEqualityFn,\n  )\n  useEffect(() => {\n    if (paramKeyList.length === 0) {\n      dispatch(getSnakemakeParams())\n    }\n  })\n  return (\n    <div className=\"SnakemakeParam\" style={{ margin: 4 }}>\n      {paramKeyList.map((paramKey, i) => (\n        <ParamItem key={i} paramKey={paramKey} />\n      ))}\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const Component = createParamFormItemComponent({\n    paramSelector: selectSnakemakeParam,\n    paramValueSelector: selectSnakemakeParamsValue,\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import axios from 'axios'\n\nimport { BASE_URL } from 'const/API'\n\nimport type { Edge, Node } from 'react-flow-renderer'\nimport type {\n  AlgorithmNodeData,\n  InputNodeData,\n} from 'store/slice/FlowElement/FlowElementType'\nimport type { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport type { ParamMap } from 'store/utils/param/ParamType'\n\nexport type RunPostData = {\n  name: string\n  nodeList: Node<NodePostDataType>[]\n  edgeList: Edge[]\n  nwbParam: ParamMap\n  snakemakeParam: ParamMap\n  forceRunList: { nodeId: string; name: string }[]\n}\n\nexport type NodePostDataType = AlgorithmNodePostData | InputNodePostData\n\nexport interface InputNodePostData extends InputNodeData {\n  path: string | string[]\n  fileType: FILE_TYPE\n  param?: {\n    [key: string]: unknown\n  }\n  hdf5Path?: string\n}\n\nexport interface AlgorithmNodePostData extends AlgorithmNodeData {\n  path: string\n  param: ParamMap\n}\n\nexport async function runApi(data: RunPostData): Promise<string> {\n  const response = await axios.post(`${BASE_URL}/run`, data)\n  return response.data\n}\n\nexport async function runByUidApi(\n  uid: string,\n  data: Omit<RunPostData, 'name'>,\n): Promise<string> {\n  const response = await axios.post(`${BASE_URL}/run/${uid}`, data)\n  return response.data\n}\n\nexport type RunResultDTO = {\n  [nodeId: string]: {\n    status: string\n    message: string\n    name: string\n    outputPaths?: OutputPathsDTO\n  }\n}\n\nexport type OutputPathsDTO = {\n  [outputKey: string]: {\n    path: string\n    type: string\n  }\n}\n\nexport async function runResult(data: {\n  uid: string\n  pendingNodeIdList: string[]\n}): Promise<RunResultDTO> {\n  const { uid, pendingNodeIdList } = data\n  const response = await axios.post(`${BASE_URL}/run/result/${uid}`, {\n    pendingNodeIdList,\n  })\n  return response.data\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\n\nimport { ThunkApiConfig } from 'store/store'\nimport { PIPELINE_SLICE_NAME } from './PipelineType'\nimport {\n  runApi,\n  runByUidApi,\n  runResult,\n  RunResultDTO,\n  RunPostData,\n} from 'api/run/Run'\nimport {\n  selectPipelineLatestUid,\n  selectRunResultPendingNodeIdList,\n} from './PipelineSelectors'\n\nexport const run = createAsyncThunk<\n  string,\n  { runPostData: RunPostData },\n  ThunkApiConfig\n>(`${PIPELINE_SLICE_NAME}/run`, async ({ runPostData }, thunkAPI) => {\n  try {\n    const responseData = await runApi(runPostData)\n    return responseData\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const runByCurrentUid = createAsyncThunk<\n  string,\n  { runPostData: Omit<RunPostData, 'name'> },\n  ThunkApiConfig\n>(\n  `${PIPELINE_SLICE_NAME}/runByCurrentUid`,\n  async ({ runPostData }, thunkAPI) => {\n    const currentUid = selectPipelineLatestUid(thunkAPI.getState())\n    if (currentUid != null) {\n      try {\n        const responseData = await runByUidApi(currentUid, runPostData)\n        return responseData\n      } catch (e) {\n        return thunkAPI.rejectWithValue(e)\n      }\n    } else {\n      return thunkAPI.rejectWithValue('currentUid dose not exist.')\n    }\n  },\n)\n\nexport const pollRunResult = createAsyncThunk<\n  RunResultDTO,\n  {\n    uid: string\n  },\n  ThunkApiConfig\n>(`${PIPELINE_SLICE_NAME}/pollRunResult`, async ({ uid }, thunkAPI) => {\n  const pendingNodeIdList = selectRunResultPendingNodeIdList(\n    thunkAPI.getState(),\n  )\n  try {\n    const responseData = await runResult({ uid, pendingNodeIdList })\n    return responseData\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport { pollRunResult, run, runByCurrentUid } from './PipelineActions'\nimport {\n  Pipeline,\n  PIPELINE_SLICE_NAME,\n  RUN_BTN_OPTIONS,\n  RUN_BTN_TYPE,\n  RUN_STATUS,\n} from './PipelineType'\n\nimport {\n  getInitialRunResult,\n  convertToRunResult,\n  isNodeResultPending,\n} from './PipelineUtils'\n\nconst initialState: Pipeline = {\n  run: {\n    status: RUN_STATUS.START_UNINITIALIZED,\n  },\n  runBtn: RUN_BTN_OPTIONS.RUN_NEW,\n}\n\nexport const pipelineSlice = createSlice({\n  name: PIPELINE_SLICE_NAME,\n  initialState,\n  reducers: {\n    cancelPipeline(state) {\n      state.run.status = RUN_STATUS.CANCELED\n    },\n    setRunBtnOption: (\n      state,\n      action: PayloadAction<{\n        runBtnOption: RUN_BTN_TYPE\n      }>,\n    ) => {\n      state.runBtn = action.payload.runBtnOption\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(pollRunResult.fulfilled, (state, action) => {\n        if (state.run.status === RUN_STATUS.START_SUCCESS) {\n          state.run.runResult = {\n            ...state.run.runResult, // pendingのNodeResultはそのままでsuccessもしくはerrorのみ上書き\n            ...convertToRunResult(action.payload),\n          }\n          const runResultPendingList = Object.values(\n            state.run.runResult,\n          ).filter(isNodeResultPending)\n          if (runResultPendingList.length === 0) {\n            // 終了\n            state.run.status = RUN_STATUS.FINISHED\n          }\n        }\n      })\n      .addCase(pollRunResult.rejected, (state, action) => {\n        state.run.status = RUN_STATUS.ABORTED\n      })\n      .addCase(importExperimentByUid.fulfilled, (state, action) => {\n        state.currentPipeline = {\n          uid: action.meta.arg,\n        }\n        state.run = {\n          status: RUN_STATUS.START_UNINITIALIZED,\n        }\n      })\n      .addMatcher(\n        isAnyOf(run.pending, runByCurrentUid.pending),\n        (state, action) => {\n          state.run = {\n            status: RUN_STATUS.START_PENDING,\n          }\n        },\n      )\n      .addMatcher(\n        isAnyOf(run.fulfilled, runByCurrentUid.fulfilled),\n        (state, action) => {\n          const runPostData = action.meta.arg.runPostData\n          const uid = action.payload\n          state.run = {\n            uid,\n            status: RUN_STATUS.START_SUCCESS,\n            runResult: getInitialRunResult({ name: '', ...runPostData }),\n            runPostData: { name: '', ...runPostData },\n          }\n          state.currentPipeline = {\n            uid: action.payload,\n          }\n        },\n      )\n      .addMatcher(\n        isAnyOf(run.rejected, runByCurrentUid.rejected),\n        (state, action) => {\n          state.run = {\n            status: RUN_STATUS.START_ERROR,\n          }\n        },\n      )\n  },\n})\n\nexport const { cancelPipeline, setRunBtnOption } = pipelineSlice.actions\n\nexport default pipelineSlice.reducer\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Button from '@mui/material/Button'\nimport ButtonGroup from '@mui/material/ButtonGroup'\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown'\nimport CloseIcon from '@mui/icons-material/Close'\nimport ClickAwayListener from '@mui/material/ClickAwayListener'\nimport Grow from '@mui/material/Grow'\nimport Paper from '@mui/material/Paper'\nimport Popper from '@mui/material/Popper'\nimport MenuItem from '@mui/material/MenuItem'\nimport MenuList from '@mui/material/MenuList'\nimport TextField from '@mui/material/TextField'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\n\nimport { useSnackbar } from 'notistack'\n\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport {\n  RUN_BTN_LABELS,\n  RUN_BTN_OPTIONS,\n  RUN_BTN_TYPE,\n} from 'store/slice/Pipeline/PipelineType'\nimport { selectPipelineRunBtn } from 'store/slice/Pipeline/PipelineSelectors'\nimport { setRunBtnOption } from 'store/slice/Pipeline/PipelineSlice'\n\nexport const RunButtons = React.memo<UseRunPipelineReturnType>((props) => {\n  const {\n    uid,\n    isStartedSuccess,\n    filePathIsUndefined,\n    handleCancelPipeline,\n    handleRunPipeline,\n    handleRunPipelineByUid,\n  } = props\n\n  const dispatch = useDispatch()\n\n  const runBtnOption = useSelector(selectPipelineRunBtn)\n\n  const [dialogOpen, setDialogOpen] = React.useState(false)\n  const { enqueueSnackbar } = useSnackbar()\n  const handleClick = () => {\n    if (!filePathIsUndefined) {\n      if (runBtnOption === RUN_BTN_OPTIONS.RUN_NEW) {\n        setDialogOpen(true)\n      } else {\n        handleRunPipelineByUid()\n      }\n    } else {\n      enqueueSnackbar('please select input file', { variant: 'error' })\n    }\n  }\n  const onClickDialogRun = (name: string) => {\n    handleRunPipeline(name)\n    setDialogOpen(false)\n  }\n  const onClickCancel = () => {\n    handleCancelPipeline()\n  }\n  const [menuOpen, setMenuOpen] = React.useState(false)\n  const anchorRef = React.useRef<HTMLDivElement>(null)\n\n  const handleMenuItemClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    option: RUN_BTN_TYPE,\n  ) => {\n    dispatch(setRunBtnOption({ runBtnOption: option }))\n    setMenuOpen(false)\n  }\n  const handleToggle = () => {\n    setMenuOpen((prevOpen) => !prevOpen)\n  }\n  const handleClose = (event: Event) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return\n    }\n    setMenuOpen(false)\n  }\n  const uidExists = uid != null\n  return (\n    <>\n      <ButtonGroup\n        sx={{\n          margin: 1,\n        }}\n        variant=\"contained\"\n        ref={anchorRef}\n        disabled={isStartedSuccess}\n      >\n        <Button onClick={handleClick}>{RUN_BTN_LABELS[runBtnOption]}</Button>\n        <Button size=\"small\" onClick={handleToggle}>\n          <ArrowDropDownIcon />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        open={menuOpen}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList>\n                  {Object.values(RUN_BTN_OPTIONS).map((option) => (\n                    <MenuItem\n                      key={option}\n                      disabled={\n                        !uidExists && option === RUN_BTN_OPTIONS.RUN_ALREADY\n                      }\n                      selected={option === runBtnOption}\n                      onClick={(event) => handleMenuItemClick(event, option)}\n                    >\n                      {RUN_BTN_LABELS[option]}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n      <Button\n        variant=\"outlined\"\n        endIcon={<CloseIcon />}\n        onClick={onClickCancel}\n        sx={{\n          margin: 1,\n          marginRight: 4,\n        }}\n      >\n        Cancel\n      </Button>\n      <RunDialog\n        open={dialogOpen}\n        handleRun={onClickDialogRun}\n        handleClose={() => setDialogOpen(false)}\n      />\n    </>\n  )\n})\n\nconst RunDialog = React.memo<{\n  open: boolean\n  handleRun: (name: string) => void\n  handleClose: () => void\n}>(({ open, handleClose, handleRun }) => {\n  const [name, setName] = React.useState('New flow')\n  const [error, setError] = React.useState<string | null>(null)\n  const onClickRun = () => {\n    if (name !== '') {\n      handleRun(name)\n    } else {\n      setError('name is empty')\n    }\n  }\n  const onChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value)\n    if (event.target.value !== '') {\n      setError(null)\n    }\n  }\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <DialogTitle>Name and run flowchart</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"name\"\n          autoFocus\n          margin=\"dense\"\n          fullWidth\n          variant=\"standard\"\n          onChange={onChangeName}\n          error={error != null}\n          helperText={error}\n          value={name}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"inherit\" variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button onClick={onClickRun} color=\"primary\" variant=\"outlined\">\n          Run\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n","import React from 'react'\nimport Box from '@mui/material/Box'\n\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport { NWBSettingButton } from './FlowChart/NWB'\nimport { SnakemakeButton } from './FlowChart/Snakemake'\nimport { RunButtons } from './RunButtons'\n\nexport const ToolBar = React.memo<UseRunPipelineReturnType>((props) => (\n  <Box\n    style={{\n      position: 'absolute',\n      float: 'right',\n      textAlign: 'right',\n      top: -7,\n      right: 10,\n      zIndex: 4,\n      textTransform: 'none',\n    }}\n  >\n    <SnakemakeButton />\n    <NWBSettingButton />\n    <RunButtons {...props} />\n  </Box>\n))\n","import React, { DragEvent, MouseEvent } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  Controls,\n  Elements,\n  Connection,\n  Edge,\n  Node,\n  FlowTransform,\n} from 'react-flow-renderer'\n\nimport 'style/flow.css'\nimport {\n  deleteFlowElements,\n  editFlowElementPositionById,\n  setFlowElements,\n  setFlowPosition,\n} from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectFlowElements,\n  selectFlowPosition,\n} from 'store/slice/FlowElement/FlowElementSelectors'\nimport { ImageFileNode } from './FlowChartNode/ImageFileNode'\nimport { AlgorithmNode } from './FlowChartNode/AlgorithmNode'\nimport { CsvFileNode } from './FlowChartNode/CsvFileNode'\nimport { HDF5FileNode } from './FlowChartNode/HDF5FileNode'\nimport { CustomEdge } from './CustomEdge'\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport { ToolBar } from 'components/ToolBar'\n\nconst componentTypes = {\n  ImageFileNode,\n  CsvFileNode,\n  HDF5FileNode,\n  AlgorithmNode,\n} as const\n\nconst edgeTypes = {\n  buttonedge: CustomEdge,\n} as const\n\nexport const ReactFlowComponent = React.memo<UseRunPipelineReturnType>(\n  (props) => {\n    const flowElements = useSelector(selectFlowElements)\n    const dispatch = useDispatch()\n\n    const onConnect = (params: Connection | Edge) => {\n      dispatch(\n        setFlowElements(\n          addEdge(\n            {\n              ...params,\n              animated: false,\n              style: { width: 5 },\n              type: 'buttonedge',\n            },\n            flowElements,\n          ),\n        ),\n      )\n    }\n\n    const onElementsRemove = (elementsToRemove: Elements) => {\n      dispatch(deleteFlowElements(elementsToRemove))\n    }\n\n    const onDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n    }\n\n    const onNodeDragStop = (event: MouseEvent, node: Node) => {\n      dispatch(\n        editFlowElementPositionById({\n          nodeId: node.id,\n          coord: { x: node.position.x, y: node.position.y },\n        }),\n      )\n    }\n\n    const flowPosition = useSelector(selectFlowPosition)\n\n    const onMoveEnd = (event: FlowTransform | undefined) => {\n      if (event !== undefined) {\n        dispatch(setFlowPosition(event))\n      }\n    }\n\n    return (\n      <div className=\"flow\">\n        <ReactFlowProvider>\n          <div className=\"reactflow-wrapper\">\n            <ReactFlow\n              elements={flowElements}\n              onElementsRemove={onElementsRemove}\n              onConnect={onConnect}\n              onDragOver={onDragOver}\n              onNodeDragStop={onNodeDragStop}\n              nodeTypes={componentTypes}\n              edgeTypes={edgeTypes}\n              defaultPosition={[flowPosition.x, flowPosition.y]}\n              defaultZoom={flowPosition.zoom}\n              onMoveEnd={onMoveEnd}\n            >\n              <ToolBar {...props} />\n              <Controls />\n            </ReactFlow>\n          </div>\n        </ReactFlowProvider>\n      </div>\n    )\n  },\n)\n","import { RootState } from 'store/store'\n\nexport const selectRightDrawerIsOpen = (state: RootState) =>\n  state.rightDrawer.open\n\nexport const selectRightDrawerMode = (state: RootState) =>\n  state.rightDrawer.mode\n\nexport const selectRightDrawerCurrentNodeId = (state: RootState) =>\n  state.rightDrawer.currendNodeId\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const ALGORITHM_NODE_SLICE_NAME = 'algorithmNode'\n\nexport type AlgorithmNode = {\n  [nodeId: string]: AlgrithmNodeType\n}\n\ntype AlgrithmNodeType = {\n  functionPath: string\n  name: string\n  params: ParamMap | null\n  isUpdated: boolean\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\nimport { ALGORITHM_NODE_SLICE_NAME } from './AlgorithmNodeType'\n\nexport const getAlgoParams = createAsyncThunk<\n  ParamDTO,\n  { nodeId: string; algoName: string }\n>(\n  `${ALGORITHM_NODE_SLICE_NAME}/getAlgoParams`,\n  async ({ algoName }, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/params/${algoName}`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit'\n\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\nimport {\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\nimport { isNodeData } from '../FlowElement/FlowElementUtils'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport { importExperimentByUid } from '../Experiments/ExperimentsActions'\nimport { getAlgoParams } from './AlgorithmNodeActions'\nimport { ALGORITHM_NODE_SLICE_NAME, AlgorithmNode } from './AlgorithmNodeType'\nimport { isAlgorithmNodePostData } from 'api/run/RunUtils'\nimport { run, runByCurrentUid } from '../Pipeline/PipelineActions'\nimport { addAlgorithmNode } from '../FlowElement/FlowElementActions'\n\nconst initialState: AlgorithmNode = {}\n\nexport const algorithmNodeSlice = createSlice({\n  name: ALGORITHM_NODE_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        // paramKey: string\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { nodeId, path, newValue } = action.payload\n      const param = state[nodeId].params\n      if (param != null) {\n        const target = getChildParam(path, param)\n        if (target != null) {\n          target.value = newValue\n          state[nodeId].isUpdated = true\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getAlgoParams.fulfilled, (state, action) => {\n        const { nodeId } = action.meta.arg\n        state[nodeId].params = convertToParamMap(action.payload)\n      })\n      .addCase(addAlgorithmNode.fulfilled, (state, action) => {\n        const { node, functionPath, name } = action.meta.arg\n        const params = action.payload\n        if (node.data?.type === NODE_TYPE_SET.ALGORITHM) {\n          state[node.id] = {\n            functionPath,\n            name,\n            params: convertToParamMap(params),\n            isUpdated: false,\n          }\n        }\n      })\n      .addCase(deleteFlowElements, (state, action) => {\n        action.payload\n          .filter((node) => isNodeData(node))\n          .forEach((node) => {\n            if (node.data?.type === NODE_TYPE_SET.ALGORITHM) {\n              delete state[node.id]\n            }\n          })\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (Object.keys(state).includes(action.payload)) {\n          delete state[action.payload]\n        }\n      })\n      .addCase(importExperimentByUid.fulfilled, (_, action) => {\n        const newState: AlgorithmNode = {}\n        action.payload.nodeList\n          .filter(isAlgorithmNodePostData)\n          .forEach((node) => {\n            if (node.data != null) {\n              newState[node.id] = {\n                name: node.data.label,\n                functionPath: node.data.path,\n                params: node.data.param,\n                isUpdated: false,\n              }\n            }\n          })\n        return newState\n      })\n      .addMatcher(\n        isAnyOf(run.fulfilled, runByCurrentUid.fulfilled),\n        (state, action) => {\n          const runPostData = action.meta.arg.runPostData\n          runPostData.nodeList\n            .filter(isAlgorithmNodePostData)\n            .forEach((node) => {\n              state[node.id].isUpdated = false\n            })\n        },\n      )\n  },\n})\n\nexport const { updateParam } = algorithmNodeSlice.actions\nexport default algorithmNodeSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@mui/material/Typography'\n\nimport {\n  selectAlgorithmName,\n  selectAlgorithmParamsExit,\n  selectAlgorithmParamsKeyList,\n  selectAlgorithmParamsValue,\n  selectAlgorithmParam,\n} from 'store/slice/AlgorithmNode/AlgorithmNodeSelectors'\nimport { updateParam } from 'store/slice/AlgorithmNode/AlgorithmNodeSlice'\nimport { getAlgoParams } from 'store/slice/AlgorithmNode/AlgorithmNodeActions'\n\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { createParamFormItemComponent } from '../ParamFormItemCreator'\nimport { ParamFormContext } from './RightDrawer'\n\nexport const AlgorithmParamForm = React.memo(() => {\n  const nodeId = React.useContext(ParamFormContext)\n  const dispatch = useDispatch()\n  const algoName = useSelector(selectAlgorithmName(nodeId))\n  const algoParamIsLoaded = useSelector(selectAlgorithmParamsExit(nodeId))\n  const paramKeyList = useSelector(\n    selectAlgorithmParamsKeyList(nodeId),\n    arrayEqualityFn,\n  )\n  useEffect(() => {\n    if (!algoParamIsLoaded) {\n      dispatch(getAlgoParams({ nodeId, algoName }))\n    }\n  }, [dispatch, nodeId, algoName, algoParamIsLoaded])\n  return (\n    <div style={{ padding: 8 }}>\n      <Typography variant=\"h5\">{algoName}</Typography>\n      <div style={{ paddingLeft: 8 }}>\n        {paramKeyList.map((paramKey) => (\n          <ParamItem key={paramKey} paramKey={paramKey} />\n        ))}\n      </div>\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const nodeId = React.useContext(ParamFormContext)\n  const Component = createParamFormItemComponent({\n    paramSelector: (paramKey) => selectAlgorithmParam(nodeId, paramKey),\n    paramValueSelector: (path) => selectAlgorithmParamsValue(nodeId, path),\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ nodeId, path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport Toolbar from '@mui/material/Toolbar'\nimport Typography from '@mui/material/Typography'\nimport Divider from '@mui/material/Divider'\nimport IconButton from '@mui/material/IconButton'\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight'\nimport Box from '@mui/material/Box'\nimport {\n  selectRightDrawerCurrentNodeId,\n  selectRightDrawerIsOpen,\n  selectRightDrawerMode,\n} from 'store/slice/RightDrawer/RightDrawerSelectors'\nimport {\n  closeRightDrawer,\n  RIGHT_DRAWER_MODE,\n} from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { NWBSettingContents } from './NWB'\nimport { RootState } from 'store/store'\nimport { AlgorithmParamForm } from './AlgorithmParamForm'\nimport { SnakemakeContents } from './Snakemake'\n\nconst RightDrawer: React.FC = () => {\n  const open = useSelector(selectRightDrawerIsOpen)\n  const dispatch = useDispatch()\n  const onClick = () => dispatch(closeRightDrawer())\n  const title = useSelector((state: RootState) => {\n    const mode = selectRightDrawerMode(state)\n    switch (mode) {\n      case RIGHT_DRAWER_MODE.NWB:\n        return 'NWB Setting'\n      case RIGHT_DRAWER_MODE.PARAM_FORM:\n        return 'Param From'\n      case RIGHT_DRAWER_MODE.SNAKEMAKE:\n        return 'Snakemake'\n      default:\n        return 'none'\n    }\n  })\n  return (\n    <StyledDrawer open={open} anchor=\"right\" variant=\"persistent\">\n      <Toolbar />\n      <Box display=\"flex\" alignItems=\"center\">\n        <IconButton color=\"inherit\" onClick={onClick} size=\"large\">\n          <ChevronRightIcon />\n        </IconButton>\n        <Typography variant=\"h6\">{title}</Typography>\n      </Box>\n      <Divider />\n      <MainContents>\n        <Contents />\n      </MainContents>\n    </StyledDrawer>\n  )\n}\n\nconst Contents: React.FC = () => {\n  const mode = useSelector(selectRightDrawerMode)\n  switch (mode) {\n    case RIGHT_DRAWER_MODE.NWB:\n      return <NWBSettingContents />\n    case RIGHT_DRAWER_MODE.PARAM_FORM:\n      return <ParamFormConetent />\n    case RIGHT_DRAWER_MODE.SNAKEMAKE:\n      return <SnakemakeContents />\n    default:\n      return null\n  }\n}\n\n/**\n * nodeId\n */\nexport const ParamFormContext = React.createContext<string>('')\n\nconst ParamFormConetent: React.FC = () => {\n  const nodeId = useSelector(selectRightDrawerCurrentNodeId)\n  if (nodeId != null) {\n    return (\n      <ParamFormContext.Provider value={nodeId}>\n        <AlgorithmParamForm />\n      </ParamFormContext.Provider>\n    )\n  } else {\n    return null\n  }\n}\n\nexport const rightDrawerWidth = 320\n\nconst StyledDrawer = styled(Drawer)({\n  width: rightDrawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: rightDrawerWidth,\n  },\n})\n\nconst MainContents = styled('main')({\n  height: '100%',\n})\n\nexport default RightDrawer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport { AlgorithmTreeView } from './TreeView'\nimport { ReactFlowComponent } from './ReactFlowComponent'\nimport RightDrawer, { rightDrawerWidth } from './RightDrawer'\nimport { selectRightDrawerIsOpen } from 'store/slice/RightDrawer/RightDrawerSelectors'\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\n\nconst FlowChart = React.memo<UseRunPipelineReturnType>((props) => {\n  const open = useSelector(selectRightDrawerIsOpen)\n  return (\n    <RootDiv>\n      <StyledDrawer variant=\"permanent\">\n        <MuiToolbar />\n        <DrawerContents>\n          <AlgorithmTreeView />\n        </DrawerContents>\n      </StyledDrawer>\n\n      <MainContents open={open}>\n        <MuiToolbar />\n        <ReactFlowComponent {...props} />\n      </MainContents>\n      <RightDrawer />\n    </RootDiv>\n  )\n})\n\nexport const drawerWidth = 240\n\nconst RootDiv = styled('div')({\n  display: 'flex',\n})\n\nconst StyledDrawer = styled(Drawer)({\n  width: drawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: drawerWidth,\n  },\n})\n\nconst DrawerContents = styled('div')({\n  overflow: 'auto',\n})\n\nconst MainContents = styled('main')<{ open: boolean }>(\n  ({ theme }) => ({\n    flexDirection: 'column',\n    flexGrow: 1,\n    height: '90vh',\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginRight: -rightDrawerWidth,\n  }),\n  ({ open, theme }) =>\n    open\n      ? {\n          transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n          }),\n          marginRight: 0,\n        }\n      : undefined,\n)\n\nexport default FlowChart\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { DATA_TYPE, DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\n\nimport {\n  MultiPlotItem,\n  HeatMapItem,\n  ImageItem,\n  CsvItem,\n  TimeSeriesItem,\n  RoiItem,\n  ScatterItem,\n  VisualaizeItem,\n  VISUALIZE_ITEM_TYPE_SET,\n  BarItem,\n  HDF5Item,\n  HTMLItem,\n} from './VisualizeItemType'\nimport {\n  isMultiPlotItem,\n  isDisplayDataItem,\n  isHeatMapItem,\n  isImageItem,\n  isTimeSeriesItem,\n  isCsvItem,\n  isScatterItem,\n} from './VisualizeItemUtils'\n\nexport const initialState: VisualaizeItem = {\n  items: {},\n  selectedItemId: null,\n}\nconst displayDataCommonInitialValue = {\n  itemType: VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA,\n  filePath: null,\n  nodeId: null,\n}\nconst imageItemInitialValue: ImageItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.IMAGE,\n  startIndex: 1,\n  endIndex: 10,\n  showticklabels: false,\n  showline: true,\n  zsmooth: 'best',\n  showgrid: false,\n  showscale: false,\n  colors: [\n    { rgb: `rgb(0, 0, 0)`, offset: '0' },\n    { rgb: `rgb(255, 255, 255)`, offset: '1.0' },\n  ],\n  activeIndex: 0,\n  roiItem: null,\n  roiAlpha: 1.0,\n  duration: 500,\n}\nconst timeSeriesItemInitialValue: TimeSeriesItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.TIME_SERIES,\n  offset: false,\n  span: 3,\n  showgrid: true,\n  showline: true,\n  showticklabels: true,\n  zeroline: false,\n  xrange: {\n    left: undefined,\n    right: undefined,\n  },\n  maxIndex: 0,\n  displayNumbers: [0],\n  checkedList: [],\n}\nconst heatMapItemInitialValue: HeatMapItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HEAT_MAP,\n  showscale: true,\n  colors: [\n    { rgb: `rgb(0, 0, 255)`, offset: '0' },\n    { rgb: `rgb(200, 200, 200)`, offset: '0.5' },\n    { rgb: `rgb(255, 0, 0)`, offset: '1.0' },\n  ],\n}\nconst csvItemInitialValue: CsvItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.CSV,\n  setColumn: null,\n  setIndex: false,\n  transpose: false,\n}\nconst roiItemInitialValue: RoiItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.ROI,\n}\nconst scatterItemInitialValue: ScatterItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.SCATTER,\n  xIndex: 0,\n  yIndex: 1,\n}\nconst barItemInitialValue: BarItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.BAR,\n}\nconst hdf5ItemInitialValue: HDF5Item = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HDF5,\n}\nconst htmlItemInitialValue: HTMLItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HTML,\n}\n\nfunction getDisplayDataItemInitialValue(dataType: DATA_TYPE) {\n  switch (dataType) {\n    case DATA_TYPE_SET.IMAGE:\n      return imageItemInitialValue\n    case DATA_TYPE_SET.HEAT_MAP:\n      return heatMapItemInitialValue\n    case DATA_TYPE_SET.TIME_SERIES:\n      return timeSeriesItemInitialValue\n    case DATA_TYPE_SET.CSV:\n      return csvItemInitialValue\n    case DATA_TYPE_SET.ROI:\n      return roiItemInitialValue\n    case DATA_TYPE_SET.SCATTER:\n      return scatterItemInitialValue\n    case DATA_TYPE_SET.BAR:\n      return barItemInitialValue\n    case DATA_TYPE_SET.HDF5:\n      return hdf5ItemInitialValue\n    case DATA_TYPE_SET.HTML:\n      return htmlItemInitialValue\n  }\n}\n\nconst MultiPlotItemInitialValue: MultiPlotItem = {\n  itemType: VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT,\n  imageItem: imageItemInitialValue,\n  timeSeriesItem: timeSeriesItemInitialValue,\n  heatMapItem: heatMapItemInitialValue,\n}\nexport const visualaizeItemSlice = createSlice({\n  name: 'visualaizeItem',\n  initialState,\n  reducers: {\n    deleteVisualizeItem: (state, action: PayloadAction<number>) => {\n      const itemId = action.payload\n      delete state.items[itemId]\n      if (itemId === state.selectedItemId) {\n        state.selectedItemId = null\n      }\n    },\n    addInitialItem: (state) => {\n      const nextId = getMaxItemId(state) + 1\n      state.items[nextId] = getDisplayDataItemInitialValue(DATA_TYPE_SET.IMAGE)\n      state.selectedItemId = nextId\n    },\n    selectItem: (state, action: PayloadAction<number>) => {\n      state.selectedItemId = action.payload\n    },\n    setRoiItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (targetItem.imageItem.roiItem != null) {\n          targetItem.imageItem.roiItem.filePath = filePath\n          targetItem.imageItem.roiItem.nodeId = nodeId\n        } else {\n          targetItem.imageItem.roiItem = {\n            ...roiItemInitialValue,\n            filePath,\n            nodeId,\n          }\n        }\n      } else if (isImageItem(targetItem)) {\n        if (targetItem.roiItem != null) {\n          targetItem.roiItem.filePath = filePath\n          targetItem.roiItem.nodeId = nodeId\n        } else {\n          targetItem.roiItem = {\n            ...roiItemInitialValue,\n            filePath,\n            nodeId,\n          }\n        }\n      }\n    },\n    setFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n        dataType?: string\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId, dataType } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (dataType === DATA_TYPE_SET.IMAGE) {\n          targetItem.imageItem.filePath = filePath\n          targetItem.imageItem.nodeId = nodeId\n        } else if (dataType === DATA_TYPE_SET.TIME_SERIES) {\n          targetItem.timeSeriesItem.filePath = filePath\n          targetItem.timeSeriesItem.nodeId = nodeId\n        } else if (dataType === DATA_TYPE_SET.HEAT_MAP) {\n          targetItem.heatMapItem.filePath = filePath\n          targetItem.heatMapItem.nodeId = nodeId\n        }\n      } else if (isDisplayDataItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      } else {\n        throw new Error('error')\n      }\n    },\n    setImageItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.filePath = filePath\n        targetItem.imageItem.nodeId = nodeId\n      } else if (isImageItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setTimeSeriesItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.filePath = filePath\n        targetItem.timeSeriesItem.nodeId = nodeId\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setHeatMapItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.filePath = filePath\n        targetItem.heatMapItem.nodeId = nodeId\n      } else if (isHeatMapItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setDisplayDataPath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n        dataType?: DATA_TYPE\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId, dataType } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (dataType != null && targetItem.imageItem.dataType !== dataType) {\n          state.items[itemId] = {\n            ...getDisplayDataItemInitialValue(dataType),\n            filePath,\n            nodeId,\n          }\n        } else {\n          targetItem.imageItem.filePath = filePath\n          targetItem.imageItem.nodeId = nodeId\n        }\n      } else if (isDisplayDataItem(targetItem)) {\n        if (dataType != null && targetItem.dataType !== dataType) {\n          state.items[itemId] = {\n            ...getDisplayDataItemInitialValue(dataType),\n            filePath,\n            nodeId,\n          }\n        } else {\n          targetItem.filePath = filePath\n          targetItem.nodeId = nodeId\n        }\n      } else {\n        throw new Error('invalid VisualaizeItemType')\n      }\n      resetImageActiveIndexFn(state, { itemId })\n    },\n    setItemType: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        type: typeof VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT | DATA_TYPE\n      }>,\n    ) => {\n      const { itemId, type } = action.payload\n      if (type === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT) {\n        state.items[itemId] = MultiPlotItemInitialValue\n      } else {\n        state.items[itemId] = getDisplayDataItemInitialValue(type)\n      }\n    },\n    toggleItemTypeMultiPlot: (state, action: PayloadAction<number>) => {\n      const itemId = action.payload\n      if (state.items[itemId].itemType === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT) {\n        state.items[itemId] = {\n          ...getDisplayDataItemInitialValue(DATA_TYPE_SET.IMAGE), // FIXME dataTypeの型をNullableに変更して影響箇所も修正する\n        }\n      } else {\n        state.items[itemId] = MultiPlotItemInitialValue\n      }\n    },\n    resetImageActiveIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        startIndex?: number\n        endIndex?: number\n      }>,\n    ) => {\n      resetImageActiveIndexFn(state, action.payload)\n    },\n    incrementImageActiveIndex: (\n      state,\n      action: PayloadAction<{ itemId: number }>,\n    ) => {\n      const { itemId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex++\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex++\n      }\n    },\n    decrementImageActiveIndex: (\n      state,\n      action: PayloadAction<{ itemId: number }>,\n    ) => {\n      const { itemId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex--\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex--\n      }\n    },\n    setImageActiveIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        activeIndex: number\n      }>,\n    ) => {\n      const { itemId, activeIndex } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex = activeIndex\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex = activeIndex\n      }\n    },\n    setImageItemShowticklabels: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showticklabels: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showticklabels = action.payload.showticklabels\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showticklabels = action.payload.showticklabels\n      }\n    },\n    setImageItemZsmooth: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        zsmooth: string | boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.zsmooth = action.payload.zsmooth\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.zsmooth = action.payload.zsmooth\n      }\n    },\n    setImageItemShowLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showline = action.payload.showline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showline = action.payload.showline\n      }\n    },\n    setImageItemShowGrid: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showgrid: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showgrid = action.payload.showgrid\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showgrid = action.payload.showgrid\n      }\n    },\n    setImageItemShowScale: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showscale: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showscale = action.payload.showscale\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showscale = action.payload.showscale\n      }\n    },\n    setImageItemColors: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        colors: {\n          rgb: string\n          offset: string\n        }[]\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.colors = action.payload.colors\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.colors = action.payload.colors\n      }\n    },\n    setImageItemStartIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        startIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.startIndex = action.payload.startIndex\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.startIndex = action.payload.startIndex\n      }\n    },\n    setImageItemEndIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        endIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.endIndex = action.payload.endIndex\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.endIndex = action.payload.endIndex\n      }\n    },\n    setImageItemRoiAlpha: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        roiAlpha: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.roiAlpha = action.payload.roiAlpha\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.roiAlpha = action.payload.roiAlpha\n      }\n    },\n    setImageItemDuration: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        duration: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.duration = action.payload.duration\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.duration = action.payload.duration\n      }\n    },\n    setTimeSeriesItemOffset: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        offset: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.offset = action.payload.offset\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.offset = action.payload.offset\n      }\n    },\n    setTimeSeriesItemSpan: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        span: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.span = action.payload.span\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.span = action.payload.span\n      }\n    },\n    setTimeSeriesItemShowGrid: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showgrid: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showgrid = action.payload.showgrid\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showgrid = action.payload.showgrid\n      }\n    },\n    setTimeSeriesItemShowLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showline = action.payload.showline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showline = action.payload.showline\n      }\n    },\n    setTimeSeriesItemShowTickLabels: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showticklabels: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showticklabels = action.payload.showticklabels\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showticklabels = action.payload.showticklabels\n      }\n    },\n    setTimeSeriesItemZeroLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        zeroline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.zeroline = action.payload.zeroline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.zeroline = action.payload.zeroline\n      }\n    },\n    setTimeSeriesItemXrangeLeft: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        left: number | undefined\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.xrange.left = action.payload.left\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.xrange.left = action.payload.left\n      }\n    },\n    setTimeSeriesItemXrangeRight: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        right: number | undefined\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.xrange.right = action.payload.right\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.xrange.right = action.payload.right\n      }\n    },\n    setTimeSeriesItemDisplayNumbers: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        displayNumbers: number[]\n      }>,\n    ) => {\n      const { itemId, displayNumbers } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.displayNumbers = displayNumbers\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.displayNumbers = displayNumbers\n      }\n    },\n    setTimeSeriesItemCheckedList: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        checkedList: boolean[]\n      }>,\n    ) => {\n      const { itemId, checkedList } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.checkedList = checkedList\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.checkedList = checkedList\n      }\n    },\n    setTimeSeriesItemMaxIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        maxIndex: number\n      }>,\n    ) => {\n      const { itemId, maxIndex } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.maxIndex = maxIndex\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.maxIndex = maxIndex\n      }\n    },\n    setHeatMapItemShowScale: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showscale: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isHeatMapItem(targetItem)) {\n        targetItem.showscale = action.payload.showscale\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.showscale = action.payload.showscale\n      }\n    },\n    setHeatMapItemColors: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        colors: {\n          rgb: string\n          offset: string\n        }[]\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isHeatMapItem(targetItem)) {\n        targetItem.colors = action.payload.colors\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.colors = action.payload.colors\n      }\n    },\n    setCsvItemTranspose: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        transpose: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.transpose = action.payload.transpose\n      }\n    },\n    setCsvItemSetColumn: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        setColumn: number | null\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.setColumn = action.payload.setColumn\n      }\n    },\n    setCsvItemSetIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        setIndex: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.setIndex = action.payload.setIndex\n      }\n    },\n    setScatterItemXIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        xIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isScatterItem(targetItem)) {\n        targetItem.xIndex = action.payload.xIndex\n      }\n    },\n    setScatterItemYIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        yIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isScatterItem(targetItem)) {\n        targetItem.yIndex = action.payload.yIndex\n      }\n    },\n  },\n})\n\nfunction getMaxItemId(state: VisualaizeItem) {\n  const idList = Object.keys(state.items).map((key) => Number(key))\n  const maxId = idList.length > 0 ? idList.reduce((a, b) => Math.max(a, b)) : 0\n  return maxId\n}\n\nfunction resetImageActiveIndexFn(\n  state: VisualaizeItem,\n  args: {\n    itemId: number\n    startIndex?: number\n    endIndex?: number\n  },\n) {\n  const { itemId, startIndex, endIndex } = args\n  const targetItem = state.items[itemId]\n  if (isImageItem(targetItem)) {\n    targetItem.activeIndex = 0\n  } else if (isMultiPlotItem(targetItem)) {\n    targetItem.imageItem.activeIndex = 0\n    if (startIndex != null) {\n      targetItem.imageItem.startIndex = startIndex\n    }\n    if (endIndex != null) {\n      targetItem.imageItem.endIndex = endIndex\n    }\n  }\n}\n\nexport const {\n  addInitialItem,\n  deleteVisualizeItem,\n  selectItem,\n  setItemType,\n  toggleItemTypeMultiPlot,\n  setFilePath,\n  setHeatMapItemFilePath,\n  setImageItemFilePath,\n  setTimeSeriesItemFilePath,\n  setRoiItemFilePath,\n  setDisplayDataPath,\n  resetImageActiveIndex,\n  incrementImageActiveIndex,\n  decrementImageActiveIndex,\n  setImageActiveIndex,\n  setImageItemShowticklabels,\n  setImageItemZsmooth,\n  setImageItemShowLine,\n  setImageItemShowGrid,\n  setImageItemShowScale,\n  setImageItemColors,\n  setImageItemStartIndex,\n  setImageItemEndIndex,\n  setImageItemRoiAlpha,\n  setImageItemDuration,\n  setTimeSeriesItemOffset,\n  setTimeSeriesItemSpan,\n  setTimeSeriesItemShowGrid,\n  setTimeSeriesItemShowLine,\n  setTimeSeriesItemShowTickLabels,\n  setTimeSeriesItemZeroLine,\n  setTimeSeriesItemXrangeLeft,\n  setTimeSeriesItemXrangeRight,\n  setTimeSeriesItemDisplayNumbers,\n  setTimeSeriesItemCheckedList,\n  setTimeSeriesItemMaxIndex,\n  setHeatMapItemShowScale,\n  setHeatMapItemColors,\n  setCsvItemTranspose,\n  setCsvItemSetColumn,\n  setCsvItemSetIndex,\n  setScatterItemXIndex,\n  setScatterItemYIndex,\n} = visualaizeItemSlice.actions\n\nexport default visualaizeItemSlice.reducer\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport AddIcon from '@mui/icons-material/Add'\nimport Button from '@mui/material/Button'\nimport { addInitialItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const VisualizeItemAddButton: React.FC = () => {\n  const dispatch = useDispatch()\n  const onClick = () => {\n    dispatch(addInitialItem())\n  }\n  return (\n    <StyledPaper elevation={1} variant=\"outlined\">\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"100%\"\n      >\n        <StyledButton onClick={onClick}>\n          <AddIcon fontSize=\"large\" color=\"primary\" />\n        </StyledButton>\n      </Box>\n    </StyledPaper>\n  )\n}\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  width: 260,\n  height: 255,\n  border: 'dashed',\n  borderWidth: 2,\n  borderColor: theme.palette.divider,\n  margin: theme.spacing(1),\n}))\n\nconst StyledButton = styled(Button)({\n  width: '100%',\n  height: '100%',\n})\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n  DisplayData,\n  DISPLAY_DATA_SLICE_NAME,\n} from './DisplayDataType'\nimport {\n  getCsvData,\n  getHeatMapData,\n  getImageData,\n  getTimeSeriesDataById,\n  getTimeSeriesAllData,\n  getRoiData,\n  getScatterData,\n  getBarData,\n  getHTMLData,\n} from './DisplayDataActions'\n\nconst initialState: DisplayData = {\n  timeSeries: {},\n  heatMap: {},\n  image: {},\n  csv: {},\n  roi: {},\n  scatter: {},\n  bar: {},\n  hdf5: {},\n  html: {},\n}\n\nexport const displayDataSlice = createSlice({\n  name: DISPLAY_DATA_SLICE_NAME,\n  initialState,\n  reducers: {\n    deleteDisplayItem: (\n      state,\n      action: PayloadAction<{\n        dataType: DATA_TYPE\n        filePath: string | null\n      }>,\n    ) => {\n      const { dataType, filePath } = action.payload\n      if (filePath !== null) {\n        if (dataType === DATA_TYPE_SET.IMAGE) {\n          delete state.image[filePath]\n        } else if (dataType === DATA_TYPE_SET.TIME_SERIES) {\n          delete state.timeSeries[filePath]\n        } else if (dataType === DATA_TYPE_SET.CSV) {\n          delete state.csv[filePath]\n        } else if (dataType === DATA_TYPE_SET.HEAT_MAP) {\n          delete state.heatMap[filePath]\n        } else if (dataType === DATA_TYPE_SET.ROI) {\n          delete state.roi[filePath]\n        } else if (dataType === DATA_TYPE_SET.SCATTER) {\n          delete state.scatter[filePath]\n        } else if (dataType === DATA_TYPE_SET.BAR) {\n          delete state.bar[filePath]\n        } else if (dataType === DATA_TYPE_SET.HTML) {\n          delete state.html[filePath]\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getTimeSeriesDataById.pending, (state, action) => {\n        const { path } = action.meta.arg\n        if (!state.timeSeries.hasOwnProperty(path)) {\n          state.timeSeries[path] = {\n            type: 'timeSeries',\n            xrange: [],\n            data: {},\n            std: {},\n            pending: true,\n            fulfilled: false,\n            error: null,\n          }\n        } else {\n          state.timeSeries[path].pending = true\n          state.timeSeries[path].fulfilled = false\n          state.timeSeries[path].error = null\n        }\n      })\n      .addCase(getTimeSeriesDataById.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.timeSeries[path] = {\n          type: 'timeSeries',\n          xrange: [],\n          data: {},\n          std: {},\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getTimeSeriesDataById.fulfilled, (state, action) => {\n        const { path, index } = action.meta.arg\n        state.timeSeries[path].pending = false\n        state.timeSeries[path].fulfilled = true\n        state.timeSeries[path].error = null\n        if (Object.keys(state.timeSeries[path].data).length === 0) {\n          state.timeSeries[path].xrange = action.payload.xrange\n          state.timeSeries[path].data = action.payload.data\n          state.timeSeries[path].std = action.payload.std\n        } else {\n          state.timeSeries[path].data[index] = action.payload.data[index]\n          console.log(action.payload.std)\n          if (action.payload.std[index] !== undefined) {\n            state.timeSeries[path].std[index] = action.payload.std[index]\n          }\n        }\n      })\n      .addCase(getTimeSeriesAllData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        if (!state.timeSeries.hasOwnProperty(path)) {\n          state.timeSeries[path] = {\n            type: 'timeSeries',\n            xrange: [],\n            data: {},\n            std: {},\n            pending: true,\n            fulfilled: false,\n            error: null,\n          }\n        } else {\n          state.timeSeries[path].pending = true\n          state.timeSeries[path].fulfilled = false\n          state.timeSeries[path].error = null\n        }\n      })\n      .addCase(getTimeSeriesAllData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.timeSeries[path] = {\n          type: 'timeSeries',\n          xrange: [],\n          data: {},\n          std: {},\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getTimeSeriesAllData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.timeSeries[path].pending = false\n        state.timeSeries[path].fulfilled = true\n        state.timeSeries[path].error = null\n        state.timeSeries[path].xrange = action.payload.xrange\n        state.timeSeries[path].data = action.payload.data\n        if (action.payload.std !== undefined) {\n          state.timeSeries[path].std = action.payload.std\n        }\n      })\n      .addCase(getHeatMapData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getHeatMapData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getHeatMapData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getImageData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getImageData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getImageData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getCsvData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getCsvData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getCsvData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getRoiData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getRoiData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getRoiData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getScatterData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getScatterData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getScatterData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getBarData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getBarData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getBarData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getHTMLData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.html[path] = {\n          type: 'html',\n          data: '',\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getHTMLData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.html[path] = {\n          type: 'html',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getHTMLData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.html[path] = {\n          type: 'html',\n          data: '',\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n  },\n})\n\nexport const { deleteDisplayItem } = displayDataSlice.actions\n\nexport default displayDataSlice.reducer\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { deleteVisualizeItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport {\n  selectVisualizeDataFilePath,\n  selectVisualizeDataType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { deleteDisplayItem } from 'store/slice/DisplayData/DisplayDataSlice'\n\nexport const DisplayItemDeleteButton = React.memo<{ itemId: number }>(\n  ({ itemId }) => {\n    const dispatch = useDispatch()\n\n    const dataType = useSelector(selectVisualizeDataType(itemId))\n    const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n    const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n      e.stopPropagation() // 親divのonClickを反応させないため\n      dispatch(deleteVisualizeItem(itemId))\n      // visualize Itemで同じpathのデータ個数を調べて、1だったら、displayも削除\n      dispatch(deleteDisplayItem({ dataType, filePath }))\n    }\n    return (\n      <IconButton onClick={onClick} size=\"large\">\n        <CloseIcon />\n      </IconButton>\n    )\n  },\n)\n","import React, { useCallback, useEffect } from 'react'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Button, LinearProgress, TextField, Typography } from '@mui/material'\n\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport { DisplayDataContext } from '../DataContext'\n\nimport {\n  selectImageDataError,\n  selectImageDataIsInitialized,\n  selectImageDataIsPending,\n  selectImageDataIsFulfilled,\n  selectActiveImageData,\n  selectRoiData,\n  selectImageDataEndIndex,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport {\n  getImageData,\n  getRoiData,\n  getTimeSeriesDataById,\n} from 'store/slice/DisplayData/DisplayDataActions'\nimport {\n  selectImageItemShowticklabels,\n  selectImageItemZsmooth,\n  selectImageItemShowLine,\n  selectImageItemShowGrid,\n  selectImageItemShowScale,\n  selectImageItemColors,\n  selectImageItemActiveIndex,\n  selectImageItemStartIndex,\n  selectImageItemEndIndex,\n  selectRoiItemFilePath,\n  selectMultiPlotTimeSeriesItemFilepath,\n  selectMultiPlotTimeSeriesItemDisplayNumbers,\n  selectRoiItemIndex,\n  selectImageItemRoiAlpha,\n  selectImageItemDuration,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  incrementImageActiveIndex,\n  setImageActiveIndex,\n  setImageItemDuration,\n  setTimeSeriesItemDisplayNumbers,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { RootState } from 'store/store'\nimport { Datum, LayoutAxis, PlotData } from 'plotly.js'\nimport createColormap from 'colormap'\nimport { getFileName } from 'store/slice/FlowElement/FlowElementUtils'\nimport Slider from '@mui/material/Slider'\nimport Box from '@mui/material/Box'\n\nexport const ImagePlot = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  const startIndex = useSelector(selectImageItemStartIndex(itemId))\n  const endIndex = useSelector(selectImageItemEndIndex(itemId))\n  const isPending = useSelector(selectImageDataIsPending(path))\n  const isInitialized = useSelector(selectImageDataIsInitialized(path))\n  const isFulfilled = useSelector(selectImageDataIsFulfilled(path))\n  const error = useSelector(selectImageDataError(path))\n\n  const roiFilePath = useSelector(selectRoiItemFilePath(itemId))\n\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(\n        getImageData({\n          path,\n          startIndex: startIndex ?? 1,\n          endIndex: endIndex ?? 10,\n        }),\n      )\n    }\n    if (roiFilePath != null) {\n      dispatch(getRoiData({ path: roiFilePath }))\n    }\n  }, [dispatch, isInitialized, path, startIndex, endIndex, roiFilePath])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <ImagePlotImple />\n  } else {\n    return null\n  }\n})\n\nconst ImagePlotImple = React.memo(() => {\n  const { itemId } = React.useContext(DisplayDataContext)\n  const activeIndex = useSelector(selectImageItemActiveIndex(itemId))\n  return (\n    <>\n      <ImagePlotChart activeIndex={activeIndex} />\n    </>\n  )\n})\n\nconst ImagePlotChart = React.memo<{\n  activeIndex: number\n}>(({ activeIndex }) => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const imageData = useSelector(\n    selectActiveImageData(path, activeIndex),\n    imageDataEqualtyFn,\n  )\n  const roiFilePath = useSelector(selectRoiItemFilePath(itemId))\n  const roiData = useSelector(\n    (state: RootState) =>\n      roiFilePath != null ? selectRoiData(roiFilePath)(state) : [],\n    imageDataEqualtyFn,\n  )\n\n  const maxSize = useSelector(selectImageDataEndIndex(path))\n  const showticklabels = useSelector(selectImageItemShowticklabels(itemId))\n  const showline = useSelector(selectImageItemShowLine(itemId))\n  const zsmooth = useSelector(selectImageItemZsmooth(itemId))\n  const showgrid = useSelector(selectImageItemShowGrid(itemId))\n  const showscale = useSelector(selectImageItemShowScale(itemId))\n  const colorscale = useSelector(selectImageItemColors(itemId))\n  const duration = useSelector(selectImageItemDuration(itemId))\n\n  const timeDataMaxIndex = useSelector(selectRoiItemIndex(itemId, roiFilePath))\n\n  const roiAlpha = useSelector(selectImageItemRoiAlpha(itemId))\n\n  const colorscaleRoi = createColormap({\n    colormap: 'jet',\n    nshades: 100, //timeDataMaxIndex >= 6 ? timeDataMaxIndex : 6,\n    format: 'rgba',\n    alpha: 1.0,\n  })\n\n  const data = React.useMemo(\n    () => [\n      {\n        z: imageData,\n        type: 'heatmap',\n        name: 'images',\n        colorscale: colorscale.map((value) => {\n          let offset: number = parseFloat(value.offset)\n          const offsets: number[] = colorscale.map((v) => {\n            return parseFloat(v.offset)\n          })\n          // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n          if (offset === Math.max(...offsets)) {\n            offset = 1.0\n          }\n          if (offset === Math.min(...offsets)) {\n            offset = 0.0\n          }\n          return [offset, value.rgb]\n        }),\n        hoverongaps: false,\n        showscale: showscale,\n        zsmooth: zsmooth, // ['best', 'fast', false]\n        // showlegend: true,\n      },\n      {\n        z: roiData,\n        type: 'heatmap',\n        name: 'roi',\n        hovertemplate: 'cell id: %{z}',\n        colorscale: [...Array(timeDataMaxIndex)].map((_, i) => {\n          const new_i = Math.floor(((i % 10) * 10 + i / 10) % 100)\n          const offset = i / (timeDataMaxIndex - 1)\n          const rgba = colorscaleRoi[new_i]\n          const hex = rgba2hex(rgba, roiAlpha)\n          return [offset, hex]\n        }),\n        zmin: 1,\n        zmax: timeDataMaxIndex,\n        hoverongaps: false,\n        zsmooth: false,\n        showscale: false,\n      },\n    ],\n    [\n      imageData,\n      roiData,\n      zsmooth,\n      showscale,\n      colorscale,\n      colorscaleRoi,\n      timeDataMaxIndex,\n      roiAlpha,\n    ],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: getFileName(path),\n      // width: 600,\n      // height: 600,\n      margin: {\n        t: 30, // top\n        l: 120, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan', //'select',\n      xaxis: {\n        autorange: true,\n        showgrid: showgrid,\n        showline: showline,\n        zeroline: false,\n        autotick: true,\n        ticks: '',\n        showticklabels: showticklabels,\n      },\n      yaxis: {\n        automargin: true,\n        autorange: 'reversed',\n        showgrid: showgrid,\n        showline: showline,\n        zeroline: false,\n        autotick: true, // todo\n        ticks: '',\n        showticklabels: showticklabels, // todo\n      },\n    }),\n    [path, showgrid, showline, showticklabels],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight, activeIndex])\n\n  const dispatch = useDispatch()\n  const timeSeriesFilePath = useSelector(\n    selectMultiPlotTimeSeriesItemFilepath(itemId),\n  )\n  const displayNumbers = useSelector(\n    selectMultiPlotTimeSeriesItemDisplayNumbers(itemId),\n  )\n\n  const onClick = (event: any) => {\n    const points: PlotDatum = event.points[0]\n    if (\n      timeSeriesFilePath !== null &&\n      displayNumbers !== null &&\n      points.curveNumber >= 1 &&\n      !displayNumbers.includes(points.z - 1)\n    ) {\n      const newValue = [...displayNumbers, points.z - 1]\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: newValue,\n        }),\n      )\n      dispatch(\n        getTimeSeriesDataById({\n          path: timeSeriesFilePath,\n          index: points.z - 1,\n        }),\n      )\n    }\n  }\n\n  const onSliderChange = (\n    event: Event,\n    value: number | number[],\n    activeThumb: number,\n  ) => {\n    if (typeof value === 'number') {\n      const newIndex = value - 1\n      if (newIndex !== activeIndex) {\n        dispatch(setImageActiveIndex({ itemId, activeIndex: newIndex }))\n      }\n    }\n  }\n\n  const intervalRef = React.useRef<null | NodeJS.Timeout>(null)\n\n  useEffect(() => {\n    if (intervalRef.current !== null) {\n      if (activeIndex >= maxSize) {\n        clearInterval(intervalRef.current)\n        intervalRef.current = null\n      }\n    }\n  }, [activeIndex, maxSize])\n\n  const onPlayClick = useCallback(() => {\n    if (activeIndex >= maxSize) {\n      dispatch(setImageActiveIndex({ itemId, activeIndex: 0 }))\n    }\n    if (intervalRef.current === null) {\n      intervalRef.current = setInterval(() => {\n        dispatch(incrementImageActiveIndex({ itemId }))\n      }, duration)\n    }\n  }, [activeIndex, maxSize, dispatch, duration, itemId])\n\n  const onPauseClick = () => {\n    if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current)\n      intervalRef.current = null\n    }\n  }\n\n  const onDurationChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue =\n        event.target.value === '' ? '' : Number(event.target.value)\n      if (typeof newValue === 'number') {\n        dispatch(setImageItemDuration({ itemId, duration: newValue }))\n      }\n    },\n    [dispatch, itemId],\n  )\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart\n        data={data}\n        layout={layout}\n        config={config}\n        onClick={onClick}\n      />\n      <Box sx={{ width: '50%' }}>\n        <Button variant=\"outlined\" onClick={onPlayClick}>\n          Play\n        </Button>\n        <Button variant=\"outlined\" onClick={onPauseClick}>\n          Pause\n        </Button>\n        duration:\n        <TextField\n          // error={inputError}\n          type=\"number\"\n          inputProps={{\n            step: 100,\n            min: 0,\n            max: 1000,\n          }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={onDurationChange}\n          value={duration}\n          // helperText={inputError ? 'index > 0' : undefined}\n        />\n        msec\n        <Typography>Index: {activeIndex + 1}</Typography>\n        <Slider\n          aria-label=\"Index\"\n          defaultValue={1}\n          value={activeIndex + 1}\n          valueLabelDisplay=\"auto\"\n          step={1}\n          marks\n          min={1}\n          max={maxSize + 1}\n          onChange={onSliderChange}\n        />\n      </Box>\n    </div>\n  )\n})\n\nfunction imageDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\ninterface PlotDatum {\n  curveNumber: number\n  data: PlotData\n  customdata: Datum\n  pointIndex: number\n  pointNumber: number\n  x: Datum\n  xaxis: LayoutAxis\n  y: Datum\n  yaxis: LayoutAxis\n  z: number\n}\n\nfunction rgba2hex(rgba: [number, number, number, number], alpha: number) {\n  const r = rgba[0]\n  const g = rgba[1]\n  const b = rgba[2]\n  const a = alpha\n\n  var outParts = [\n    r.toString(16),\n    g.toString(16),\n    b.toString(16),\n    Math.round(a * 255)\n      .toString(16)\n      .substring(0, 2),\n  ]\n\n  // Pad single-digit output values\n  outParts.forEach(function (part, i) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part\n    }\n  })\n\n  return '#' + outParts.join('')\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LegendClickEvent } from 'plotly.js'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectTimeSeriesData,\n  selectTimeSeriesDataError,\n  selectTimeSeriesDataIsFulfilled,\n  selectTimeSeriesDataIsInitialized,\n  selectTimeSeriesDataIsPending,\n  selectTimeSeriesStd,\n  selectTimeSeriesXrange,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getTimeSeriesDataById } from 'store/slice/DisplayData/DisplayDataActions'\nimport { TimeSeriesData } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectTimeSeriesItemCheckedList,\n  selectTimeSeriesItemDisplayNumbers,\n  selectTimeSeriesItemOffset,\n  selectTimeSeriesItemShowGrid,\n  selectTimeSeriesItemShowLine,\n  selectTimeSeriesItemShowTickLabels,\n  selectTimeSeriesItemSpan,\n  selectTimeSeriesItemXrange,\n  selectTimeSeriesItemZeroLine,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { setTimeSeriesItemCheckedList } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport createColormap from 'colormap'\nimport { setTimeSeriesItemDisplayNumbers } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { getFileName } from 'store/slice/FlowElement/FlowElementUtils'\n\nexport const TimeSeriesPlot = React.memo(() => {\n  const { itemId, filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n  const isPending = useSelector(selectTimeSeriesDataIsPending(path))\n  const isInitialized = useSelector(selectTimeSeriesDataIsInitialized(path))\n  const error = useSelector(selectTimeSeriesDataError(path))\n  const isFulfilled = useSelector(selectTimeSeriesDataIsFulfilled(path))\n\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getTimeSeriesDataById({ path, index: 0 }))\n    }\n  }, [dispatch, isInitialized, path, displayNumbers])\n\n  if (!isInitialized) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isPending || isFulfilled) {\n    return <TimeSeriesPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst TimeSeriesPlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  // 0番のデータとkeysだけをとってくる\n  const dispatch = useDispatch()\n  const timeSeriesData = useSelector(\n    selectTimeSeriesData(path),\n    timeSeriesDataEqualityFn,\n  )\n\n  const dataXrange = useSelector(selectTimeSeriesXrange(path))\n  const dataStd = useSelector(selectTimeSeriesStd(path))\n\n  const offset = useSelector(selectTimeSeriesItemOffset(itemId))\n  const span = useSelector(selectTimeSeriesItemSpan(itemId))\n  const showgrid = useSelector(selectTimeSeriesItemShowGrid(itemId))\n  const showline = useSelector(selectTimeSeriesItemShowLine(itemId))\n  const showticklabels = useSelector(selectTimeSeriesItemShowTickLabels(itemId))\n  const zeroline = useSelector(selectTimeSeriesItemZeroLine(itemId))\n  const xrange = useSelector(selectTimeSeriesItemXrange(itemId))\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n  const checkedList = useSelector(selectTimeSeriesItemCheckedList(itemId))\n\n  const colorScale = createColormap({\n    colormap: 'jet',\n    nshades: 100, //maxIndex >= 6 ? maxIndex : 6,\n    format: 'hex',\n    alpha: 1,\n  })\n\n  React.useEffect(() => {\n    const keys = Object.keys(timeSeriesData)\n    if (checkedList.length === 0 && keys.length !== 0) {\n      const checkedList = keys.map((_, i) => {\n        if (i === 0) {\n          return true\n        }\n        return false\n      })\n      dispatch(\n        setTimeSeriesItemCheckedList({\n          itemId,\n          checkedList,\n        }),\n      )\n    }\n  }, [timeSeriesData, dispatch, itemId, checkedList.length])\n\n  const data = React.useMemo(() => {\n    if (timeSeriesData === null) {\n      return []\n    }\n    return Object.keys(timeSeriesData).map((key, i) => {\n      let y = Object.values(timeSeriesData[key])\n      const new_i = Math.floor((i % 10) * 10 + i / 10) % 100\n\n      if (displayNumbers.includes(i)) {\n        if (offset) {\n          const activeIdx: number = displayNumbers.findIndex(\n            (value) => value === i,\n          )\n          const mean: number = y.reduce((a, b) => a + b) / y.length\n          const std: number =\n            span *\n            Math.sqrt(y.reduce((a, b) => a + Math.pow(b - mean, 2)) / y.length)\n          return {\n            name: `(${String(parseInt(key) + 1)})`,\n            x: dataXrange,\n            y: y.map((value) => (value - mean) / std + activeIdx),\n            visible: true,\n            line: { color: colorScale[new_i] },\n            error_y: {\n              type: 'data',\n              array: null,\n              visible: true,\n            },\n          }\n        } else {\n          return {\n            name: `(${String(parseInt(key) + 1)})`,\n            x: dataXrange,\n            y: y,\n            visible: true,\n            line: { color: colorScale[new_i] },\n            error_y: {\n              type: 'data',\n              array: Object.keys(dataStd).includes(key)\n                ? Object.values(dataStd[key])\n                : null,\n              visible: true,\n            },\n          }\n        }\n      } else {\n        return {\n          name: `(${String(parseInt(key) + 1)})`,\n          x: dataXrange,\n          y: y,\n          visible: 'legendonly',\n          line: { color: colorScale[new_i] },\n          error_y: {\n            type: 'data',\n            array: Object.keys(dataStd).includes(key)\n              ? Object.values(dataStd[key])\n              : null,\n            visible: true,\n          },\n        }\n      }\n    })\n  }, [\n    timeSeriesData,\n    displayNumbers,\n    offset,\n    span,\n    colorScale,\n    dataStd,\n    dataXrange,\n  ])\n\n  const annotations = React.useMemo(() => {\n    if (data.length !== 0) {\n      return displayNumbers.map((i) => {\n        return {\n          x: Number(dataXrange[dataXrange.length - 1]) + 50,\n          y: data[i].y[dataXrange.length - 1],\n          xref: 'x',\n          yref: 'y',\n          text: `cell: ${i + 1}`,\n          arrowhead: 1,\n          ax: 0,\n          ay: -10,\n        }\n      })\n    } else {\n      return []\n    }\n  }, [data, displayNumbers, dataXrange])\n\n  const layout = React.useMemo(\n    () => ({\n      title: getFileName(path),\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n      height: 300,\n      xaxis: {\n        range: [xrange.left, xrange.right],\n        showgrid: showgrid,\n        showline: showline,\n        showticklabels: showticklabels,\n        zeroline: zeroline,\n      },\n      yaxis: {\n        showgrid: showgrid,\n        showline: showline,\n        showticklabels: showticklabels,\n        zeroline: zeroline,\n      },\n      annotations: annotations,\n    }),\n    [path, xrange, showgrid, showline, showticklabels, zeroline, annotations],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  const onLegendClick = (event: LegendClickEvent) => {\n    const clickNumber = event.curveNumber\n\n    // set DisplayNumbers\n    if (displayNumbers.includes(clickNumber)) {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: displayNumbers.filter(\n            (value) => value !== clickNumber,\n          ),\n        }),\n      )\n\n      dispatch(\n        setTimeSeriesItemCheckedList({\n          itemId,\n          checkedList: checkedList.map((v, i) => {\n            if (i === clickNumber) {\n              return false\n            }\n            return v\n          }),\n        }),\n      )\n    } else {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: [...displayNumbers, clickNumber],\n        }),\n      )\n\n      dispatch(\n        setTimeSeriesItemCheckedList({\n          itemId,\n          checkedList: checkedList.map((v, i) => {\n            if (i === clickNumber) {\n              return true\n            }\n            return v\n          }),\n        }),\n      )\n\n      dispatch(getTimeSeriesDataById({ path, index: clickNumber }))\n    }\n\n    return false\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight])\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart\n        data={data}\n        layout={layout}\n        config={config}\n        onLegendClick={onLegendClick}\n      />\n    </div>\n  )\n})\n\nfunction timeSeriesDataEqualityFn(\n  a: TimeSeriesData | undefined,\n  b: TimeSeriesData | undefined,\n) {\n  if (a != null && b != null) {\n    const aArray = Object.entries(a)\n    const bArray = Object.entries(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every(([aKey, aValue], i) => {\n          const [bKey, bValue] = bArray[i]\n          return bKey === aKey && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\nfunction nestEqualityFun(\n  a: {\n    [key: number]: number\n  },\n  b: {\n    [key: number]: number\n  },\n) {\n  const aArray = Object.entries(a)\n  const bArray = Object.entries(b)\n  return (\n    a === b ||\n    (aArray.length === bArray.length &&\n      aArray.every(([aKey, aValue], i) => {\n        const [bKey, bValue] = bArray[i]\n        return bKey === aKey && bValue === aValue\n      }))\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectHeatMapData,\n  selectHeatMapDataError,\n  selectHeatMapDataIsFulfilled,\n  selectHeatMapDataIsInitialized,\n  selectHeatMapDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getHeatMapData } from 'store/slice/DisplayData/DisplayDataActions'\nimport {\n  selectHeatMapItemColors,\n  selectHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { getFileName } from 'store/slice/FlowElement/FlowElementUtils'\n\nexport const HeatMapPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectHeatMapDataIsPending(path))\n  const isInitialized = useSelector(selectHeatMapDataIsInitialized(path))\n  const error = useSelector(selectHeatMapDataError(path))\n  const isFulfilled = useSelector(selectHeatMapDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getHeatMapData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <HeatMapImple />\n  } else {\n    return null\n  }\n})\n\nconst HeatMapImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const heatMapData = useSelector(selectHeatMapData(path), heatMapDataEqualtyFn)\n  const showscale = useSelector(selectHeatMapItemShowScale(itemId))\n  const colorscale = useSelector(selectHeatMapItemColors(itemId))\n\n  const data = React.useMemo(\n    () =>\n      heatMapData != null\n        ? [\n            {\n              z: heatMapData,\n              x: heatMapData.map((_, i) => i),\n              y: heatMapData[0].map((_, i) => i),\n              type: 'heatmap',\n              name: 'heatmap',\n              colorscale: colorscale.map((value) => {\n                let offset: number = parseFloat(value.offset)\n                const offsets: number[] = colorscale.map((v) => {\n                  return parseFloat(v.offset)\n                })\n                // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n                if (offset === Math.max(...offsets)) {\n                  offset = 1.0\n                }\n                if (offset === Math.min(...offsets)) {\n                  offset = 0.0\n                }\n                return [offset, value.rgb]\n              }),\n              hoverongaps: false,\n              showlegend: true,\n              showscale: showscale,\n            },\n          ]\n        : [],\n    [heatMapData, showscale, colorscale],\n  )\n\n  const layout = {\n    title: getFileName(path),\n    dragmode: 'pan',\n    margin: {\n      t: 60, // top\n      l: 50, // left\n      b: 30, // bottom\n    },\n    autosize: true,\n    height: 350,\n  }\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  return <PlotlyChart data={data} layout={layout} config={config} />\n})\n\nfunction heatMapDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport FormControl from '@mui/material/FormControl'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport FormHelperText from '@mui/material/FormHelperText'\nimport Select from '@mui/material/Select'\nimport ListSubheader from '@mui/material/ListSubheader'\n\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport { RootState } from 'store/store'\nimport { selectInputNode } from 'store/slice/InputNode/InputNodeSelectors'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { selectNodeLabelById } from 'store/slice/FlowElement/FlowElementSelectors'\nimport {\n  selectPipelineLatestUid,\n  selectPipelineNodeResultSuccessList,\n} from 'store/slice/Pipeline/PipelineSelectors'\nimport { getFileName } from 'store/slice/FlowElement/FlowElementUtils'\n\nexport const FilePathSelect: React.FC<{\n  dataType?: DATA_TYPE\n  selectedNodeId: string | null\n  selectedFilePath: string | null\n  onSelect: (nodeId: string, filePath: string, dataType: DATA_TYPE) => void\n  label?: string\n}> = ({ dataType, selectedNodeId, selectedFilePath, onSelect, label }) => {\n  const inputNodeFilePathInfoList = useSelector(\n    (state: RootState) => {\n      const inputNodes = selectInputNode(state)\n      return Object.entries(inputNodes)\n        .map(([nodeId, inputNode]) => ({\n          nodeId,\n          filePath: inputNode.selectedFilePath,\n          fileType: inputNode.fileType,\n          dataType: toDataTypeFromFileType(inputNode.fileType),\n          nodeName: selectNodeLabelById(nodeId)(state),\n        }))\n        .filter(({ filePath }) => filePath != null)\n        .filter(({ dataType: inputNodeDataType }) =>\n          dataType != null ? inputNodeDataType === dataType : true,\n        )\n    },\n    // todo 比較関数\n  )\n\n  const latestUid = useSelector(selectPipelineLatestUid)\n\n  const algorithmNodeOutputPathInfoList = useSelector((state: RootState) => {\n    if (latestUid != null) {\n      const runResult = selectPipelineNodeResultSuccessList(state)\n      return runResult.map(({ nodeId, nodeResult }) => {\n        return {\n          nodeId,\n          nodeName: selectNodeLabelById(nodeId)(state),\n          paths: Object.entries(nodeResult.outputPaths)\n            .map(([outputKey, value]) => {\n              return {\n                outputKey,\n                filePath: value.path,\n                type: value.type,\n              }\n            })\n            .filter(({ type }) =>\n              dataType != null ? type === dataType : true,\n            ),\n        }\n      })\n    } else {\n      return []\n    }\n  })\n\n  const [open, setOpen] = React.useState(false)\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const onSelectHandle = (\n    nodeId: string,\n    filePath: string,\n    dataType: DATA_TYPE,\n  ) => {\n    onSelect(nodeId, filePath, dataType)\n    handleClose()\n  }\n\n  const menuItemList: React.ReactElement[] = []\n  inputNodeFilePathInfoList.forEach((pathInfo) => {\n    const filePath = pathInfo.filePath\n    if (Array.isArray(filePath)) {\n      filePath.forEach((pathElm) => {\n        menuItemList.push(\n          <MenuItem\n            value={`${pathInfo.nodeId}/${pathElm}`}\n            onClick={() =>\n              onSelectHandle(pathInfo.nodeId, pathElm ?? '', pathInfo.dataType)\n            }\n            key={pathInfo.nodeId}\n          >\n            {getFileName(pathElm)}\n          </MenuItem>,\n        )\n      })\n    } else {\n      menuItemList.push(\n        <MenuItem\n          value={`${pathInfo.nodeId}/${pathInfo.filePath}`}\n          onClick={() =>\n            onSelectHandle(pathInfo.nodeId, filePath ?? '', pathInfo.dataType)\n          }\n          key={pathInfo.nodeId}\n        >\n          {pathInfo.nodeName}\n        </MenuItem>,\n      )\n    }\n  })\n  algorithmNodeOutputPathInfoList.forEach((pathInfo) => {\n    menuItemList.push(<ListSubheader>{pathInfo.nodeName}</ListSubheader>)\n    pathInfo.paths.forEach((outputPath, i) => {\n      menuItemList.push(\n        <MenuItem\n          value={`${pathInfo.nodeId}/${outputPath.filePath}`}\n          onClick={() =>\n            onSelectHandle(\n              pathInfo.nodeId,\n              outputPath.filePath,\n              outputPath.type,\n            )\n          }\n          key={`${pathInfo.nodeId}/${outputPath.filePath}`}\n        >\n          {outputPath.outputKey}\n        </MenuItem>,\n      )\n    })\n  })\n\n  return (\n    <FormControl style={{ minWidth: 150, maxWidth: 220 }}>\n      <InputLabel>{!!label ? label : 'Select Item'}</InputLabel>\n      <Select\n        value={`${selectedNodeId}/${selectedFilePath}`}\n        open={open}\n        onClose={handleClose}\n        onOpen={handleOpen}\n      >\n        {menuItemList}\n      </Select>\n      {inputNodeFilePathInfoList.length +\n        algorithmNodeOutputPathInfoList.length ===\n        0 && <FormHelperText error={true}>no data</FormHelperText>}\n    </FormControl>\n  )\n}\n\nfunction toDataTypeFromFileType(fileType: FILE_TYPE) {\n  switch (fileType) {\n    case FILE_TYPE_SET.IMAGE:\n      return DATA_TYPE_SET.IMAGE\n    case FILE_TYPE_SET.CSV:\n      return DATA_TYPE_SET.CSV\n    case FILE_TYPE_SET.HDF5:\n      return DATA_TYPE_SET.HDF5\n  }\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\n\nimport {\n  selectMultiPlotImageItemNodeId,\n  selectMultiPlotImageItemFilePath,\n  selectMultiPlotTimeSeriesItemNodeId,\n  selectMultiPlotTimeSeriesItemFilePath,\n  selectMultiPlotHeatMapItemNodeId,\n  selectMultiPlotHeatMapItemFilePath,\n  selectMultiPlotRoiItemNodeId,\n  selectMultiPlotRoiItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { DATA_TYPE_SET } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  setHeatMapItemFilePath,\n  setImageItemFilePath,\n  setTimeSeriesItemFilePath,\n  setRoiItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { ImagePlot } from './Plot/ImagePlot'\nimport { DisplayDataContext } from './DataContext'\nimport { TimeSeriesPlot } from './Plot/TimeSeriesPlot'\nimport { HeatMapPlot } from './Plot/HeatMapPlot'\nimport { FilePathSelect } from './FilePathSelect'\n\nexport const MultiPlotItem = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const dispatch = useDispatch()\n  return (\n    <>\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.IMAGE}\n        selectedNodeId={useSelector(selectMultiPlotImageItemNodeId(itemId))}\n        selectedFilePath={useSelector(selectMultiPlotImageItemFilePath(itemId))}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setImageItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select image\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.TIME_SERIES}\n        selectedNodeId={useSelector(\n          selectMultiPlotTimeSeriesItemNodeId(itemId),\n        )}\n        selectedFilePath={useSelector(\n          selectMultiPlotTimeSeriesItemFilePath(itemId),\n        )}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setTimeSeriesItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select timeseries\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.HEAT_MAP}\n        selectedNodeId={useSelector(selectMultiPlotHeatMapItemNodeId(itemId))}\n        selectedFilePath={useSelector(\n          selectMultiPlotHeatMapItemFilePath(itemId),\n        )}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setHeatMapItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select heatmap\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.ROI}\n        selectedNodeId={useSelector(selectMultiPlotRoiItemNodeId(itemId))}\n        selectedFilePath={useSelector(selectMultiPlotRoiItemFilePath(itemId))}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setRoiItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select roi\"\n      />\n      <MultiPlot itemId={itemId} />\n    </>\n  )\n})\n\nconst MultiPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  return (\n    <Grid container>\n      <Grid item xs={7}>\n        <StyledPaper>\n          <MultiImagePlot itemId={itemId} />\n        </StyledPaper>\n      </Grid>\n      <Grid item xs={5}>\n        <Grid>\n          <StyledPaper>\n            <MultiTimeSeriesPlot itemId={itemId} />\n          </StyledPaper>\n          <StyledPaper>\n            <MultiHeatMapPlot itemId={itemId} />\n          </StyledPaper>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n})\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(1),\n  margin: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}))\n\nconst MultiImagePlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotImageItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotImageItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType: DATA_TYPE_SET.IMAGE, itemId }}\n      >\n        <ImagePlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst MultiTimeSeriesPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotTimeSeriesItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotTimeSeriesItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{\n          nodeId,\n          filePath,\n          dataType: DATA_TYPE_SET.TIME_SERIES,\n          itemId,\n        }}\n      >\n        <TimeSeriesPlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst MultiHeatMapPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotHeatMapItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotHeatMapItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType: DATA_TYPE_SET.HEAT_MAP, itemId }}\n      >\n        <HeatMapPlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n","import React from 'react'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectRoiData,\n  selectRoiDataError,\n  selectRoiDataIsFulfilled,\n  selectRoiDataIsInitialized,\n  selectRoiDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { LinearProgress, Typography } from '@mui/material'\nimport { getRoiData } from 'store/slice/DisplayData/DisplayDataActions'\nimport createColormap from 'colormap'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\nimport { getFileName } from 'store/slice/FlowElement/FlowElementUtils'\n\nexport const RoiPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const isPending = useSelector(selectRoiDataIsPending(path))\n  const isInitialized = useSelector(selectRoiDataIsInitialized(path))\n  const isFulfilled = useSelector(selectRoiDataIsFulfilled(path))\n  const error = useSelector(selectRoiDataError(path))\n\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getRoiData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <RoiPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst RoiPlotImple = React.memo<{}>(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const imageData = useSelector(selectRoiData(path), imageDataEqualtyFn)\n\n  const colorscale: ColorType[] = createColormap({\n    colormap: 'jet',\n    nshades: 10,\n    format: 'hex',\n    alpha: 1,\n  }).map((v, idx) => {\n    return { rgb: v, offset: String(idx / 9) }\n  })\n\n  const data = React.useMemo(\n    () => [\n      {\n        z: imageData,\n        type: 'heatmap',\n        name: 'roi',\n        colorscale: colorscale.map((value) => {\n          let offset: number = parseFloat(value.offset)\n          const offsets: number[] = colorscale.map((v) => {\n            return parseFloat(v.offset)\n          })\n          // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n          if (offset === Math.max(...offsets)) {\n            offset = 1.0\n          }\n          if (offset === Math.min(...offsets)) {\n            offset = 0.0\n          }\n          return [offset, value.rgb]\n        }),\n        hoverongaps: false,\n        // zsmooth: zsmooth, // ['best', 'fast', false]\n        zsmooth: false,\n        showlegend: true,\n      },\n    ],\n    [imageData, colorscale],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: getFileName(path),\n      margin: {\n        t: 30, // top\n        l: 120, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      xaxis: {\n        autorange: true,\n        zeroline: false,\n        autotick: true,\n        ticks: '',\n      },\n      yaxis: {\n        autorange: 'reversed',\n        zeroline: false,\n        autotick: true, // todo\n        ticks: '',\n      },\n    }),\n    [path],\n  )\n  const config = {\n    displayModeBar: true,\n    // scrollZoom: true,\n    responsive: true,\n  }\n  return (\n    <div className=\"imagePlotChart\">\n      <PlotlyChart data={data} layout={layout} config={config} />\n    </div>\n  )\n})\n\nfunction imageDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectScatterData,\n  selectScatterDataError,\n  selectScatterDataIsFulfilled,\n  selectScatterDataIsInitialized,\n  selectScatterDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getScatterData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { ScatterData } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectScatterItemXIndex,\n  selectScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { getFileName } from 'store/slice/FlowElement/FlowElementUtils'\n\nexport const ScatterPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectScatterDataIsPending(path))\n  const isInitialized = useSelector(selectScatterDataIsInitialized(path))\n  const error = useSelector(selectScatterDataError(path))\n  const isFulfilled = useSelector(selectScatterDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getScatterData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <ScatterPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst ScatterPlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  const scatterData = useSelector(\n    selectScatterData(path),\n    scatterDataEqualityFn,\n  )\n\n  const xIndex = useSelector(selectScatterItemXIndex(itemId))\n  const yIndex = useSelector(selectScatterItemYIndex(itemId))\n  const maxIndex = Object.keys(scatterData).length - 1\n\n  const data = React.useMemo(\n    () => [\n      {\n        x:\n          xIndex < maxIndex\n            ? Object.values(scatterData[xIndex])\n            : Object.values(scatterData[maxIndex]),\n        y:\n          yIndex < maxIndex\n            ? Object.values(scatterData[yIndex])\n            : Object.values(scatterData[maxIndex]),\n        type: 'scatter',\n        mode: 'markers', //'markers+text',\n        text: Object.keys(scatterData[0]),\n        textposition: 'top center',\n        textfont: {\n          family: 'Raleway, sans-serif',\n        },\n        marker: {\n          size: 5,\n          color: Object.keys(scatterData[0]),\n        },\n      },\n    ],\n    [scatterData, xIndex, yIndex, maxIndex],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: getFileName(path),\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n      xaxis: {\n        title: {\n          text: `x: ${\n            xIndex < Object.keys(scatterData).length ? xIndex : maxIndex\n          }`,\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f',\n          },\n        },\n      },\n      yaxis: {\n        title: {\n          text: `y: ${\n            yIndex < Object.keys(scatterData).length ? yIndex : maxIndex\n          }`,\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f',\n          },\n        },\n      },\n    }),\n    [xIndex, yIndex, maxIndex, path, scatterData],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight])\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart data={data} layout={layout} config={config} />\n    </div>\n  )\n})\n\nfunction scatterDataEqualityFn(\n  a: ScatterData | undefined,\n  b: ScatterData | undefined,\n) {\n  if (a != null && b != null) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every((aKey, i) => {\n          const bKey = bArray[i]\n          return bKey === aKey // && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\n// function nestEqualityFun(\n//   a: {\n//     [key: number]: number\n//   },\n//   b: {\n//     [key: number]: number\n//   },\n// ) {\n//   const aArray = Object.entries(a)\n//   const bArray = Object.entries(b)\n//   return (\n//     a === b ||\n//     (aArray.length === bArray.length &&\n//       aArray.every(([aKey, aValue], i) => {\n//         const [bKey, bValue] = bArray[i]\n//         return bKey === aKey && bValue === aValue\n//       }))\n//   )\n// }\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectBarData,\n  selectBarDataError,\n  selectBarDataIsFulfilled,\n  selectBarDataIsInitialized,\n  selectBarDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getBarData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { BarData } from 'store/slice/DisplayData/DisplayDataType'\nimport { getFileName } from 'store/slice/FlowElement/FlowElementUtils'\n\nexport const BarPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectBarDataIsPending(path))\n  const isInitialized = useSelector(selectBarDataIsInitialized(path))\n  const error = useSelector(selectBarDataError(path))\n  const isFulfilled = useSelector(selectBarDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getBarData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <BarPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst BarPlotImple = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n\n  const barData = useSelector(selectBarData(path), barDataEqualityFn)\n\n  const data = React.useMemo(\n    () => [\n      {\n        x: Object.keys(barData[0]),\n        y: Object.values(barData[0]),\n        type: 'bar',\n      },\n    ],\n    [barData],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: getFileName(path),\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n    }),\n    [path],\n  )\n\n  const config = {\n    displayModeBar: true,\n    // scrollZoom: true,\n    responsive: true,\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight])\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart data={data} layout={layout} config={config} />\n    </div>\n  )\n})\n\nfunction barDataEqualityFn(a: BarData | undefined, b: BarData | undefined) {\n  if (a != null && b != null) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every((aKey, i) => {\n          const bKey = bArray[i]\n          return bKey === aKey // && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectHTMLData,\n  selectHTMLDataError,\n  selectHTMLDataIsFulfilled,\n  selectHTMLDataIsInitialized,\n  selectHTMLDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getHTMLData } from 'store/slice/DisplayData/DisplayDataActions'\n\nexport const HTMLPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectHTMLDataIsPending(path))\n  const isInitialized = useSelector(selectHTMLDataIsInitialized(path))\n  const error = useSelector(selectHTMLDataError(path))\n  const isFulfilled = useSelector(selectHTMLDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getHTMLData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <HTMLPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst HTMLPlotImple = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const htmlData = useSelector(selectHTMLData(path))\n\n  return <div dangerouslySetInnerHTML={{ __html: htmlData }} />\n})\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectVisualizeDataFilePath,\n  selectVisualizeDataNodeId,\n  selectVisualizeDataType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { DisplayDataContext } from './DataContext'\nimport { HeatMapPlot } from './Plot/HeatMapPlot'\nimport { ImagePlot } from './Plot/ImagePlot'\nimport { RoiPlot } from './Plot/RoiPlot'\nimport { ScatterPlot } from './Plot/ScatterPlot'\nimport { CsvPlot } from './Plot/CsvPlot'\nimport { TimeSeriesPlot } from './Plot/TimeSeriesPlot'\nimport { BarPlot } from './Plot/BarPlot'\nimport { HTMLPlot } from './Plot/HTMLPlot'\n\nexport const DisplayDataItem = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const nodeId = useSelector(selectVisualizeDataNodeId(itemId))\n  const dataType = useSelector(selectVisualizeDataType(itemId))\n  if (filePath != null && dataType != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType, itemId }}\n      >\n        <DisplayPlot dataType={dataType} />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst DisplayPlot = React.memo<{\n  dataType: DATA_TYPE\n}>(({ dataType }) => {\n  switch (dataType) {\n    case DATA_TYPE_SET.CSV:\n      return <CsvPlot />\n    case DATA_TYPE_SET.TIME_SERIES:\n      return <TimeSeriesPlot />\n    case DATA_TYPE_SET.HEAT_MAP:\n      return <HeatMapPlot />\n    case DATA_TYPE_SET.IMAGE:\n      return <ImagePlot />\n    case DATA_TYPE_SET.ROI:\n      return <RoiPlot />\n    case DATA_TYPE_SET.SCATTER:\n      return <ScatterPlot />\n    case DATA_TYPE_SET.BAR:\n      return <BarPlot />\n    case DATA_TYPE_SET.HTML:\n      return <HTMLPlot />\n    default:\n      return null\n  }\n})\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { deleteVisualizeItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const MultiPlotDeleteButton = React.memo<{ itemId: number }>(\n  ({ itemId }) => {\n    const dispatch = useDispatch()\n\n    const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n      e.stopPropagation() // 親divのonClickを反応させないため\n      dispatch(deleteVisualizeItem(itemId))\n    }\n    return (\n      <IconButton onClick={onClick} size=\"large\">\n        <CloseIcon />\n      </IconButton>\n    )\n  },\n)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useTheme } from '@mui/material/styles'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\n\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\n\nimport {\n  selectSelectedVisualizeItemId,\n  selectVisualizeItemIdList,\n  selectVisualizeItemType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nimport { VisualizeItemAddButton } from './VisualizeItemAddButton'\nimport { DisplayItemDeleteButton } from './DisplayItemDeleteButton'\nimport { MultiPlotItem } from './MultiPlotItem'\nimport { DisplayDataItem } from './DisplayDataItem'\nimport { selectItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { RootState } from 'store/store'\nimport { MultiPlotDeleteButton } from './MultiPlotDeleteButton'\n\nexport const VisualizeItems: React.FC = () => {\n  return (\n    <>\n      <FlexItemList />\n    </>\n  )\n}\n\nconst FlexItemList: React.FC = () => {\n  const itemIdList = useSelector(selectVisualizeItemIdList, arrayEqualityFn)\n  return (\n    <Box display=\"flex\" flexWrap=\"wrap\" p={1} m={1}>\n      {itemIdList.map((itemId) => (\n        <Item itemId={itemId} key={itemId} />\n      ))}\n      <VisualizeItemAddButton />\n    </Box>\n  )\n}\n\nconst Item = React.memo<{ itemId: number }>(({ itemId }) => {\n  const itemType = useSelector(selectVisualizeItemType(itemId))\n\n  const dispatch = useDispatch()\n  const onSelect = () => {\n    dispatch(selectItem(itemId))\n  }\n  const isSelected = useSelector(\n    (state: RootState) => selectSelectedVisualizeItemId(state) === itemId,\n  )\n  const theme = useTheme()\n\n  return (\n    <Paper\n      variant=\"outlined\"\n      key={itemId}\n      style={{\n        width: '100%',\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n        cursor: 'pointer',\n        borderColor: isSelected ? theme.palette.primary.light : undefined,\n      }}\n      onClick={onSelect}\n    >\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n        <Box>\n          <DeleteButton itemType={itemType} itemId={itemId} />\n        </Box>\n      </Box>\n      <ItemByType itemType={itemType} itemId={itemId} />\n    </Paper>\n  )\n})\n\nconst DeleteButton: React.FC<{\n  itemType: string\n  itemId: number\n}> = ({ itemType, itemId }) => {\n  switch (itemType) {\n    case 'displayData':\n      return <DisplayItemDeleteButton itemId={itemId} />\n    case 'MultiPlot':\n      return <MultiPlotDeleteButton itemId={itemId} />\n    default:\n      throw new Error('itemType Error')\n  }\n}\n\nconst ItemByType = React.memo<{\n  itemType: string\n  itemId: number\n}>(({ itemType, itemId }) => {\n  switch (itemType) {\n    case 'MultiPlot':\n      return <MultiPlotItem itemId={itemId} />\n    case 'displayData':\n      return <DisplayDataItem itemId={itemId} />\n    default:\n      throw new Error('itemType Error')\n  }\n})\n","import React, { useState } from 'react'\n\nimport { GradientPickerPopover } from 'react-linear-gradient-picker'\nimport { SketchPicker } from 'react-color'\nimport { PALETTE_COLOR_SHAPE_TYPE } from 'react-linear-gradient-picker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const GradientColorPicker = React.memo<{\n  colors: { rgb: string; offset: string }[]\n  dispatchSetColor: (colorCode: ColorType[]) => void\n}>(({ colors, dispatchSetColor }) => {\n  const palette: PALETTE_COLOR_SHAPE_TYPE[] = colors.map((value) => {\n    return {\n      offset: value.offset,\n      color: value.rgb,\n    }\n  })\n\n  const onPaletteChange = (palette: PALETTE_COLOR_SHAPE_TYPE[]) => {\n    const colorCode = palette.map((value) => {\n      const color = value.color\n      const rgbStr = color.replace(/[^0-9,]/g, '').split(',')\n      const rgb = {\n        r: Number(rgbStr[0]),\n        g: Number(rgbStr[1]),\n        b: Number(rgbStr[2]),\n      }\n      return {\n        rgb: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`,\n        offset: value.offset,\n      }\n    })\n    dispatchSetColor(colorCode)\n  }\n\n  const [open, setOpen] = useState(false)\n\n  return (\n    <GradientPickerPopover\n      open={open}\n      setOpen={() => setOpen(!open)}\n      // showAnglePicker={true}\n      width={150}\n      maxStops={10}\n      paletteHeight={25}\n      palette={palette}\n      onPaletteChange={onPaletteChange}\n      flatStyle={true}\n    >\n      <WrappedSketchPicker />\n    </GradientPickerPopover>\n  )\n})\n\ntype WrapperPropTypes = {\n  onSelect?: (color: string, opacity?: number) => void\n  color?: string\n}\n\nconst WrappedSketchPicker: React.FC<WrapperPropTypes> = ({\n  onSelect,\n  color,\n}) => {\n  return (\n    <SketchPicker\n      color={color}\n      width=\"150px\"\n      // styles={{width: \"10px\"}}\n      onChange={(c) => {\n        const { r, g, b, a } = c.rgb\n        onSelect?.(`rgb(${r}, ${g}, ${b})`, a)\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Switch from '@mui/material/Switch'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\n\nimport {\n  selectImageItemShowGrid,\n  selectImageItemShowLine,\n  selectImageItemShowticklabels,\n  selectImageItemZsmooth,\n  selectImageItemShowScale,\n  selectImageItemColors,\n  selectRoiItemNodeId,\n  selectRoiItemFilePath,\n  selectImageItemStartIndex,\n  selectImageItemEndIndex,\n  selectImageItemRoiAlpha,\n  selectImageItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\n\nimport {\n  setImageItemShowGrid,\n  setImageItemShowLine,\n  setImageItemShowticklabels,\n  setImageItemZsmooth,\n  setImageItemShowScale,\n  setDisplayDataPath,\n  setImageItemStartIndex,\n  setImageItemEndIndex,\n  setImageItemColors,\n  setRoiItemFilePath,\n  resetImageActiveIndex,\n  setImageItemRoiAlpha,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nimport 'react-linear-gradient-picker/dist/index.css'\nimport { FileSelectImple } from 'components/FlowChart/FlowChartNode/FileSelect'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { FILE_TREE_TYPE_SET } from 'store/slice/FilesTree/FilesTreeType'\nimport { Box, TextField } from '@mui/material'\nimport { GradientColorPicker } from './GradientColorPicker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\nimport { FilePathSelect } from '../FilePathSelect'\nimport { DATA_TYPE_SET } from 'store/slice/DisplayData/DisplayDataType'\nimport Button from '@mui/material/Button'\nimport { getImageData } from 'store/slice/DisplayData/DisplayDataActions'\n\nexport const ImageItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const onSelectImageFile = (path: string) => {\n    dispatch(setDisplayDataPath({ nodeId: null, filePath: path, itemId }))\n  }\n  const filePath = useSelector(selectImageItemFilePath(itemId))\n\n  const { onUploadFile } = useFileUploader(FILE_TYPE_SET.IMAGE)\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n  }\n\n  const colors = useSelector(selectImageItemColors(itemId))\n  const dispathSetColor = (colorCode: ColorType[]) => {\n    dispatch(setImageItemColors({ itemId, colors: colorCode }))\n  }\n\n  const roiItemNodeId = useSelector(selectRoiItemNodeId(itemId))\n  const roiItemFilePath = useSelector(selectRoiItemFilePath(itemId))\n  const onSelectRoiFilePath = (nodeId: string, filePath: string) => {\n    dispatch(setRoiItemFilePath({ itemId, nodeId, filePath }))\n  }\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <FileSelectImple\n        filePath={filePath ?? ''}\n        onSelectFile={(path) => !Array.isArray(path) && onSelectImageFile(path)}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={FILE_TREE_TYPE_SET.IMAGE}\n        selectButtonLabel=\"Select Image\"\n      />\n      <StartEndIndex />\n      <Showticklabels />\n      <ShowLine />\n      <ShowGrid />\n      <ShowScale />\n      <Zsmooth />\n      <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} />\n      <div>\n        <h3>Roi Setting</h3>\n        <FilePathSelect\n          selectedFilePath={roiItemFilePath}\n          selectedNodeId={roiItemNodeId}\n          onSelect={onSelectRoiFilePath}\n          dataType={DATA_TYPE_SET.ROI}\n          label={'Select Roi'}\n        />\n        <RoiAlpha />\n      </div>\n    </div>\n  )\n}\n\nconst Showticklabels: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showticklabels = useSelector(selectImageItemShowticklabels(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(\n      setImageItemShowticklabels({ itemId, showticklabels: !showticklabels }),\n    )\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showticklabels} onChange={toggleChecked} />}\n      label=\"Showticklabels\"\n    />\n  )\n}\n\nconst ShowLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showline = useSelector(selectImageItemShowLine(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowLine({ itemId, showline: !showline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showline} onChange={toggleChecked} />}\n      label=\"ShowLine\"\n    />\n  )\n}\n\nconst ShowGrid: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showgrid = useSelector(selectImageItemShowGrid(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowGrid({ itemId, showgrid: !showgrid }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showgrid} onChange={toggleChecked} />}\n      label=\"ShowGrid\"\n    />\n  )\n}\n\nconst ShowScale: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showscale = useSelector(selectImageItemShowScale(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowScale({ itemId, showscale: !showscale }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showscale} onChange={toggleChecked} />}\n      label=\"ShowScale\"\n    />\n  )\n}\n\nconst Zsmooth: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const zsmooth = useSelector(selectImageItemZsmooth(itemId))\n  const dispatch = useDispatch()\n  const handleChange = (event: SelectChangeEvent<string | boolean>) => {\n    dispatch(setImageItemZsmooth({ itemId, zsmooth: event.target.value }))\n  }\n  return (\n    <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\n      <InputLabel>smooth</InputLabel>\n      <Select label=\"smooth\" value={zsmooth} onChange={handleChange}>\n        <MenuItem value={'best'}>best</MenuItem>\n        <MenuItem value={'fast'}>fast</MenuItem>\n        <MenuItem value={'false'}>False</MenuItem>\n      </Select>\n    </FormControl>\n  )\n}\n\nconst RoiAlpha: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const roiAlpha = useSelector(selectImageItemRoiAlpha(itemId))\n  const inputError = !(roiAlpha > 0)\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      dispatch(setImageItemRoiAlpha({ itemId, roiAlpha: newValue }))\n    }\n  }\n  return (\n    <>\n      <TextField\n        error={inputError}\n        type=\"number\"\n        inputProps={{\n          step: 0.1,\n          min: 0,\n          max: 1.0,\n        }}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onChange}\n        value={roiAlpha}\n        helperText={inputError ? 'index > 0' : undefined}\n      />\n      alpha\n    </>\n  )\n}\n\nconst StartEndIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const [startIndex, onChangeStartIndex] = React.useState(\n    useSelector(selectImageItemStartIndex(itemId)),\n  )\n  const [endIndex, onChangeEndIndex] = React.useState(\n    useSelector(selectImageItemEndIndex(itemId)),\n  )\n  const inputError = !(startIndex > 0)\n  const dispatch = useDispatch()\n  const onStartChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      onChangeStartIndex(newValue)\n    }\n  }\n  const onEndChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      onChangeEndIndex(newValue)\n    }\n  }\n\n  const filePath = useSelector(selectImageItemFilePath(itemId))\n  const onClickButton = () => {\n    if (startIndex > 0) {\n      dispatch(setImageItemStartIndex({ itemId, startIndex }))\n      dispatch(setImageItemEndIndex({ itemId, endIndex }))\n      dispatch(resetImageActiveIndex({ itemId, startIndex, endIndex }))\n      if (filePath !== null) {\n        dispatch(\n          getImageData({\n            path: filePath,\n            startIndex: startIndex ?? 1,\n            endIndex: endIndex ?? 10,\n          }),\n        )\n      }\n    }\n  }\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n      <TextField\n        error={inputError}\n        type=\"number\"\n        inputProps={{\n          step: 1,\n          min: 0,\n        }}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onStartChange}\n        value={startIndex}\n        helperText={inputError ? 'index > 0' : undefined}\n      />\n      ~\n      <TextField\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onEndChange}\n        value={endIndex}\n      />\n      <Button\n        size=\"small\"\n        className=\"ctrl_btn\"\n        variant=\"contained\"\n        onClick={onClickButton}\n      >\n        load\n      </Button>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FileSelectImple } from 'components/FlowChart/FlowChartNode/FileSelect'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport {\n  selectCsvItemSetColumn,\n  selectCsvItemSetIndex,\n  selectCsvItemTranspose,\n  selectVisualizeDataFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setCsvItemSetColumn,\n  setCsvItemSetIndex,\n  setCsvItemTranspose,\n  setDisplayDataPath,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { FILE_TREE_TYPE_SET } from 'store/slice/FilesTree/FilesTreeType'\nimport { FormControlLabel, Switch, TextField } from '@mui/material'\n\nexport const CsvItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const dispatch = useDispatch()\n  const onSelectFile = (path: string) => {\n    dispatch(setDisplayDataPath({ nodeId: null, filePath: path, itemId }))\n  }\n  const { onUploadFile } = useFileUploader(FILE_TYPE_SET.CSV)\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n  }\n\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <FileSelectImple\n        filePath={filePath ?? ''}\n        onSelectFile={(path) => !Array.isArray(path) && onSelectFile(path)}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={FILE_TREE_TYPE_SET.CSV}\n        selectButtonLabel=\"Select CSV\"\n      />\n      <Transpose />\n      <SetColumn />\n      <SetIndex />\n    </div>\n  )\n}\n\nconst Transpose: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const transpose = useSelector(selectCsvItemTranspose(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setCsvItemTranspose({ itemId, transpose: !transpose }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={transpose} onChange={toggleChecked} />}\n      label=\"transpose\"\n    />\n  )\n}\n\nconst SetColumn: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const setColumn = useSelector(selectCsvItemSetColumn(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeSetColumn = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue === null || newValue >= 0) {\n      dispatch(setCsvItemSetColumn({ itemId, setColumn: newValue }))\n    }\n  }\n\n  return (\n    <div>\n      <TextField\n        label=\"column\"\n        style={{ width: 50 }}\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onChangeSetColumn}\n        value={setColumn}\n      />\n    </div>\n  )\n}\n\nconst SetIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const setIndex = useSelector(selectCsvItemSetIndex(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setCsvItemSetIndex({ itemId, setIndex: !setIndex }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={setIndex} onChange={toggleChecked} />}\n      label=\"setIndex\"\n    />\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, Switch } from '@mui/material'\nimport {\n  selectHeatMapItemColors,\n  selectHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setHeatMapItemColors,\n  setHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport { GradientColorPicker } from './GradientColorPicker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const HeatmapItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const colors = useSelector(selectHeatMapItemColors(itemId))\n  const dispathSetColor = (colorCode: ColorType[]) => {\n    dispatch(setHeatMapItemColors({ itemId, colors: colorCode }))\n  }\n  return (\n    <>\n      <ShowScale />\n      <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} />\n    </>\n  )\n}\n\nconst ShowScale: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showscale = useSelector(selectHeatMapItemShowScale(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setHeatMapItemShowScale({ itemId, showscale: !showscale }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showscale} onChange={toggleChecked} />}\n      label=\"showscale\"\n    />\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, Switch, TextField } from '@mui/material'\nimport Box from '@mui/material/Box'\nimport Checkbox from '@mui/material/Checkbox'\nimport {\n  selectTimeSeriesItemCheckedList,\n  selectTimeSeriesItemDisplayNumbers,\n  selectTimeSeriesItemOffset,\n  selectTimeSeriesItemShowGrid,\n  selectTimeSeriesItemShowLine,\n  selectTimeSeriesItemShowTickLabels,\n  selectTimeSeriesItemSpan,\n  selectTimeSeriesItemXrange,\n  selectTimeSeriesItemZeroLine,\n  selectTimeSeriesItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport {\n  setTimeSeriesItemCheckedList,\n  setTimeSeriesItemDisplayNumbers,\n  setTimeSeriesItemOffset,\n  setTimeSeriesItemShowGrid,\n  setTimeSeriesItemShowLine,\n  setTimeSeriesItemShowTickLabels,\n  setTimeSeriesItemSpan,\n  setTimeSeriesItemXrangeLeft,\n  setTimeSeriesItemXrangeRight,\n  setTimeSeriesItemZeroLine,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport {\n  getTimeSeriesAllData,\n  getTimeSeriesDataById,\n} from 'store/slice/DisplayData/DisplayDataActions'\n\nexport const TimeSeriesItemEditor: React.FC = () => {\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <Offset />\n      <Span />\n      <ShowGrid />\n      <ShowLine />\n      <ShowTickLabels />\n      <ZeroLine />\n      <Xrange />\n      <LegendSelect />\n    </div>\n  )\n}\n\nconst Offset: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const offset = useSelector(selectTimeSeriesItemOffset(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemOffset({ itemId, offset: !offset }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={offset} onChange={toggleChecked} />}\n      label=\"offset\"\n    />\n  )\n}\n\nconst Span: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const span = useSelector(selectTimeSeriesItemSpan(itemId))\n\n  const dispatch = useDispatch()\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number' && newValue > 0) {\n      dispatch(setTimeSeriesItemSpan({ itemId, span: newValue }))\n    }\n  }\n  return (\n    <FormControlLabel\n      control={\n        <TextField\n          type=\"number\"\n          style={{ width: '6vw' }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={onChange}\n          defaultValue={span}\n        />\n      }\n      label=\"offset std\"\n    />\n  )\n}\n\nconst ShowGrid: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showgrid = useSelector(selectTimeSeriesItemShowGrid(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemShowGrid({ itemId, showgrid: !showgrid }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showgrid} onChange={toggleChecked} />}\n      label=\"showgrid\"\n    />\n  )\n}\n\nconst ShowLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showline = useSelector(selectTimeSeriesItemShowLine(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemShowLine({ itemId, showline: !showline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showline} onChange={toggleChecked} />}\n      label=\"showline\"\n    />\n  )\n}\n\nconst ShowTickLabels: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showticklabels = useSelector(selectTimeSeriesItemShowTickLabels(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(\n      setTimeSeriesItemShowTickLabels({\n        itemId,\n        showticklabels: !showticklabels,\n      }),\n    )\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showticklabels} onChange={toggleChecked} />}\n      label=\"showticklabels\"\n    />\n  )\n}\n\nconst ZeroLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const zeroline = useSelector(selectTimeSeriesItemZeroLine(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemZeroLine({ itemId, zeroline: !zeroline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={zeroline} onChange={toggleChecked} />}\n      label=\"zeroline\"\n    />\n  )\n}\n\nconst Xrange: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n\n  const xrange = useSelector(selectTimeSeriesItemXrange(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeLeft = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newLeft = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newLeft === 'number') {\n      dispatch(setTimeSeriesItemXrangeLeft({ itemId, left: newLeft }))\n    }\n  }\n  const onChangeRight = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newRight = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newRight === 'number') {\n      dispatch(setTimeSeriesItemXrangeRight({ itemId, right: newRight }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          left:\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            inputProps={{\n              step: 1,\n              min: 0,\n            }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeLeft}\n            defaultValue={xrange.left}\n          />\n          right:\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeRight}\n            defaultValue={xrange.right}\n          />\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n\nconst LegendSelect: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const checkedList = useSelector(selectTimeSeriesItemCheckedList(itemId))\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n  const filePath = useSelector(selectTimeSeriesItemFilePath(itemId))\n\n  const allHandleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(\n      setTimeSeriesItemCheckedList({\n        itemId,\n        checkedList: checkedList.map((_) => {\n          return event.target.checked\n        }),\n      }),\n    )\n\n    if (event.target.checked) {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: checkedList.map((_, i) => {\n            return i\n          }),\n        }),\n      )\n      if (filePath !== null) {\n        dispatch(getTimeSeriesAllData({ path: filePath }))\n      }\n    } else {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: [],\n        }),\n      )\n    }\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const index = parseInt(event.target.value)\n\n    // displayNumbers\n    if (event.target.checked) {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: [...displayNumbers, index],\n        }),\n      )\n    } else {\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: displayNumbers.filter((value) => value !== index),\n        }),\n      )\n    }\n\n    // CheckList\n    dispatch(\n      setTimeSeriesItemCheckedList({\n        itemId,\n        checkedList: checkedList.map((v, i) => {\n          if (i === index) {\n            return event.target.checked\n          }\n          return v\n        }),\n      }),\n    )\n\n    if (filePath !== null) {\n      dispatch(getTimeSeriesDataById({ path: filePath, index }))\n    }\n  }\n\n  const children = (\n    <Box sx={{ display: 'flex', flexDirection: 'column', ml: 3 }}>\n      {checkedList.map((v, i) => (\n        <FormControlLabel\n          key={`${i}`}\n          label={`Index ${i + 1}`}\n          control={<Checkbox checked={v} onChange={handleChange} value={i} />}\n        />\n      ))}\n    </Box>\n  )\n\n  return (\n    <div>\n      <FormControlLabel\n        label=\"All Check\"\n        control={\n          <Checkbox\n            checked={checkedList.every((v) => {\n              return v\n            })}\n            onChange={allHandleChange}\n          />\n        }\n      />\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n// import { useSelector, useDispatch } from 'react-redux'\n// import { SelectedItemIdContext } from '../VisualizeItemEditor'\n// import { selectRoiItemColors } from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n// import { setRoiItemColors } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n// import { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\n// import { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n// import { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const RoiItemEditor: React.FC = () => {\n  // const itemId = React.useContext(SelectedItemIdContext)\n  // const dispatch = useDispatch()\n  // const { onUploadFile } = useFileUploader(FILE_TYPE_SET.CSV)\n  // const onUploadFileHandle = (formData: FormData, fileName: string) => {\n  //   onUploadFile(formData, fileName)\n  // }\n\n  // const colors = useSelector(selectRoiItemColors(itemId))\n  // const dispathSetColor = (colorCode: ColorType[]) => {\n  //   dispatch(setRoiItemColors({ itemId, colors: colorCode }))\n  // }\n\n  return (\n    <>\n      {/* <GradientColorPicker /> */}\n      {/* <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} /> */}\n    </>\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, TextField } from '@mui/material'\nimport {\n  selectScatterItemXIndex,\n  selectScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setScatterItemXIndex,\n  setScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\n\nexport const ScatterItemEditor: React.FC = () => {\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <XIndex />\n      <YIndex />\n    </div>\n  )\n}\n\nconst XIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const xIndex = useSelector(selectScatterItemXIndex(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeXIndex = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue !== null && newValue >= 0) {\n      dispatch(setScatterItemXIndex({ itemId, xIndex: newValue }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeXIndex}\n            defaultValue={xIndex}\n          />\n          xIndex\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n\nconst YIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const yIndex = useSelector(selectScatterItemYIndex(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeYIndex = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue !== null && newValue >= 0) {\n      dispatch(setScatterItemYIndex({ itemId, yIndex: newValue }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeYIndex}\n            defaultValue={yIndex}\n          />\n          yIndex\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n","import React from 'react'\n\nexport const BarItemEditor: React.FC = () => {\n  return <div style={{ margin: '10px', padding: 10 }}></div>\n}\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport FormControl from '@mui/material/FormControl'\nimport Box from '@mui/material/Box'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  FormControlLabel,\n  Switch,\n  Typography,\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\nimport {\n  selectSelectedVisualizeItemId,\n  selectImageItemFilePath,\n  selectVisualizeDataNodeId,\n  selectVisualizeDataType,\n  selectVisualizeItemType,\n  selectVisualizeItemTypeIsMultiPlot,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { VISUALIZE_ITEM_TYPE_SET } from 'store/slice/VisualizeItem/VisualizeItemType'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  setDisplayDataPath,\n  toggleItemTypeMultiPlot,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { ImageItemEditor } from './Editor/ImageItemEditor'\nimport { CsvItemEditor } from './Editor/CsvItemEditor'\nimport { HeatmapItemEditor } from './Editor/HeatmapItemEditor'\nimport { TimeSeriesItemEditor } from './Editor/TimeSeriesItemEditor'\nimport { RoiItemEditor } from './Editor/RoiItemEditor'\nimport { FilePathSelect } from './FilePathSelect'\nimport { ScatterItemEditor } from './Editor/ScatterItemEditor'\nimport { BarItemEditor } from './Editor/BarItemEditor'\nimport { deleteDisplayItem } from 'store/slice/DisplayData/DisplayDataSlice'\n\nexport const VisualizeItemEditor = () => {\n  const selectedItemId = useSelector(selectSelectedVisualizeItemId)\n  return (\n    <>\n      {selectedItemId != null ? (\n        <SelectedItemIdContext.Provider value={selectedItemId}>\n          <Box m={1}>\n            <ItemTypeSelect />\n            <Editor />\n          </Box>\n        </SelectedItemIdContext.Provider>\n      ) : (\n        'Please select item...'\n      )}\n      <br />\n    </>\n  )\n}\n\nexport const SelectedItemIdContext = React.createContext<number>(NaN)\n\nconst ItemTypeSelect: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const isMultiPlot = useSelector(selectVisualizeItemTypeIsMultiPlot(itemId))\n  const onChageToggle = () => {\n    dispatch(toggleItemTypeMultiPlot(itemId))\n  }\n  return (\n    <FormControl style={{ minWidth: 120, marginBottom: 12 }}>\n      <FormControlLabel\n        control={<Switch checked={isMultiPlot} onChange={onChageToggle} />}\n        label=\"Multi plot\"\n      />\n    </FormControl>\n  )\n}\n\nconst Editor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const itemType = useSelector(selectVisualizeItemType(itemId))\n  switch (itemType) {\n    case VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT:\n      return <MultiPlotItemEditor />\n    case VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA:\n      return <DisplayDataItemEditor />\n  }\n}\n\nconst MultiPlotItemEditor: React.FC = () => {\n  return (\n    <div>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography>ImageEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <ImageItemEditor />\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2a-content\"\n          id=\"panel2a-header\"\n        >\n          <Typography>TimeSeriesEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <TimeSeriesItemEditor />\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel3a-content\"\n          id=\"panel3a-header\"\n        >\n          <Typography>HeatmapEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <HeatmapItemEditor />\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  )\n}\n\nconst DisplayDataItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dataType = useSelector(selectVisualizeDataType(itemId))\n  const selectedNodeId = useSelector(selectVisualizeDataNodeId(itemId))\n  const selectedFilePath = useSelector(selectImageItemFilePath(itemId))\n\n  const [prevItem, setPrevItem] = useState<{\n    dataType: DATA_TYPE\n    filePath: string | null\n  }>({\n    dataType: 'image',\n    filePath: null,\n  })\n\n  useEffect(() => {\n    setPrevItem({ dataType, filePath: selectedFilePath })\n  }, [selectedFilePath, dataType])\n\n  const dispatch = useDispatch()\n  const onSelect = (nodeId: string, filePath: string, dataType: DATA_TYPE) => {\n    dispatch(setDisplayDataPath({ itemId, nodeId, filePath, dataType }))\n    dispatch(deleteDisplayItem(prevItem))\n  }\n\n  return (\n    <>\n      <FilePathSelect\n        selectedNodeId={selectedNodeId}\n        selectedFilePath={selectedFilePath}\n        onSelect={onSelect}\n      />\n      <div style={{ marginTop: 8 }}>\n        <DisplayEditor dataType={dataType} />\n      </div>\n    </>\n  )\n}\n\nconst DisplayEditor: React.FC<{\n  dataType: DATA_TYPE | null\n}> = ({ dataType }) => {\n  /* 他のtypeのEditorも必要になったら追加する */\n  switch (dataType) {\n    case DATA_TYPE_SET.IMAGE:\n      return <ImageItemEditor />\n    case DATA_TYPE_SET.CSV:\n      return <CsvItemEditor />\n    case DATA_TYPE_SET.HEAT_MAP:\n      return <HeatmapItemEditor />\n    case DATA_TYPE_SET.TIME_SERIES:\n      return <TimeSeriesItemEditor />\n    case DATA_TYPE_SET.ROI:\n      return <RoiItemEditor />\n    case DATA_TYPE_SET.SCATTER:\n      return <ScatterItemEditor />\n    case DATA_TYPE_SET.BAR:\n      return <BarItemEditor />\n    case DATA_TYPE_SET.HTML:\n      return <div>html editor</div>\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport { drawerWidth } from 'components/FlowChart/FlowChart'\nimport { VisualizeItems } from './VisualizeItems'\nimport { VisualizeItemEditor } from './VisualizeItemEditor'\n\nconst Visualize: React.FC = () => {\n  return (\n    <RootDiv>\n      <StyledDrawer variant=\"permanent\">\n        <MuiToolbar />\n        <StyledDrawerContents>\n          <VisualizeItemEditor />\n        </StyledDrawerContents>\n      </StyledDrawer>\n      <MainContents>\n        <MuiToolbar />\n        <VisualizeItems />\n      </MainContents>\n    </RootDiv>\n  )\n}\n\nconst RootDiv = styled('div')({\n  display: 'flex',\n})\n\nconst StyledDrawer = styled(Drawer)({\n  width: drawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: drawerWidth,\n  },\n})\n\nconst StyledDrawerContents = styled('div')({\n  overflow: 'auto',\n})\n\nconst MainContents = styled('main')({\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n  height: '100vh',\n})\n\nexport default Visualize\n","import { RootState } from 'store/store'\nimport { EXPERIMENTS_STATUS } from './ExperimentsType'\n\nconst selectExperiments = (state: RootState) => state.experiments\n\nexport const selectExperimentsSatusIsUninitialized = (state: RootState) =>\n  selectExperiments(state).status === 'uninitialized'\n\nexport const selectExperimentsSatusIsPending = (state: RootState) =>\n  selectExperiments(state).status === 'pending'\n\nexport const selectExperimentsSatusIsFulfilled = (state: RootState) =>\n  selectExperiments(state).status === 'fulfilled'\n\nexport const selectExperimentsSatusIsError = (state: RootState) =>\n  selectExperiments(state).status === 'error'\n\nexport const selectExperimentsErrorMessage = (state: RootState) => {\n  const experiments = selectExperiments(state)\n  if (experiments.status === 'error') {\n    return experiments.message\n  } else {\n    throw new Error('experiments status is not error')\n  }\n}\n\nexport const selectExperimentList = (state: RootState) => {\n  const experiments = selectExperiments(state)\n  if (experiments.status === 'fulfilled') {\n    return experiments.experimentList\n  } else {\n    throw new Error('experiments status is not fulfilled')\n  }\n}\n\nexport const selectExperimentUidList = (state: RootState) =>\n  Object.keys(selectExperimentList(state))\n\nexport const selectExperiment = (uid: string) => (state: RootState) =>\n  selectExperimentList(state)[uid]\n\nexport const selectExperimentTimeStamp = (uid: string) => (state: RootState) =>\n  selectExperiment(uid)(state).timestamp\n\nexport const selectExperimentName = (uid: string) => (state: RootState) =>\n  selectExperiment(uid)(state).name\n\nexport const selectExperimentStatus =\n  (uid: string) =>\n  (state: RootState): EXPERIMENTS_STATUS => {\n    const functions = selectExperimentList(state)[uid].functions\n    const statusList = Object.values(functions).map((f) => f.status)\n    if (statusList.findIndex((status) => status === 'error') >= 0) {\n      return 'error'\n    } else if (statusList.findIndex((status) => status === 'running') >= 0) {\n      return 'running'\n    } else {\n      return 'success'\n    }\n  }\n\nexport const selectExperimentFunctionNodeIdList =\n  (uid: string) => (state: RootState) =>\n    Object.keys(selectExperimentList(state)[uid].functions)\n\nexport const selectExperimentFunction =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentList(state)[uid].functions[nodeId]\n\nexport const selectExperimentFunctionName =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentFunction(uid, nodeId)(state).name\n\nexport const selectExperimentFunctionStatus =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentFunction(uid, nodeId)(state).status\n","import React from 'react'\nimport DoneIcon from '@mui/icons-material/Done'\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline'\nimport HorizontalRuleIcon from '@mui/icons-material/HorizontalRule'\n\nimport { EXPERIMENTS_STATUS } from 'store/slice/Experiments/ExperimentsType'\n\nexport const ExperimentStatusIcon = React.memo<{ status: EXPERIMENTS_STATUS }>(\n  ({ status }) => {\n    switch (status) {\n      case 'error':\n        return <ErrorOutlineIcon color=\"error\" />\n      case 'success':\n        return <DoneIcon color=\"success\" />\n      case 'running':\n        return <HorizontalRuleIcon color=\"inherit\" />\n    }\n  },\n)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Box from '@mui/material/Box'\nimport Collapse from '@mui/material/Collapse'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Typography from '@mui/material/Typography'\n\nimport { ExperimentUidContext } from './ExperimentTable'\nimport {\n  selectExperimentFunctionName,\n  selectExperimentFunctionNodeIdList,\n  selectExperimentFunctionStatus,\n} from 'store/slice/Experiments/ExperimentsSelectors'\nimport { ExperimentStatusIcon } from './ExperimentStatusIcon'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\n\nexport const CollapsibleTable: React.FC<{\n  open: boolean\n}> = ({ open }) => {\n  return (\n    <TableRow>\n      <TableCell sx={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <Box margin={1}>\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\n              Details\n            </Typography>\n            <Table size=\"small\" aria-label=\"purchases\">\n              <Head />\n              <Body />\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nconst Head: React.FC = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell>Function</TableCell>\n        <TableCell>nodeID</TableCell>\n        <TableCell>Success</TableCell>\n      </TableRow>\n    </TableHead>\n  )\n}\n\nconst Body: React.FC = () => {\n  const uid = React.useContext(ExperimentUidContext)\n  const nodeIdList = useSelector(\n    selectExperimentFunctionNodeIdList(uid),\n    arrayEqualityFn,\n  )\n  return (\n    <TableBody>\n      {nodeIdList.map((nodeId) => (\n        <TableRowOfFunction nodeId={nodeId} />\n      ))}\n    </TableBody>\n  )\n}\n\nconst TableRowOfFunction = React.memo<{ nodeId: string }>(({ nodeId }) => {\n  const uid = React.useContext(ExperimentUidContext)\n  const name = useSelector(selectExperimentFunctionName(uid, nodeId))\n  const status = useSelector(selectExperimentFunctionStatus(uid, nodeId))\n  return (\n    <TableRow key={nodeId}>\n      <TableCell component=\"th\" scope=\"row\">\n        {name}\n      </TableCell>\n      <TableCell>{nodeId}</TableCell>\n      <TableCell>\n        <ExperimentStatusIcon status={status} />\n      </TableCell>\n    </TableRow>\n  )\n})\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from '@mui/material/Button'\nimport Box from '@mui/material/Box'\nimport Alert from '@mui/material/Alert'\nimport AlertTitle from '@mui/material/AlertTitle'\nimport IconButton from '@mui/material/IconButton'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline'\nimport GetAppIcon from '@mui/icons-material/GetApp'\nimport ReplayIcon from '@mui/icons-material/Replay'\nimport { useSnackbar } from 'notistack'\n\nimport { CollapsibleTable } from './CollapsibleTable'\nimport {\n  selectExperimentsSatusIsUninitialized,\n  selectExperimentsSatusIsFulfilled,\n  selectExperimentTimeStamp,\n  selectExperimentName,\n  selectExperimentStatus,\n  selectExperimentsSatusIsError,\n  selectExperimentsErrorMessage,\n  selectExperimentList,\n} from 'store/slice/Experiments/ExperimentsSelectors'\nimport {\n  deleteExperimentByUid,\n  importExperimentByUid,\n} from 'store/slice/Experiments/ExperimentsActions'\nimport { getExperiments } from 'store/slice/Experiments/ExperimentsActions'\nimport { ExperimentStatusIcon } from './ExperimentStatusIcon'\nimport { AppDispatch } from 'store/store'\nimport { setRunBtnOption } from 'store/slice/Pipeline/PipelineSlice'\nimport { RUN_BTN_OPTIONS } from 'store/slice/Pipeline/PipelineType'\nimport { Experiment } from 'store/slice/Experiments/ExperimentsType'\nimport { TableSortLabel } from '@mui/material'\n\nexport const ExperimentTable: React.FC = () => {\n  const isUninitialized = useSelector(selectExperimentsSatusIsUninitialized)\n  const isFulfilled = useSelector(selectExperimentsSatusIsFulfilled)\n  const isError = useSelector(selectExperimentsSatusIsError)\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (isUninitialized) {\n      dispatch(getExperiments())\n    }\n  }, [dispatch, isUninitialized])\n  if (isFulfilled) {\n    return <TableImple />\n  } else if (isError) {\n    return <ExperimentsErrorView />\n  } else {\n    return null\n  }\n}\n\nconst ExperimentsErrorView: React.FC = () => {\n  const message = useSelector(selectExperimentsErrorMessage)\n  return (\n    <Alert severity=\"error\">\n      <AlertTitle>failed to get experiments...</AlertTitle>\n      {message}\n    </Alert>\n  )\n}\n\nexport const ExperimentUidContext = React.createContext<string>('')\n\nconst TableImple: React.FC = () => {\n  const experimentList = useSelector(selectExperimentList)\n  const dispatch = useDispatch()\n  const onClickReload = () => {\n    dispatch(getExperiments())\n  }\n\n  const [order, setOrder] = React.useState<Order>('asc')\n  const [sortTarget, setSortTarget] =\n    React.useState<keyof Experiment>('timestamp')\n  const sortHandler =\n    (property: keyof Experiment) => (event: React.MouseEvent<unknown>) => {\n      const isAsc = sortTarget === property && order === 'asc'\n      setOrder(isAsc ? 'desc' : 'asc')\n      setSortTarget(property)\n    }\n\n  return (\n    <Box>\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n        }}\n      >\n        <Button\n          sx={{\n            marginBottom: (theme) => theme.spacing(1),\n          }}\n          variant=\"outlined\"\n          endIcon={<ReplayIcon />}\n          onClick={onClickReload}\n        >\n          Reload\n        </Button>\n      </Box>\n      <TableContainer component={Paper} elevation={0} variant=\"outlined\">\n        <Table aria-label=\"collapsible table\">\n          <TableHead>\n            <Head order={order} sortHandler={sortHandler} />\n          </TableHead>\n          <TableBody>\n            {Object.values(experimentList)\n              .sort(getComparator(order, sortTarget))\n              .map((expData) => (\n                <ExperimentUidContext.Provider\n                  value={expData.uid}\n                  key={expData.uid}\n                >\n                  <Row />\n                </ExperimentUidContext.Provider>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  )\n}\n\nconst Head: React.FC<{\n  order: Order\n  sortHandler: any\n}> = ({ order, sortHandler }) => {\n  return (\n    <TableRow>\n      <TableCell />\n      <TableCell>\n        <TableSortLabel\n          active\n          direction={order}\n          onClick={sortHandler('timestamp')}\n        >\n          Timestamp\n        </TableSortLabel>\n      </TableCell>\n      <TableCell>\n        <TableSortLabel active direction={order} onClick={sortHandler('uid')}>\n          ID\n        </TableSortLabel>\n      </TableCell>\n      <TableCell>\n        <TableSortLabel active direction={order} onClick={sortHandler('name')}>\n          Name\n        </TableSortLabel>\n      </TableCell>\n      <TableCell>Success</TableCell>\n      <TableCell>Import</TableCell>\n      <TableCell>Delete</TableCell>\n    </TableRow>\n  )\n}\n\nconst Row: React.FC = () => {\n  const uid = React.useContext(ExperimentUidContext)\n  const timestamp = useSelector(selectExperimentTimeStamp(uid))\n  const status = useSelector(selectExperimentStatus(uid))\n  const name = useSelector(selectExperimentName(uid))\n  const [open, setOpen] = React.useState(false)\n  return (\n    <React.Fragment>\n      <TableRow\n        sx={{\n          '& > *': {\n            borderBottom: 'unset',\n          },\n          [`& .${tableCellClasses.root}`]: {\n            borderBottomWidth: 0,\n          },\n        }}\n      >\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen((prevOpen) => !prevOpen)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {timestamp}\n        </TableCell>\n        <TableCell>{uid}</TableCell>\n        <TableCell>{name}</TableCell>\n        <TableCell>\n          <ExperimentStatusIcon status={status} />\n        </TableCell>\n        <TableCell>\n          <ImportExperimentButton />\n        </TableCell>\n        <TableCell>\n          <DeleteExperimentButton />\n        </TableCell>\n      </TableRow>\n      <CollapsibleTable open={open} />\n    </React.Fragment>\n  )\n}\n\nconst ImportExperimentButton: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch()\n  const uid = React.useContext(ExperimentUidContext)\n  const { enqueueSnackbar } = useSnackbar()\n\n  const onClick = () => {\n    dispatch(importExperimentByUid(uid))\n      .unwrap()\n      .then(() =>\n        enqueueSnackbar('Successfully imported.', { variant: 'success' }),\n      )\n    dispatch(setRunBtnOption({ runBtnOption: RUN_BTN_OPTIONS.RUN_ALREADY }))\n  }\n  return (\n    <IconButton onClick={onClick}>\n      <GetAppIcon color=\"primary\" />\n    </IconButton>\n  )\n}\n\nconst DeleteExperimentButton: React.FC = () => {\n  const dispatch = useDispatch()\n  const uid = React.useContext(ExperimentUidContext)\n\n  const name = useSelector(selectExperimentName(uid))\n  const [open, setOpen] = React.useState(false)\n\n  const onClickOpen = () => {\n    setOpen(true)\n  }\n  const onClickCancel = () => {\n    setOpen(false)\n  }\n  const onClickOk = () => {\n    setOpen(false)\n    dispatch(deleteExperimentByUid(uid))\n  }\n  return (\n    <>\n      <IconButton onClick={onClickOpen}>\n        <DeleteOutlineIcon color=\"error\" />\n      </IconButton>\n      <Dialog open={open}>\n        <DialogTitle>Are you sure you want to delete {name}?</DialogTitle>\n        <DialogActions>\n          <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n            Cancel\n          </Button>\n          <Button onClick={onClickOk} variant=\"outlined\" autoFocus>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\ntype Order = 'asc' | 'desc'\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n","import React from 'react'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { ExperimentTable } from './ExperimentTable'\n\nconst Experiment: React.FC = () => {\n  return (\n    <div style={{ display: 'flex' }}>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          height: '100vh',\n          padding: 16,\n        }}\n      >\n        <MuiToolbar />\n        {/* <VisualizeItems /> */}\n        <ExperimentTable />\n      </main>\n    </div>\n  )\n}\n\nexport default Experiment\n","export default __webpack_public_path__ + \"static/media/optinist.8794a1aa.png\";","import React from 'react'\nimport AppBar from '@mui/material/AppBar'\nimport Tabs from '@mui/material/Tabs'\nimport Tab from '@mui/material/Tab'\nimport Typography from '@mui/material/Typography'\nimport Toolbar from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport FlowChart from './FlowChart/FlowChart'\nimport Visualize from './Visualize/Visualize'\nimport Experiment from './Experiment/Experiment'\nimport { useRunPipeline } from 'store/slice/Pipeline/PipelineHook'\nimport optinistLogo from './optinist.png'\n\nconst Layout: React.FC = () => {\n  const [value, setValue] = React.useState(0)\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue)\n  }\n\n  const runPipeline = useRunPipeline() // タブ切り替えによって結果取得処理が止まってしまうのを回避するため、タブの親レイヤーで呼び出している\n\n  return (\n    <RootDiv>\n      <StyledAppBar position=\"fixed\" color=\"inherit\">\n        <Toolbar variant=\"dense\">\n          <img src={optinistLogo} alt=\"optinist\" width={120} />\n          <Tabs\n            sx={{ width: '100%' }}\n            value={value}\n            onChange={handleChange}\n            centered\n            textColor=\"primary\"\n          >\n            <Tab label=\"Workflow\" {...a11yProps(0)} />\n            <Tab label=\"Visualize\" {...a11yProps(1)} />\n            <Tab label=\"Record\" {...a11yProps(2)} />\n          </Tabs>\n        </Toolbar>\n      </StyledAppBar>\n      <TabPanel value={value} index={0}>\n        <FlowChart {...runPipeline} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Visualize />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Experiment />\n      </TabPanel>\n    </RootDiv>\n  )\n}\n\nconst RootDiv = styled('div')(({ theme }) => ({\n  flexGrow: 1,\n  backgroundColor: theme.palette.background.paper,\n}))\n\nconst StyledAppBar = styled(AppBar)(({ theme }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  backgroundColor: '#C3EBE1',\n}))\n\ninterface TabPanelProps {\n  children?: React.ReactNode\n  index: any\n  value: any\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Typography>{children}</Typography>}\n    </div>\n  )\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  }\n}\n\nexport default Layout\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  selectPipelineIsCanceled,\n  selectPipelineIsStartedSuccess,\n  selectPipelineLatestUid,\n  selectPipelineStatus,\n  selectRunPostData,\n} from './PipelineSelectors'\nimport { run, pollRunResult, runByCurrentUid } from './PipelineActions'\nimport { cancelPipeline } from './PipelineSlice'\nimport { selectFilePathIsUndefined } from '../InputNode/InputNodeSelectors'\nimport { useSnackbar } from 'notistack'\nimport { RUN_STATUS } from './PipelineType'\n\nconst POLLING_INTERVAL = 5000\n\nexport type UseRunPipelineReturnType = ReturnType<typeof useRunPipeline>\n\nexport function useRunPipeline() {\n  const dispatch = useDispatch()\n  const uid = useSelector(selectPipelineLatestUid)\n  const isCanceled = useSelector(selectPipelineIsCanceled)\n  const isStartedSuccess = useSelector(selectPipelineIsStartedSuccess)\n  const filePathIsUndefined = useSelector(selectFilePathIsUndefined)\n  const runPostData = useSelector(selectRunPostData)\n  const handleRunPipeline = React.useCallback(\n    (name: string) => {\n      dispatch(run({ runPostData: { name, ...runPostData, forceRunList: [] } }))\n    },\n    [dispatch, runPostData],\n  )\n  const handleRunPipelineByUid = React.useCallback(() => {\n    dispatch(runByCurrentUid({ runPostData }))\n  }, [dispatch, runPostData])\n  const handleCancelPipeline = React.useCallback(() => {\n    if (uid != null) {\n      dispatch(cancelPipeline())\n    }\n  }, [dispatch, uid])\n  React.useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (isStartedSuccess && !isCanceled && uid != null) {\n        dispatch(pollRunResult({ uid: uid }))\n      }\n    }, POLLING_INTERVAL)\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [dispatch, uid, isCanceled, isStartedSuccess])\n  const status = useSelector(selectPipelineStatus)\n  const { enqueueSnackbar } = useSnackbar()\n  // タブ移動による再レンダリングするたびにスナックバーが実行されてしまう挙動を回避するために前回の値を保持\n  const [prevStatus, setPrevStatus] = React.useState(status)\n  React.useEffect(() => {\n    if (prevStatus !== status) {\n      if (status === RUN_STATUS.FINISHED) {\n        enqueueSnackbar('Finished', { variant: 'success' })\n      } else if (status === RUN_STATUS.ABORTED) {\n        enqueueSnackbar('Aborted', { variant: 'error' })\n      } else if (status === RUN_STATUS.CANCELED) {\n        enqueueSnackbar('Canceled', { variant: 'info' })\n      }\n      setPrevStatus(status)\n    }\n  }, [status, prevStatus, enqueueSnackbar])\n  return {\n    filePathIsUndefined,\n    uid,\n    status,\n    isStartedSuccess,\n    handleRunPipeline,\n    handleRunPipelineByUid,\n    handleCancelPipeline,\n  }\n}\n","import React from 'react'\nimport IconButton from '@mui/material/IconButton'\nimport Close from '@mui/icons-material/Close'\nimport { SnackbarProvider, SnackbarKey, useSnackbar } from 'notistack'\n\nimport AppLayout from './components/Layout'\n\nconst App: React.FC = () => {\n  return (\n    <SnackbarProvider\n      maxSnack={5}\n      action={(snackbarKey) => (\n        <SnackbarCloseButton snackbarKey={snackbarKey} />\n      )}\n    >\n      <AppLayout />\n    </SnackbarProvider>\n  )\n}\n\nconst SnackbarCloseButton: React.FC<{ snackbarKey: SnackbarKey }> = ({\n  snackbarKey,\n}) => {\n  const { closeSnackbar } = useSnackbar()\n  return (\n    <IconButton onClick={() => closeSnackbar(snackbarKey)} size=\"large\">\n      <Close style={{ color: 'white' }} />\n    </IconButton>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { createSlice } from '@reduxjs/toolkit'\nimport {\n  ALGORITHM_LIST_SLICE_NAME,\n  AlgorithmListType,\n} from './AlgorithmListType'\nimport { getAlgoList } from './AlgorithmListActions'\nimport { convertToAlgoListType } from './AlgorithmListUtils'\n\nconst initialState: AlgorithmListType = {\n  isLatest: false,\n  tree: {},\n}\n\nexport const algorithmListSlice = createSlice({\n  name: ALGORITHM_LIST_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getAlgoList.fulfilled, (state, action) => {\n      state.tree = convertToAlgoListType(action.payload)\n      state.isLatest = true\n    })\n  },\n})\n\nexport default algorithmListSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { FileUploader, FILE_UPLOADER_SLICE_NAME } from './FileUploaderType'\nimport { setUploadProgress, uploadFile } from './FileUploaderActions'\nimport { inistialUploaderState } from './FileUploaderInitlalState'\n\nconst initialState: FileUploader = {}\n\nexport const fileUploaderSlice = createSlice({\n  name: FILE_UPLOADER_SLICE_NAME,\n  initialState,\n  reducers: {\n    setFileUploaderStateById(state, action: PayloadAction<string>) {\n      state[action.payload] = inistialUploaderState\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(setUploadProgress, (state, action) => {\n        const { progess, requestId } = action.payload\n        state[requestId].uploadingProgress = progess\n      })\n      .addCase(uploadFile.pending, (state, action) => {\n        const { fileName, requestId } = action.meta.arg\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          fileName,\n          isUninitialized: false,\n          pending: true,\n          fulfilled: false,\n          uploadingProgress: 0,\n        }\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        const { requestId } = action.meta.arg\n        const { resultPath } = action.payload\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          path: resultPath,\n          pending: false,\n          fulfilled: true,\n        }\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        const { requestId } = action.meta.arg\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          pending: false,\n          fulfilled: false,\n          error: action.error.message,\n        }\n      })\n  },\n})\n\nexport const { setFileUploaderStateById } = fileUploaderSlice.actions\n\nexport default fileUploaderSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { uploadFile } from 'store/slice/FileUploader/FileUploaderActions'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n\nimport { getFilesTree } from './FilesTreeAction'\nimport {\n  FilesTree,\n  FILES_TREE_SLICE_NAME,\n  FILE_TREE_TYPE_SET,\n} from './FilesTreeType'\nimport { convertToTreeNodeType } from './FilesTreeUtils'\n\nconst initialState: FilesTree = {}\nexport const filesTreeSlice = createSlice({\n  name: FILES_TREE_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getFilesTree.pending, (state, action) => {\n        const fileType = action.meta.arg\n        state[fileType] = {\n          isLoading: true,\n          isLatest: false,\n          tree: [],\n        }\n      })\n      .addCase(getFilesTree.fulfilled, (state, action) => {\n        const fileTreeType = action.meta.arg\n        state[fileTreeType].tree = convertToTreeNodeType(action.payload)\n        state[fileTreeType].isLatest = true\n        state[fileTreeType].isLoading = false\n      })\n      .addCase(uploadFile.pending, (state, action) => {\n        const { fileType } = action.meta.arg\n        if (fileType === FILE_TYPE_SET.IMAGE) {\n          if (state[FILE_TREE_TYPE_SET.IMAGE] != null) {\n            state[FILE_TREE_TYPE_SET.IMAGE].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.IMAGE] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else if (fileType === FILE_TYPE_SET.CSV) {\n          if (state[FILE_TREE_TYPE_SET.CSV] != null) {\n            state[FILE_TREE_TYPE_SET.CSV].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.CSV] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else if (fileType === FILE_TYPE_SET.HDF5) {\n          if (state[FILE_TREE_TYPE_SET.HDF5] != null) {\n            state[FILE_TREE_TYPE_SET.HDF5].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.HDF5] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else {\n          if (state[FILE_TREE_TYPE_SET.ALL] != null) {\n            state[FILE_TREE_TYPE_SET.ALL].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.ALL] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        }\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        const { fileType } = action.meta.arg\n        if (fileType === FILE_TYPE_SET.IMAGE) {\n          state[FILE_TREE_TYPE_SET.IMAGE].isLatest = false\n        } else if (fileType === FILE_TYPE_SET.CSV) {\n          state[FILE_TREE_TYPE_SET.CSV].isLatest = false\n        } else if (fileType === FILE_TYPE_SET.HDF5) {\n          state[FILE_TREE_TYPE_SET.HDF5].isLatest = false\n        } else {\n          state[FILE_TREE_TYPE_SET.ALL].isLatest = false\n        }\n      })\n  },\n})\n\nexport default filesTreeSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport * as MuiColors from '@mui/material/colors'\n\nexport type HandleTypeColor = {\n  colorMap: { [type: string]: string }\n  /**\n   * HANDLE_COLOR_PRESET_MAPのkey\n   */\n  nextKey: number\n}\n\nconst initialState: HandleTypeColor = {\n  colorMap: {\n    ImageData: MuiColors.red[500],\n    IscellData: MuiColors.indigo[500],\n    TimeSeriesData: MuiColors.yellow[500],\n    Suite2pData: MuiColors.green[500],\n  },\n  nextKey: 0,\n}\n\nconst SLICE_NAME = 'handleTypeColor'\n\nexport const handleTypeColorSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {},\n})\n\nexport default handleTypeColorSlice.reducer\n","import { HDF5TreeDTO } from './HDF5Type'\n\nexport function convertToTreeNodeType(dto: HDF5TreeDTO[]): HDF5TreeDTO[] {\n  return dto.map((node) =>\n    node.isDir\n      ? {\n          name: node.name,\n          isDir: true,\n          nodes: convertToTreeNodeType(node.nodes),\n          path: node.path,\n        }\n      : {\n          name: node.name,\n          isDir: false,\n          shape: node.shape,\n          path: node.path,\n          nbytes: node.nbytes,\n        },\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { getHDF5Tree } from './HDF5Action'\nimport { HDF5Tree, HDF5_SLICE_NAME } from './HDF5Type'\nimport { convertToTreeNodeType } from './HDF5Utils'\n\nconst initialState: HDF5Tree = {\n  isLoading: false,\n  tree: [],\n}\nexport const HDF5Slice = createSlice({\n  name: HDF5_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getHDF5Tree.pending, (state, action) => {\n        state = {\n          isLoading: true,\n          tree: [],\n        }\n      })\n      .addCase(getHDF5Tree.fulfilled, (state, action) => {\n        state.tree = convertToTreeNodeType(action.payload)\n        state.isLoading = false\n      })\n  },\n})\n\nexport default HDF5Slice.reducer\n","import type { ExperimentDTO, ExperimentsDTO } from 'api/experiments/Experiments'\nimport type {\n  ExperimentListType,\n  ExperimentType,\n  ExperimentFunction,\n  EXPERIMENTS_STATUS,\n} from './ExperimentsType'\n\nexport function convertToExperimentListType(\n  dto: ExperimentsDTO,\n): ExperimentListType {\n  const experimentList: ExperimentListType = {}\n  Object.entries(dto).forEach(([uid, value]) => {\n    experimentList[uid] = convertToExperimentType(value)\n  })\n  return experimentList\n}\n\nexport function convertToExperimentType(dto: ExperimentDTO): ExperimentType {\n  const functions: { [nodeId: string]: ExperimentFunction } = {}\n  Object.entries(dto.function).forEach(([_, value]) => {\n    functions[value.unique_id] = {\n      name: value.name,\n      nodeId: value.unique_id,\n      postion: value.position,\n      status: convertToExperimentStatus(value.success),\n    }\n  })\n  return {\n    uid: dto.unique_id,\n    timestamp: dto.timestamp,\n    name: dto.name,\n    functions,\n  }\n}\n\nfunction convertToExperimentStatus(dto: string): EXPERIMENTS_STATUS {\n  switch (dto) {\n    case 'running':\n      return 'running'\n    case 'success':\n      return 'success'\n    case 'error':\n      return 'error'\n    default:\n      throw new Error('failed to convert to EXPERIMENTS_STATUS')\n  }\n}\n\nexport function convertToFlowChartList(\n  dto: ExperimentsDTO,\n): ExperimentListType {\n  const experimentList: ExperimentListType = {}\n  Object.entries(dto).forEach(([uid, value]) => {\n    experimentList[uid] = convertToExperimentType(value)\n  })\n  return experimentList\n}\n","import { createSlice, isAnyOf } from '@reduxjs/toolkit'\nimport { EXPERIMENTS_SLICE_NAME, Experiments } from './ExperimentsType'\nimport { getExperiments, deleteExperimentByUid } from './ExperimentsActions'\nimport { convertToExperimentListType } from './ExperimentsUtils'\nimport {\n  pollRunResult,\n  run,\n  runByCurrentUid,\n} from '../Pipeline/PipelineActions'\n\nconst initialState: Experiments = {\n  status: 'uninitialized',\n}\n\nexport const experimentsSlice = createSlice({\n  name: EXPERIMENTS_SLICE_NAME,\n  initialState: initialState as Experiments,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getExperiments.pending, () => {\n        return {\n          status: 'pending',\n        }\n      })\n      .addCase(getExperiments.fulfilled, (state, action) => {\n        const experimentList = convertToExperimentListType(action.payload)\n        return {\n          status: 'fulfilled',\n          experimentList,\n        }\n      })\n      .addCase(getExperiments.rejected, (state, action) => {\n        return {\n          status: 'error',\n          message: action.error.message,\n        }\n      })\n      .addCase(deleteExperimentByUid.fulfilled, (state, action) => {\n        if (action.payload && state.status === 'fulfilled') {\n          delete state.experimentList[action.meta.arg]\n        }\n      })\n      .addCase(pollRunResult.fulfilled, (state, action) => {\n        if (state.status === 'fulfilled') {\n          const uid = action.meta.arg.uid\n          const target = state.experimentList[uid]\n          Object.entries(action.payload).forEach(([nodeId, value]) => {\n            if (value.status === 'success') {\n              target.functions[nodeId].status = 'success'\n            } else if (value.status === 'error') {\n              target.functions[nodeId].status = 'error'\n            }\n          })\n        }\n      })\n      .addMatcher(isAnyOf(run.fulfilled, runByCurrentUid.fulfilled), () => {\n        return {\n          status: 'uninitialized',\n        }\n      })\n  },\n})\n\nexport default experimentsSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport {\n  algorithmListReducer,\n  algorithmNodeReducer,\n  displayDataReducer,\n  fileUploaderReducer,\n  flowElementReducer,\n  inputNodeReducer,\n  nwbReducer,\n  filesTreeReducer,\n  handleTypeColorReducer,\n  rightDrawerReducer,\n  visualaizeItemReducer,\n  snakemakeReducer,\n  pipelineReducer,\n  hdf5Reducer,\n  experimentsReducer,\n} from './slice'\n\nexport const store = configureStore({\n  reducer: {\n    algorithmList: algorithmListReducer,\n    algorithmNode: algorithmNodeReducer,\n    displayData: displayDataReducer,\n    fileUploader: fileUploaderReducer,\n    flowElement: flowElementReducer,\n    inputNode: inputNodeReducer,\n    handleColor: handleTypeColorReducer,\n    filesTree: filesTreeReducer,\n    nwb: nwbReducer,\n    rightDrawer: rightDrawerReducer,\n    visualaizeItem: visualaizeItemReducer,\n    snakemake: snakemakeReducer,\n    pipeline: pipelineReducer,\n    hdf5: hdf5Reducer,\n    experiments: experimentsReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\nexport type ThunkApiConfig<T = unknown, PendingMeta = unknown> = {\n  state: RootState\n  dispatch: AppDispatch\n  rejectValue: T\n  penfingMeta: PendingMeta\n}\n","import { createTheme } from '@mui/material/styles'\n\nexport const theme = createTheme({\n  components: {\n    MuiTextField: {\n      defaultProps: {\n        variant: 'standard',\n      },\n    },\n    MuiSelect: {\n      defaultProps: {\n        variant: 'standard',\n      },\n    },\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { store } from 'store/store'\n\nimport { ThemeProvider } from '@mui/material/styles'\nimport { theme } from './Theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}