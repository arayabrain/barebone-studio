{"version":3,"sources":["store/utils/param/ParamUtils.ts","store/slice/AlgorithmNode/AlgorithmNodeSelectors.ts","store/slice/AlgorithmList/AlgorithmListUtils.ts","store/slice/AlgorithmList/AlgorithmListSelectors.ts","store/slice/AlgorithmList/AlgorithmListType.ts","const/API.ts","store/slice/AlgorithmList/AlgorithmListActions.ts","store/slice/InputNode/InputNodeType.ts","store/slice/FlowElement/FlowElementType.ts","const/flowchart.ts","store/slice/FlowElement/FlowElementSlice.ts","store/slice/InputNode/InputNodeUtils.ts","store/slice/InputNode/InputNodeSelectors.ts","store/slice/FlowElement/FlowElementUtils.ts","store/slice/FlowElement/FlowElementSelectors.ts","components/FlowChart/TreeView.tsx","store/slice/InputNode/InputNodeSlice.ts","const/HandleColor.ts","store/slice/HandleTypeColor/HandleTypeColorSlice.ts","components/FlowChart/FlowChartNode/HandleColorHook.ts","store/slice/HandleTypeColor/HandleTypeColorSelectors.ts","store/slice/FilesTree/FilesTreeSelectors.ts","store/slice/FilesTree/FilesTreeType.ts","store/slice/FilesTree/FilesTreeAction.ts","components/FileSelectDialog.tsx","components/FlowChart/FlowChartNode/LinerProgressWithLabel.tsx","store/slice/FileUploader/FileUploaderType.ts","store/slice/FileUploader/FileUploaderActions.ts","store/slice/FileUploader/FileUploaderInitlalState.ts","store/slice/FileUploader/FileUploaderSelectors.ts","store/slice/FileUploader/FileUploaderHook.ts","components/FlowChart/FlowChartNode/FileSelect.tsx","components/FlowChart/FlowChartNode/FlowChartUtils.ts","components/FlowChart/FlowChartNode/ImageFileNode.tsx","store/slice/RightDrawer/RightDrawerSlice.ts","store/slice/NWB/NWBSelectors.ts","store/slice/Snakemake/SnakemakeSelectors.ts","store/slice/Pipeline/PipelineType.ts","store/slice/DisplayData/DisplayDataType.ts","store/slice/DisplayData/DisplayDataUtils.ts","store/slice/Pipeline/PipelineUtils.ts","store/slice/Pipeline/PipelineSelectors.ts","utils/EqualityUtils.ts","components/FlowChart/FlowChartNode/AlgorithmNode.tsx","store/slice/DisplayData/DisplayDataSelectors.ts","store/slice/DisplayData/DisplayDataActions.ts","components/Visualize/DataContext.tsx","store/slice/VisualizeItem/VisualizeItemType.ts","store/slice/VisualizeItem/VisualizeItemUtils.ts","store/slice/VisualizeItem/VisualizeItemSelectors.ts","components/Visualize/Plot/CsvPlot.tsx","components/FlowChart/FlowChartNode/CsvFileNode.tsx","store/slice/HDF5/HDF5Selectors.ts","store/slice/HDF5/HDF5Type.ts","store/slice/HDF5/HDF5Action.ts","components/FlowChart/FlowChartNode/HDF5FileNode.tsx","components/FlowChart/CustomEdge.tsx","components/FlowChart/ReactFlowComponent.tsx","store/slice/NWB/NWBAction.ts","store/slice/NWB/NWBType.ts","store/slice/NWB/NWBSlice.ts","components/Accordion.tsx","components/ParamFormItemCreator.tsx","components/FlowChart/NWB.tsx","store/slice/Snakemake/SnakemakeType.ts","store/slice/Snakemake/SnakemakeAction.ts","store/slice/Snakemake/SnakemakeSlice.ts","components/FlowChart/Snakemake.tsx","components/RunButtons.tsx","components/ToolBar.tsx","store/slice/RightDrawer/RightDrawerSelectors.ts","store/slice/AlgorithmNode/AlgorithmNodeType.ts","store/slice/AlgorithmNode/AlgorithmNodeActions.ts","store/slice/AlgorithmNode/AlgorithmNodeSlice.ts","components/FlowChart/AlgorithmParamForm.tsx","components/FlowChart/RightDrawer.tsx","components/FlowChart/FlowChart.tsx","store/slice/VisualizeItem/VisualizeItemSlice.ts","components/Visualize/VisualizeItemAddButton.tsx","store/slice/DisplayData/DisplayDataSlice.ts","components/Visualize/DisplayItemDeleteButton.tsx","components/Visualize/Plot/ImagePlot.tsx","components/Visualize/Plot/TimeSeriesPlot.tsx","components/Visualize/Plot/HeatMapPlot.tsx","components/Visualize/FilePathSelect.tsx","components/Visualize/MultiPlotItem.tsx","components/Visualize/Plot/RoiPlot.tsx","components/Visualize/Plot/ScatterPlot.tsx","components/Visualize/Plot/BarPlot.tsx","components/Visualize/DisplayDataItem.tsx","components/Visualize/MultiPlotDeleteButton.tsx","components/Visualize/VisualizeItems.tsx","components/Visualize/Editor/GradientColorPicker.tsx","components/Visualize/Editor/ImageItemEditor.tsx","components/Visualize/Editor/CsvItemEditor.tsx","components/Visualize/Editor/HeatmapItemEditor.tsx","components/Visualize/Editor/TimeSeriesItemEditor.tsx","components/Visualize/Editor/RoiItemEditor.tsx","components/Visualize/Editor/ScatterItemEditor.tsx","components/Visualize/Editor/BarItemEditor.tsx","components/Visualize/VisualizeItemEditor.tsx","components/Visualize/Visualize.tsx","store/slice/Experiments/ExperimentsSelectors.ts","components/Experiment/ExperimentStatusIcon.tsx","components/Experiment/CollapsibleTable.tsx","api/experiments/Experiments.ts","store/slice/Experiments/ExperimentsType.ts","store/slice/Experiments/ExperimentsActions.ts","components/Experiment/ExperimentTable.tsx","components/Experiment/Experiment.tsx","api/run/Run.ts","store/slice/Pipeline/PipelineActions.ts","store/slice/Pipeline/PipelineSlice.ts","store/slice/Pipeline/PipelineHook.ts","components/Layout.tsx","App.tsx","reportWebVitals.ts","store/slice/AlgorithmList/AlgorithmListSlice.ts","store/slice/FileUploader/FileUploaderSlice.ts","store/slice/FilesTree/FilesTreeUtils.ts","store/slice/FilesTree/FilesTreeSlice.ts","store/slice/HDF5/HDF5Utils.ts","store/slice/HDF5/HDF5Slice.ts","store/slice/Experiments/ExperimentsUtils.ts","store/slice/Experiments/ExperimentsSlice.ts","store/store.ts","Theme.ts","index.tsx"],"names":["getChildParam","path","ParamMap","result","Object","values","node","isParamChild","children","param","type","convertToParamMap","dto","keyList","entries","forEach","name","value","kList","Array","isArray","isDictObject","concat","join","push","selectAlgorithmNode","state","algorithmNode","selectAlgorithmFunctionPath","nodeId","functionPath","selectAlgorithmName","selectAlgorithmParams","params","isAlgoChild","algoNode","getAlgoChild","algoList","algoName","convertToAlgoListType","prototype","hasOwnProperty","call","args","returns","selectAlgorithmList","algorithmList","selectAlgorithmListIsLated","isLatest","selectAlgorithmListTree","tree","ALGORITHM_LIST_SLICE_NAME","HOST","process","PORT","BASE_URL","getAlgoList","createAsyncThunk","_","thunkAPI","a","rejectWithValue","axios","get","response","data","FILE_TYPE_SET","NODE_TYPE_SET","INITIAL_ALGO_STYLE","width","height","padding","borderRadius","INITIAL_DATA_STYLE","border","initialState","flowElements","id","label","style","position","x","y","flowPosition","zoom","elementCoord","flowElementSlice","createSlice","reducers","setFlowPosition","action","payload","setFlowElements","deleteFlowElements","removeElements","deleteFlowElementsById","element","find","edge","undefined","addFlowElementNode","targetPosition","Position","Left","sourcePosition","Right","edifFlowElementsLabelById","fileName","elementIdx","findIndex","ele","editFlowElementPositionById","coord","targetItem","isNode","setElementCoord","actions","isCsvInputNode","inputNode","fileType","isHDF5InputNode","selectInputNodeById","selectInputNodeDefined","keys","includes","selectInputNodeSelectedFilePath","selectedFilePath","selectFilePathIsUndefined","filter","length","selectCsvInputNodeParam","Error","selectInputNodeHDF5Path","item","hdf5Path","isNodeData","selectFlowElements","flowElement","selectFlowPosition","selectElementCoord","selectNodeById","selectNodeLabelById","AlgorithmTreeView","React","memo","dispatch","useDispatch","useSelector","useEffect","TreeView","sx","flexGrow","defaultCollapseIcon","defaultExpandIcon","TreeItem","InputNodeComponent","nodeName","map","i","AlgoNodeComponent","onAlgoNodeClick","newNode","nanoid","algoNodeInfo","toFixed","LeafItem","AddButton","onClick","nodeType","componentType","inputNodeInfo","onDataNodeClick","IconButton","size","Typography","variant","textOverflow","overflow","display","styled","treeItemClasses","iconContainer","margin","inputNodeSlice","deleteInputNode","setInputImageNodeFile","filePath","setInputNodeFilePath","setCsvInputNodeParam","setInputNodeHDF5Path","extraReducers","builder","addCase","setColumn","setIndex","transpose","HANDLE_COLOR_PRESET_MAP","Map","MuiColors","handleTypeColorSlice","colorMap","nextKey","addColor","nextColor","Math","floor","random","toString","useHandleColor","key","color","handleColor","selectFilesTree","filesTree","FILES_TREE_SLICE_NAME","FILE_TREE_TYPE_SET","getFilesTree","file_type","FileSelectDialog","open","onClickCancel","onClickOk","onClose","title","useState","clickedFilePath","setClickedFilePath","theme","useTheme","Dialog","fullWidth","DialogTitle","DialogContent","dividers","marginBottom","spacing","borderColor","palette","divider","FileTreeView","onClickFile","DialogActions","Button","selectFilesTreeNodes","selectFilesIsLatest","isLoading","selectFilesIsLoading","useFileTree","LinearProgress","TreeNode","isDir","icon","htmlColor","nodes","childNode","fontSize","LinearProgressWithLabel","props","Box","alignItems","mr","minWidth","round","FILE_UPLOADER_SLICE_NAME","setUploadProgress","createAction","uploadFile","requestId","formData","config","getUploadConfig","percent","total","progess","post","resultPath","file_path","onUpdateProgressFn","onUploadProgress","progressEvent","percentCompleted","loaded","inistialUploaderState","isUninitialized","pending","fulfilled","uploadingProgress","error","selectFileUploader","fileUploader","useFileUploader","useRef","onUploadFile","useCallback","current","uninitialized","selectFileUploadIsUninitialized","selectUploadFilePath","selectFileUploadIsPending","selectFileUploadIsFulfilled","progress","selectFileUploadProgress","selectFileUploadError","FileSelect","onChangeFilePath","uploadedFilePath","marginLeft","marginRight","FileSelectImple","onSelectFile","selectedPath","fileTreeType","selectButtonLabel","uploadButtonLabel","inputRef","setOpen","accept","getFileInputAccept","split","reverse","ButtonGroup","click","ref","onChange","event","preventDefault","target","files","file","FormData","append","visibility","className","toHandleId","getHandleType","handleId","isValidConnection","connection","sourceHandle","targetHandle","sourceHandleStyle","top","ImageFileNode","ImageFileNodeImple","elementSelected","selected","returnType","imageColor","background","alpha","primary","light","right","RIGHT_DRAWER_MODE","mode","currendNodeId","rightDrawerSlice","openRightDrawer","closeRightDrawer","toggleParamForm","toggleNwb","toggleSnakemake","elm","selectNwb","nwb","selectNwbParamsKeyList","selectNwbParam","paramKey","selectNwbParamsValue","selectSnakemakeParams","snakemake","selectSnakemake","selectSnakemakeParamsKeyList","selectSnakemakeParam","selectSnakemakeParamsValue","PIPELINE_SLICE_NAME","RUN_STATUS","NODE_RESULT_STATUS","DISPLAY_DATA_SLICE_NAME","DATA_TYPE_SET","toDataType","isNodeResultPending","nodeResult","status","isNodeResultSuccess","isStartedPipeline","pipeline","getInitialRunResult","runPostData","initialResult","nodeList","convertToOutputPath","selectPipelineLatestUid","history","uidHistory","slice","selectRunPostData","nwbParam","selectNwbParams","snakemakeParam","edgeListForRun","isEdge","selectEdgeListForRun","edgeList","selectNodePostDataListForRun","isAlgorithmNodeData","selectStartedPipeline","uid","pipelines","selectRunResultPendingNodeIdList","runResult","isNodeResultPendingAndNodeId","arg","isNodeResultSuccessAndNodeId","arrayEqualityFn","b","every","v","twoDimarrayEqualityFn","leftHandleStyle","rightHandleStyle","AlgorithmNode","AlgorithmNodeImple","isConnectable","latestUid","outputKeyList","outputPaths","selectPipelineNodeResultOutputKeyList","AlgoName","AlgoArgs","AlgoReturns","outputKey","message","selectPipelineNodeResultMessage","selectPipelineNodeResultStatus","paddingLeft","textAlign","main","ErrorMessage","algoArgs","algoListChild","selectAlgoArgs","algoInfoListEqualtyFn","info","algoInfo","ArgHandle","algoReturns","selectAlgoReturns","ReturnHandle","isNone","hex_color","isHover","setHover","rgb_color","hex","exec","parseInt","hexToRgb","onMouseEnter","onMouseLeave","Tooltip","placement","arrow","anchorElRef","prevOpen","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","FormHelperText","selectDisplayData","displayData","selectTimeSeriesDataIsInitialized","timeSeries","selectHeatMapDataIsInitialized","heatMap","selectImageData","image","selectImageDataIsInitialized","selectImageDataIsPending","selectCsvDataIsInitialized","csv","selectCsvDataError","selectCsvDataIsPending","selectCsvDataIsFulfilled","selectRoiData","roi","selectRoiDataIsInitialized","selectScatterDataIsInitialized","scatter","selectBarDataIsInitialized","bar","getTimeSeriesData","index","getHeatMapData","getImageData","startIndex","endIndex","start_index","end_index","getCsvData","getRoiData","getScatterData","getBarData","DisplayDataContext","createContext","dataType","itemId","NaN","VISUALIZE_ITEM_TYPE_SET","isMultiPlotItem","itemType","isDisplayDataItem","isImageItem","isTimeSeriesItem","isCsvItem","isHeatMapItem","isScatterItem","selectSelectedVisualizeItemId","visualaizeItem","selectedItemId","selectVisualizeItems","items","selectVisualizeItemIdList","Number","selectVisualizeItemType","selectMultiPlotImageItem","imageItem","selectMultiPlotImageItemNodeId","selectMultiPlotImageItemFilePath","selectMultiPlotTimeSeriesItem","timeSeriesItem","selectMultiPlotRoiItem","roiItem","selectMultiPlotRoiItemNodeId","selectMultiPlotRoiItemFilePath","selectMultiPlotTimeSeriesItemNodeId","selectMultiPlotTimeSeriesItemFilePath","selectMultiPlotHeatMapItem","heatMapItem","selectMultiPlotHeatMapItemNodeId","selectMultiPlotHeatMapItemFilePath","selectVisualizeDataType","selectVisualizeDataNodeId","selectVisualizeDataFilePath","selectRoiItemFilePath","selectImageItemShowticklabels","showticklabels","selectImageItemZsmooth","zsmooth","selectImageItemStartIndex","selectImageItemEndIndex","selectImageItemShowLine","showline","selectImageItemShowGrid","showgrid","selectImageItemShowScale","showscale","selectImageItemColors","colors","selectTimeSeriesItemOffset","offset","selectTimeSeriesItemSpan","span","selectTimeSeriesItemShowGrid","selectTimeSeriesItemShowLine","selectTimeSeriesItemShowTickLabels","selectTimeSeriesItemZeroLine","zeroline","selectTimeSeriesItemXrange","xrange","selectTimeSeriesItemDisplayNumbers","displayNumbers","selectRoiItemMaxNumber","roiFilePath","roiData","max","arr","selectHeatMapItemShowScale","selectHeatMapItemColors","selectCsvItemTranspose","selectCsvItemSetColumn","selectCsvItemSetIndex","selectScatterItemXIndex","xIndex","selectScatterItemYIndex","yIndex","CsvPlot","useContext","isInitialized","isPending","isFulfilled","CsvPlotImple","PresentationalCsvPlot","csvData","useMemo","col","row","columns","columnData","field","headerName","idx","rows","row_id","rowObj","fromEntries","CsvFileNode","CsvFileNodeImple","ParamSettingDialog","selectCsvInputNodeParamSetColumn","setSetColumn","selectCsvInputNodeParamSetIndex","setSetIndex","selectCsvInputNodeParamTranspose","setTranspose","p","m","FormControlLabel","control","Switch","checked","TextField","InputLabelProps","shrink","CsvPreview","otherProps","selectHDF5","hdf5","HDF5_SLICE_NAME","getHDF5Tree","HDF5FileNode","HDF5FileNodeImple","ItemSelect","structureFileName","Structure","autoFocus","useHDF5Tree","shape","nbytes","componentTypes","edgeTypes","buttonedge","sourceX","sourceY","targetX","targetY","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","getEdgeCenter","edgeCenterX","edgeCenterY","d","foreignObjectSize","ReactFlowComponent","reactFlowInstance","setReactFlowInstance","elements","onElementsRemove","elementsToRemove","onConnect","addEdge","animated","onLoad","_reactFlowInstance","onDrop","project","clientX","clientY","dataTransfer","getData","onDragOver","dropEffect","onNodeDragStop","nodeTypes","defaultPosition","defaultZoom","onMoveEnd","getNWBParams","nwbSlice","updateParam","newValue","targetNode","Accordion","disableGutters","elevation","square","boxShadow","borderBottom","createParamFormItemComponent","paramSelector","paramValueSelector","paramUpdateActionCreator","useParamValueUpdate","ParamItemForString","updateParamAction","e","multiline","ParamItemForNumber","ParamItemForBoolean","ParamItemForValueType","ParamChildItem","marginTop","verticalAlign","ParamItem","AccordionSummary","expandIcon","AccordionDetails","NWBSettingButton","NWBSettingContents","paramKeyList","Component","SNAKEMAKE_SLICE_NAME","getSnakemakeParams","SnakemakeSlice","SnakemakeButton","SnakemakeContents","RunButtons","filePathIsUndefined","handleCancelPipeline","handleRunPipeline","enqueueSnackbar","useSnackbar","prevStatus","setPrevStatus","endIcon","disabled","ToolBar","justifyContent","selectRightDrawerIsOpen","rightDrawer","selectRightDrawerMode","selectRightDrawerCurrentNodeId","ALGORITHM_NODE_SLICE_NAME","getAlgoParams","algorithmNodeSlice","setSelectedOutputKey","selectedOutputKey","meta","AlgorithmParamForm","ParamFormContext","algoParamIsLoaded","selectAlgorithmParamsExit","selectAlgorithmParamsKeyList","selectAlgorithmParam","selectAlgorithmParamsValue","Contents","ParamFormConetent","Provider","StyledDrawer","Drawer","flexShrink","drawerClasses","paper","MainContents","RightDrawer","anchor","Toolbar","Divider","FlowChart","RootDiv","DrawerContents","drawerWidth","flexDirection","transition","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","displayDataCommonInitialValue","imageItemInitialValue","rgb","activeIndex","timeSeriesItemInitialValue","left","maxIndex","heatMapItemInitialValue","csvItemInitialValue","roiItemInitialValue","scatterItemInitialValue","barItemInitialValue","hdf5ItemInitialValue","getDisplayDataItemInitialValue","MultiPlotItemInitialValue","visualaizeItemSlice","deleteVisualizeItem","addInitialItem","nextId","idList","reduce","getMaxItemId","selectItem","setRoiItemFilePath","setFilePath","setImageItemFilePath","setTimeSeriesItemFilePath","setHeatMapItemFilePath","setDisplayDataPath","setItemType","toggleItemTypeMultiPlot","resetImageActiveIndex","incrementImageActiveIndex","decrementImageActiveIndex","setImageItemShowticklabels","setImageItemZsmooth","setImageItemShowLine","setImageItemShowGrid","setImageItemShowScale","setImageItemColors","setImageItemStartIndex","setImageItemEndIndex","setTimeSeriesItemOffset","setTimeSeriesItemSpan","setTimeSeriesItemShowGrid","setTimeSeriesItemShowLine","setTimeSeriesItemShowTickLabels","setTimeSeriesItemZeroLine","setTimeSeriesItemXrangeLeft","setTimeSeriesItemXrangeRight","setTimeSeriesItemDisplayNumbers","setTimeSeriesItemMaxIndex","setHeatMapItemShowScale","setHeatMapItemColors","setCsvItemTranspose","setCsvItemSetColumn","setCsvItemSetIndex","setScatterItemXIndex","setScatterItemYIndex","VisualizeItemAddButton","StyledPaper","StyledButton","Paper","borderWidth","displayDataSlice","deleteDisplayItem","rejected","DisplayItemDeleteButton","stopPropagation","ImagePlot","selectImageDataError","ImagePlotImple","itemStartIndex","itemEndIndex","selectImageItemActiveIndex","MobileStepper","steps","activeStep","nextButton","direction","backButton","ImagePlotChart","imageData","selectActiveImageData","imageDataEqualtyFn","colorscale","timeDataMaxIndex","maxIdx","selectRoiItemIndex","colorscaleRoi","createColormap","colormap","nshades","format","z","parseFloat","offsets","min","hoverongaps","hovertemplate","new_i","zmin","zmax","layout","t","l","dragmode","xaxis","autorange","autotick","ticks","yaxis","automargin","plotlyHeight","getBoundingClientRect","getElementsByClassName","clientHeight","plotContainer","timeSeriesFilePath","selectMultiPlotTimeSeriesItemFilepath","selectMultiPlotTimeSeriesItemDisplayNumbers","displayModeBar","responsive","points","curveNumber","TimeSeriesPlot","selectTimeSeriesDataError","selectTimeSeriesDataIsFulfilled","TimeSeriesPlotImple","timeSeriesData","timeSeriesDataEqualityFn","colorScale","activeIdx","mean","std","sqrt","pow","newArray","String","visible","line","autosize","range","onLegendClick","clickNumber","aArray","bArray","aKey","aValue","bKey","bValue","nestEqualityFun","HeatMapPlot","selectHeatMapDataError","selectHeatMapDataIsFulfilled","HeatMapImple","heatMapData","heatMapDataEqualtyFn","showlegend","FilePathSelect","selectedNodeId","onSelect","inputNodeFilePathInfoList","inputNodes","selectInputNode","toDataTypeFromFileType","inputNodeDataType","algorithmNodeOutputPathInfoList","paths","handleClose","onSelectHandle","menuItemList","pathInfo","MenuItem","ListSubheader","outputPath","FormControl","maxWidth","InputLabel","Select","onOpen","MultiPlotItem","MultiPlot","Grid","container","xs","MultiImagePlot","MultiTimeSeriesPlot","MultiHeatMapPlot","text","secondary","RoiPlot","selectRoiDataIsFulfilled","selectRoiDataError","RoiPlotImple","ScatterPlot","selectScatterDataError","selectScatterDataIsFulfilled","ScatterPlotImple","scatterData","scatterDataEqualityFn","textposition","textfont","family","marker","font","BarPlot","selectBarDataError","selectBarDataIsFulfilled","BarPlotImple","barData","barDataEqualityFn","DisplayDataItem","DisplayPlot","MultiPlotDeleteButton","VisualizeItems","FlexItemList","itemIdList","flexWrap","Item","isSelected","cursor","ItemByType","DeleteButton","GradientColorPicker","dispatchSetColor","maxStops","paletteHeight","onPaletteChange","colorCode","rgbStr","replace","r","g","flatStyle","WrappedSketchPicker","c","ImageItemEditor","SelectedItemIdContext","roiItemNodeId","selectRoiItemNodeId","roiItemFilePath","Showticklabels","ShowLine","ShowGrid","ShowScale","Zsmooth","StartEndIndex","inputError","helperText","CsvItemEditor","Transpose","SetColumn","SetIndex","HeatmapItemEditor","TimeSeriesItemEditor","Offset","Span","defaultValue","ShowTickLabels","ZeroLine","Xrange","newLeft","newRight","RoiItemEditor","ScatterItemEditor","XIndex","YIndex","BarItemEditor","VisualizeItemEditor","ItemTypeSelect","isMultiPlot","selectVisualizeItemTypeIsMultiPlot","Editor","MultiPlotItemEditor","DisplayDataItemEditor","prevItem","setPrevItem","DisplayEditor","StyledDrawerContents","Visualize","selectExperiments","experiments","selectExperimentsSatusIsUninitialized","selectExperimentsSatusIsFulfilled","selectExperimentsSatusIsError","selectExperimentsErrorMessage","selectExperimentList","experimentList","selectExperimentUidList","selectExperiment","selectExperimentName","selectExperimentFunction","functions","ExperimentStatusIcon","CollapsibleTable","TableRow","TableCell","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","gutterBottom","component","Table","Head","TableHead","Body","ExperimentUidContext","nodeIdList","selectExperimentFunctionNodeIdList","TableBody","TableRowOfFunction","selectExperimentFunctionName","selectExperimentFunctionStatus","scope","getExperiments","deleteExperimentByUid","delete","EXPERIMENTS_SLICE_NAME","getExperimentsApi","deleteExperimentByUidApi","ExperimentTable","isError","ExperimentsErrorView","Alert","severity","AlertTitle","TableImple","uidList","TableContainer","Row","timestamp","selectExperimentTimeStamp","statusList","f","selectExperimentStatus","Fragment","tableCellClasses","root","borderBottomWidth","ExperimentDeleteButton","Experiment","run","runData","pendingNodeIdList","runRequest","responseData","pollRunResult","getState","pipelineSlice","cancelPipeline","pop","nodeResultDto","convertToRunResult","useRunPipeline","setUid","isCanceled","selectPipelineIsCanceled","isStartedSuccess","selectPipelineIsStartedSuccess","newUid","unwrap","then","intervalId","setInterval","clearInterval","selectPipelineStatus","backgroundColor","StyledAppBar","AppBar","zIndex","drawer","TabPanel","other","role","hidden","a11yProps","Layout","setValue","runPipeline","Tabs","centered","textColor","Tab","SnackbarCloseButton","snackbarKey","closeSnackbar","App","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","algorithmListSlice","fileUploaderSlice","setFileUploaderStateById","currentState","convertToTreeNodeType","isdir","filesTreeSlice","HDF5Slice","convertToExperimentListType","function","unique_id","postion","convertToExperimentStatus","success","convertToExperimentType","experimentsSlice","store","configureStore","reducer","algorithmListReducer","algorithmNodeReducer","displayDataReducer","fileUploaderReducer","flowElementReducer","inputNodeReducer","handleTypeColorReducer","filesTreeReducer","nwbReducer","rightDrawerReducer","visualaizeItemReducer","snakemakeReducer","pipelineReducer","hdf5Reducer","experimentsReducer","setupListeners","createTheme","components","MuiTextField","defaultProps","MuiSelect","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"wbAQO,SAASA,EACdC,EACAC,GAGA,IADA,IAAIC,EAA4B,KAChC,MAAmBC,OAAOC,OAAOH,GAAjC,eAA4C,CAAvC,IAAMI,EAAI,KAQb,GAPIC,EAAaD,GACXA,EAAKL,OAASA,IAChBE,EAASG,GAGXH,EAASH,EAAcC,EAAMK,EAAKE,UAEtB,MAAVL,EACF,MAGJ,OAAOA,EAGF,SAASI,EAAaE,GAC3B,MAAsB,UAAfA,EAAMC,KAaR,SAASC,EAAkBC,EAAeC,GAC/C,IAAMX,EAAqB,GAiB3B,OAhBAE,OAAOU,QAAQF,GAAKG,SAAQ,YAAoB,IAAD,mBAAjBC,EAAiB,KAAXC,EAAW,KACvCC,EAAK,OAAGL,QAAH,IAAGA,IAAW,IAT7B,SAAsBI,GACpB,OAAiB,OAAVA,GAAmC,kBAAVA,IAAuBE,MAAMC,QAAQH,GAS/DI,CAAaJ,GAOff,EAASc,GAAQ,CACfN,KAAM,QACNO,QACAhB,KAAMiB,EAAMI,OAAO,CAACN,IAAOO,KAhBZ,OAOjBL,EAAMM,KAAKR,GACXd,EAASc,GAAQ,CACfN,KAAM,SACNF,SAAUG,EAAkBM,EAAOC,QAUlChB,ECxDF,IAAMuB,EAAsB,SAACC,GAAD,OAAsBA,EAAMC,eAMlDC,EACX,SAACC,GAAD,OAAoB,SAACH,GAAD,OAClBD,EAAoBC,GAAOG,GAAQC,eAE1BC,EAAsB,SAACF,GAAD,OAAoB,SAACH,GAAD,OACrDD,EAAoBC,GAAOG,GAAQb,OAExBgB,EAAwB,SAACH,GAAD,OAAoB,SAACH,GAAD,OACvDD,EAAoBC,GAAOG,GAAQI,SCT9B,SAASC,EACdC,GAEA,MAAyB,UAAlBA,EAASzB,KASX,SAAS0B,EACdC,EACAC,GAGA,IADA,IAAInC,EAAgC,KACpC,MAA2BC,OAAOU,QAAQuB,GAA1C,eAAqD,CAAhD,0BAAOrB,EAAP,KAAaV,EAAb,KAQH,GAPI4B,EAAY5B,GACVU,IAASsB,IACXnC,EAASG,GAGXH,EAASiC,EAAa9B,EAAKE,SAAU8B,GAEzB,MAAVnC,EACF,MAGJ,OAAOA,EAGF,SAASoC,EAAsB3B,GACpC,IAAMyB,EAA8B,GA2BpC,OA1BAjC,OAAOU,QAAQF,GAAKG,SAAQ,YAAoB,IAAD,mBAAjBC,EAAiB,KAAXC,EAAW,KAC7C,GAAIb,OAAOoC,UAAUC,eAAeC,KAAKzB,EAAO,YAC9CoB,EAASrB,GAAQ,CACfN,KAAM,SACNF,SAAU+B,EAENtB,EAGAT,eAGD,CACL,IAAMI,EAAMK,EAKZoB,EAASrB,GAAQ,CACfN,KAAM,QACNoB,aAAclB,EAAIX,KAClB0C,KAAM/B,EAAI+B,KACVC,QAAShC,EAAIgC,aAIZP,ECjEF,IAAMQ,EAAsB,SAACnB,GAAD,OAAsBA,EAAMoB,eAElDC,EAA6B,SAACrB,GAAD,OACxCmB,EAAoBnB,GAAOsB,UAEhBC,EAA0B,SAACvB,GAAD,OACrCmB,EAAoBnB,GAAOwB,M,0CCVhBC,EAA4B,gBCAnCC,EAAOC,YACPC,GAAOD,OAEAE,GAAQ,iBAAaH,EAAb,YAAqBE,ICE7BE,IDDW,eAAWJ,EAAX,YAAmBE,ICChBG,YAAgB,UACtCN,EADsC,uDAEzC,WAAOO,EAAGC,GAAV,iBAAAC,EAAA,6DACUC,EAAoBF,EAApBE,gBADV,kBAG2BC,IAAMC,IAAN,UAAaR,GAAb,cAH3B,cAGUS,EAHV,yBAIWA,EAASC,MAJpB,yDAMWJ,EAAgB,EAAD,KAN1B,yDAFyC,0DCH9BK,GACN,MADMA,GAEJ,QAFIA,GAGL,OCDKC,GACJ,QADIA,GAEA,Y,SCAAC,GAA0C,CACrDC,MAAO,IACPC,OAAQ,IACRC,QAAS,EACTC,aAAc,GAGHC,GAA0C,CACrDC,OAAQ,iBACRJ,OAAQ,KCiCJK,GAA4B,CAChCC,aAzB0C,CAC1C,CACEC,GD1BoC,IC2BpCnE,KAAM,gBACNuD,KAAM,CACJvD,KAAMyD,GACNW,MD7BoC,UC+BtCC,MAAON,GACPO,SAAU,CAAEC,EAAG,GAAIC,EAAG,MAiBxBC,aAbyC,CACzCF,EAAG,EACHC,EAAG,EACHE,KAAM,IAWNC,aARwC,CACxCJ,EAAG,IACHC,EAAG,KASQI,GAAmBC,YAAY,CAC1CvE,KFrDqC,cEsDrC2D,gBACAa,SAAU,CACRC,gBAAiB,SAAC/D,EAAOgE,GACvBhE,EAAMyD,aAAeO,EAAOC,SAE9BC,gBAAiB,SAAClE,EAAOgE,GACvBhE,EAAMkD,aAAec,EAAOC,SAE9BE,mBAAoB,SAACnE,EAAOgE,GAC1BhE,EAAMkD,aAAekB,aAAeJ,EAAOC,QAASjE,EAAMkD,eAE5DmB,uBAAwB,SAACrE,EAAOgE,GAC9B,IAAMM,EAAUtE,EAAMkD,aAAaqB,MACjC,SAACC,GAAD,OAAUA,EAAKrB,KAAOa,EAAOC,gBAEfQ,IAAZH,IACFtE,EAAMkD,aAAekB,aAAe,CAACE,GAAUtE,EAAMkD,gBAGzDwB,mBAAoB,SAClB1E,EACAgE,GAKI,IAAD,IACGpF,EAASoF,EAAOC,QAAhBrF,MACF,UAAAA,EAAK2D,YAAL,eAAWvD,QAASyD,GACtB7D,EAAI,2BACCA,GADD,IAEFyE,MAAM,2BACDzE,EAAKyE,OACLN,IAEL4B,eAAgBC,KAASC,KACzBC,eAAgBF,KAASG,SAElB,UAAAnG,EAAK2D,YAAL,eAAWvD,QAASyD,KAC7B7D,EAAI,2BACCA,GADD,IAEFyE,MAAM,2BACDzE,EAAKyE,OACLX,IAELiC,eAAgBC,KAASC,KACzBC,eAAgBF,KAASG,SAG7B/E,EAAMkD,aAAapD,KAAKlB,IAE1BoG,0BAA2B,SACzBhF,EACAgE,GAII,IAAD,EACH,EAA2BA,EAAOC,QAA5B9D,EAAN,EAAMA,OAAQ8E,EAAd,EAAcA,SACRC,EAAalF,EAAMkD,aAAaiC,WACpC,SAACC,GAAD,OAASA,EAAIjC,KAAOhD,KAEtB,UAAIH,EAAMkD,aAAagC,GAAY3C,YAAnC,OAAI,EAAqCa,QACvCpD,EAAMkD,aAAagC,GAAY3C,KAAMa,MAAQ6B,IAGjDI,4BAA6B,SAC3BrF,EACAgE,GAQA,MAAwBA,EAAOC,QAAzB9D,EAAN,EAAMA,OAAQmF,EAAd,EAAcA,MACRJ,EAAalF,EAAMkD,aAAaiC,WACpC,SAACC,GAAD,OAASA,EAAIjC,KAAOhD,KAEhBoF,EAAavF,EAAMkD,aAAagC,GAClCM,aAAOD,KACTA,EAAWjC,SAAWgC,IAG1BG,gBAAiB,SAACzF,GAChB,IAAMuD,EAAIvD,EAAM2D,aAAaJ,EACvBC,EAAIxD,EAAM2D,aAAaH,EACzBD,EAAI,KAAOC,EAAI,KACjBxD,EAAM2D,aAAaJ,EAAI,IACvBvD,EAAM2D,aAAaH,EAAI,KAEvBxD,EAAM2D,aAAaJ,GAAK,QAMzB,GASHK,GAAiB8B,QARnB3B,GADK,GACLA,gBACAG,GAFK,GAELA,gBACAQ,GAHK,GAGLA,mBACAP,GAJK,GAILA,mBACAE,GALK,GAKLA,uBACAW,GANK,GAMLA,0BACAK,GAPK,GAOLA,4BACAI,GARK,GAQLA,gBAGa7B,MAAf,QCvJO,SAAS+B,GACdC,GAEA,OAAOA,EAAUC,WAAarD,GAGzB,SAASsD,GACdF,GAEA,OAAOA,EAAUC,WAAarD,GCpBzB,IAEMuD,GAAsB,SAAC5F,GAAD,OAAoB,SAACH,GAAD,OACrDA,EAAM4F,UAAUzF,KAEL6F,GAAyB,SAAC7F,GAAD,OAAoB,SAACH,GAAD,OACxDtB,OAAOuH,KAAKjG,EAAM4F,WAAWM,SAAS/F,KAI3BgG,GACX,SAAChG,GAAD,OAAoB,SAACH,GAAD,OAClB+F,GAAoB5F,EAApB4F,CAA4B/F,GAAOoG,mBAE1BC,GAA4B,SAACrG,GAAD,OACvCtB,OAAOC,OAAOqB,EAAM4F,WAAWU,QAC7B,SAACV,GAAD,YAA8CnB,IAA/BmB,EAAUQ,oBACzBG,OAAS,GAKPC,GAA0B,SAACrG,GAAD,OAAoB,SAACH,GACnD,IAAM4F,EAAYG,GAAoB5F,EAApB4F,CAA4B/F,GAC9C,GAAI2F,GAAeC,GACjB,OAAOA,EAAU7G,MAEjB,MAAM,IAAI0H,MAAJ,sDAAyDtG,EAAzD,QAgBGuG,GACX,SAACvG,GAAD,OAAoB,SAACH,GACnB,IAAM2G,EAAOZ,GAAoB5F,EAApB4F,CAA4B/F,GACzC,OAAI8F,GAAgBa,GACXA,EAAKC,cAEZ,IC5CC,SAASC,GACdjI,GAEA,OAAe,MAARA,GAAgB4G,aAAO5G,IAAsB,MAAbA,EAAK2D,KCEvC,IAAMuE,GAAqB,SAAC9G,GAAD,OAChCA,EAAM+G,YAAY7D,cAEP8D,GAAqB,SAAChH,GAAD,OAChCA,EAAM+G,YAAYtD,cAEPwD,GAAqB,SAACjH,GAAD,OAChCA,EAAM+G,YAAYpD,cAEPuD,GAAiB,SAAC/G,GAAD,OAAoB,SAACH,GAAD,OAChD8G,GAAmB9G,GAChBsG,OAAOO,IACPtC,MAAK,SAAC3F,GAAD,OAAUA,EAAKuE,KAAOhD,OAKnBgH,GAAsB,SAAChH,GAAD,OAAoB,SAACH,GAAD,yBACrDkH,GAAe/G,EAAf+G,CAAuBlH,UAD8B,iBACrD,EAA+BuC,YADsB,aACrD,EAAqCa,Q,QCA1BgE,GAAoBC,IAAMC,MAAK,WAC1C,IAAMC,EAAWC,cACX7G,EAAW8G,YAAYlG,GACvBD,EAAWmG,YAAYpG,GAE7BqG,qBAAU,WACHpG,GACHiG,EAASzF,QAEV,CAACyF,EAAUjG,IAEd,IAAMqC,EAAe8D,YAAYR,IAwBjC,OACE,gBAACU,EAAA,EAAD,CACEC,GAAI,CACFC,SAAU,EACVjF,OAAQ,QAEVkF,oBAAqB,eAAC,IAAD,IACrBC,kBAAmB,eAAC,IAAD,IANrB,UAQE,gBAACC,EAAA,EAAD,CAAU7H,OAAO,OAAOiD,MAAM,OAA9B,UACE,eAAC6E,GAAD,CACEhD,SAAU,QACViD,SAAU,YACVrC,SAAUrD,KAEZ,eAACyF,GAAD,CACEhD,SAAU,MACViD,SAAU,UACVrC,SAAUrD,KAEZ,eAACyF,GAAD,CACEhD,SAAU,OACViD,SAAU,WACVrC,SAAUrD,QAGd,eAACwF,EAAA,EAAD,CAAU7H,OAAO,YAAYiD,MAAM,YAAnC,SACG1E,OAAOU,QAAQuB,GAAUwH,KAAI,WAAeC,GAAf,uBAAE9I,EAAF,KAAQV,EAAR,YAC5B,eAACyJ,GAAD,CACE/I,KAAMA,EACNV,KAAMA,EACN0J,gBAAiB,SAAChJ,EAAMc,GAAP,OArDH,SAAC8H,EAAkB9H,GACzC,IAAMd,EAAO4I,EACP5E,EAAW,CACfC,EAAGI,EAAaJ,EAChBC,EAAGG,EAAaH,GAElB+D,EAAS9B,MAET,IAAM8C,EAA0B,CAC9BpF,GAAIqF,cACJxJ,KAAM,gBACNsE,WACAf,KAAM,CAAEa,MAAO9D,EAAMN,KAAMyD,KAE7B8E,EACE7C,GAAmB,CACjB9F,KAAM2J,EACNE,aAAc,CAAEnJ,OAAMc,mBAqChBkI,CAAgBhJ,EAAMc,KAEnBgI,EAAEM,sBAQbT,GAAqBZ,IAAMC,MAI9B,YAAuC,IAApCrC,EAAmC,EAAnCA,SAAUiD,EAAyB,EAAzBA,SAAUrC,EAAe,EAAfA,SAClB0B,EAAWC,cACX7D,EAAe8D,YAAYR,IAoCjC,OACE,eAAC0B,GAAD,CACExI,OAAQ8E,EACR7B,MACE,eAACwF,GAAD,CACEtJ,KAAM2F,EACN4D,QAAS,kBAxCO,SACtBC,EACAZ,EACArC,GAEA,IAAMvC,EAAW,CACfC,EAAGI,EAAaJ,EAChBC,EAAGG,EAAaH,GAElB+D,EAAS9B,MAET,IAAIsD,EAAgB,GACpB,OAAQlD,GACN,KAAKrD,GACHuG,EAAgB,cAChB,MACF,KAAKvG,GACHuG,EAAgB,gBAChBlD,EAAWrD,GACX,MACF,KAAKA,GACHuG,EAAgB,eAChBlD,EAAWrD,GAGf,IAAM+F,EAA0B,CAC9BpF,GAAIqF,cACJxJ,KAAM+J,EACNzF,WACAf,KAAM,CAAEa,MAAO8E,EAAUlJ,KAAM8J,IAEjCvB,EAAS7C,GAAmB,CAAE9F,KAAM2J,EAASS,cAAe,CAAEnD,eAUtDoD,CAAgBxG,GAAqByF,EAAUrC,WAQrDwC,GAAoBhB,IAAMC,MAI7B,YAAsC,IAAnChI,EAAkC,EAAlCA,KAAMV,EAA4B,EAA5BA,KAAM0J,EAAsB,EAAtBA,gBAChB,OAAI9H,EAAY5B,GAEZ,eAAC+J,GAAD,CACExI,OAAQb,EACR8D,MACE,eAACwF,GAAD,CACEtJ,KAAMA,EACNuJ,QAAS,kBAAMP,EAAgBhJ,EAAMV,EAAKwB,mBAOhD,eAAC4H,EAAA,EAAD,CAAU7H,OAAQb,EAAM8D,MAAO9D,EAA/B,SACGZ,OAAOU,QAAQR,EAAKE,UAAUqJ,KAAI,WAAeC,GAAf,uBAAE9I,EAAF,KAAQV,EAAR,YACjC,eAACyJ,GAAD,CACE/I,KAAMA,EACNV,KAAMA,EAEN0J,gBAAiB,SAAChJ,EAAMc,GAAP,OACfkI,EAAgBhJ,EAAMc,KAFnBgI,EAAEM,mBAWbE,GAAYvB,IAAMC,MAGrB,YAAwB,IAArBhI,EAAoB,EAApBA,KAAMuJ,EAAc,EAAdA,QACV,OACE,uCACE,eAACK,EAAA,EAAD,CAAY,aAAW,MAAM7F,MAAO,CAAER,QAAS,GAAKsG,KAAK,QAAzD,SACE,eAAC,IAAD,CAASN,QAAS,kBAAMA,SAE1B,eAACO,EAAA,EAAD,CACEC,QAAQ,UACRhG,MAAO,CACLiG,aAAc,WACdC,SAAU,UACV5G,MAAO,OACP6G,QAAS,gBANb,SASGlK,UAOHqJ,GAAWc,YAAOzB,IAAPyB,CAAA,4BACRC,IAAgBC,eAAkB,CACvCC,OAAQ,EACRjH,MAAO,K,gDCnNLM,GAAuB,ePjBW,IOkBV,CAC1B4C,SAAUrD,GACVzD,MAAO,KAIE8K,GAAiBhG,YAAY,CACxCvE,KTzBmC,YS0BnC2D,gBACAa,SAAU,CACRgG,gBADQ,SACQ9J,EAAOgE,UACdhE,EAAMgE,EAAOC,UAEtB8F,sBAJQ,SAKN/J,EACAgE,GAKA,MAA6BA,EAAOC,QAA5B9D,EAAR,EAAQA,OAAQ6J,EAAhB,EAAgBA,SAChBhK,EAAMG,GAAQiG,iBAAmB4D,GAEnCC,qBAdQ,SAeNjK,EACAgE,GAKA,MAA6BA,EAAOC,QAA5B9D,EAAR,EAAQA,OAAQ6J,EAAhB,EAAgBA,SAChBhK,EAAMG,GAAQiG,iBAAmB4D,GAEnCE,qBAxBQ,SAyBNlK,EACAgE,GAEA,MAA0BA,EAAOC,QAAzB9D,EAAR,EAAQA,OAAQpB,EAAhB,EAAgBA,MACV6G,EAAY5F,EAAMG,GACpBwF,GAAeC,KACjBA,EAAU7G,MAAQA,IAGtBoL,qBAlCQ,SAmCNnK,EACAgE,GAKA,MAAyBA,EAAOC,QAAxB9D,EAAR,EAAQA,OAAQ5B,EAAhB,EAAgBA,KACVoI,EAAO3G,EAAMG,GACf2F,GAAgBa,KAClBA,EAAKC,SAAWrI,KAItB6L,cAAe,SAACC,GAAD,OACbA,EACGC,QAAQ5F,IAAoB,SAAC1E,EAAOgE,GAAY,IAAD,EAC9C,EAAgCA,EAAOC,QAA/BrF,EAAR,EAAQA,KAAMoK,EAAd,EAAcA,cACd,IAAI,UAAApK,EAAK2D,YAAL,eAAWvD,QAASyD,IAAwC,MAAjBuG,EAAuB,CACpE,IAAMnD,EAAWmD,EAAcnD,SAC/B,OAAQA,GACN,KAAKrD,GACHxC,EAAMpB,EAAKuE,IAAM,CACf0C,WACA9G,MAAO,CACLwL,UAAW,KACXC,UAAU,EACVC,WAAW,IAGf,MACF,KAAKjI,GAML,KAAKA,GACHxC,EAAMpB,EAAKuE,IAAM,CACf0C,WACA9G,MAAO,SAMhBuL,QAAQnG,IAAoB,SAACnE,EAAOgE,GACnCA,EAAOC,QACJqC,QAAO,SAAC1H,GAAD,OAAUiI,GAAWjI,MAC5BS,SAAQ,SAACT,GAAU,IAAD,GACb,UAAAA,EAAK2D,YAAL,eAAWvD,QAASyD,WACfzC,EAAMpB,EAAKuE,UAIzBmH,QAAQjG,IAAwB,SAACrE,EAAOgE,GACnCtF,OAAOuH,KAAKjG,GAAOkG,SAASlC,EAAOC,iBAC9BjE,EAAMgE,EAAOC,eAKvB,GAKH4F,GAAenE,QAJjBuE,GADK,GACLA,qBACAF,GAFK,GAELA,sBACAG,GAHK,GAGLA,qBACAC,GAJK,GAILA,qBAGaN,MAAf,Q,2GChIaa,GAA0B,IAAIC,IAAoB,CAC7D,CAAC,EAAGC,KAAc,MAClB,CAAC,EAAGA,KAAiB,MACrB,CAAC,EAAGA,KAAiB,MACrB,CAAC,EAAGA,KAAe,MACnB,CAAC,EAAGA,KAAgB,MACpB,CAAC,EAAGA,KAAqB,MACzB,CAAC,EAAGA,KAAqB,MACzB,CAAC,EAAGA,KAAe,MACnB,CAAC,EAAGA,KAAe,MACnB,CAAC,EAAGA,KAAqB,QCGdC,GAAuBhH,YAAY,CAC9CvE,KAHiB,kBAIjB2D,aANoC,CAAE6H,SAAU,GAAIC,QAAS,GAO7DjH,SAAU,CACRkH,SAAU,SAAChL,EAAOgE,GAAmC,IAAD,EAC5CiH,EAAS,UACbP,GAAwBrI,IAAIrC,EAAM+K,gBADrB,QAEb,IAAMG,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IACtDrL,EAAM8K,SAAS9G,EAAOC,SAAWgH,EACjCjL,EAAM+K,cAKGC,GAAaH,GAAqBnF,QAAlCsF,SAEAH,MAAf,QC1BO,SAASS,GAAetM,GAC7B,ICJoCuM,EDI9BhE,EAAWC,cACXgE,EAAQ/D,aCLsB8D,EDKYvM,ECLI,SAACgB,GACrD,OAAuC,MAAnCA,EAAMyL,YAAYX,SAASS,GACtBvL,EAAMyL,YAAYX,SAASS,QAElC,KDOF,OALAlE,IAAMK,WAAU,gBACAjD,IAAV+G,GACFjE,EAASyD,GAAShM,MAEnB,CAACA,EAAMwM,EAAOjE,IACViE,E,2HEVIE,GACX,SAAC7F,GAAD,OAA8B,SAAC7F,GAC7B,OAAiC,MAA7BA,EAAM2L,UAAU9F,GACX7F,EAAM2L,UAAU9F,QAEvB,ICRO+F,GAAwB,YA4CxBC,GACJ,QADIA,GAEN,MAFMA,GAGL,OAHKA,GAIN,MCtCMC,GAAe/J,YAAgB,UACvC6J,GADuC,wDAE1C,WAAO/F,EAAU5D,GAAjB,eAAAC,EAAA,+EAE2BE,IAAMC,IAAN,UAAaR,GAAb,UAA+B,CACpDtB,OAAQ,CACNwL,UAAWlG,KAJnB,cAEUvD,EAFV,yBAOWA,EAASC,MAPpB,yDASWN,EAASE,gBAAT,OATX,yDAF0C,yDC2B/B6J,GAAmB3E,IAAMC,MACpC,YAQO,IAPL2E,EAOI,EAPJA,KACA7F,EAMI,EANJA,iBACA8F,EAKI,EALJA,cACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,MAEI,IADJxG,gBACI,MADOgG,GACP,EACJ,EACExE,IAAMiF,SAASlG,GADjB,mBAAOmG,EAAP,KAAwBC,EAAxB,KAEMC,EAAQC,eACd,OACE,gBAACC,GAAA,EAAD,CAAQV,KAAMA,EAAMG,QAASA,EAASQ,WAAS,EAA/C,UACE,eAACC,GAAA,EAAD,iBAAcR,QAAd,IAAcA,IAAS,gBACvB,gBAACS,GAAA,EAAD,CAAeC,UAAQ,EAAvB,UACE,sBACE1J,MAAO,CACLT,OAAQ,IACR2G,SAAU,OACVyD,aAAcP,EAAMQ,QAAQ,GAC5BjK,OAAQ,YACRH,QAAS4J,EAAMQ,QAAQ,GACvBC,YAAaT,EAAMU,QAAQC,SAP/B,SAUE,eAACC,GAAD,CACEC,YAAad,EACb3G,SAAUA,MAGd,eAACuD,EAAA,EAAD,CAAYC,QAAQ,YAApB,yBACA,eAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACKkD,GAAoC,WAG3C,gBAACgB,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAQ3E,QAASqD,EAAe7C,QAAQ,WAAWmC,MAAM,UAAzD,oBAGA,eAACgC,GAAA,EAAD,CACE3E,QAAS,kBAAMsD,EAAUI,IACzBf,MAAM,UACNnC,QAAQ,WAHV,yBAaJgE,GAAehG,IAAMC,MAGxB,YAAgC,IAA7BgG,EAA4B,EAA5BA,YACJ,EAyCF,SACEzH,GAEA,IAAM0B,EAAWC,cACXhG,EAAOiG,YH/Hb,SAAC5B,GAAD,OAA8B,SAAC7F,GAAD,uBAC5B0L,GAAgB7F,EAAhB6F,CAA0B1L,UADE,aAC5B,EAAkCwB,MG8HXiM,CAAqB5H,IACxCvE,EAAWmG,YH5HjB,SAAC5B,GAAD,OAA8B,SAAC7F,GAAD,mCAC5B0L,GAAgB7F,EAAhB6F,CAA0B1L,UADE,aAC5B,EAAkCsB,gBADN,UG4HDoM,CAAoB7H,IAC3C8H,EAAYlG,YHzHlB,SAAC5B,GAAD,OAA8B,SAAC7F,GAAD,mCAC5B0L,GAAgB7F,EAAhB6F,CAA0B1L,UADE,aAC5B,EAAkC2N,iBADN,UGyHAC,CAAqB/H,IAMnD,OALAwB,IAAMK,WAAU,WACTpG,GAAaqM,GAChBpG,EAASuE,GAAajG,MAEvB,CAACvE,EAAUqM,EAAW9H,EAAU0B,IAC5B,CAAC/F,EAAMmM,GArDYE,CADM,EAAfhI,UACjB,mBAAOrE,EAAP,KAAamM,EAAb,KACA,OACE,iCACGA,GAAa,eAACG,GAAA,EAAD,IACd,eAACnG,EAAA,EAAD,iBACGnG,QADH,IACGA,OADH,EACGA,EAAM2G,KAAI,SAACvJ,GAAD,OACT,eAACmP,GAAD,CAAUnP,KAAMA,EAAM0O,YAAaA,eAOvCS,GAAW1G,IAAMC,MAGpB,YAA4B,IAAzB1I,EAAwB,EAAxBA,KAAM0O,EAAkB,EAAlBA,YACV,OAAI1O,EAAKoP,MAEL,eAAChG,EAAA,EAAD,CACEiG,KAAM,eAAC,KAAD,CAAYC,UAAU,YAC5B/N,OAAQvB,EAAKL,KACb6E,MAAOxE,EAAKU,KAHd,SAKGV,EAAKuP,MAAMhG,KAAI,SAACiG,EAAWhG,GAAZ,OACd,eAAC2F,GAAD,CAAUnP,KAAMwP,EAAmBd,YAAaA,GAAhBlF,QAMpC,eAACJ,EAAA,EAAD,CACEiG,KAAM,eAAC,KAAD,CAA6BI,SAAS,UAC5ClO,OAAQvB,EAAKL,KACb6E,MAAOxE,EAAKU,KACZuJ,QAAS,kBAAMyE,EAAY1O,EAAKL,Y,eC3H3B+P,GAA0BjH,IAAMC,MAE3C,SAACiH,GACD,OACE,gBAACC,GAAA,EAAD,CAAKhF,QAAQ,OAAOiF,WAAW,SAA/B,UACE,eAACD,GAAA,EAAD,CAAK7L,MAAM,OAAO+L,GAAI,EAAtB,SACE,eAACZ,GAAA,EAAD,aAAgBzE,QAAQ,eAAkBkF,MAE5C,eAACC,GAAA,EAAD,CAAKG,SAAU,GAAf,SACE,eAACvF,EAAA,EAAD,CAAYC,QAAQ,QAAQmC,MAAM,gBAAlC,mBAAsDN,KAAK0D,MACzDL,EAAMhP,OADR,eChBKsP,GAA2B,eCO3BC,GAAoBC,YAAY,UAIvCF,GAJuC,uBAMhCG,GAAajN,YAAgB,UAWrC8M,GAXqC,sDAYxC,aAA0C5M,GAA1C,yBAAAC,EAAA,6DAAS+M,EAAT,EAASA,UAAWhK,EAApB,EAAoBA,SAAUiK,EAA9B,EAA8BA,SAA9B,SAEUC,EAASC,IAAgB,SAACC,EAASC,GACvCrN,EAASsF,SACPuH,GAAkB,CAChBG,YACAM,QAASF,EACTC,cAPV,SAW2BlN,IAAMoN,KAAN,UAClB3N,GADkB,yBACOoD,GAC5BiK,EACAC,GAdN,cAWU7M,EAXV,OAgBUC,EAAOD,EAASC,KAhB1B,kBAiBW,CACLkN,WAAYlN,EAAKmN,YAlBvB,2DAqBWzN,EAASE,gBAAT,OArBX,0DAZwC,yDAsC1C,SAASiN,GACPO,GAEA,MAAO,CACLC,iBAAkB,SAAUC,GAC1B,IAAMC,EAAmB5E,KAAK0D,MACJ,IAAvBiB,EAAcE,OAAgBF,EAAcP,OAE/CK,EAAmBG,EAAkBD,EAAcP,SCzDlD,IAAMU,GAA0C,CACrDzR,UAAMkG,EACNQ,cAAUR,EACVwL,iBAAiB,EACjBC,SAAS,EACTC,WAAW,EACXC,uBAAmB3L,EACnB4L,WAAO5L,GCNI6L,GAAqB,SAACnN,GAAD,OAAgB,SAACnD,GACjD,OAAItB,OAAOuH,KAAKjG,EAAMuQ,cAAcrK,SAAS/C,GACpCnD,EAAMuQ,aAAapN,GAEnB6M,KCOJ,SAASQ,GAAgB3K,GAC9B,IAAM0B,EAAWC,cACXrE,EAAKkE,IAAMoJ,OAAOjI,eAIlBkI,EAAerJ,IAAMsJ,aACzB,SAACzB,EAAoBjK,GACnBsC,EACEyH,GAAW,CAAEC,UAAW9L,EAAGyN,QAAS3L,WAAUiK,WAAUrJ,gBAG5D,CAAC0B,EAAU1B,IAEPgL,EAAgBpJ,YDVtB,SAACtE,GAAD,OAAgB,SAACnD,GAAD,OACdsQ,GAAmBnN,EAAnBmN,CAAuBtQ,GAAOiQ,iBCSEa,CAAgC3N,EAAGyN,UAC/D5G,EAAWvC,YDlBiB,SAACtE,GAAD,OAAgB,SAACnD,GAAD,OAClDsQ,GAAmBnN,EAAnBmN,CAAuBtQ,GAAOzB,MCiBDwS,CAAqB5N,EAAGyN,UAC/CV,EAAUzI,YDTuB,SAACtE,GAAD,OAAgB,SAACnD,GAAD,OACvDsQ,GAAmBnN,EAAnBmN,CAAuBtQ,GAAOkQ,SCQFc,CAA0B7N,EAAGyN,UACnDT,EAAY1I,YDPuB,SAACtE,GAAD,OAAgB,SAACnD,GAAD,OACzDsQ,GAAmBnN,EAAnBmN,CAAuBtQ,GAAOmQ,WCMAc,CAA4B9N,EAAGyN,UACvDM,EAAWzJ,YDLqB,SAACtE,GAAD,OAAgB,SAACnD,GAAD,OACtDsQ,GAAmBnN,EAAnBmN,CAAuBtQ,GAAOoQ,mBCIDe,CAAyBhO,EAAGyN,UACnDP,EAAQ5I,YDHqB,SAACtE,GAAD,OAAgB,SAACnD,GAAD,OACnDsQ,GAAmBnN,EAAnBmN,CAAuBtQ,GAAOqQ,OCEJe,CAAsBjO,EAAGyN,UACnD,MAAO,CACL5G,WACA6G,gBACAX,UACAC,YACAe,WACAb,QACAK,gBCnBG,IAAMW,GAAahK,IAAMC,MAI7B,YAA+C,IAA5C0C,EAA2C,EAA3CA,SAAUnE,EAAiC,EAAjCA,SAAUyL,EAAuB,EAAvBA,iBACxB,EAOId,GAAgB3K,GANR0L,EADZ,EACEvH,SACA0G,EAFF,EAEEA,aACAR,EAHF,EAGEA,QACAW,EAJF,EAIEA,cACAK,EALF,EAKEA,SACAb,EANF,EAMEA,MAcF,OACE,wCACIQ,GAAiBX,GAAuB,MAAZgB,GAC5B,sBAAK7N,MAAO,CAAEmO,WAAY,EAAGC,YAAa,GAA1C,SACE,eAACnD,GAAD,CAAyB/O,MAAO2R,MAGpC,eAACQ,GAAD,CACE1H,SAAUA,EACV2H,aAbe,SAACC,GACpBN,EAAiBM,IAablB,aArBqB,SAACxB,EAAoBjK,GAC9CyL,EAAaxB,EAAUjK,GACC,MAApBsM,GACFD,EAAiBC,IAmBfM,aAAchM,EACdiM,kBAAiB,iBAAYjM,KAErB,MAATwK,GACC,eAACjH,EAAA,EAAD,CAAYC,QAAQ,UAAUmC,MAAM,QAApC,SACG6E,UAOEqB,GAAkBrK,IAAMC,MACnC,YAOO,IANL0C,EAMI,EANJA,SACA2H,EAKI,EALJA,aACAjB,EAII,EAJJA,aACAmB,EAGI,EAHJA,aACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,kBAYMC,EAAW3K,IAAMoJ,OAAyB,MAMhD,EAAwBpJ,IAAMiF,UAAS,GAAvC,mBAAOL,EAAP,KAAagG,EAAb,KACMC,EAkDV,SAA4BrM,GAC1B,OAAQA,GACN,KAAKgG,GACH,MAAO,OACT,KAAKA,GACH,MAAO,OACT,KAAKA,GACH,MAAO,aACT,QACE,QA3DasG,CAAmBN,GAC5B5M,EAAW+E,EAASoI,MAAM,KAAKC,UAAU,GAC/C,OACE,uBACEhP,MAAO,CACLR,QAAS,GAFb,UAKE,gBAACyP,GAAA,EAAD,CAAanJ,KAAK,QAAQ9F,MAAO,CAAEoO,YAAa,GAAhD,UACE,eAACjE,GAAA,EAAD,CAAQnE,QAAQ,WAAWR,QAAS,kBAAMoJ,GAAQ,IAAlD,SACKH,GAAwC,gBAE7C,eAACtE,GAAA,EAAD,CAAQ3E,QAlBE,WACU,MAApBmJ,EAASpB,SACXoB,EAASpB,QAAQ2B,SAgBWlJ,QAAQ,WAAlC,SACK0I,GAAwC,iBAG/C,iCACE,wBACES,IAAKR,EACLhT,KAAK,OACLyT,SArCkB,SAACC,GAEzB,GADAA,EAAMC,iBACoB,MAAtBD,EAAME,OAAOC,OAA0C,MAAzBH,EAAME,OAAOC,MAAM,GAAY,CAC/D,IAAMC,EAAOJ,EAAME,OAAOC,MAAM,GAC1B3D,EAAW,IAAI6D,SACrB7D,EAAS8D,OAAO,OAAQF,GACxB,IAAM7N,EAAW6N,EAAKxT,KACtBoR,EAAaxB,EAAUjK,KA+BnBiN,OAAQA,EACR7O,MAAO,CACL4P,WAAY,SACZtQ,MAAO,EACPC,OAAQ,KAGZ,eAACwG,EAAA,EAAD,CAAY8J,UAAU,iBAAiB7J,QAAQ,UAA/C,SACKpE,GAAsB,4BAG7B,eAAC+G,GAAD,CACE5F,iBAAgB,OAAEnB,QAAF,IAAEA,IAAY,GAC9BgH,KAAMA,EACNE,UAAW,SAAC5N,GACVoT,EAAapT,GACb0T,GAAQ,IAEV/F,cAAe,WACb+F,GAAQ,IAEV7F,QAAS,kBAAM6F,GAAQ,IACvBpM,SAAUgM,UCzIb,SAASsB,GAAWhT,EAAgBb,EAAcN,GACvD,MAAM,GAAN,OAAUmB,EAAV,aAAqBb,EAArB,aAA8BN,GAGzB,SAASoU,GAAcC,GAC5B,OAAOA,EAASjB,MAAM,MAAM,GAGvB,SAASkB,GAAkBC,GAChC,OAA+B,MAA3BA,EAAWC,cAAmD,MAA3BD,EAAWE,cAE9CL,GAAcG,EAAWC,gBACzBJ,GAAcG,EAAWE,cCS/B,IAAMC,GAAmC,CACvC/Q,MAAO,KACPC,OAAQ,MACR+Q,IAAK,GACL3Q,OAAQ,YAERF,aAAc,GAGH8Q,GAAgBvM,IAAMC,MAAgB,SAAChD,GAElD,OADgBmD,YAAYzB,GAAuB1B,EAAQnB,KAElD,eAAC0Q,GAAD,eAAwBvP,IAExB,QAILuP,GAAqBxM,IAAMC,MAC/B,YAAgD,IAAzCnH,EAAwC,EAA5CgD,GAAsB2Q,EAAsB,EAAhCC,SACPxM,EAAWC,cACXwC,EAAWvC,YAAYtB,GAAgChG,IAiBvDsM,EAAQC,eACRsH,EAAa,YACbC,EAAa3I,GAAe0I,GAMlC,OACE,uBACE3Q,MAAO,CACLT,OAAQ,OACRD,MAAO,QACPuR,WAAYJ,EACRK,aAAM1H,EAAMU,QAAQiH,QAAQC,MAAO,SACnC5P,GANR,UASE,eAACyE,EAAA,EAAD,CACE,aAAW,SACX7F,MAAO,CAAEmI,MAAO,QAASlI,SAAU,WAAYqQ,KAAM,GAAIW,OAAQ,GACjEzL,QAjBoB,WACxBtB,EAASlD,GAAuBlE,KAiB5BgJ,KAAK,QAJP,SAME,eAAC,KAAD,MAEF,eAACkI,GAAD,CACEC,iBA3CmB,SAAC/S,GACxBgJ,EACEwC,GAAsB,CACpB5J,SACA6J,SAAUzL,KAGd,IAAM0G,EAAW1G,EAAK6T,MAAM,KAAKC,UAAU,GAC3C9K,EACEvC,GAA0B,CACxB7E,SACA8E,eAiCAY,SAAUrD,GACVwH,SAAQ,OAAEA,QAAF,IAAEA,IAAY,KAExB,eAAC,KAAD,CACEhL,KAAK,SACLsE,SAAUsB,KAASG,MACnB5B,GAAIgQ,GAAWhT,EAAQ,QAAS6T,GAChC3Q,MAAK,2BACAqQ,IADA,IAEHQ,WAAYD,IAEdX,kBAAmBA,W,sDCxFhBiB,GACL,OADKA,GAEN,MAFMA,GAGC,YAHDA,GAIA,YAMPtR,GAA4B,CAChCgJ,MAAM,EACNuI,KAAMD,GACNE,cAAe,MAEJC,GAAmB7Q,YAAY,CAC1CvE,KAAM,cACN2D,gBACAa,SAAU,CACR6Q,gBAAiB,SAAC3U,EAAOgE,GACvBhE,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOxQ,EAAOC,SAEtB2Q,iBAAkB,SAAC5U,GACjBA,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOD,IAEfM,gBAAiB,SAAC7U,EAAOgE,GAErBhE,EAAMiM,MACNjM,EAAMwU,OAASD,IACfvU,EAAMyU,gBAAkBzQ,EAAOC,SAE/BjE,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOD,GACbvU,EAAMyU,cAAgB,OAEtBzU,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOD,GACbvU,EAAMyU,cAAgBzQ,EAAOC,UAGjC6Q,UAAW,SAAC9U,GACNA,EAAMiM,MAAQjM,EAAMwU,OAASD,IAC/BvU,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOD,KAEbvU,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOD,IAEfvU,EAAMyU,cAAgB,MAExBM,gBAAiB,SAAC/U,GACZA,EAAMiM,MAAQjM,EAAMwU,OAASD,IAC/BvU,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOD,KAEbvU,EAAMiM,MAAO,EACbjM,EAAMwU,KAAOD,IAEfvU,EAAMyU,cAAgB,OAG1BrK,cAAe,SAACC,GACdA,EACGC,QAAQnG,IAAoB,SAACnE,EAAOgE,GAEjCA,EAAOC,QAAQkB,WAAU,SAAC6P,GAAD,OAASA,EAAI7R,KAAOnD,EAAMyU,iBAAiB,IAEpEzU,EAAMyU,cAAgB,SAGzBnK,QAAQjG,IAAwB,SAACrE,EAAOgE,GACnCA,EAAOC,UAAYjE,EAAMyU,gBAC3BzU,EAAMyU,cAAgB,YAMzB,GAMHC,GAAiBhP,QALnBmP,GADK,GACLA,gBACAC,GAFK,GAELA,UACAC,GAHK,GAGLA,gBAEAH,IALK,GAILD,gBAJK,GAKLC,kBAGaF,MAAf,QCjGaO,GAAY,SAACjV,GAAD,OAAsBA,EAAMkV,KAIxCC,GAAyB,SAACnV,GAAD,OACpCtB,OAAOuH,KAAKgP,GAAUjV,GAAOO,SAElB6U,GAAiB,SAACC,GAAD,OAAsB,SAACrV,GAAD,OAClDiV,GAAUjV,GAAOO,OAAO8U,KAEbC,GAAuB,SAAC/W,GAAD,OAAkB,SAACyB,GACrD,IAAMO,EAAS0U,GAAUjV,GAAOO,OAChC,GAAc,MAAVA,EAAgB,CAClB,IAAMqS,EAAStU,EAAcC,EAAMgC,GACnC,cAAOqS,QAAP,IAAOA,OAAP,EAAOA,EAAQrT,MAEf,MAAM,IAAIkH,MAAM,mBCfP8O,GAAwB,SAACvV,GAAD,OADb,SAACA,GAAD,OAAsBA,EAAMwV,UAElDC,CAAgBzV,GAAOO,QAEZmV,GAA+B,SAAC1V,GAAD,OAC1CtB,OAAOuH,KAAKsP,GAAsBvV,KAEvB2V,GAAuB,SAACN,GAAD,OAAsB,SAACrV,GAAD,OACxDuV,GAAsBvV,GAAOqV,KAElBO,GACX,SAACrX,GAAD,OAAkB,SAACyB,GACjB,IAAMO,EAASgV,GAAsBvV,GACrC,GAAc,MAAVO,EAAgB,CAClB,IAAMqS,EAAStU,EAAcC,EAAMgC,GACnC,cAAOqS,QAAP,IAAOA,OAAP,EAAOA,EAAQrT,MAEf,MAAM,IAAIkH,MAAM,mBCjBToP,GAAsB,WAStBC,GAII,eAJJA,GAQE,aARFA,GAYI,eAZJA,GAgBD,WAhBCA,GAoBF,UApBEA,GAwBD,WA4BCC,GACF,UADEA,GAEJ,QAFIA,GAGF,UCnEEC,GAA0B,cA6B1BC,GACE,aADFA,GAED,UAFCA,GAGJ,QAHIA,GAIN,MAJMA,GAKN,MALMA,GAMF,UANEA,GAON,MAPMA,GAQL,OChCD,SAASC,GAAW3W,GACzB,OAAQA,GACN,IAAK,SACH,OAAO0W,GACT,IAAK,aACH,OAAOA,GACT,IAAK,UACH,OAAOA,GACT,IAAK,MACH,OAAOA,GACT,IAAK,UACH,OAAOA,GACT,IAAK,MACH,OAAOA,GACT,QACE,MAAM,IAAIxP,MAAJ,kCAAqClH,KCH1C,SAAS4W,GACdC,GAEA,OAAOA,EAAWC,SAAWN,GAGxB,SAASO,GACdF,GAEA,OAAOA,EAAWC,SAAWN,GASxB,SAASQ,GACdC,GAEA,OACEA,EAASH,SAAWP,IACpBU,EAASH,SAAWP,IACpBU,EAASH,SAAWP,IACpBU,EAASH,SAAWP,GAIjB,SAASW,GAAoBC,GAClC,IAAMC,EAA2B,GASjC,OARAD,EAAYE,SACTtQ,QAAO,gBAAG/D,EAAH,EAAGA,KAAH,OAAkB,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMvD,QAASyD,MACpCpD,SAAQ,YAAmB,IAAD,EAAf8D,EAAe,EAAfA,GAAIZ,EAAW,EAAXA,KACdoU,EAAcxT,GAAM,CAClBkT,OAAQN,GACRzW,KAAI,iBAAEiD,QAAF,IAAEA,OAAF,EAAEA,EAAMa,aAAR,QAAiB,OAGpBuT,EAyBT,SAASE,GAAoB3X,GAC3B,IAAMT,EAAsB,GAO5B,OANAC,OAAOU,QAAQF,GAAKG,SAAQ,YAA4B,IAAD,mBAAzBe,EAAyB,KAAXb,EAAW,KACrDd,EAAO2B,GAAgB,CACrB7B,KAAMgB,EAAMhB,KACZS,KAAMkX,GAAW3W,EAAMP,UAGpBP,EC7CF,IAAMqY,GAA0B,SAAC9W,GACtC,IAAM+W,EAAU/W,EAAMwW,SAASQ,WAC/B,OAAID,EAAQxQ,OAAS,EACZwQ,EAAQE,OAAO,GAAG,QAEzB,GAISC,GAAoB,SAAClX,GAChC,IAAMmX,ENjDuB,SAACnX,GAAD,OAAsBiV,GAAUjV,GAAOO,OMiDnD6W,CAAgBpX,GAC3BqX,EAAiB9B,GAAsBvV,GACvCsX,E3BvB4B,SAACtX,GAAD,OAClC8G,GAAmB9G,GAAOsG,OAAOiR,M2BsBVC,CAAqBxX,GAQ5C,MANiC,CAC/BmX,WACAE,iBACAI,SAAUH,EACVV,SALuBc,GAA6B1X,KAU3C0X,GAA+B,SAC1C1X,GAoCA,OAlCiB8G,GAAmB9G,GACVsG,OAAOO,IAAYsB,KAAI,SAACvJ,GAChD,G5B1DG,SACLA,GACkC,IAAD,EACjC,OAAOiI,GAAWjI,KAAS,UAAAA,EAAK2D,YAAL,eAAWvD,QAASyD,G4BuDzCkV,CAAoB/Y,GAAO,CAAC,IAAD,MACvBG,EAAK,UAAGuB,EAAsB1B,EAAKuE,GAA3B7C,CAA+BN,UAAlC,QAA4C,GACjDI,EAAeF,EAA4BtB,EAAKuE,GAAjCjD,CAAqCF,GAW1D,OAVwD,2BACnDpB,GADmD,IAEtD2D,KAAK,2BACA3D,EAAK2D,MADN,IAEFa,MAAK,oBAAExE,EAAK2D,YAAP,aAAE,EAAWa,aAAb,QAAsB,GAC3BpE,KAAMyD,GACNlE,KAAM6B,EACNrB,YAIE,IAAD,I7BhE0BoB,E6BiEzB6J,EAAW7D,GAAgCvH,EAAKuE,GAArCgD,CAAyCnG,GACpDjB,G7BlEyBoB,E6BkEIvB,EAAKuE,G7BlEU,SAACnD,GAAD,OACtD+F,GAAoB5F,EAApB4F,CAA4B/F,GAAOjB,Q6BiEaiB,GACtC4G,EAAWF,GAAwB9H,EAAKuE,GAA7BuD,CAAiC1G,GAYlD,OAXgD,2BAC3CpB,GAD2C,IAE9C2D,KAAK,2BACA3D,EAAK2D,MADN,IAEFa,MAAK,oBAAExE,EAAK2D,YAAP,aAAE,EAAWa,aAAb,QAAsB,GAC3BpE,KAAMyD,GACNlE,KAAI,OAAEyL,QAAF,IAAEA,IAAY,GAClBjL,QACA6H,SAAUA,UASPgR,GAAwB,SAACC,GAAD,OAAiB,SAAC7X,GACrD,IAAMwW,EAAW9X,OAAOC,OAAOqB,EAAMwW,SAASsB,WAAWvT,MACvD,SAAChF,GAAD,OAAWgX,GAAkBhX,IAAUA,EAAMsY,MAAQA,KAEvD,GAAgB,MAAZrB,EACF,OAAOA,EAEP,MAAM,IAAI/P,MAAJ,uBAA0BoR,MAUvBE,GACX,SAACF,GAAD,OAAiB,SAAC7X,GAChB,IAAMwW,EAAWoB,GAAsBC,EAAtBD,CAA2B5X,GAC5C,OAAOtB,OAAOU,QAAQoX,EAASwB,WAC5B7P,KAAI,yCAA2B,CAAEhI,OAA7B,KAAqCiW,WAArC,SACJ9P,OAAO2R,IACP9P,KAAI,qBAAGhI,YAGd,SAAS8X,GAA6BC,GAOpC,OAAO/B,GAAoB+B,EAAI9B,YAsCjC,SAAS+B,GAA6BD,GAOpC,OAAO5B,GAAoB4B,EAAI9B,YCzL1B,SAASgC,GAAmBlW,EAAQmW,GACzC,OAAOnW,IAAMmW,GAAMnW,EAAEqE,SAAW8R,EAAE9R,QAAUrE,EAAEoW,OAAM,SAACC,EAAGnQ,GAAJ,OAAUmQ,IAAMF,EAAEjQ,MAGjE,SAASoQ,GAAyBtW,EAAUmW,GACjD,OACEnW,IAAMmW,GACLnW,EAAEqE,SAAW8R,EAAE9R,QAAUrE,EAAEoW,OAAM,SAACC,EAAGnQ,GAAJ,OAAUgQ,GAAgBG,EAAGF,EAAEjQ,OCgCrE,IAAMqQ,GAAiC,CACrC9V,MAAO,KACPC,OAAQ,MACRI,OAAQ,YACRF,aAAc,GAEV4V,GAAkC,CACtC/V,MAAO,KACPC,OAAQ,MACRI,OAAQ,YACRF,aAAc,GAGH6V,GAAgBtR,IAAMC,MAA0B,SAAChD,GAC5D,I1C9CCnE,E0C+CD,OADgBsH,a1C9CftH,E0C8CsDmE,EAAQnB,G1C9C3C,SAACnD,GAAD,OAClBtB,OAAOuH,KAAKjG,EAAMC,eAAeiG,SAAS/F,M0C+CnC,eAACyY,GAAD,eAAwBtU,IAExB,QAILsU,GAAqBvR,IAAMC,MAC/B,YAAqE,IAA9DnH,EAA6D,EAAjEgD,GAAsB2Q,EAA2C,EAArDC,SAA2B8E,EAA0B,EAA1BA,cAAetW,EAAW,EAAXA,KACjDkK,EAAQC,eACRnF,EAAWC,cAUXsR,EAAYrR,YAAYqP,IACxBiC,EAAgBtR,aACpB,SAACzH,GAAD,OACe,MAAb8Y,EFoIN,SAACjB,EAAa1X,GAAd,OAAiC,SAACH,GAChC,IAAMwW,EAAWoB,GAAsBC,EAAtBD,CAA2B5X,GAC5C,GAAItB,OAAOuH,KAAKuQ,EAASwB,WAAW9R,SAAS/F,GAAS,CACpD,IAAMiW,EAAaI,EAASwB,UAAU7X,GACtC,GAAImW,GAAoBF,GACtB,OAAO1X,OAAOuH,KAAKmQ,EAAW4C,aAGlC,MAAO,IE3ICC,CAAsCH,EAAW3Y,EAAjD8Y,CAAyDjZ,GACzD,KACNoY,IAGF,OACE,uBACE/U,MAAO,CACLV,MAAO,OACPC,OAAQ,OACRsR,WAAYJ,EACRK,aAAM1H,EAAMU,QAAQiH,QAAQC,MAAO,UACnC5P,EACJzB,OAAQ,aAPZ,UAUE,eAACkG,EAAA,EAAD,CACE,aAAW,SACX7F,MAAO,CAAEmI,MAAO,QAASlI,SAAU,WAAYqQ,KAAM,GAAIW,OAAQ,GACjEzL,QA3BoB,WACxBtB,EAASlD,GAAuBlE,KA2B5BgJ,KAAK,QAJP,SAME,eAAC,KAAD,MAEF,eAAC+P,GAAD,CAAU/Y,OAAQA,EAAQoC,KAAMA,IAChC,eAACiL,GAAA,EAAD,CAAQrE,KAAK,QAAQE,QAAQ,WAAWR,QArCjB,WACzBtB,EAASsN,GAAgB1U,KAoCvB,mBAIA,eAACgZ,GAAD,CAAUhZ,OAAQA,IAClB,eAACiZ,GAAD,CAAajZ,OAAQA,EAAQ0Y,cAAeA,IAC1B,MAAjBE,GACCA,EAAcxS,OAAS,GACvBwS,EAAc5Q,KAAI,SAACkR,GAAD,OAAe,8BAAKA,aAM1CH,GAAW7R,IAAMC,MAGpB,YAAuB,IAApBnH,EAAmB,EAAnBA,OAAQoC,EAAW,EAAXA,KACNkK,EAAQC,eACRoM,EAAYrR,YAAYqP,IAExBwC,EAAU7R,aAAY,SAACzH,GAAD,aACb,MAAb8Y,GAAA,UF0EF,SAACjB,EAAa1X,GAAd,OAAiC,SAACH,GAChC,IAAMwW,EAAWoB,GAAsBC,EAAtBD,CAA2B5X,GAC5C,OAAItB,OAAOuH,KAAKuQ,EAASwB,WAAW9R,SAAS/F,GACpCqW,EAASwB,UAAU7X,GAAQmZ,QAE3B,ME9ELC,CAAgCT,EAAW3Y,EAA3CoZ,CAAmDvZ,UADvD,QAEI,QAGAqW,EAAS5O,aAAY,SAACzH,GAAD,OACZ,MAAb8Y,EF0DF,SAACjB,EAAa1X,GAAd,OAAiC,SAACH,GAChC,IAAMwW,EAAWoB,GAAsBC,EAAtBD,CAA2B5X,GAC5C,OAAItB,OAAOuH,KAAKuQ,EAASwB,WAAW9R,SAAS/F,GACpCqW,EAASwB,UAAU7X,GAAQkW,OAE3B,ME9DLmD,CAA+BV,EAAW3Y,EAA1CqZ,CAAkDxZ,GAClD,mBAEN,OACE,uBACEqD,MAAO,CACLR,QAAS,EACT4W,YAAa,GAEfvG,UAAU,WALZ,UAOGmD,IAAWN,IAA8B,eAACjI,GAAA,EAAD,IAC1C,gBAAC1E,EAAA,EAAD,CACE/F,MAAO,CACLqW,UAAW,OACXlO,MACE6K,IAAWN,GACPtJ,EAAMU,QAAQkD,MAAMsJ,UACpBlV,GANV,UASGlC,EAAKa,MACN,eAACwW,GAAD,CACEvJ,MAAOgG,IAAWN,GAA2BuD,EAAU,gBAO3DH,GAAW9R,IAAMC,MAEpB,YAAiB,IAAdnH,EAAa,EAAbA,OACE0Z,EAAWpS,YxCzJW,SAACtH,GAAD,OAAoB,SAACH,GACjD,IAAMY,EAAWP,EAAoBF,EAApBE,CAA4BL,GAC7C,GAAgB,MAAZY,EAAkB,CACpB,IAAMkZ,EAAgBpZ,EAAaa,EAAwBvB,GAAQY,GACnE,cAAOkZ,QAAP,IAAOA,OAAP,EAAOA,EAAe7Y,OwCqJK8Y,CAAe5Z,GAAS6Z,IAErD,OACE,qCACe,MAAZH,EACGA,EACGvT,QAAO,SAAC2T,GAAD,MAAwB,WAAdA,EAAKjb,QACtBmJ,KAAI,SAAC+R,EAAU9R,GACd,OAAO,eAAC+R,GAAD,CAAWD,SAAUA,EAAU9R,EAAGA,EAAGjI,OAAQA,OAExD,UAKJiZ,GAAc/R,IAAMC,MAGvB,YAAgC,IAA7BnH,EAA4B,EAA5BA,OAAQ0Y,EAAoB,EAApBA,cACNuB,EAAc3S,YxClKW,SAACtH,GAAD,OAAoB,SAACH,GACpD,IAAMY,EAAWP,EAAoBF,EAApBE,CAA4BL,GAC7C,GAAgB,MAAZY,EAAkB,CACpB,IAAMkZ,EAAgBpZ,EAAaa,EAAwBvB,GAAQY,GACnE,cAAOkZ,QAAP,IAAOA,OAAP,EAAOA,EAAe5Y,UwC+JtBmZ,CAAkBla,GAClB6Z,IAEF,OACE,qCACkB,MAAfI,EAAA,OACCA,QADD,IACCA,OADD,EACCA,EAAajS,KAAI,SAAC+R,EAAU9R,GAC1B,OAAO,eAACkS,GAAD,CAAcJ,SAAUA,EAAU9R,EAAGA,EAAGjI,OAAQA,OAIzD,eAAC,KAAD,CACEnB,KAAK,SACLsE,SAAUsB,KAASG,MACnB5B,GAAE,UAAKhD,GACPkD,MAAK,2BACAqV,IADA,IAEH/E,IAAK,KAEPkF,cAAeA,SAoCzB,IAAMsB,GAAY9S,IAAMC,MACtB,YAAsD,IAAD,IAAlD4S,SAAY5a,EAAsC,EAAtCA,KAAMN,EAAgC,EAAhCA,KAAMub,EAA0B,EAA1BA,OAAUpa,EAAgB,EAAhBA,OAAQiI,EAAQ,EAARA,EACrCoS,EAAYlP,GAAetM,GAC3BmE,EAAKgQ,GAAWhT,EAAQb,EAAMN,GACpC,EAA4BqI,IAAMiF,UAAS,GAA3C,mBAAOmO,EAAP,KAAgBC,EAAhB,KACMC,EA5BV,SAAkBC,EAAyBL,GACzC,QAAY9V,IAARmW,EAAmB,CACrB,IAAInc,EAAS,4CAA4Coc,KAAKD,GAC9D,OAAe,OAAXnc,EACE8b,EACI,QAAN,OAAeO,SAASrc,EAAO,GAAI,IAAnC,aAA2Cqc,SACzCrc,EAAO,GACP,IAFF,aAGMqc,SAASrc,EAAO,GAAI,IAH1B,WAKM,QAAN,OAAeqc,SAASrc,EAAO,GAAI,IAAnC,aAA2Cqc,SACzCrc,EAAO,GACP,IAFF,aAGMqc,SAASrc,EAAO,GAAI,IAH1B,aAMF,GAYgBsc,CAASP,EAAWD,GACtC,OACE,eAAC,KAAD,CACES,aAAc,kBAAMN,GAAS,IAC7BO,aAAc,kBAAMP,GAAS,IAE7B1b,KAAK,SACLsE,SAAUsB,KAASC,KACnB1B,GAAIA,EACJE,MAAK,2BACAoV,IADA,IAEHvE,WAAYyG,EACZhH,IAAS,GAAJvL,EAAS,KAEhBkL,kBAAmBA,GAZrB,SAcE,eAAC4H,GAAA,EAAD,CACE7O,MACE,uCACE,gBAACjD,EAAA,EAAD,CAAYoC,MAAM,UAAlB,mBAAmClM,KACnC,gBAAC8J,EAAA,EAAD,CAAYoC,MAAM,UAAlB,mBAAmCxM,QAGvCiN,KAAMwO,EACNU,UAAU,WACVC,OAAK,EATP,SAWE,4BAtBGhT,EAAEM,cA6BT4R,GAAejT,IAAMC,MACzB,YAA8C,IAAD,IAA1C4S,SAAY5a,EAA8B,EAA9BA,KAAMN,EAAwB,EAAxBA,KAAQmB,EAAgB,EAAhBA,OAAQiI,EAAQ,EAARA,EAC7BoD,EAAQF,GAAetM,GACvBmE,EAAKgQ,GAAWhT,EAAQb,EAAMN,GACpC,EAA4BqI,IAAMiF,UAAS,GAA3C,mBAAOmO,EAAP,KAAgBC,EAAhB,KACA,OACE,eAAC,KAAD,CACEM,aAAc,kBAAMN,GAAS,IAC7BO,aAAc,kBAAMP,GAAS,IAE7B1b,KAAK,SACLsE,SAAUsB,KAASG,MACnB5B,GAAIA,EACJE,MAAK,2BACAqV,IADA,IAEHxE,WAAY1I,EACZmI,IAAS,GAAJvL,EAAS,KAEhBkL,kBAAmBA,GAZrB,SAcE,eAAC4H,GAAA,EAAD,CACE7O,MACE,uCACE,gBAACjD,EAAA,EAAD,CAAYoC,MAAM,UAAlB,mBAAmClM,KACnC,gBAAC8J,EAAA,EAAD,CAAYoC,MAAM,UAAlB,mBAAmCxM,QAGvCiN,KAAMwO,EACNU,UAAU,YACVC,OAAK,EATP,SAWE,4BAtBGhT,EAAEM,cA6BTkR,GAAevS,IAAMC,MAExB,YAAgB,IAAb+I,EAAY,EAAZA,MACEgL,EAAchU,IAAMoJ,OAAiC,MAC3D,EAAwBpJ,IAAMiF,UAAS,GAAvC,mBAAOL,EAAP,KAAagG,EAAb,KACMxF,EAAQC,eACd,OAAa,MAAT2D,EAEA,uCACE,eAACnH,EAAA,EAAD,CACEsJ,IAAK6I,EACLxS,QAAS,kBAAMoJ,GAAQ,SAACqJ,GAAD,OAAeA,MACtCnS,KAAK,QACL9F,MAAO,CAAEmI,MAAOiB,EAAMU,QAAQkD,MAAMsJ,MAJtC,SAME,eAAC,KAAD,MAEF,eAAC4B,GAAA,EAAD,CACEtP,KAAMA,EACNuP,SAAUH,EAAYzK,QACtBxE,QAAS,kBAAM6F,GAAQ,IACvBwJ,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,SACVC,WAAY,QAVhB,SAaE,sBAAKtY,MAAO,CAAEuG,OAAQ,GAAtB,SACE,eAACiS,GAAA,EAAD,CAAgBxL,OAAO,EAAvB,SAA8BA,WAM/B,QAIX,SAAS2J,GACP9X,EACAmW,GAEA,OAAS,MAALnW,GAAkB,MAALmW,EAEbnW,IAAMmW,GACLnW,EAAEqE,SAAW8R,EAAE9R,QACdrE,EAAEoW,OAAM,SAACC,EAAGnQ,GAAJ,OAAUmQ,EAAEvZ,OAASqZ,EAAEjQ,GAAGpJ,MAAQuZ,EAAEjZ,OAAS+Y,EAAEjQ,GAAG9I,aAGjDmF,IAANvC,QAAyBuC,IAAN4T,E,oCC/WxByD,GAAoB,SAAC9b,GAAD,OAAsBA,EAAM+b,aAKzCC,GACX,SAAChS,GAAD,OAAsB,SAAChK,GAAD,OACpBtB,OAAOuH,KAAK6V,GAAkB9b,GAAOic,YAAY/V,SAAS8D,KAqBjDkS,GACX,SAAClS,GAAD,OAAsB,SAAChK,GAAD,OACpBtB,OAAOuH,KAAK6V,GAAkB9b,GAAOmc,SAASjW,SAAS8D,KAkB9CoS,GAAkB,SAACpS,GAAD,OAAsB,SAAChK,GAAD,OACnD8b,GAAkB9b,GAAOqc,MAAMrS,KAEpBsS,GACX,SAACtS,GAAD,OAAsB,SAAChK,GAAD,OACpBtB,OAAOuH,KAAK6V,GAAkB9b,GAAOqc,OAAOnW,SAAS8D,KAO5CuS,GACX,SAACvS,GAAD,OAAsB,SAAChK,GAAD,OACpBsc,GAA6BtS,EAA7BsS,CAAuCtc,IACvC8b,GAAkB9b,GAAOqc,MAAMrS,GAAUkG,UAiChCsM,GACX,SAACxS,GAAD,OAAsB,SAAChK,GAAD,OACpBtB,OAAOuH,KAAK6V,GAAkB9b,GAAOyc,KAAKvW,SAAS8D,KAE1C0S,GAAqB,SAAC1S,GAAD,OAAsB,SAAChK,GAAD,OACtDwc,GAA2BxS,EAA3BwS,CAAqCxc,GACjC8b,GAAkB9b,GAAOyc,IAAIzS,GAAUqG,MACvC,OAEOsM,GACX,SAAC3S,GAAD,OAAsB,SAAChK,GAAD,OACpBwc,GAA2BxS,EAA3BwS,CAAqCxc,IACrC8b,GAAkB9b,GAAOyc,IAAIzS,GAAUkG,UAE9B0M,GACX,SAAC5S,GAAD,OAAsB,SAAChK,GAAD,OACpBwc,GAA2BxS,EAA3BwS,CAAqCxc,IACrC8b,GAAkB9b,GAAOyc,IAAIzS,GAAUmG,YAE9B0M,GAAgB,SAAC7S,GAAD,OAAsB,SAAChK,GAAD,mCACjD8b,GAAkB9b,GAAO8c,IAAI9S,UADoB,aACjD,EAAwCzH,KAAK,UADI,QACE,KAExCwa,GACX,SAAC/S,GAAD,OAAsB,SAAChK,GAAD,OACpBtB,OAAOuH,KAAK6V,GAAkB9b,GAAO8c,KAAK5W,SAAS8D,KAoB1CgT,GACX,SAAChT,GAAD,OAAsB,SAAChK,GAAD,OACpBtB,OAAOuH,KAAK6V,GAAkB9b,GAAOid,SAAS/W,SAAS8D,KAqB9CkT,GACX,SAAClT,GAAD,OAAsB,SAAChK,GAAD,OACpBtB,OAAOuH,KAAK6V,GAAkB9b,GAAOmd,KAAKjX,SAAS8D,KCzJ1CoT,GAAoBrb,YAAgB,UAI5CiU,GAJ4C,6DAK/C,aAAwB/T,GAAxB,mBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAM8e,EAAf,EAAeA,MAAf,kBAE2Bjb,IAAMC,IAAN,UAAaR,GAAb,6BAA0CtD,GAAQ,CACvEgC,OAAQ,CACN8c,MAAOA,KAJf,cAEU/a,EAFV,yBAOWA,EAASC,MAPpB,yDASWN,EAASE,gBAAT,OATX,yDAL+C,yDAmBpCmb,GAAiBvb,YAAgB,UAGzCiU,GAHyC,0DAGC,aAAiB/T,GAAjB,iBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAT,kBAEpB6D,IAAMC,IAAN,UAAaR,GAAb,yBAAsCtD,IAFlB,cAErC+D,EAFqC,yBAGpCA,EAASC,MAH2B,yDAKpCN,EAASE,gBAAT,OALoC,yDAHD,yDAYjCob,GAAexb,YAAgB,UAIvCiU,GAJuC,wDAK1C,aAAuC/T,GAAvC,qBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAMif,EAAf,EAAeA,WAAYC,EAA3B,EAA2BA,SAA3B,kBAE2Brb,IAAMC,IAAN,UAAaR,GAAb,0BAAuCtD,GAAQ,CACpEgC,OAAQ,CACNmd,YAAaF,EACbG,UAAWF,KALnB,cAEUnb,EAFV,yBAQWA,EAASC,MARpB,yDAUWN,EAASE,gBAAT,OAVX,yDAL0C,yDAoB/Byb,GAAa7b,YAAgB,UAKrCiU,GALqC,sDAKC,aAAiB/T,GAAjB,iBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAT,kBAEhB6D,IAAMC,IAAN,UAAaR,GAAb,wBAAqCtD,IAFrB,cAEjC+D,EAFiC,yBAGhCA,EAASC,MAHuB,yDAKhCN,EAASE,gBAAT,OALgC,yDALD,yDAc7B0b,GAAa9b,YAAgB,UACrCiU,GADqC,sDAExC,aAAiB/T,GAAjB,iBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAT,kBAE2B6D,IAAMC,IAAN,UAAaR,GAAb,0BAAuCtD,GAAQ,IAF1E,cAEU+D,EAFV,yBAGWA,EAASC,MAHpB,yDAKWN,EAASE,gBAAT,OALX,yDAFwC,yDAY7B2b,GAAiB/b,YAAgB,UAGzCiU,GAHyC,0DAGC,aAAiB/T,GAAjB,iBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAT,kBAEpB6D,IAAMC,IAAN,UAAaR,GAAb,yBAAsCtD,GAAQ,IAF1B,cAErC+D,EAFqC,yBAGpCA,EAASC,MAH2B,yDAKpCN,EAASE,gBAAT,OALoC,yDAHD,yDAYjC4b,GAAahc,YAAgB,UACrCiU,GADqC,sDAExC,aAAiB/T,GAAjB,iBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAT,kBAE2B6D,IAAMC,IAAN,UAAaR,GAAb,yBAAsCtD,GAAQ,IAFzE,cAEU+D,EAFV,yBAGWA,EAASC,MAHpB,yDAKWN,EAASE,gBAAT,OALX,yDAFwC,yD,SCpG7B6b,GAAqB3W,IAAM4W,cAKrC,CAAE9d,OAAQ,GAAI6J,SAAU,GAAIkU,SAAU,MAAOC,OAAQC,M,UCY3CC,GACC,YADDA,GAEG,cCRT,SAASC,GACd3X,GAEA,OAAOA,EAAK4X,WAAaF,GAGpB,SAASG,GACd7X,GAEA,OAAOA,EAAK4X,WAAaF,GAGpB,SAASI,GAAY9X,GAC1B,OACEA,EAAK4X,WAAaF,IAClB1X,EAAKuX,WAAajI,GAIf,SAASyI,GACd/X,GAEA,OACEA,EAAK4X,WAAaF,IAClB1X,EAAKuX,WAAajI,GAIf,SAAS0I,GAAUhY,GACxB,OACEA,EAAK4X,WAAaF,IAClB1X,EAAKuX,WAAajI,GAIf,SAAS2I,GAAcjY,GAC5B,OACEA,EAAK4X,WAAaF,IAClB1X,EAAKuX,WAAajI,GAWf,SAAS4I,GAAclY,GAC5B,OACEA,EAAK4X,WAAaF,IAClB1X,EAAKuX,WAAajI,GCrDf,IAAM6I,GAAgC,SAAC9e,GAAD,OAC3CA,EAAM+e,eAAeC,gBAEjBC,GAAuB,SAACjf,GAAD,OAAsBA,EAAM+e,eAAeG,OAE3DC,GAA4B,SAACnf,GAAD,OACvCtB,OAAOuH,KAAKgZ,GAAqBjf,IAAQmI,KAAI,SAACoD,GAAD,OAAS6T,OAAO7T,OAElD8T,GAA0B,SAAClB,GAAD,OAAoB,SAACne,GAAD,OACzDif,GAAqBjf,GAAOme,GAAQI,WAOzBe,GACX,SAACnB,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIG,GAAgB3X,GAClB,OAAOA,EAAK4Y,UAEZ,MAAM,IAAI9Y,MAAM,gCAIT+Y,GACX,SAACrB,GAAD,OAAoB,SAACne,GAAD,OAClBsf,GAAyBnB,EAAzBmB,CAAiCtf,GAAOG,SAE/Bsf,GACX,SAACtB,GAAD,OAAoB,SAACne,GAAD,OAClBsf,GAAyBnB,EAAzBmB,CAAiCtf,GAAOgK,WAE/B0V,GACX,SAACvB,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIG,GAAgB3X,GAClB,OAAOA,EAAKgZ,eAEZ,MAAM,IAAIlZ,MAAM,gCAITmZ,GAAyB,SAACzB,GAAD,OAAoB,SAACne,GAAD,OACxDsf,GAAyBnB,EAAzBmB,CAAiCtf,GAAO6f,UAE7BC,GACX,SAAC3B,GAAD,OAAoB,SAACne,GAAD,mCAClB4f,GAAuBzB,EAAvByB,CAA+B5f,UADb,aAClB,EAAuCG,cADrB,QAC+B,OAExC4f,GACX,SAAC5B,GAAD,OAAoB,SAACne,GAAD,mCAClB4f,GAAuBzB,EAAvByB,CAA+B5f,UADb,aAClB,EAAuCgK,gBADrB,QACiC,OAE1CgW,GACX,SAAC7B,GAAD,OAAoB,SAACne,GAAD,OAClB0f,GAA8BvB,EAA9BuB,CAAsC1f,GAAOG,SAEpC8f,GACX,SAAC9B,GAAD,OAAoB,SAACne,GAAD,OAClB0f,GAA8BvB,EAA9BuB,CAAsC1f,GAAOgK,WAEpCkW,GACX,SAAC/B,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIG,GAAgB3X,GAClB,OAAOA,EAAKwZ,YAEZ,MAAM,IAAI1Z,MAAM,gCAIT2Z,GACX,SAACjC,GAAD,OAAoB,SAACne,GAAD,OAClBkgB,GAA2B/B,EAA3B+B,CAAmClgB,GAAOG,SAEjCkgB,GACX,SAAClC,GAAD,OAAoB,SAACne,GAAD,OAClBkgB,GAA2B/B,EAA3B+B,CAAmClgB,GAAOgK,WAEjCsW,GACX,SAACnC,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIK,GAAkB7X,GACpB,OAAOA,EAAKuX,SAEZ,MAAM,IAAIzX,MAAM,gCAIT8Z,GACX,SAACpC,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIK,GAAkB7X,GACpB,OAAOA,EAAKxG,OAEZ,MAAM,IAAIsG,MAAM,gCAIT+Z,GACX,SAACrC,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIK,GAAkB7X,GACpB,OAAOA,EAAKqD,SACP,GAAIsU,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAUvV,SAEtB,MAAM,IAAIvD,MAAM,gCAeTga,GAAwB,SAACtC,GAAD,OAAoB,SAACne,GACxD,IACuB,IAEW,IAH5B2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,2BAAOA,EAAKkZ,eAAZ,aAAO,EAAc7V,gBAArB,QAAiC,KAC5B,GAAIsU,GAAgB3X,GACzB,2BAAOA,EAAK4Y,UAAUM,eAAtB,aAAO,EAAwB7V,gBAA/B,QAA2C,KAE3C,MAAM,IAAIvD,MAAM,gCAIPia,GACX,SAACvC,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAKga,eACP,GAAIrC,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAUoB,eAEtB,MAAM,IAAIla,MAAM,gCAITma,GACX,SAACzC,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAKka,QACP,GAAIvC,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAUsB,QAEtB,MAAM,IAAIpa,MAAM,gCAITqa,GACX,SAAC3C,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAK6W,WACP,GAAIc,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAU/B,WAEtB,MAAM,IAAI/W,MAAM,gCAITsa,GACX,SAAC5C,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAK8W,SACP,GAAIa,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAU9B,SAEtB,MAAM,IAAIhX,MAAM,gCAITua,GACX,SAAC7C,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAKsa,SACP,GAAI3C,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAU0B,SAEtB,MAAM,IAAIxa,MAAM,gCAITya,GACX,SAAC/C,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAKwa,SACP,GAAI7C,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAU4B,SAEtB,MAAM,IAAI1a,MAAM,gCAIT2a,GACX,SAACjD,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAK0a,UACP,GAAI/C,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAU8B,UAEtB,MAAM,IAAI5a,MAAM,gCAIT6a,GAAwB,SAACnD,GAAD,OAAoB,SAACne,GACxD,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAK4a,OACP,GAAIjD,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAUgC,OAEtB,MAAM,IAAI9a,MAAM,gCAgBP+a,GACX,SAACrD,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAK8a,OACP,GAAInD,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAe8B,OAE3B,MAAM,IAAIhb,MAAM,gCAITib,GACX,SAACvD,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAKgb,KACP,GAAIrD,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAegC,KAE3B,MAAM,IAAIlb,MAAM,gCAITmb,GACX,SAACzD,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAKwa,SACP,GAAI7C,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAewB,SAE3B,MAAM,IAAI1a,MAAM,gCAITob,GACX,SAAC1D,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAKsa,SACP,GAAI3C,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAesB,SAE3B,MAAM,IAAIxa,MAAM,gCAITqb,GACX,SAAC3D,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAKga,eACP,GAAIrC,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAegB,eAE3B,MAAM,IAAIla,MAAM,gCAITsb,GACX,SAAC5D,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAKqb,SACP,GAAI1D,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAeqC,SAE3B,MAAM,IAAIvb,MAAM,gCAITwb,GACX,SAAC9D,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAKub,OACP,GAAI5D,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAeuC,OAE3B,MAAM,IAAIzb,MAAM,gCAIT0b,GACX,SAAChE,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GACnB,OAAOA,EAAKyb,eACP,GAAI9D,GAAgB3X,GACzB,OAAOA,EAAKgZ,eAAeyC,eAE3B,MAAM,IAAI3b,MAAM,gCA0BT4b,GACX,SAACC,GAAD,OAAyB,SAACtiB,GACxB,IAAMuiB,EAAU1F,GAAcyF,EAAdzF,CAA2B7c,GAC3C,OAAuB,IAAnBuiB,EAAQhc,OACH2E,KAAKsX,IAAL,MAAAtX,KAAI,aAAQqX,EAAQpa,KAAI,SAACsa,GAAD,OAASvX,KAAKsX,IAAL,MAAAtX,KAAI,aAAQuX,SAE7C,IAIAC,GACX,SAACvE,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIS,GAAcjY,GAChB,OAAOA,EAAK0a,UACP,GAAI/C,GAAgB3X,GACzB,OAAOA,EAAKwZ,YAAYkB,UAExB,MAAM,IAAI5a,MAAM,gCAITkc,GACX,SAACxE,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIS,GAAcjY,GAChB,OAAOA,EAAK4a,OACP,GAAIjD,GAAgB3X,GACzB,OAAOA,EAAKwZ,YAAYoB,OAExB,MAAM,IAAI9a,MAAM,gCAITmc,GACX,SAACzE,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIQ,GAAUhY,GACZ,OAAOA,EAAK8D,UAEZ,MAAM,IAAIhE,MAAM,gCAIToc,GACX,SAAC1E,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIQ,GAAUhY,GACZ,OAAOA,EAAK4D,UAEZ,MAAM,IAAI9D,MAAM,gCAITqc,GAAwB,SAAC3E,GAAD,OAAoB,SAACne,GACxD,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIQ,GAAUhY,GACZ,OAAOA,EAAK6D,SAEZ,MAAM,IAAI/D,MAAM,gCAIPsc,GACX,SAAC5E,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIU,GAAclY,GAChB,OAAOA,EAAKqc,OAEZ,MAAM,IAAIvc,MAAM,gCAITwc,GACX,SAAC9E,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIU,GAAclY,GAChB,OAAOA,EAAKuc,OAEZ,MAAM,IAAIzc,MAAM,gCC9aT0c,GAAU9b,IAAMC,MAAK,WAChC,IAAkB/I,EAAS8I,IAAM+b,WAAWpF,IAApChU,SACFqZ,EAAgB5b,YAAY+U,GAA2Bje,IACvD+kB,EAAY7b,YAAYkV,GAAuBpe,IAC/CglB,EAAc9b,YAAYmV,GAAyBre,IACnD8R,EAAQ5I,YAAYiV,GAAmBne,IACvCgJ,EAAWC,cAMjB,OALAH,IAAMK,WAAU,WACT2b,GACH9b,EAASqW,GAAW,CAAErf,YAEvB,CAACgJ,EAAU8b,EAAe9kB,IACzB+kB,EACK,eAACxV,GAAA,EAAD,IACW,MAATuC,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBkT,EACF,eAACC,GAAD,IAEA,QAILA,GAAenc,IAAMC,MAAK,WAC9B,MAAmCD,IAAM+b,WAAWpF,IAA5CG,EAAR,EAAQA,OAAkB5f,EAA1B,EAAgByL,SACVS,EAAYhD,YAAYmb,GAAuBzE,IAC/C5T,EAAY9C,YAAYob,GAAuB1E,IAC/C3T,EAAW/C,YAAYqb,GAAsB3E,IACnD,OACE,eAACsF,GAAD,CACEllB,KAAMA,EACNkM,UAAWA,EACXF,UAAWA,EACXC,SAAUA,OAUHiZ,GAAwBpc,IAAMC,MAKxC,YAA+C,INyBpB0C,EMzBxBzL,EAA2C,EAA3CA,KAAMkM,EAAqC,EAArCA,UAAWD,EAA0B,EAA1BA,SAAUD,EAAgB,EAAhBA,UACzBhI,EAAOkF,aNwBeuC,EMvBZzL,ENuBiC,SAACyB,GAAD,OACjD8b,GAAkB9b,GAAOyc,IAAIzS,GAAUzH,QMvBrC,SAACL,EAAwBmW,GACvB,OAAS,MAALnW,GAAkB,MAALmW,EACRG,GAAsBtW,EAAGmW,QAEnB5T,IAANvC,QAAyBuC,IAAN4T,KAK1BqL,EAAUrc,IAAMsc,SAAQ,WAC5B,OAAIlZ,EACKlI,EAAK,GAAG4F,KAAI,SAACyb,EAAKxb,GAAN,OAAY7F,EAAK4F,KAAI,SAAC0b,GAAD,OAASA,EAAIzb,SAEhD7F,IACN,CAACA,EAAMkI,IAEJqZ,EAAwBzc,IAAMsc,SAAQ,WAC1C,IAAMI,EAAa,WACjB,OAAkB,OAAdxZ,EACKmZ,EAAQ,GAEXnZ,GAAamZ,EAAQnd,OAChBmd,EAAQA,EAAQnd,OAAS,GAEzBmd,EAAQnZ,IAKrB,OAAIC,EACI,CACJ,CAAEwZ,MAAO,OAAQC,WAAY,QAASthB,MAAO,MAD/C,oBAEKohB,IAAa5b,KAAI,SAAC5I,EAAO2kB,GAC1B,MAAO,CACLF,MAAM,MAAD,OAAQE,EAAM,GACnBD,WAAW,GAAD,OAAmB,OAAd1Z,EAAqB2Z,EAAM3kB,GAC1CoD,MAAO,UAKNohB,IAAa5b,KAAI,SAAC5I,EAAO2kB,GAC9B,MAAO,CACLF,MAAM,MAAD,OAAQE,EAAM,GACnBD,WAAW,GAAD,OAAmB,OAAd1Z,EAAqB2Z,EAAM3kB,GAC1CoD,MAAO,UAIZ,CAAC+gB,EAASnZ,EAAWC,IAClB2Z,EAAOT,EACVvb,KAAI,SAAC0b,EAAKO,GACT,IAAIC,EAAS3lB,OAAO4lB,YAClB,CAACF,GAAD,oBAAYP,IAAK1b,KAAI,SAAC5I,EAAO8d,GAC3B,MAAO,CAAC,MAAD,OAAOA,GAAS9d,OAI3B,OADA8kB,EAAM,GAASD,EACRC,KAER/d,QACC,SAAC/G,EAAO2kB,GAAR,OACgB,OAAd3Z,GAAqC,OAAdA,GAAsB2Z,EAAM3Z,KAGzD,OACE,sBAAKlH,MAAO,CAAET,OAAQ,IAAKD,MAAO,QAAlC,SACE,eAAC,KAAD,CAAUwhB,KAAMA,EAAML,QAASA,S,gBC7F/BpQ,GAAmC,CACvC/Q,MAAO,EACPC,OAAQ,GACR+Q,IAAK,GACL3Q,OAAQ,YACRkK,YAAa,OACbpK,aAAc,GAGHyhB,GAAcld,IAAMC,MAAgB,SAAChD,GAEhD,OADgBmD,YAAYzB,GAAuB1B,EAAQnB,KAElD,eAACqhB,GAAD,eAAsBlgB,IAEtB,QAILkgB,GAAmBnd,IAAMC,MAAgB,YAA+B,IAAxBnH,EAAuB,EAA3BgD,GAAY4Q,EAAe,EAAfA,SACtDxM,EAAWC,cACXwC,EAAWvC,YAAYtB,GAAgChG,IAWvDsM,EAAQC,eAMd,OACE,uBACErJ,MAAO,CACLT,OAAQ,OACRD,MAAO,QACPuR,WAAYH,EACRI,aAAM1H,EAAMU,QAAQiH,QAAQC,MAAO,SACnC5P,GANR,UASE,eAACyE,EAAA,EAAD,CACE,aAAW,SACX7F,MAAO,CAAEmI,MAAO,QAASlI,SAAU,WAAYqQ,KAAM,GAAIW,OAAQ,GACjEzL,QAjBoB,WACxBtB,EAASlD,GAAuBlE,KAiB5BgJ,KAAK,QAJP,SAME,eAAC,KAAD,MAEF,eAACkI,GAAD,CACEC,iBAnCmB,SAAC/S,GACxBgJ,EAAS0C,GAAqB,CAAE9J,SAAQ6J,SAAUzL,KAClD,IAAM0G,EAAW1G,EAAK6T,MAAM,KAAKC,UAAU,GAC3C9K,EACEvC,GAA0B,CACxB7E,SACA8E,eA8BAY,SAAUrD,GACVwH,SAAUA,EAAWA,EAASoI,MAAM,KAAKC,UAAU,GAAK,OAEvDrI,GAAY,eAACya,GAAD,CAAoBtkB,OAAQA,EAAQ6J,SAAUA,IAC7D,eAAC,KAAD,CACEhL,KAAK,SACLsE,SAAUsB,KAASG,MACnB5B,GAAIgQ,GAAWhT,EAAQ,MAAO,WAC9BkD,MAAOqQ,WAMT+Q,GAAqBpd,IAAMC,MAC/B,YAA2B,IAAxBnH,EAAuB,EAAvBA,OAAQ6J,EAAe,EAAfA,SACT,EAAwB3C,IAAMiF,UAAS,GAAvC,mBAAOL,EAAP,KAAagG,EAAb,KAGA,EAAkC5K,IAAMiF,SACtC7E,YvCzFJ,SAACtH,GAAD,OAAoB,SAACH,GAAD,OAClBwG,GAAwBrG,EAAxBqG,CAAgCxG,GAAOuK,WuCwFzBma,CAAiCvkB,KAD/C,mBAAOoK,EAAP,KAAkBoa,EAAlB,KAGA,EAAgCtd,IAAMiF,SACpC7E,YvCxFJ,SAACtH,GAAD,OAAoB,SAACH,GAAD,OAClBwG,GAAwBrG,EAAxBqG,CAAgCxG,GAAOwK,UuCuFzBoa,CAAgCzkB,KAD9C,mBAAOqK,EAAP,KAAiBqa,EAAjB,KAGA,EAAkCxd,IAAMiF,SACtC7E,YvCvFJ,SAACtH,GAAD,OAAoB,SAACH,GAAD,OAClBwG,GAAwBrG,EAAxBqG,CAAgCxG,GAAOyK,WuCsFzBqa,CAAiC3kB,KAD/C,mBAAOsK,EAAP,KAAkBsa,EAAlB,KAGMxd,EAAWC,cAcjB,OACE,uCACE,eAACgG,GAAA,EAAD,CAAQ3E,QAAS,kBAAMoJ,GAAQ,IAA/B,sBACA,gBAACtF,GAAA,EAAD,CAAQV,KAAMA,EAAd,UACE,eAACY,GAAA,EAAD,0BACA,gBAACC,GAAA,EAAD,CAAeC,UAAQ,EAAvB,UACE,gBAACyB,GAAA,EAAD,CAAK5G,GAAI,CAAE4B,QAAS,OAAQwb,EAAG,EAAGC,EAAG,EAAGxW,WAAY,cAApD,UACE,eAACyW,GAAA,EAAD,CACEtd,GAAI,CAAEgC,OAAQ,SAAC6C,GAAD,OAAWA,EAAMQ,QAAQ,EAAG,EAAG,EAAG,KAChDkY,QACE,eAACC,GAAA,EAAD,CACEC,QAAS5a,EACTgI,SAAU,SAACC,GAAD,OAAWqS,EAAarS,EAAME,OAAOyS,YAGnDjiB,MAAM,cAER,eAACkiB,GAAA,EAAD,CACEliB,MAAM,SACNwE,GAAI,CACFjF,MAAO,IACPiH,OAAQ,SAAC6C,GAAD,OAAWA,EAAMQ,QAAQ,EAAG,EAAG,EAAG,KAE5CjO,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SAAU,SAACC,GACK0M,OAAO1M,EAAME,OAAOrT,QACrB,GACXolB,EAAavF,OAAO1M,EAAME,OAAOrT,SAGrCA,MAAOgL,IAET,eAAC2a,GAAA,EAAD,CACEtd,GAAI,CAAEgC,OAAQ,SAAC6C,GAAD,OAAWA,EAAMQ,QAAQ,EAAG,EAAG,EAAG,KAChDkY,QACE,eAACC,GAAA,EAAD,CACEC,QAAS7a,EACTiI,SAAU,SAACC,GAAD,OAAWmS,EAAYnS,EAAME,OAAOyS,YAGlDjiB,MAAM,iBAGV,eAACgG,EAAA,EAAD,CAAYC,QAAQ,KAApB,qBACA,eAACoc,GAAD,CACEzb,SAAUA,EACVS,UAAWA,EACXF,UAAWA,EACXC,SAAUA,OAGd,gBAAC+C,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAQ3E,QApEM,WACpBoJ,GAAQ,IAmE8B5I,QAAQ,WAAWmC,MAAM,UAAzD,oBAGA,eAACgC,GAAA,EAAD,CAAQ3E,QApEE,WAChBoJ,GAAQ,GACR1K,EACE2C,GAAqB,CACnB/J,SACApB,MAAO,CAAEwL,YAAWC,WAAUC,iBA+DAe,MAAM,UAAUnC,QAAQ,WAApD,4BAUNoc,GAAape,IAAMC,MAKtB,YAAwC,IAA3B/I,EAA0B,EAApCyL,SAAmB0b,EAAiB,kBAClCrC,EAAgB5b,YAAY+U,GAA2Bje,IACvD+kB,EAAY7b,YAAYkV,GAAuBpe,IAC/CglB,EAAc9b,YAAYmV,GAAyBre,IACnD8R,EAAQ5I,YAAYiV,GAAmBne,IACvCgJ,EAAWC,cAMjB,OALAH,IAAMK,WAAU,WACT2b,GACH9b,EAASqW,GAAW,CAAErf,YAEvB,CAACgJ,EAAU8b,EAAe9kB,IACzB+kB,EACK,eAACxV,GAAA,EAAD,IACW,MAATuC,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBkT,EACF,eAACE,GAAD,aAAuBllB,KAAMA,GAAUmnB,IAEvC,QC3OEC,GAAa,SAAC3lB,GACzB,OAAkB,MAAdA,EAAM4lB,KACD5lB,EAAM4lB,UAEb,GCNSC,GAAkB,OCMlBC,GAAc/jB,YAAgB,UACtC8jB,GADsC,uDAEzC,aAAiB5jB,GAAjB,iBAAAC,EAAA,6DAAS3D,EAAT,EAASA,KAAT,kBAE2B6D,IAAMC,IAAN,UAAaR,GAAb,iBAA8BtD,IAFzD,cAEU+D,EAFV,yBAGWA,EAASC,MAHpB,yDAKWN,EAASE,gBAAT,OALX,yDAFyC,yDCqCrCuR,GAAmC,CACvC/Q,MAAO,EACPC,OAAQ,GACR+Q,IAAK,GACL3Q,OAAQ,YACRkK,YAAa,OACbpK,aAAc,GAGHijB,GAAe1e,IAAMC,MAAgB,SAAChD,GAEjD,OADgBmD,YAAYzB,GAAuB1B,EAAQnB,KAElD,eAAC6iB,GAAD,eAAuB1hB,IAEvB,QAIL0hB,GAAoB3e,IAAMC,MAAgB,YAA+B,IAAxBnH,EAAuB,EAA3BgD,GAAY4Q,EAAe,EAAfA,SACvDxM,EAAWC,cACXwC,EAAWvC,YAAYtB,GAAgChG,IAWvDsM,EAAQC,eAMd,OACE,uBACErJ,MAAO,CACLT,OAAQ,OACRD,MAAO,QACPuR,WAAYH,EACRI,aAAM1H,EAAMU,QAAQiH,QAAQC,MAAO,SACnC5P,GANR,UASE,eAACyE,EAAA,EAAD,CACE,aAAW,SACX7F,MAAO,CAAEmI,MAAO,QAASlI,SAAU,WAAYqQ,KAAM,GAAIW,OAAQ,GACjEzL,QAjBoB,WACxBtB,EAASlD,GAAuBlE,KAa9B,SAKE,eAAC,KAAD,MAEF,eAACkR,GAAD,CACEC,iBAlCmB,SAAC/S,GACxBgJ,EAAS0C,GAAqB,CAAE9J,SAAQ6J,SAAUzL,KAClD,IAAM0G,EAAW1G,EAAK6T,MAAM,KAAKC,UAAU,GAC3C9K,EACEvC,GAA0B,CACxB7E,SACA8E,eA6BAY,SAAUrD,GACVwH,SAAUA,EAAWA,EAASoI,MAAM,KAAKC,UAAU,GAAK,UAE5C5N,IAAbuF,GAA0B,eAACic,GAAD,CAAY9lB,OAAQA,IAC/C,eAAC,KAAD,CACEnB,KAAK,SACLsE,SAAUsB,KAASG,MACnB5B,GAAIgQ,GAAWhT,EAAQ,OAAQ,YAC/BkD,MAAOqQ,WAMTuS,GAAa5e,IAAMC,MAEtB,YAAiB,IAAdnH,EAAa,EAAbA,OACJ,EAAwBkH,IAAMiF,UAAS,GAAvC,mBAAOL,EAAP,KAAagG,EAAb,KAEMiU,EAAoBze,YAAYf,GAAwBvG,IAE9D,OACE,uCACE,eAACqN,GAAA,EAAD,CAAQnE,QAAQ,WAAWF,KAAK,QAAQN,QAAS,kBAAMoJ,GAAQ,IAA/D,SACG,cAEH,eAAC7I,EAAA,EAAD,CAAY8J,UAAU,kBAAkB7J,QAAQ,UAAhD,SACK6c,GAAwC,8BAG7C,gBAACvZ,GAAA,EAAD,CAAQV,KAAMA,EAAMG,QAAS,kBAAM6F,GAAQ,IAAQrF,WAAS,EAA5D,UACE,eAACC,GAAA,EAAD,UAAc,gBACd,eAACsZ,GAAD,CAAWhmB,OAAQA,IACnB,gBAACoN,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAQ3E,QAAS,kBAAMoJ,GAAQ,IAAQ5I,QAAQ,WAA/C,oBAGA,eAACmE,GAAA,EAAD,CACE3E,QAAS,kBAAMoJ,GAAQ,IACvBzG,MAAM,UACNnC,QAAQ,WACR+c,WAAS,EAJX,4BAcJD,GAAY9e,IAAMC,MAErB,YAAiB,IAAdnH,EAAa,EAAbA,OACEsM,EAAQC,eACd,OACE,eAACI,GAAA,EAAD,CAAeC,UAAQ,EAAvB,SACE,sBACE1J,MAAO,CACLT,OAAQ,IACR2G,SAAU,OACVyD,aAAcP,EAAMQ,QAAQ,GAC5BjK,OAAQ,YACRH,QAAS4J,EAAMQ,QAAQ,GACvBC,YAAaT,EAAMU,QAAQC,SAP/B,SAUE,eAAC,GAAD,CAAcjN,OAAQA,WAMxBkN,GAAehG,IAAMC,MAExB,YAAiB,IAAdnH,EAAa,EAAbA,OACJ,EAiDF,SAAqBA,GACnB,IAAMoH,EAAWC,cACXhG,EAAOiG,aHxNsB,SAACzH,GAAD,uBACnC2lB,GAAW3lB,UADwB,aACnC,EAAmBwB,QGwNbF,EAAWmG,aHtNqB,SAACzH,GAAD,mCACtC2lB,GAAW3lB,UAD2B,aACtC,EAAmBsB,gBADmB,YGuNhCqM,EAAYlG,aHpNqB,SAACzH,GAAD,mCACvC2lB,GAAW3lB,UAD4B,aACvC,EAAmB2N,iBADoB,YGqNjC3D,EAAWvC,YAAYtB,GAAgChG,IAM7D,OALAkH,IAAMK,WAAU,WACTpG,GAAaqM,IAAa3D,GAC7BzC,EAASue,GAAY,CAAEvnB,KAAMyL,OAE9B,CAAC1I,EAAUqM,EAAW3D,EAAUzC,IAC5B,CAAC/F,EAAMmM,GA5DY0Y,CAAYlmB,GAAtC,mBAAOqB,EAAP,KAAamM,EAAb,KACA,OACE,iCACGA,GAAa,eAACG,GAAA,EAAD,IACd,eAACnG,EAAA,EAAD,iBACGnG,QADH,IACGA,OADH,EACGA,EAAM2G,KAAI,SAACvJ,GAAD,OACT,eAAC,GAAD,CAAUA,KAAMA,EAAMuB,OAAQA,eAOlC4N,GAAW1G,IAAMC,MAGpB,YAAuB,IAApB1I,EAAmB,EAAnBA,KAAMuB,EAAa,EAAbA,OACJoH,EAAWC,cAMjB,OAAI5I,EAAKoP,MAGL,eAAChG,EAAA,EAAD,CACEiG,KAAM,eAAC,KAAD,CAAYC,UAAU,YAC5B/N,OAAQvB,EAAKL,KACb6E,MAAOxE,EAAKU,KAHd,SAKGV,EAAKuP,MAAMhG,KAAI,SAACiG,EAAWhG,GAAZ,OACd,eAAC,GAAD,CAAUxJ,KAAMwP,EAAmBjO,OAAQA,GAAXiI,QAOpC,eAACJ,EAAA,EAAD,CACEiG,KAAM,eAAC,KAAD,CAA6BI,SAAS,UAC5ClO,OAAQvB,EAAKL,KACb6E,MAAOxE,EAAKU,KAAL,oBAAyBV,EAAK0nB,MAA9B,oBAA+C1nB,EAAK2nB,OAApD,KACP1d,QAAS,kBAxBMtK,EAwBYK,EAAKL,UAvBpCgJ,EAAS4C,GAAqB,CAAEhK,SAAQ5B,UADtB,IAACA,QCxLvB,IC4BMioB,GAAiB,CACrB5S,iBACA2Q,eACAwB,gBACApN,kBAGI8N,GAAY,CAChBC,WDlC6C,SAAC,GAYzC,IAXLvjB,EAWI,EAXJA,GACAwjB,EAUI,EAVJA,QACAC,EASI,EATJA,QACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,QACAhiB,EAMI,EANJA,eACAH,EAKI,EALJA,eAKI,IAJJtB,aAII,MAJI,GAIJ,EAFJ0jB,GAEI,EAHJxkB,KAGI,EAFJwkB,eACAC,EACI,EADJA,YAEMC,EAAWC,aAAc,CAC7BP,UACAC,UACA9hB,iBACA+hB,UACAC,UACAniB,mBAEIwiB,EAAYC,aAAaL,EAAeC,GAC9C,EAAmCK,aAAc,CAC/CV,UACAC,UACAC,UACAC,YAJF,mBAAOQ,EAAP,KAAoBC,EAApB,KAOMhgB,EAAWC,cAMjB,OACE,uCACE,uBACErE,GAAIA,EACJE,MAAOA,EACP6P,UAAU,wBACVsU,EAAGP,EACHE,UAAWA,IAEb,gCACExkB,MA/CkB,GAgDlBC,OAhDkB,GAiDlBW,EAAG+jB,EAAcG,GACjBjkB,EAAG+jB,EAAcE,GACjBvU,UAAU,2BALZ,SAOE,eAAC,KAAD,CAAmBrK,QApBL,WAClBtB,EAASlD,GAAuBlB,cCKvBukB,GAAqBrgB,IAAMC,MAAK,WAC3C,MAAkDgF,qBAAlD,mBAAOqb,EAAP,KAA0BC,EAA1B,KACM1kB,EAAeuE,YAAYX,IAC3BS,EAAWC,cA6FX/D,EAAegE,YAAYT,IAQjC,OACE,sBAAKkM,UAAU,OAAf,SACE,eAAC,KAAD,UACE,sBAAKA,UAAU,oBAAf,SACE,eAAC,KAAD,CACE2U,SAAU3kB,EACV4kB,iBAzFe,SAACC,GACxBxgB,EAASpD,GAAmB4jB,KAyFpBC,UA1GQ,SAACznB,GACjBgH,EACErD,GACE+jB,aAAQ,2BAED1nB,GAFA,IAGH2nB,UAAU,EACV7kB,MAAO,CAAEV,MAAO,GAChB3D,KAAM,eAERkE,MAiGEilB,OAvFK,SAACC,GAAD,OACbR,EAAqBQ,IAuFbC,OAhFK,SAAC3V,GACdA,EAAMC,iBACN,IAAMxP,EAAKqF,cACX,GAAImf,EAAmB,CACrB,IAAMrkB,EAAWqkB,EAAkBW,QAAQ,CACzC/kB,EAAGmP,EAAM6V,QAAU,GAAK,IACxB/kB,EAAGkP,EAAM8V,QAAU,MAEflpB,EAAOoT,EAAM+V,aAAaC,QAAQ,YAClC5f,EAAW4J,EAAM+V,aAAaC,QAAQ,YAC5C,GAAI5f,IAAarG,GAAqB,CACpC,IAAIoD,EAAsBrD,GACtBuG,EAAgB,GACpB,OAAQ2J,EAAM+V,aAAaC,QAAQ,aACjC,KAAKlmB,GACHuG,EAAgB,cAChB,MACF,KAAKvG,GACHuG,EAAgB,gBAChBlD,EAAWrD,GACX,MACF,KAAKA,GACHuG,EAAgB,eAChBlD,EAAWrD,GAUf+E,EACE7C,GAAmB,CAAE9F,KAPS,CAC9BuE,KACAnE,KAAM+J,EACNzF,WACAf,KAAM,CAAEa,MAAO9D,EAAMN,KAAM8J,IAGSE,cAAe,CAAEnD,oBAElD,GAAIiD,IAAarG,GAAyB,CAC/C,IAAMrC,EAAesS,EAAM+V,aAAaC,QAAQ,gBAOhDnhB,EACE7C,GAAmB,CACjB9F,KAR4B,CAC9BuE,KACAnE,KAAM,gBACNsE,WACAf,KAAM,CAAEa,MAAO9D,EAAMN,KAAM8J,IAKzBL,aAAc,CAAEnJ,OAAMc,sBAkCtBuoB,WAtFS,SAACjW,GAClBA,EAAMC,iBACND,EAAM+V,aAAaG,WAAa,QAqFxBC,eA5Ba,SAACnW,EAAmB9T,GACzC2I,EACElC,GAA4B,CAC1BlF,OAAQvB,EAAKuE,GACbmC,MAAO,CAAE/B,EAAG3E,EAAK0E,SAASC,EAAGC,EAAG5E,EAAK0E,SAASE,OAyB1CslB,UAAWtC,GACXC,UAAWA,GACXsC,gBAAiB,CAACtlB,EAAaF,EAAGE,EAAaD,GAC/CwlB,YAAavlB,EAAaC,KAC1BulB,UAtBQ,SAACvW,QACHjO,IAAViO,GACFnL,EAASxD,GAAgB2O,KAQrB,SAcE,eAAC,KAAD,eCrKCwW,GAAennB,YAAgB,UCJd,MDIc,wDAE1C,WAAOC,EAAGC,GAAV,iBAAAC,EAAA,6DACUC,EAAoBF,EAApBE,gBADV,kBAG2BC,IAAMC,IAAN,UAAaR,GAAb,SAH3B,cAGUS,EAHV,yBAIWA,EAASC,MAJpB,yDAMWJ,EAAgB,EAAD,KAN1B,yDAF0C,yDEG/BgnB,GAAWtlB,YAAY,CAClCvE,KDR4B,MCS5B2D,aAN4B,CAC5B1C,OAAQ,IAMRuD,SAAU,CACRslB,YAAa,SACXppB,EACAgE,GAKA,MAA2BA,EAAOC,QAA1B1F,EAAR,EAAQA,KAAM8qB,EAAd,EAAcA,SACRC,EAAahrB,EAAcC,EAAMyB,EAAMO,QAC3B,MAAd+oB,IACFA,EAAW/pB,MAAQ8pB,KAIzBjf,cAAe,SAACC,GACdA,EAAQC,QAAQ4e,GAAa/Y,WAAW,SAACnQ,EAAOgE,GAC9ChE,EAAMO,OAAStB,EAAkB+E,EAAOC,eAK/BmlB,GAAgBD,GAASzjB,QAAzB0jB,YAEAD,MAAf,Q,iCCjCaI,GAAY9f,aAAO,SAAC8E,GAAD,OAC9B,eAAC,KAAD,aAAcib,gBAAc,EAACC,UAAW,EAAGC,QAAM,GAAKnb,MAD/B9E,EAEtB,kBAAgB,CACjBzG,OAAQ,YACRkK,YAFC,EAAGT,MAEeU,QAAQC,QAC3Buc,UAAW,OACX,qBAAsB,CACpBC,aAAc,GAEhB,WAAY,CACVpgB,QAAS,YCgBN,SAASqgB,GAAT,GAIgE,IAHrEC,EAGoE,EAHpEA,cACAC,EAEoE,EAFpEA,mBACAC,EACoE,EADpEA,yBAEA,SAASC,EACP1rB,GAMA,MAAO,CAJOkJ,YAAYsiB,EAAmBxrB,IACnB,SAAC8qB,GACzB,OAAOW,EAAyBzrB,EAAM8qB,KAI1C,IAAMa,EAAqB7iB,IAAMC,MAA0B,YAAe,IAAZ/I,EAAW,EAAXA,KACtDgJ,EAAWC,cACjB,EAAmCyiB,EAAoB1rB,GAAvD,mBAAOgB,EAAP,KAAc4qB,EAAd,KAOA,OAAO,eAAC7E,GAAA,EAAD,CAAW/lB,MAAOA,EAAOkT,SANf,SACf2X,GAEA,IAAMf,EAAWe,EAAExX,OAAOrT,MAC1BgI,EAAS4iB,EAAkBd,KAEuBgB,WAAS,OAEzDC,EAAqBjjB,IAAMC,MAA0B,YAAe,IAAZ/I,EAAW,EAAXA,KACtDgJ,EAAWC,cACjB,EAAmCyiB,EAAoB1rB,GAAvD,mBAAOgB,EAAP,KAAc4qB,EAAd,KACA,GAAqB,kBAAV5qB,EAAoB,CAQ7B,OACE,eAAC+lB,GAAA,EAAD,CACEtmB,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEVjmB,MAAOA,EACPkT,SAda,SAACC,GAChB,IAAM2W,EACmB,KAAvB3W,EAAME,OAAOrT,MAAe,GAAK6f,OAAO1M,EAAME,OAAOrT,OAC/B,kBAAb8pB,GACT9hB,EAAS4iB,EAAkBd,OAc/B,OAAO,QAGLkB,EAAsBljB,IAAMC,MAA0B,YAAe,IAAZ/I,EAAW,EAAXA,KACvDgJ,EAAWC,cACjB,EAAmCyiB,EAAoB1rB,GAAvD,mBAAOgB,EAAP,KAAc4qB,EAAd,KACA,GAAqB,mBAAV5qB,EAAqB,CAI9B,OAAO,eAAC6lB,GAAA,EAAD,CAAQC,QAAS9lB,EAAOkT,SAHd,WACflL,EAAS4iB,GAAmB5qB,OAI9B,OAAO,QAGLirB,EAAwBnjB,IAAMC,MAA0B,YAAe,IAAZ/I,EAAW,EAAXA,KAC/D,EAAgB0rB,EAAoB1rB,GAA7BgB,EAAP,oBACA,MAAqB,kBAAVA,EACF,eAAC+qB,EAAD,CAAoB/rB,KAAMA,IACP,kBAAVgB,EACT,eAAC2qB,EAAD,CAAoB3rB,KAAMA,IACP,mBAAVgB,EACT,eAACgrB,EAAD,CAAqBhsB,KAAMA,IAE3B,eAAC2rB,EAAD,CAAoB3rB,KAAMA,OAG/BksB,EAAiBpjB,IAAMC,MAC3B,YAAqB,IAAlB/I,EAAiB,EAAjBA,KAAMe,EAAW,EAAXA,KACP,OACE,gBAACkP,GAAA,EAAD,CACE5G,GAAI,CACF4B,QAAS,OACTkhB,UAAW,SAACje,GAAD,OAAWA,EAAMQ,QAAQ,IACpCD,aAAc,SAACP,GAAD,OAAWA,EAAMQ,QAAQ,IACvCwB,WAAY,SACZlF,SAAU,UANd,UASE,eAACiF,GAAA,EAAD,CACEnL,MAAO,CAAEsnB,cAAe,UACxB/iB,GAAI,CACFC,SAAU,EACVlF,MAAO,OAJX,SAOE,eAACyG,EAAA,EAAD,CAAY/F,MAAO,CAAEkG,SAAU,UAA/B,SAA4CjK,MAE9C,eAACkP,GAAA,EAAD,CAAK5G,GAAI,CAAEjF,MAAO,OAAlB,SACE,eAAC6nB,EAAD,CAAuBjsB,KAAMA,YAMjCqsB,EAAYvjB,IAAMC,MAAqB,YAA0B,IAAvB+N,EAAsB,EAAtBA,SAAUtW,EAAY,EAAZA,MACxD,OAAIF,EAAaE,GACR,eAAC0rB,EAAD,CAAgBlsB,KAAMQ,EAAMR,KAAMe,KAAM+V,IAG7C,gBAAC,GAAD,WACE,eAACwV,GAAA,EAAD,CAAkBC,WAAY,eAAC,IAAD,IAA9B,SACGzV,IAEH,eAAC0V,GAAA,EAAD,UACE,+BACGrsB,OAAOU,QAAQL,EAAMD,UAAUqJ,KAAI,WAAoBC,GAApB,uBAAEiN,EAAF,KAAYtW,EAAZ,YAClC,eAAC6rB,EAAD,CAAW7rB,MAAOA,EAAOsW,SAAUA,iBAQjD,OAAOhO,IAAMC,MAA2B,YAAmB,IAAhB+N,EAAe,EAAfA,SACnCtW,EAAQ0I,YAAYqiB,EAAczU,IACxC,OAAO,eAACuV,EAAD,CAAWvV,SAAUA,EAAUtW,MAAOA,OCzI1C,IAAMisB,GAAmB3jB,IAAMC,MAAK,WACzC,IAAMC,EAAWC,cAIjB,OACE,eAACgG,GAAA,EAAD,CACEnE,QAAQ,YACRR,QANgB,WAClBtB,EAASuN,OAMPlN,GAAI,CACFgC,OAAQ,SAAC6C,GAAD,OAAWA,EAAMQ,QAAQ,KAJrC,4BAYSge,GAAqB5jB,IAAMC,MAAK,WAC3C,IAAMC,EAAWC,cAEX0jB,EAAezjB,YAAY0N,GAAwBiD,IAOzD,OANA1Q,qBAAU,WACoB,IAAxBwjB,EAAa3kB,QACfgB,EAAS2hB,SAKX,sBAAKhW,UAAU,WAAW7P,MAAO,CAAEuG,OAAQ,GAA3C,SACGshB,EAAa/iB,KAAI,SAACkN,EAAUjN,GAAX,OAChB,eAAC,GAAD,CAAmBiN,SAAUA,GAAbjN,WAMlBwiB,GAAYvjB,IAAMC,MAA2B,YAAmB,IAAhB+N,EAAe,EAAfA,SAC9C8V,EAAYtB,GAA6B,CAC7CC,cAAe1U,GACf2U,mBAAoBzU,GACpB0U,yBAA0B,SAACzrB,EAAM8qB,GAAP,OACxBD,GAAY,CAAE7qB,OAAM8qB,gBAExB,OAAO,eAAC8B,EAAD,CAAW9V,SAAUA,OC1DjB+V,GAAuB,YCIvBC,GAAqBtpB,YAAgB,UAC7CqpB,GAD6C,8DAEhD,WAAOppB,EAAGC,GAAV,iBAAAC,EAAA,6DACUC,EAAoBF,EAApBE,gBADV,kBAG2BC,IAAMC,IAAN,UAAaR,GAAb,eAH3B,cAGUS,EAHV,yBAIWA,EAASC,MAJpB,yDAMWJ,EAAgB,EAAD,KAN1B,yDAFgD,yDCGrCmpB,GAAiBznB,YAAY,CACxCvE,KAAM8rB,GACNnoB,aANkC,CAClC1C,OAAQ,IAMRuD,SAAU,CACRslB,YAAa,SACXppB,EACAgE,GAKA,MAA2BA,EAAOC,QAA1B1F,EAAR,EAAQA,KAAM8qB,EAAd,EAAcA,SACRzW,EAAStU,EAAcC,EAAMyB,EAAMO,QAC3B,MAAVqS,IACFA,EAAOrT,MAAQ8pB,KAIrBjf,cAAe,SAACC,GACdA,EAAQC,QAAQ+gB,GAAmBlb,WAAW,SAACnQ,EAAOgE,GACpDhE,EAAMO,OAAStB,EAAkB+E,EAAOC,eAK/BmlB,GAAgBkC,GAAe5lB,QAA/B0jB,YAEAkC,MAAf,QCpBaC,GAAkBlkB,IAAMC,MAAK,WACxC,IAAMC,EAAWC,cAIjB,OACE,eAACgG,GAAA,EAAD,CACEnE,QAAQ,YACRR,QANgB,WAClBtB,EAASwN,OAMPnN,GAAI,CACFgC,OAAQ,SAAC6C,GAAD,OAAWA,EAAMQ,QAAQ,KAJrC,0BAYSue,GAAoBnkB,IAAMC,MAAK,WAC1C,IAAMC,EAAWC,cACX0jB,EAAezjB,YACnBiO,GACA0C,IAOF,OALA1Q,qBAAU,WACoB,IAAxBwjB,EAAa3kB,QACfgB,EAAS8jB,SAIX,sBAAKnY,UAAU,iBAAiB7P,MAAO,CAAEuG,OAAQ,GAAjD,SACGshB,EAAa/iB,KAAI,SAACkN,EAAUjN,GAAX,OAChB,eAAC,GAAD,CAAmBiN,SAAUA,GAAbjN,WAMlBwiB,GAAYvjB,IAAMC,MAA2B,YAAmB,IAAhB+N,EAAe,EAAfA,SAC9C8V,EAAYtB,GAA6B,CAC7CC,cAAenU,GACfoU,mBAAoBnU,GACpBoU,yBAA0B,SAACzrB,EAAM8qB,GAAP,OACxBD,GAAY,CAAE7qB,OAAM8qB,gBAExB,OAAO,eAAC8B,EAAD,CAAW9V,SAAUA,O,qBCnDjBoW,GAAapkB,IAAMC,MAA+B,SAACiH,GAC9D,IACE8H,EAIE9H,EAJF8H,OACAqV,EAGEnd,EAHFmd,oBACAC,EAEEpd,EAFFod,qBACAC,EACErd,EADFqd,kBAEMC,EAAoBC,cAApBD,gBAaR,EAAoCxkB,IAAMiF,SAAS+J,GAAnD,mBAAO0V,EAAP,KAAmBC,EAAnB,KAcA,OAbA3kB,IAAMK,WAAU,WACVqkB,IAAe1V,IACbA,IAAWP,GACb+V,EAAgB,WAAY,CAAExiB,QAAS,YAC9BgN,IAAWP,GACpB+V,EAAgB,UAAW,CAAExiB,QAAS,UAC7BgN,IAAWP,IACpB+V,EAAgB,WAAY,CAAExiB,QAAS,SAEzC2iB,EAAc3V,MAEf,CAACA,EAAQ0V,EAAYF,IAGtB,uCACE,eAACre,GAAA,EAAD,CACEnE,QAAQ,YACRmC,MAAM,UACNygB,QAAS,eAAC,KAAD,IACTpjB,QAhCa,WACZ6iB,EAGHG,EAAgB,2BAA4B,CAAExiB,QAAS,UAFvDuiB,KA+BEM,SAAU7V,IAAWP,GACrBlO,GAAI,CACFgC,OAAQ,SAAC6C,GAAD,OAAWA,EAAMQ,QAAQ,KAPrC,iBAYA,eAACO,GAAA,EAAD,CACEnE,QAAQ,WACR4iB,QAAS,eAAC,IAAD,IACTpjB,QApCgB,WACpB8iB,KAoCI/jB,GAAI,CACFgC,OAAQ,SAAC6C,GAAD,OAAWA,EAAMQ,QAAQ,KALrC,0BClDOkf,GAAU9kB,IAAMC,MAA+B,SAACiH,GAAD,OAC1D,sBAAKlL,MAAO,CAAEV,MAAO,QAArB,SACE,gBAAC6L,GAAA,EAAD,CAAKhF,QAAQ,OAAO4iB,eAAe,WAAW/oB,MAAO,CAAER,QAAS,GAAhE,UACE,eAAC0oB,GAAD,IACA,eAACP,GAAD,IACA,eAACS,GAAD,eAAgBld,Y,WCXT8d,GAA0B,SAACrsB,GAAD,OACrCA,EAAMssB,YAAYrgB,MAEPsgB,GAAwB,SAACvsB,GAAD,OACnCA,EAAMssB,YAAY9X,MAEPgY,GAAiC,SAACxsB,GAAD,OAC5CA,EAAMssB,YAAY7X,eCPPgY,GAA4B,gBCI5BC,GAAgB3qB,YAAgB,UAIxC0qB,GAJwC,yDAK3C,aAAqBxqB,GAArB,mBAAAC,EAAA,6DAAStB,EAAT,EAASA,SACCuB,EAAoBF,EAApBE,gBADV,kBAG2BC,IAAMC,IAAN,UAAaR,GAAb,mBAAgCjB,IAH3D,cAGU0B,EAHV,yBAIWA,EAASC,MAJpB,yDAMWJ,EAAgB,EAAD,KAN1B,yDAL2C,yDCShCwqB,GAAqB9oB,YAAY,CAC5CvE,KAAMmtB,GACNxpB,aAJkC,GAKlCa,SAAU,CACRslB,YAAa,SACXppB,EACAgE,GAOA,MAAmCA,EAAOC,QAAlC9D,EAAR,EAAQA,OAAQ5B,EAAhB,EAAgBA,KAAM8qB,EAAtB,EAAsBA,SAChBtqB,EAAQiB,EAAMG,GAAQI,OAC5B,GAAa,MAATxB,EAAe,CACjB,IAAM6T,EAAStU,EAAcC,EAAMQ,GACrB,MAAV6T,IACFA,EAAOrT,MAAQ8pB,KAIrBuD,qBAAsB,SACpB5sB,EACAgE,GAKA,MAAsCA,EAAOC,QAArC9D,EAAR,EAAQA,OAAQ0sB,EAAhB,EAAgBA,kBAChB7sB,EAAMG,GAAQ0sB,kBAAoBA,IAGtCziB,cAAe,SAACC,GACdA,EACGC,QAAQoiB,GAAcvc,WAAW,SAACnQ,EAAOgE,GAExChE,EADmBgE,EAAO8oB,KAAK5U,IAAvB/X,QACMI,OAAStB,EAAkB+E,EAAOC,YAEjDqG,QAAQ5F,IAAoB,SAAC1E,EAAOgE,GAAY,IAAD,EAC9C,EAA+BA,EAAOC,QAA9BrF,EAAR,EAAQA,KAAM6J,EAAd,EAAcA,cAEZ,UAAA7J,EAAK2D,YAAL,eAAWvD,QAASyD,IACJ,MAAhBgG,IAEAzI,EAAMpB,EAAKuE,IAAX,2BACKsF,GADL,IAEElI,OAAQ,KACRssB,kBAAmB,WAIxBviB,QAAQnG,IAAoB,SAACnE,EAAOgE,GACnCA,EAAOC,QACJqC,QAAO,SAAC1H,GAAD,OAAUiI,GAAWjI,MAC5BS,SAAQ,SAACT,GAAU,IAAD,GACb,UAAAA,EAAK2D,YAAL,eAAWvD,QAASyD,WACfzC,EAAMpB,EAAKuE,UAIzBmH,QAAQjG,IAAwB,SAACrE,EAAOgE,GACnCtF,OAAOuH,KAAKjG,GAAOkG,SAASlC,EAAOC,iBAC9BjE,EAAMgE,EAAOC,eAMvB,GAA8C0oB,GAAmBjnB,QAAzD0jB,GAAR,GAAQA,YACAuD,IADR,GAAqBC,qBACbD,GAAf,SCnEaI,GAAqB1lB,IAAMC,MAAK,WAC3C,IAAMnH,EAASkH,IAAM+b,WAAW4J,IAC1BzlB,EAAWC,cACX5G,EAAW6G,YAAYpH,EAAoBF,IAC3C8sB,EAAoBxlB,YzED1B,SAACtH,GAAD,OAAoB,SAACH,GAAD,OAC4B,OAA9CD,EAAoBC,GAAOG,GAAQI,QyEAC2sB,CAA0B/sB,IAC1D+qB,EAAezjB,YzEErB,SAACtH,GAAD,OAAoB,SAACH,GAAD,eAClBtB,OAAOuH,KAAP,oBAAYlG,EAAoBC,GAAOG,UAAvC,aAAY,EAAoCI,cAAhD,QAA0D,KyEF1D4sB,CAA6BhtB,GAC7BiY,IAOF,OALA1Q,qBAAU,WACHulB,GACH1lB,EAASmlB,GAAc,CAAEvsB,SAAQS,gBAElC,CAAC2G,EAAUpH,EAAQS,EAAUqsB,IAE9B,uBAAK5pB,MAAO,CAAER,QAAS,GAAvB,UACE,eAACuG,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BzI,IAC1B,sBAAKyC,MAAO,CAAEoW,YAAa,GAA3B,SACGyR,EAAa/iB,KAAI,SAACkN,GAAD,OAChB,eAAC,GAAD,CAA0BA,SAAUA,GAApBA,cAOpBuV,GAAYvjB,IAAMC,MAA2B,YAAmB,IAAhB+N,EAAe,EAAfA,SAC9ClV,EAASkH,IAAM+b,WAAW4J,IAC1B7B,EAAYtB,GAA6B,CAC7CC,cAAe,SAACzU,GAAD,OzEPjB,SAAClV,EAAgBkV,GAAjB,OAAsC,SAACrV,GACrC,IAAMO,EAASD,EAAsBH,EAAtBG,CAA8BN,GAC7C,GAAc,MAAVO,EACF,OAAOA,EAAO8U,GAEd,MAAM,IAAI5O,MAAM,2ByEEW2mB,CAAqBjtB,EAAQkV,IAC1D0U,mBAAoB,SAACxrB,GAAD,OzEnBtB,SAAC4B,EAAgB5B,GAAjB,OAAkC,SAACyB,GACjC,IAAMO,EAASD,EAAsBH,EAAtBG,CAA8BN,GAC7C,GAAc,MAAVO,EAAgB,CAClB,IAAMqS,EAAStU,EAAcC,EAAMgC,GACnC,cAAOqS,QAAP,IAAOA,OAAP,EAAOA,EAAQrT,MAEf,MAAM,IAAIkH,MAAM,2ByEaY4mB,CAA2BltB,EAAQ5B,IACjEyrB,yBAA0B,SAACzrB,EAAM8qB,GAAP,OACxBD,GAAY,CAAEjpB,SAAQ5B,OAAM8qB,gBAEhC,OAAO,eAAC8B,EAAD,CAAW9V,SAAUA,OCMxBiY,GAAqB,WAEzB,OADa7lB,YAAY8kB,KAEvB,KAAKhY,GACH,OAAO,eAAC0W,GAAD,IACT,KAAK1W,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAACiX,GAAD,IACT,QACE,OAAO,OAOAwB,GAAmB3lB,IAAM4W,cAAsB,IAEtDsP,GAA8B,WAClC,IAAMptB,EAASsH,YAAY+kB,IAC3B,OAAc,MAAVrsB,EAEA,eAAC6sB,GAAiBQ,SAAlB,CAA2BjuB,MAAOY,EAAlC,SACE,eAAC4sB,GAAD,MAIG,MAMLU,GAAehkB,YAAOikB,IAAPjkB,CAAA,aACnB9G,MAH8B,IAI9BgrB,WAAY,GAFO,aAGZC,IAAcC,OAAU,CAC7BlrB,MAN4B,OAU1BmrB,GAAerkB,YAAO,OAAPA,CAAe,CAClC7G,OAAQ,SAGKmrB,GAhFe,WAC5B,IAAM9hB,EAAOxE,YAAY4kB,IACnB9kB,EAAWC,cAEX6E,EAAQ5E,aAAY,SAACzH,GAEzB,OADausB,GAAsBvsB,IAEjC,KAAKuU,GACH,MAAO,cACT,KAAKA,GACH,MAAO,aACT,KAAKA,GACH,MAAO,YACT,QACE,MAAO,WAGb,OACE,gBAACkZ,GAAD,CAAcxhB,KAAMA,EAAM+hB,OAAO,QAAQ3kB,QAAQ,aAAjD,UACE,eAAC4kB,EAAA,EAAD,IACA,gBAACzf,GAAA,EAAD,CAAKhF,QAAQ,OAAOiF,WAAW,SAA/B,UACE,eAACvF,EAAA,EAAD,CAAYsC,MAAM,UAAU3C,QAlBlB,kBAAMtB,EAASqN,OAkBqBzL,KAAK,QAAnD,SACE,eAAC,IAAD,MAEF,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BgD,OAE5B,eAAC6hB,GAAA,EAAD,IACA,eAACJ,GAAD,UACE,eAAC,GAAD,UCxCFK,GAAY9mB,IAAMC,MAA+B,SAACiH,GACtD,IAAMtC,EAAOxE,YAAY4kB,IACzB,OACE,gBAAC+B,GAAD,WACE,gBAAC,GAAD,CAAc/kB,QAAQ,YAAtB,UACE,eAAC,IAAD,IACA,eAACglB,GAAD,UACE,eAACjnB,GAAD,SAGJ,gBAAC,GAAD,CAAc6E,KAAMA,EAApB,UACE,eAAC,IAAD,IACA,eAACkgB,GAAD,eAAa5d,IACb,eAACmZ,GAAD,OAEF,eAAC,GAAD,UAKO4G,GAAc,IAErBF,GAAU3kB,YAAO,MAAPA,CAAc,CAC5BD,QAAS,SAGLikB,GAAehkB,YAAOikB,IAAPjkB,CAAA,aACnB9G,MAAO2rB,GACPX,WAAY,GAFO,aAGZC,IAAcC,OAAU,CAC7BlrB,MAAO2rB,MAILD,GAAiB5kB,YAAO,MAAPA,CAAc,CACnCF,SAAU,SAGNukB,GAAerkB,YAAO,OAAPA,EACnB,gBAAGgD,EAAH,EAAGA,MAAH,MAAgB,CACdjD,QAAS,OACT+kB,cAAe,SACf1mB,SAAU,EACVjF,OAAQ,QACR4rB,WAAY/hB,EAAMgiB,YAAYC,OAAO,SAAU,CAC7CC,OAAQliB,EAAMgiB,YAAYE,OAAOC,MACjCC,SAAUpiB,EAAMgiB,YAAYI,SAASC,gBAEvCrd,aD8B4B,QC5B9B,gBAAGxF,EAAH,EAAGA,KAAMQ,EAAT,EAASA,MAAT,OACER,EACI,CACEuiB,WAAY/hB,EAAMgiB,YAAYC,OAAO,SAAU,CAC7CC,OAAQliB,EAAMgiB,YAAYE,OAAOI,QACjCF,SAAUpiB,EAAMgiB,YAAYI,SAASG,iBAEvCvd,YAAa,QAEfhN,KAGO0pB,M,UC5CTc,GAAgC,CACpC1Q,SAAUF,GACVrU,SAAU,KACV7J,OAAQ,MAEJ+uB,GAAgC,2BACjCD,IADiC,IAEpC/Q,SAAUjI,GACVuH,WAAY,EACZC,SAAU,GACVkD,gBAAgB,EAChBM,UAAU,EACVJ,QAAS,OACTM,UAAU,EACVE,WAAW,EACXE,OAAQ,CACN,CAAE4N,IAAI,eAAiB1N,OAAQ,KAC/B,CAAE0N,IAAI,qBAAuB1N,OAAQ,QAEvC2N,YAAa,EACbvP,QAAS,OAELwP,GAA0C,2BAC3CJ,IAD2C,IAE9C/Q,SAAUjI,GACVwL,QAAQ,EACRE,KAAM,EACNR,UAAU,EACVF,UAAU,EACVN,gBAAgB,EAChBqB,UAAU,EACVE,OAAQ,CACNoN,UAAM7qB,EACN6P,WAAO7P,GAET8qB,SAAU,EACVnN,eAAgB,CAAC,KAEboN,GAAoC,2BACrCP,IADqC,IAExC/Q,SAAUjI,GACVoL,WAAW,EACXE,OAAQ,CACN,CAAE4N,IAAI,iBAAmB1N,OAAQ,KACjC,CAAE0N,IAAI,qBAAuB1N,OAAQ,OACrC,CAAE0N,IAAI,iBAAmB1N,OAAQ,UAG/BgO,GAA4B,2BAC7BR,IAD6B,IAEhC/Q,SAAUjI,GACV1L,UAAW,KACXC,UAAU,EACVC,WAAW,IAEPilB,GAA4B,2BAC7BT,IAD6B,IAEhC/Q,SAAUjI,KAEN0Z,GAAoC,2BACrCV,IADqC,IAExC/Q,SAAUjI,GACV+M,OAAQ,EACRE,OAAQ,IAEJ0M,GAA4B,2BAC7BX,IAD6B,IAEhC/Q,SAAUjI,KAEN4Z,GAA8B,2BAC/BZ,IAD+B,IAElC/Q,SAAUjI,KAGZ,SAAS6Z,GAA+B5R,GACtC,OAAQA,GACN,KAAKjI,GACH,OAAOiZ,GACT,KAAKjZ,GACH,OAAOuZ,GACT,KAAKvZ,GACH,OAAOoZ,GACT,KAAKpZ,GACH,OAAOwZ,GACT,KAAKxZ,GACH,OAAOyZ,GACT,KAAKzZ,GACH,OAAO0Z,GACT,KAAK1Z,GACH,OAAO2Z,GACT,KAAK3Z,GACH,OAAO4Z,IAIb,IAAME,GAA2C,CAC/CxR,SAAUF,GACVkB,UAAW2P,GACXvP,eAAgB0P,GAChBlP,YAAaqP,IAEFQ,GAAsBnsB,YAAY,CAC7CvE,KAAM,iBACN2D,aA3G0C,CAC1Cic,MAAO,GACPF,eAAgB,MA0GhBlb,SAAU,CACRmsB,oBAAqB,SAACjwB,EAAOgE,GAC3B,IAAMma,EAASna,EAAOC,eACfjE,EAAMkf,MAAMf,GACfA,IAAWne,EAAMgf,iBACnBhf,EAAMgf,eAAiB,OAG3BkR,eAAgB,SAAClwB,GACf,IAAMmwB,EAskBZ,SAAsBnwB,GACpB,IAAMowB,EAAS1xB,OAAOuH,KAAKjG,EAAMkf,OAAO/W,KAAI,SAACoD,GAAD,OAAS6T,OAAO7T,MAE5D,OADc6kB,EAAO7pB,OAAS,EAAI6pB,EAAOC,QAAO,SAACnuB,EAAGmW,GAAJ,OAAUnN,KAAKsX,IAAItgB,EAAGmW,MAAM,EAxkBzDiY,CAAatwB,GAAS,EACrCA,EAAMkf,MAAMiR,GAAUL,GAA+B7Z,IACrDjW,EAAMgf,eAAiBmR,GAEzBI,WAAY,SAACvwB,EAAOgE,GAClBhE,EAAMgf,eAAiBhb,EAAOC,SAEhCusB,mBAAoB,SAClBxwB,EACAgE,GAMA,MAAqCA,EAAOC,QAApCka,EAAR,EAAQA,OAAQnU,EAAhB,EAAgBA,SAAU7J,EAA1B,EAA0BA,OACpBoF,EAAavF,EAAMkf,MAAMf,GAC3BG,GAAgB/Y,GACkB,MAAhCA,EAAWga,UAAUM,SACvBta,EAAWga,UAAUM,QAAQ7V,SAAWA,EACxCzE,EAAWga,UAAUM,QAAQ1f,OAASA,GAEtCoF,EAAWga,UAAUM,QAArB,2BACK6P,IADL,IAEE1lB,WACA7J,WAGKse,GAAYlZ,KACK,MAAtBA,EAAWsa,SACbta,EAAWsa,QAAQ7V,SAAWA,EAC9BzE,EAAWsa,QAAQ1f,OAASA,GAE5BoF,EAAWsa,QAAX,2BACK6P,IADL,IAEE1lB,WACA7J,aAKRswB,YAAa,SACXzwB,EACAgE,GAOA,MAA+CA,EAAOC,QAA9Cka,EAAR,EAAQA,OAAQnU,EAAhB,EAAgBA,SAAU7J,EAA1B,EAA0BA,OAAQ+d,EAAlC,EAAkCA,SAC5B3Y,EAAavF,EAAMkf,MAAMf,GAC/B,GAAIG,GAAgB/Y,GACd2Y,IAAajI,IACf1Q,EAAWga,UAAUvV,SAAWA,EAChCzE,EAAWga,UAAUpf,OAASA,GACrB+d,IAAajI,IACtB1Q,EAAWoa,eAAe3V,SAAWA,EACrCzE,EAAWoa,eAAexf,OAASA,GAC1B+d,IAAajI,KACtB1Q,EAAW4a,YAAYnW,SAAWA,EAClCzE,EAAW4a,YAAYhgB,OAASA,OAE7B,KAAIqe,GAAkBjZ,GAI3B,MAAM,IAAIkB,MAAM,SAHhBlB,EAAWyE,SAAWA,EACtBzE,EAAWpF,OAASA,IAKxBuwB,qBAAsB,SACpB1wB,EACAgE,GAMA,MAAqCA,EAAOC,QAApCka,EAAR,EAAQA,OAAQnU,EAAhB,EAAgBA,SAAU7J,EAA1B,EAA0BA,OACpBoF,EAAavF,EAAMkf,MAAMf,GAC3BG,GAAgB/Y,IAClBA,EAAWga,UAAUvV,SAAWA,EAChCzE,EAAWga,UAAUpf,OAASA,GACrBse,GAAYlZ,KACrBA,EAAWyE,SAAWA,EACtBzE,EAAWpF,OAASA,IAGxBwwB,0BAA2B,SACzB3wB,EACAgE,GAMA,MAAqCA,EAAOC,QAApCka,EAAR,EAAQA,OAAQnU,EAAhB,EAAgBA,SAAU7J,EAA1B,EAA0BA,OACpBoF,EAAavF,EAAMkf,MAAMf,GAC3BG,GAAgB/Y,IAClBA,EAAWoa,eAAe3V,SAAWA,EACrCzE,EAAWoa,eAAexf,OAASA,GAC1Bue,GAAiBnZ,KAC1BA,EAAWyE,SAAWA,EACtBzE,EAAWpF,OAASA,IAGxBywB,uBAAwB,SACtB5wB,EACAgE,GAMA,MAAqCA,EAAOC,QAApCka,EAAR,EAAQA,OAAQnU,EAAhB,EAAgBA,SAAU7J,EAA1B,EAA0BA,OACpBoF,EAAavF,EAAMkf,MAAMf,GAC3BG,GAAgB/Y,IAClBA,EAAW4a,YAAYnW,SAAWA,EAClCzE,EAAW4a,YAAYhgB,OAASA,GACvBye,GAAcrZ,KACvBA,EAAWyE,SAAWA,EACtBzE,EAAWpF,OAASA,IAGxB0wB,mBAAoB,SAClB7wB,EACAgE,GAOA,MAA+CA,EAAOC,QAA9Cka,EAAR,EAAQA,OAAQnU,EAAhB,EAAgBA,SAAU7J,EAA1B,EAA0BA,OAAQ+d,EAAlC,EAAkCA,SAC5B3Y,EAAavF,EAAMkf,MAAMf,GAC/B,GAAIG,GAAgB/Y,GACF,MAAZ2Y,GAAoB3Y,EAAWga,UAAUrB,WAAaA,EACxDle,EAAMkf,MAAMf,GAAZ,2BACK2R,GAA+B5R,IADpC,IAEElU,WACA7J,YAGFoF,EAAWga,UAAUvV,SAAWA,EAChCzE,EAAWga,UAAUpf,OAASA,OAE3B,KAAIqe,GAAkBjZ,GAY3B,MAAM,IAAIkB,MAAM,8BAXA,MAAZyX,GAAoB3Y,EAAW2Y,WAAaA,EAC9Cle,EAAMkf,MAAMf,GAAZ,2BACK2R,GAA+B5R,IADpC,IAEElU,WACA7J,YAGFoF,EAAWyE,SAAWA,EACtBzE,EAAWpF,OAASA,KAM1B2wB,YAAa,SACX9wB,EACAgE,GAKA,MAAyBA,EAAOC,QAAxBka,EAAR,EAAQA,OAAQnf,EAAhB,EAAgBA,KAEdgB,EAAMkf,MAAMf,GADVnf,IAASqf,GACW0R,GAEAD,GAA+B9wB,IAGzD+xB,wBAAyB,SAAC/wB,EAAOgE,GAC/B,IAAMma,EAASna,EAAOC,QAClBjE,EAAMkf,MAAMf,GAAQI,WAAaF,GACnCre,EAAMkf,MAAMf,GAAZ,eACK2R,GAA+B7Z,KAGpCjW,EAAMkf,MAAMf,GAAU4R,IAG1BiB,sBAAuB,SACrBhxB,EACAgE,GAMA,MAAyCA,EAAOC,QAAxCka,EAAR,EAAQA,OAAQX,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,SACtBlY,EAAavF,EAAMkf,MAAMf,GAC3BM,GAAYlZ,GACdA,EAAW6pB,YAAc,EAChB9Q,GAAgB/Y,KACzBA,EAAWga,UAAU6P,YAAc,EACjB,MAAd5R,IACFjY,EAAWga,UAAU/B,WAAaA,GAEpB,MAAZC,IACFlY,EAAWga,UAAU9B,SAAWA,KAItCwT,0BAA2B,SACzBjxB,EACAgE,GAEA,IAAQma,EAAWna,EAAOC,QAAlBka,OACF5Y,EAAavF,EAAMkf,MAAMf,GAC3BM,GAAYlZ,GACdA,EAAW6pB,cACF9Q,GAAgB/Y,IACzBA,EAAWga,UAAU6P,eAGzB8B,0BAA2B,SACzBlxB,EACAgE,GAEA,IAAQma,EAAWna,EAAOC,QAAlBka,OACF5Y,EAAavF,EAAMkf,MAAMf,GAC3BM,GAAYlZ,GACdA,EAAW6pB,cACF9Q,GAAgB/Y,IACzBA,EAAWga,UAAU6P,eAGzB+B,2BAA4B,SAC1BnxB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAWob,eAAiB3c,EAAOC,QAAQ0c,eAClCrC,GAAgB/Y,KACzBA,EAAWga,UAAUoB,eAAiB3c,EAAOC,QAAQ0c,iBAGzDyQ,oBAAqB,SACnBpxB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAWsb,QAAU7c,EAAOC,QAAQ4c,QAC3BvC,GAAgB/Y,KACzBA,EAAWga,UAAUsB,QAAU7c,EAAOC,QAAQ4c,UAGlDwQ,qBAAsB,SACpBrxB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAW0b,SAAWjd,EAAOC,QAAQgd,SAC5B3C,GAAgB/Y,KACzBA,EAAWga,UAAU0B,SAAWjd,EAAOC,QAAQgd,WAGnDqQ,qBAAsB,SACpBtxB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAW4b,SAAWnd,EAAOC,QAAQkd,SAC5B7C,GAAgB/Y,KACzBA,EAAWga,UAAU4B,SAAWnd,EAAOC,QAAQkd,WAGnDoQ,sBAAuB,SACrBvxB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAW8b,UAAYrd,EAAOC,QAAQod,UAC7B/C,GAAgB/Y,KACzBA,EAAWga,UAAU8B,UAAYrd,EAAOC,QAAQod,YAGpDmQ,mBAAoB,SAClBxxB,EACAgE,GAQA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAWgc,OAASvd,EAAOC,QAAQsd,OAC1BjD,GAAgB/Y,KACzBA,EAAWga,UAAUgC,OAASvd,EAAOC,QAAQsd,SAGjDkQ,uBAAwB,SACtBzxB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAWiY,WAAaxZ,EAAOC,QAAQuZ,WAC9Bc,GAAgB/Y,KACzBA,EAAWga,UAAU/B,WAAaxZ,EAAOC,QAAQuZ,aAGrDkU,qBAAsB,SACpB1xB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CM,GAAYlZ,GACdA,EAAWkY,SAAWzZ,EAAOC,QAAQwZ,SAC5Ba,GAAgB/Y,KACzBA,EAAWga,UAAU9B,SAAWzZ,EAAOC,QAAQwZ,WAGnDkU,wBAAyB,SACvB3xB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAWkc,OAASzd,EAAOC,QAAQwd,OAC1BnD,GAAgB/Y,KACzBA,EAAWoa,eAAe8B,OAASzd,EAAOC,QAAQwd,SAGtDmQ,sBAAuB,SACrB5xB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAWoc,KAAO3d,EAAOC,QAAQ0d,KACxBrD,GAAgB/Y,KACzBA,EAAWoa,eAAegC,KAAO3d,EAAOC,QAAQ0d,OAGpDkQ,0BAA2B,SACzB7xB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAW4b,SAAWnd,EAAOC,QAAQkd,SAC5B7C,GAAgB/Y,KACzBA,EAAWoa,eAAewB,SAAWnd,EAAOC,QAAQkd,WAGxD2Q,0BAA2B,SACzB9xB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAW0b,SAAWjd,EAAOC,QAAQgd,SAC5B3C,GAAgB/Y,KACzBA,EAAWoa,eAAesB,SAAWjd,EAAOC,QAAQgd,WAGxD8Q,gCAAiC,SAC/B/xB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAWob,eAAiB3c,EAAOC,QAAQ0c,eAClCrC,GAAgB/Y,KACzBA,EAAWoa,eAAegB,eAAiB3c,EAAOC,QAAQ0c,iBAG9DqR,0BAA2B,SACzBhyB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAWyc,SAAWhe,EAAOC,QAAQ+d,SAC5B1D,GAAgB/Y,KACzBA,EAAWoa,eAAeqC,SAAWhe,EAAOC,QAAQ+d,WAGxDiQ,4BAA6B,SAC3BjyB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAW2c,OAAOoN,KAAOtrB,EAAOC,QAAQqrB,KAC/BhR,GAAgB/Y,KACzBA,EAAWoa,eAAeuC,OAAOoN,KAAOtrB,EAAOC,QAAQqrB,OAG3D4C,6BAA8B,SAC5BlyB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CO,GAAiBnZ,GACnBA,EAAW2c,OAAO5N,MAAQtQ,EAAOC,QAAQqQ,MAChCgK,GAAgB/Y,KACzBA,EAAWoa,eAAeuC,OAAO5N,MAAQtQ,EAAOC,QAAQqQ,QAG5D6d,gCAAiC,SAC/BnyB,EACAgE,GAKA,MAAmCA,EAAOC,QAAlCka,EAAR,EAAQA,OAAQiE,EAAhB,EAAgBA,eACV7c,EAAavF,EAAMkf,MAAMf,GAC3BG,GAAgB/Y,GAClBA,EAAWoa,eAAeyC,eAAiBA,EAClC1D,GAAiBnZ,KAC1BA,EAAW6c,eAAiBA,IAGhCgQ,0BAA2B,SACzBpyB,EACAgE,GAKA,MAA6BA,EAAOC,QAA5Bka,EAAR,EAAQA,OAAQoR,EAAhB,EAAgBA,SACVhqB,EAAavF,EAAMkf,MAAMf,GAC3BG,GAAgB/Y,GAClBA,EAAWoa,eAAe4P,SAAWA,EAC5B7Q,GAAiBnZ,KAC1BA,EAAWgqB,SAAWA,IAG1B8C,wBAAyB,SACvBryB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CS,GAAcrZ,GAChBA,EAAW8b,UAAYrd,EAAOC,QAAQod,UAC7B/C,GAAgB/Y,KACzBA,EAAW4a,YAAYkB,UAAYrd,EAAOC,QAAQod,YAGtDiR,qBAAsB,SACpBtyB,EACAgE,GAQA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CS,GAAcrZ,GAChBA,EAAWgc,OAASvd,EAAOC,QAAQsd,OAC1BjD,GAAgB/Y,KACzBA,EAAW4a,YAAYoB,OAASvd,EAAOC,QAAQsd,SAGnDgR,oBAAqB,SACnBvyB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CQ,GAAUpZ,KACZA,EAAWkF,UAAYzG,EAAOC,QAAQwG,YAG1C+nB,oBAAqB,SACnBxyB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CQ,GAAUpZ,KACZA,EAAWgF,UAAYvG,EAAOC,QAAQsG,YAG1CkoB,mBAAoB,SAClBzyB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CQ,GAAUpZ,KACZA,EAAWiF,SAAWxG,EAAOC,QAAQuG,WAGzCkoB,qBAAsB,SACpB1yB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CU,GAActZ,KAChBA,EAAWyd,OAAShf,EAAOC,QAAQ+e,SAGvC2P,qBAAsB,SACpB3yB,EACAgE,GAKA,IAAMuB,EAAavF,EAAMkf,MAAMlb,EAAOC,QAAQka,QAC1CU,GAActZ,KAChBA,EAAW2d,OAASlf,EAAOC,QAAQif,YAYpC,OAwCH8M,GAAoBtqB,QAvCtBwqB,GADK,GACLA,eACAD,GAFK,GAELA,oBACAM,GAHK,GAGLA,WAEAQ,IALK,GAILD,YAJK,GAKLC,yBAEAH,IAPK,GAMLH,YANK,GAOLG,wBACAF,GARK,GAQLA,qBACAC,GATK,GASLA,0BACAH,GAVK,GAULA,mBACAK,GAXK,GAWLA,mBACAG,GAZK,GAYLA,sBACAC,GAbK,GAaLA,0BACAC,GAdK,GAcLA,0BACAC,GAfK,GAeLA,2BACAC,GAhBK,GAgBLA,oBACAC,GAjBK,GAiBLA,qBACAC,GAlBK,GAkBLA,qBACAC,GAnBK,GAmBLA,sBACAC,GApBK,GAoBLA,mBACAC,GArBK,GAqBLA,uBACAC,GAtBK,GAsBLA,qBACAC,GAvBK,GAuBLA,wBACAC,GAxBK,GAwBLA,sBACAC,GAzBK,GAyBLA,0BACAC,GA1BK,GA0BLA,0BACAC,GA3BK,GA2BLA,gCACAC,GA5BK,GA4BLA,0BACAC,GA7BK,GA6BLA,4BACAC,GA9BK,GA8BLA,6BACAC,GA/BK,GA+BLA,gCAEAE,IAjCK,GAgCLD,0BAhCK,GAiCLC,yBACAC,GAlCK,GAkCLA,qBACAC,GAnCK,GAmCLA,oBACAC,GApCK,GAoCLA,oBACAC,GArCK,GAqCLA,mBACAC,GAtCK,GAsCLA,qBACAC,GAvCK,GAuCLA,qBAGa3C,MAAf,QC5vBa4C,GAAmC,WAC9C,IAAMrrB,EAAWC,cAIjB,OACE,eAACqrB,GAAD,CAAapJ,UAAW,EAAGpgB,QAAQ,WAAnC,SACE,eAACmF,GAAA,EAAD,CACEhF,QAAQ,OACR4iB,eAAe,SACf3d,WAAW,SACX7L,OAAO,OAJT,SAME,eAACkwB,GAAD,CAAcjqB,QAXJ,WACdtB,EAAS2oB,OAUL,SACE,eAAC,IAAD,CAAS7hB,SAAS,QAAQ7C,MAAM,mBAOpCqnB,GAAcppB,YAAOspB,KAAPtpB,EAAc,gBAAGgD,EAAH,EAAGA,MAAH,MAAgB,CAChD9J,MAAO,IACPC,OAAQ,IACRI,OAAQ,SACRgwB,YAAa,EACb9lB,YAAaT,EAAMU,QAAQC,QAC3BxD,OAAQ6C,EAAMQ,QAAQ,OAGlB6lB,GAAerpB,YAAO+D,KAAP/D,CAAe,CAClC9G,MAAO,OACPC,OAAQ,SCbGqwB,GAAmBpvB,YAAY,CAC1CvE,KAAM0W,GACN/S,aAbgC,CAChCgZ,WAAY,GACZE,QAAS,GACTE,MAAO,GACPI,IAAK,GACLK,IAAK,GACLG,QAAS,GACTE,IAAK,GACLyI,KAAM,IAMN9hB,SAAU,CACRovB,kBAAmB,SACjBlzB,EACAgE,GAKA,MAA+BA,EAAOC,QAA9Bia,EAAR,EAAQA,SAAUlU,EAAlB,EAAkBA,SACD,OAAbA,IACEkU,IAAajI,UACRjW,EAAMqc,MAAMrS,GACVkU,IAAajI,UACfjW,EAAMic,WAAWjS,GACfkU,IAAajI,UACfjW,EAAMyc,IAAIzS,GACRkU,IAAajI,UACfjW,EAAMmc,QAAQnS,GACZkU,IAAajI,UACfjW,EAAM8c,IAAI9S,GACRkU,IAAajI,UACfjW,EAAMid,QAAQjT,GACZkU,IAAajI,WACfjW,EAAMmd,IAAInT,MAKzBI,cAAe,SAACC,GACdA,EACGC,QAAQ8S,GAAkBlN,SAAS,SAAClQ,EAAOgE,GAC1C,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACHyB,EAAMic,WAAWlb,eAAexC,IASnCyB,EAAMic,WAAW1d,GAAM2R,SAAU,EACjClQ,EAAMic,WAAW1d,GAAM4R,WAAY,EACnCnQ,EAAMic,WAAW1d,GAAM8R,MAAQ,MAV/BrQ,EAAMic,WAAW1d,GAAQ,CACvBS,KAAM,aACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAQZ/F,QAAQ8S,GAAkBjN,WAAW,SAACnQ,EAAOgE,GAC5C,MAAwBA,EAAO8oB,KAAK5U,IAA5B3Z,EAAR,EAAQA,KAAM8e,EAAd,EAAcA,MACdrd,EAAMic,WAAW1d,GAAM2R,SAAU,EACjClQ,EAAMic,WAAW1d,GAAM4R,WAAY,EACnCnQ,EAAMic,WAAW1d,GAAM8R,MAAQ,KACyB,IAApD3R,OAAOuH,KAAKjG,EAAMic,WAAW1d,GAAMgE,MAAMgE,OAC3CvG,EAAMic,WAAW1d,GAAMgE,KAAOyB,EAAOC,QAAQ1B,KAE7CvC,EAAMic,WAAW1d,GAAMgE,KAAK8a,GAASrZ,EAAOC,QAAQ1B,KAAK8a,MAG5D/S,QAAQ8S,GAAkB+V,UAAU,SAACnzB,EAAOgE,GAAY,IAAD,EAC9CzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMic,WAAW1d,GAAQ,CACvBS,KAAM,aACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAK,UAAErM,EAAOqM,MAAMiJ,eAAf,QAA0B,eAGlChP,QAAQgT,GAAepN,SAAS,SAAClQ,EAAOgE,GACvC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMmc,QAAQ5d,GAAQ,CACpBS,KAAM,UACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQgT,GAAenN,WAAW,SAACnQ,EAAOgE,GACzC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMmc,QAAQ5d,GAAQ,CACpBS,KAAM,UACNuD,KAAMyB,EAAOC,QAAQ1B,KACrB2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQgT,GAAe6V,UAAU,SAACnzB,EAAOgE,GAAY,IAAD,EAC3CzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMmc,QAAQ5d,GAAQ,CACpBS,KAAM,UACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAK,UAAErM,EAAOqM,MAAMiJ,eAAf,QAA0B,eAGlChP,QAAQiT,GAAarN,SAAS,SAAClQ,EAAOgE,GACrC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMqc,MAAM9d,GAAQ,CAClBS,KAAM,QACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQiT,GAAapN,WAAW,SAACnQ,EAAOgE,GACvC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMqc,MAAM9d,GAAQ,CAClBS,KAAM,QACNuD,KAAMyB,EAAOC,QAAQ1B,KACrB2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQiT,GAAa4V,UAAU,SAACnzB,EAAOgE,GAAY,IAAD,EACzCzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMqc,MAAM9d,GAAQ,CAClBS,KAAM,QACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAK,UAAErM,EAAOqM,MAAMiJ,eAAf,QAA0B,eAGlChP,QAAQsT,GAAW1N,SAAS,SAAClQ,EAAOgE,GACnC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMyc,IAAIle,GAAQ,CAChBS,KAAM,MACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQsT,GAAWzN,WAAW,SAACnQ,EAAOgE,GACrC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMyc,IAAIle,GAAQ,CAChBS,KAAM,MACNuD,KAAMyB,EAAOC,QAAQ1B,KACrB2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQsT,GAAWuV,UAAU,SAACnzB,EAAOgE,GAAY,IAAD,EACvCzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMyc,IAAIle,GAAQ,CAChBS,KAAM,MACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAK,UAAErM,EAAOqM,MAAMiJ,eAAf,QAA0B,eAGlChP,QAAQuT,GAAW3N,SAAS,SAAClQ,EAAOgE,GACnC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAM8c,IAAIve,GAAQ,CAChBS,KAAM,MACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQuT,GAAW1N,WAAW,SAACnQ,EAAOgE,GACrC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAM8c,IAAIve,GAAQ,CAChBS,KAAM,MACNuD,KAAMyB,EAAOC,QAAQ1B,KACrB2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQuT,GAAWsV,UAAU,SAACnzB,EAAOgE,GAAY,IAAD,EACvCzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAM8c,IAAIve,GAAQ,CAChBS,KAAM,MACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAK,UAAErM,EAAOqM,MAAMiJ,eAAf,QAA0B,eAGlChP,QAAQwT,GAAe5N,SAAS,SAAClQ,EAAOgE,GACvC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMid,QAAQ1e,GAAQ,CACpBS,KAAM,UACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQwT,GAAe3N,WAAW,SAACnQ,EAAOgE,GACzC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMid,QAAQ1e,GAAQ,CACpBS,KAAM,UACNuD,KAAMyB,EAAOC,QAAQ1B,KACrB2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQwT,GAAeqV,UAAU,SAACnzB,EAAOgE,GAAY,IAAD,EAC3CzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMid,QAAQ1e,GAAQ,CACpBS,KAAM,UACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAK,UAAErM,EAAOqM,MAAMiJ,eAAf,QAA0B,eAGlChP,QAAQyT,GAAW7N,SAAS,SAAClQ,EAAOgE,GACnC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMmd,IAAI5e,GAAQ,CAChBS,KAAM,MACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQyT,GAAW5N,WAAW,SAACnQ,EAAOgE,GACrC,IAAQzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMmd,IAAI5e,GAAQ,CAChBS,KAAM,MACNuD,KAAMyB,EAAOC,QAAQ1B,KACrB2N,SAAS,EACTC,WAAW,EACXE,MAAO,SAGV/F,QAAQyT,GAAWoV,UAAU,SAACnzB,EAAOgE,GAAY,IAAD,EACvCzF,EAASyF,EAAO8oB,KAAK5U,IAArB3Z,KACRyB,EAAMmd,IAAI5e,GAAQ,CAChBS,KAAM,MACNuD,KAAM,GACN2N,SAAS,EACTC,WAAW,EACXE,MAAK,UAAErM,EAAOqM,MAAMiJ,eAAf,QAA0B,kBAM1B4Z,GAAsBD,GAAiBvtB,QAAvCwtB,kBAEAD,MAAf,QC/QaG,GAA0B/rB,IAAMC,MAC3C,YAAiB,IAAd6W,EAAa,EAAbA,OACK5W,EAAWC,cAEX0W,EAAWzW,YAAY6Y,GAAwBnC,IAC/CnU,EAAWvC,YAAY+Y,GAA4BrC,IAQzD,OACE,eAACjV,EAAA,EAAD,CAAYL,QAP8C,SAACuhB,GAC3DA,EAAEiJ,kBACF9rB,EAAS0oB,GAAoB9R,IAE7B5W,EAAS2rB,GAAkB,CAAEhV,WAAUlU,eAGTb,KAAK,QAAnC,SACE,eAAC,IAAD,S,0GC2BKmqB,GAAYjsB,IAAMC,MAAK,WAClC,IrCaC0C,EqCbD,EAAmC3C,IAAM+b,WAAWpF,IAAlCzf,EAAlB,EAAQyL,SAAgBmU,EAAxB,EAAwBA,OAElBX,EAAa/V,YAAYqZ,GAA0B3C,IACnDV,EAAWhW,YAAYsZ,GAAwB5C,IAC/CmF,EAAY7b,YAAY8U,GAAyBhe,IACjD8kB,EAAgB5b,YAAY6U,GAA6B/d,IACzDglB,EAAc9b,arCOnBuC,EqCP0DzL,ErCOrC,SAACyB,GAAD,OACpBsc,GAA6BtS,EAA7BsS,CAAuCtc,IACvC8b,GAAkB9b,GAAOqc,MAAMrS,GAAUmG,aqCRrCE,EAAQ5I,YrCLoB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACxDsc,GAA6BtS,EAA7BsS,CAAuCtc,GACnC8b,GAAkB9b,GAAOqc,MAAMrS,GAAUqG,MACzC,MqCEsBkjB,CAAqBh1B,IAEzC+jB,EAAc7a,YAAYgZ,GAAsBtC,IAEhD5W,EAAWC,cAejB,OAdAH,IAAMK,WAAU,WACT2b,GACH9b,EACEgW,GAAa,CACXhf,OACAif,WAAU,OAAEA,QAAF,IAAEA,IAAc,EAC1BC,SAAQ,OAAEA,QAAF,IAAEA,IAAY,MAIT,MAAf6E,GACF/a,EAASsW,GAAW,CAAEtf,KAAM+jB,OAE7B,CAAC/a,EAAU8b,EAAe9kB,EAAMif,EAAYC,EAAU6E,IACrDgB,EACK,eAACxV,GAAA,EAAD,IACW,MAATuC,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBkT,EACF,eAACiQ,GAAD,IAEA,QAILA,GAAiBnsB,IAAMC,MAAK,WAChC,IrCXC0C,EqCWD,EAAmC3C,IAAM+b,WAAWpF,IAAlCzf,EAAlB,EAAQyL,SAAgBmU,EAAxB,EAAwBA,OAClBsV,EAAiBhsB,YAAYqZ,GAA0B3C,IACvDuV,EAAejsB,YAAYsZ,GAAwB5C,IACnDV,EAAWhW,arCdhBuC,EqCcoDzL,ErCd/B,SAACyB,GACrB,OAAKuc,GAAyBvS,EAAzBuS,CAAmCvc,QAGtC,EAFOoc,GAAgBpS,EAAhBoS,CAA0Bpc,GAAOuC,KAAKgE,OAAS,KqCapD6oB,EAAc3nB,YhCmJpB,SAAC0W,GAAD,OAAoB,SAACne,GACnB,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,OAAOA,EAAKyoB,YACP,GAAI9Q,GAAgB3X,GACzB,OAAOA,EAAK4Y,UAAU6P,YAEtB,MAAM,IAAI3oB,MAAM,+BgC1JYktB,CAA2BxV,IACrD5W,EAAWC,cAGXiF,EAAQC,eACd,OACE,uCACE,eAACknB,GAAA,EAAD,CACEC,MAAOH,EACPpwB,SAAS,SACT+F,QAAQ,OACRyqB,WAAY1E,EAAcqE,EAAiB,EAC3CM,WACE,gBAACvmB,GAAA,EAAD,CACErE,KAAK,QACLN,QAbS,kBAAMtB,EAAS0pB,GAA0B,CAAE9S,aAcpD+N,SAAUkD,KAAW,OAAM3R,QAAN,IAAMA,IAAY,GAHzC,UAKE,eAACrU,EAAA,EAAD,mBACqB,QAApBqD,EAAMunB,UACL,eAAC,KAAD,IAEA,eAAC,KAAD,OAINC,WACE,gBAACzmB,GAAA,EAAD,CACErE,KAAK,QACLN,QA1BS,kBAAMtB,EAAS2pB,GAA0B,CAAE/S,aA2BpD+N,SAA0B,IAAhBkD,EAHZ,UAKuB,QAApB3iB,EAAMunB,UACL,eAAC,KAAD,IAEA,eAAC,KAAD,IAEF,eAAC5qB,EAAA,EAAD,wBAIN,eAAC8qB,GAAD,CAAgB9E,YAAaA,UAK7B8E,GAAiB7sB,IAAMC,MAE1B,YAAsB,IAAD,EAAlB8nB,EAAkB,EAAlBA,YACJ,EAAmC/nB,IAAM+b,WAAWpF,IAAlCzf,EAAlB,EAAQyL,SAAgBmU,EAAxB,EAAwBA,OAClBgW,EAAY1sB,YrCxDlB,SAACuC,EAAkBolB,GAAnB,OAA2C,SAACpvB,GAC1C,OAAOoc,GAAgBpS,EAAhBoS,CAA0Bpc,GAAOuC,KAAK6sB,IqCwD7CgF,CAAsB71B,EAAM6wB,GAC5BiF,IAEI/R,EAAc7a,YAAYgZ,GAAsBtC,IAChDoE,EAAU9a,aACd,SAACzH,GAAD,OACiB,MAAfsiB,EAAsBzF,GAAcyF,EAAdzF,CAA2B7c,GAAS,KAC5Dq0B,IAGI1T,EAAiBlZ,YAAYiZ,GAA8BvC,IAC3D8C,EAAWxZ,YAAYuZ,GAAwB7C,IAC/C0C,EAAUpZ,YAAYmZ,GAAuBzC,IAC7CgD,EAAW1Z,YAAYyZ,GAAwB/C,IAC/CkD,EAAY5Z,YAAY2Z,GAAyBjD,IACjDmW,EAAa7sB,YAAY6Z,GAAsBnD,IAE/CoW,EAAmB9sB,YhC2LzB,SAAC0W,EAAgBmE,GAAjB,OAAgD,SAACtiB,GAC/C,IAAM2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIO,GAAiB/X,GAAO,CAC1B,IAAM6tB,EAAS7tB,EAAK4oB,SACpB,GAAe,IAAXiF,EACF,OAAOA,OAEJ,GAAIlW,GAAgB3X,GAAO,CAChC,IAAM6tB,EAAS7tB,EAAKgZ,eAAe4P,SACnC,GAAe,IAAXiF,EACF,OAAOA,EAIX,OAAoB,OAAhBlS,EACKD,GAAuBC,EAAvBD,CAAoCriB,GAEpC,GgC5M0By0B,CAAmBtW,EAAQmE,IAE1DoS,EAAgBC,KAAe,CACnCC,SAAU,MACVC,QAAS,IACTC,OAAQ,MACR3gB,MAAO,IAGH5R,EAAO8E,IAAMsc,SACjB,iBAAM,CACJ,CACEoR,EAAGZ,EACHn1B,KAAM,UACNM,KAAM,SACNg1B,WAAYA,EAAWnsB,KAAI,SAAC5I,GAC1B,IAAIkiB,EAAiBuT,WAAWz1B,EAAMkiB,QAChCwT,EAAoBX,EAAWnsB,KAAI,SAACoQ,GACxC,OAAOyc,WAAWzc,EAAEkJ,WAStB,OANIA,IAAWvW,KAAKsX,IAAL,MAAAtX,KAAI,aAAQ+pB,MACzBxT,EAAS,GAEPA,IAAWvW,KAAKgqB,IAAL,MAAAhqB,KAAI,aAAQ+pB,MACzBxT,EAAS,GAEJ,CAACA,EAAQliB,EAAM4vB,QAExBgG,aAAa,EACb9T,UAAWA,EACXR,QAASA,GAGX,CACEkU,EAAGxS,EACHvjB,KAAM,UACNM,KAAM,MACN81B,cAAe,gBACfd,WAAY,aAAI70B,MAAM80B,IAAmBpsB,KAAI,SAACnG,EAAGoG,GAC/C,IAAMitB,EAAQnqB,KAAKC,MAAO/C,EAAI,GAAM,GAAKA,EAAI,IAG7C,MAAO,CAFQA,GAAKmsB,EAAmB,GAC3BG,EAAcW,OAG5BC,KAAM,EACNC,KAAMhB,EACNY,aAAa,EACbtU,SAAS,EACTQ,WAAW,MAGf,CACE8S,EACA5R,EACA1B,EACAQ,EACAiT,EACAI,EACAH,IAIEiB,EAASnuB,IAAMsc,SACnB,iBAAO,CACLtX,MAAO9N,EAAK6T,MAAM,KAAKC,UAAU,GACjCzI,OAAQ,CACN6rB,EAAG,GACHC,EAAG,IACHrd,EAAG,IAELsd,SAAU,MACVC,MAAO,CACLC,WAAW,EACX1U,SAAUA,EACVF,SAAUA,EACVe,UAAU,EACV8T,UAAU,EACVC,MAAO,GACPpV,eAAgBA,GAElBqV,MAAO,CACLC,YAAY,EACZJ,UAAW,WACX1U,SAAUA,EACVF,SAAUA,EACVe,UAAU,EACV8T,UAAU,EACVC,MAAO,GACPpV,eAAgBA,MAGpB,CAACpiB,EAAM4iB,EAAUF,EAAUN,IAQvBnO,EAAMnL,IAAMoJ,OAAuB,MACnCylB,EAAY,UAAG1jB,EAAI5B,eAAP,aAAG,EAAaulB,wBAAwBvzB,OAE1D8E,qBAAU,WAAO,IAAD,IACR9E,EAAM,UACV4P,EAAI5B,eADM,aACV,EAAawlB,uBAAuB,YAAY,GAAGC,aAC/CC,GAAgB,UACpB9jB,EAAI5B,eADgB,aACpB,EAAawlB,uBACX,mBAEF,QAEa3xB,IAAX7B,QAA0C6B,IAAlB6xB,IAC1BA,EAAcjzB,MAAMT,OAApB,UAAgCA,EAAhC,SAED,CAACszB,EAAc9G,IAElB,IAAM7nB,EAAWC,cACX+uB,EAAqB9uB,YhC8K3B,SAAC0W,GAAD,OAAoB,SAACne,GAEnB,OAAIse,GADSW,GAAqBjf,GAAOme,IAEpBuB,GAA8BvB,EAA9BuB,CAAsC1f,GACnBgK,SAGjC,MgCpLPwsB,CAAsCrY,IAElCiE,EAAiB3a,YhCsLvB,SAAC0W,GAAD,OAAoB,SAACne,GAEnB,OAAIse,GADSW,GAAqBjf,GAAOme,IAEpBuB,GAA8BvB,EAA9BuB,CAAsC1f,GACvBoiB,eAG7B,MgC5LPqU,CAA4CtY,IA2B9C,OACE,sBAAK3L,IAAKA,EAAV,SACE,eAAC,KAAD,CACEjQ,KAAMA,EACNizB,OAAQA,EACRrmB,OA5DS,CACbunB,gBAAgB,EAChBC,YAAY,EACZ/zB,OAAQ,QA0DJiG,QA9BU,SAAC6J,GACf,IAAMkkB,EAAoBlkB,EAAMkkB,OAAO,GACvC,GACyB,OAAvBL,GACmB,OAAnBnU,GACAwU,EAAOC,aAAe,IACrBzU,EAAelc,SAAS0wB,EAAO7B,EAAI,GACpC,CACA,IAAM1L,EAAQ,uBAAOjH,GAAP,CAAuBwU,EAAO7B,EAAI,IAChDxtB,EACE4qB,GAAgC,CAC9BhU,SACAiE,eAAgBiH,KAGpB9hB,EACE6V,GAAkB,CAChB7e,KAAMg4B,EACNlZ,MAAOuZ,EAAO7B,EAAI,cAkB5B,SAASV,GACPnyB,EACAmW,GAEA,OAAS,MAALnW,GAAkB,MAALmW,EACRG,GAAsBtW,EAAGmW,QAEnB5T,IAANvC,QAAyBuC,IAAN4T,EChTvB,IAAMye,GAAiBzvB,IAAMC,MAAK,WACvC,ItClBC0C,EsCkBD,EAAmC3C,IAAM+b,WAAWpF,IAA5CG,EAAR,EAAQA,OAAkB5f,EAA1B,EAAgByL,SACVzC,EAAWC,cACX4a,EAAiB3a,YAAY0a,GAAmChE,IAChEmF,EAAY7b,atCrBjBuC,EsCqB2DzL,EtCrBtC,SAACyB,GAAD,OACpBgc,GAAkChS,EAAlCgS,CAA4Chc,IAC5C8b,GAAkB9b,GAAOic,WAAWjS,GAAUkG,WsCoB1CmT,EAAgB5b,YAAYuU,GAAkCzd,IAC9D8R,EAAQ5I,YtCbd,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpBgc,GAAkChS,EAAlCgS,CAA4Chc,GACxC8b,GAAkB9b,GAAOic,WAAWjS,GAAUqG,MAC9C,MsCUoB0mB,CAA0Bx4B,IAC9CglB,EAAc9b,YtCnBpB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpBgc,GAAkChS,EAAlCgS,CAA4Chc,IAC5C8b,GAAkB9b,GAAOic,WAAWjS,GAAUmG,WsCiBhB6mB,CAAgCz4B,IAOhE,OANA8I,IAAMK,WAAU,WACT2b,GACHjB,EAAeja,KAAI,SAACoQ,GAAD,OAAOhR,EAAS6V,GAAkB,CAAE7e,OAAM8e,MAAO9E,UAErE,CAAChR,EAAU8b,EAAe9kB,EAAM6jB,IAE9BiB,EAEe,MAAThT,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBiT,GAAaC,EACf,eAAC0T,GAAD,IAEA,KANA,eAACnpB,GAAA,EAAD,OAULmpB,GAAsB5vB,IAAMC,MAAK,WACrC,ItCnDmC0C,EsCmDnC,EAAmC3C,IAAM+b,WAAWpF,IAAlCzf,EAAlB,EAAQyL,SAAgBmU,EAAxB,EAAwBA,OAGlB5W,EAAWC,cACX0vB,EAAiBzvB,atCvDYuC,EsCwDZzL,EtCxDiC,SAACyB,GAAD,OACxD8b,GAAkB9b,GAAOic,WAAWjS,GAAUzH,OsCwD5C40B,IAGI1V,EAASha,YAAY+Z,GAA2BrD,IAChDwD,EAAOla,YAAYia,GAAyBvD,IAC5CgD,EAAW1Z,YAAYma,GAA6BzD,IACpD8C,EAAWxZ,YAAYoa,GAA6B1D,IACpDwC,EAAiBlZ,YAAYqa,GAAmC3D,IAChE6D,EAAWva,YAAYsa,GAA6B5D,IACpD+D,EAASza,YAAYwa,GAA2B9D,IAChDiE,EAAiB3a,YAAY0a,GAAmChE,IAEhEiZ,EAAazC,KAAe,CAChCC,SAAU,MACVC,QAAS,IACTC,OAAQ,MACR3gB,MAAO,IAGH5R,EAAO8E,IAAMsc,SAAQ,WACzB,OAAuB,OAAnBuT,EACK,GAEFx4B,OAAOuH,KAAKixB,GAAgB/uB,KAAI,SAACoD,EAAKnD,GAC3C,IAAI5E,EAAI9E,OAAOC,OAAOu4B,EAAe3rB,IAC/B8pB,EAAQnqB,KAAKC,MAAO/C,EAAI,GAAM,GAAKA,EAAI,IAAM,IAEnD,GAAIga,EAAelc,SAASkC,GAAI,CAC9B,GAAIqZ,EAAQ,CACV,IAAM4V,EAAoBjV,EAAejd,WACvC,SAAC5F,GAAD,OAAWA,IAAU6I,KAEjBkvB,EAAe9zB,EAAE6sB,QAAO,SAACnuB,EAAGmW,GAAJ,OAAUnW,EAAImW,KAAK7U,EAAE+C,OAC7CgxB,EACJ5V,EACAzW,KAAKssB,KAAKh0B,EAAE6sB,QAAO,SAACnuB,EAAGmW,GAAJ,OAAUnW,EAAIgJ,KAAKusB,IAAIpf,EAAIif,EAAM,MAAM9zB,EAAE+C,QACxDmxB,EAAWl0B,EAAE2E,KAAI,SAAC5I,GAAD,OAAYA,EAAQ+3B,GAAQC,EAAMF,KACzD,MAAO,CACL/3B,KAAK,IAAD,OAAMq4B,OAAO7c,SAASvP,GAAO,GAA7B,KACJhI,EAAG7E,OAAOuH,KAAKixB,EAAe3rB,IAC9B/H,EAAGk0B,EACHE,SAAS,EACTC,KAAM,CAAErsB,MAAO4rB,EAAW/B,KAG5B,MAAO,CACL/1B,KAAK,IAAD,OAAMq4B,OAAO7c,SAASvP,GAAO,GAA7B,KACJhI,EAAG7E,OAAOuH,KAAKixB,EAAe3rB,IAC9B/H,EAAGA,EACHo0B,SAAS,EACTC,KAAM,CAAErsB,MAAO4rB,EAAW/B,KAI9B,MAAO,CACL/1B,KAAK,IAAD,OAAMq4B,OAAO7c,SAASvP,GAAO,GAA7B,KACJhI,EAAG7E,OAAOuH,KAAKixB,EAAe3rB,IAC9B/H,EAAGA,EACHo0B,QAAS,aACTC,KAAM,CAAErsB,MAAO4rB,EAAW/B,UAI/B,CAAC6B,EAAgB9U,EAAgBX,EAAQE,EAAMyV,IAE5C5B,EAASnuB,IAAMsc,SACnB,iBAAO,CACLtX,MAAO9N,EAAK6T,MAAM,KAAKC,UAAU,GACjCzI,OAAQ,CACN6rB,EAAG,GACHC,EAAG,GACHrd,EAAG,IAELsd,SAAU,MACVmC,UAAU,EACVl1B,OAAQ,IACRgzB,MAAO,CACLmC,MAAO,CAAC7V,EAAOoN,KAAMpN,EAAO5N,OAC5B6M,SAAUA,EACVF,SAAUA,EACVN,eAAgBA,EAChBqB,SAAUA,GAEZgU,MAAO,CACL7U,SAAUA,EACVF,SAAUA,EACVN,eAAgBA,EAChBqB,SAAUA,MAGd,CAACzjB,EAAM2jB,EAAQf,EAAUF,EAAUN,EAAgBqB,IA+BrD,OACE,eAAC,KAAD,CACEzf,KAAMA,EACNizB,OAAQA,EACRrmB,OAhCW,CACbunB,gBAAgB,EAChBC,YAAY,GA+BVqB,cA5BY,SAACtlB,GACf,IAAMulB,EAAcvlB,EAAMmkB,YAC1B,GAAIzU,EAAelc,SAAS+xB,GAAc,CACxC,IAAM5O,EAAWjH,EAAe9b,QAAO,SAAC/G,GAAD,OAAWA,IAAU04B,KAC5D1wB,EACE4qB,GAAgC,CAC9BhU,SACAiE,eAAgBiH,SAGf,CACL,IAAMA,EAAQ,uBAAOjH,GAAP,CAAuB6V,IACrC1wB,EACE4qB,GAAgC,CAC9BhU,SACAiE,eAAgBiH,KAGpB9hB,EAAS6V,GAAkB,CAAE7e,OAAM8e,MAAO4a,KAE5C,OAAO,QAaX,SAASd,GACPj1B,EACAmW,GAEA,GAAS,MAALnW,GAAkB,MAALmW,EAAW,CAC1B,IAAM6f,EAASx5B,OAAOU,QAAQ8C,GACxBi2B,EAASz5B,OAAOU,QAAQiZ,GAC9B,OACEnW,IAAMmW,GACL6f,EAAO3xB,SAAW4xB,EAAO5xB,QACxB2xB,EAAO5f,OAAM,WAAiBlQ,GAAO,IAAD,mBAArBgwB,EAAqB,KAAfC,EAAe,KAClC,cAAuBF,EAAO/vB,GAA9B,GAAOkwB,EAAP,KAAaC,EAAb,KACA,OAAOD,IAASF,GAQ1B,SACEl2B,EAGAmW,GAIA,IAAM6f,EAASx5B,OAAOU,QAAQ8C,GACxBi2B,EAASz5B,OAAOU,QAAQiZ,GAC9B,OACEnW,IAAMmW,GACL6f,EAAO3xB,SAAW4xB,EAAO5xB,QACxB2xB,EAAO5f,OAAM,WAAiBlQ,GAAO,IAAD,mBAArBgwB,EAAqB,KAAfC,EAAe,KAClC,cAAuBF,EAAO/vB,GAA9B,GAAOkwB,EAAP,KAAaC,EAAb,KACA,OAAOD,IAASF,GAAQG,IAAWF,KAvBTG,CAAgBD,EAAQF,MAItD,YAAa5zB,IAANvC,QAAyBuC,IAAN4T,EC5LvB,IAAMogB,GAAcpxB,IAAMC,MAAK,WACpC,IvCcC0C,EuCdiBzL,EAAS8I,IAAM+b,WAAWpF,IAApChU,SACFzC,EAAWC,cACX8b,EAAY7b,avCYjBuC,EuCZwDzL,EvCYnC,SAACyB,GAAD,OACpBkc,GAA+BlS,EAA/BkS,CAAyClc,IACzC8b,GAAkB9b,GAAOmc,QAAQnS,GAAUkG,WuCbvCmT,EAAgB5b,YAAYyU,GAA+B3d,IAC3D8R,EAAQ5I,YvCoBd,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpBkc,GAA+BlS,EAA/BkS,CAAyClc,GACrC8b,GAAkB9b,GAAOmc,QAAQnS,GAAUqG,MAC3C,MuCvBoBqoB,CAAuBn6B,IAC3CglB,EAAc9b,YvCcpB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpBkc,GAA+BlS,EAA/BkS,CAAyClc,IACzC8b,GAAkB9b,GAAOmc,QAAQnS,GAAUmG,WuChBbwoB,CAA6Bp6B,IAM7D,OALA8I,IAAMK,WAAU,WACT2b,GACH9b,EAAS+V,GAAe,CAAE/e,YAE3B,CAACgJ,EAAU8b,EAAe9kB,IACzB+kB,EACK,eAACxV,GAAA,EAAD,IACW,MAATuC,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBkT,EACF,eAACqV,GAAD,IAEA,QAILA,GAAevxB,IAAMC,MAAK,WAC9B,IvCjBgC0C,EuCiBhC,EAAmC3C,IAAM+b,WAAWpF,IAAlCzf,EAAlB,EAAQyL,SAAgBmU,EAAxB,EAAwBA,OAClB0a,EAAcpxB,avClBYuC,EuCkBkBzL,EvClBG,SAACyB,GAAD,OACrD8b,GAAkB9b,GAAOmc,QAAQnS,GAAUzH,OuCiBcu2B,IACnDzX,EAAY5Z,YAAYib,GAA2BvE,IACnDmW,EAAa7sB,YAAYkb,GAAwBxE,IAEjD5b,EAAO8E,IAAMsc,SACjB,kBACiB,MAAfkV,EACI,CACE,CACE9D,EAAG8D,EACHt1B,EAAGs1B,EAAY1wB,KAAI,SAACnG,EAAGoG,GAAJ,OAAUA,KAC7B5E,EAAGq1B,EAAY,GAAG1wB,KAAI,SAACnG,EAAGoG,GAAJ,OAAUA,KAChCpJ,KAAM,UACNM,KAAM,UACNg1B,WAAYA,EAAWnsB,KAAI,SAAC5I,GAC1B,IAAIkiB,EAAiBuT,WAAWz1B,EAAMkiB,QAChCwT,EAAoBX,EAAWnsB,KAAI,SAACoQ,GACxC,OAAOyc,WAAWzc,EAAEkJ,WAStB,OANIA,IAAWvW,KAAKsX,IAAL,MAAAtX,KAAI,aAAQ+pB,MACzBxT,EAAS,GAEPA,IAAWvW,KAAKgqB,IAAL,MAAAhqB,KAAI,aAAQ+pB,MACzBxT,EAAS,GAEJ,CAACA,EAAQliB,EAAM4vB,QAExBgG,aAAa,EACb4D,YAAY,EACZ1X,UAAWA,IAGf,KACN,CAACwX,EAAaxX,EAAWiT,IAGrBkB,EAAS,CACbnpB,MAAO9N,EAAK6T,MAAM,KAAKC,UAAU,GACjCsjB,SAAU,MACV/rB,OAAQ,CACN6rB,EAAG,GACHC,EAAG,GACHrd,EAAG,IAELyf,UAAU,EACVl1B,OAAQ,KAQV,OAAO,eAAC,KAAD,CAAaL,KAAMA,EAAMizB,OAAQA,EAAQrmB,OALjC,CACbunB,gBAAgB,EAChBC,YAAY,QAMhB,SAASmC,GACP52B,EACAmW,GAEA,OAAS,MAALnW,GAAkB,MAALmW,EACRG,GAAsBtW,EAAGmW,QAEnB5T,IAANvC,QAAyBuC,IAAN4T,E,wDCrFjB2gB,GAMR,SAAC,GAAqE,IAAnE9a,EAAkE,EAAlEA,SAAU+a,EAAwD,EAAxDA,eAAgB7yB,EAAwC,EAAxCA,iBAAkB8yB,EAAsB,EAAtBA,SAAU91B,EAAY,EAAZA,MACtD+1B,EAA4B1xB,aAChC,SAACzH,GACC,IAAMo5B,ExE9BmB,SAACp5B,GAAD,OAAsBA,EAAM4F,UwE8BlCyzB,CAAgBr5B,GACnC,OAAOtB,OAAOU,QAAQg6B,GACnBjxB,KAAI,mCAAEhI,EAAF,KAAUyF,EAAV,WAA0B,CAC7BzF,SACA6J,SAAUpE,EAAUQ,iBACpBP,SAAUD,EAAUC,SACpBqY,SAAUob,GAAuB1zB,EAAUC,UAC3CqC,SAAUf,GAAoBhH,EAApBgH,CAA4BnH,OAEvCsG,QAAO,mBAA8B,MAA9B,EAAG0D,YACV1D,QAAO,gBAAaizB,EAAb,EAAGrb,SAAH,OACM,MAAZA,GAAmBqb,IAAsBrb,QAM3CpF,EAAYrR,YAAYqP,IAExB0iB,EAAkC/xB,aAAY,SAACzH,GACnD,GAAiB,MAAb8Y,EAAmB,CACrB,IAAMd,G3C+GTH,E2C/GyDiB,E3C+GzC,SAAC9Y,GAChB,IAAMwW,EAAWoB,GAAsBC,EAAtBD,CAA2B5X,GAC5C,OAAOtB,OAAOU,QAAQoX,EAASwB,WAC5B7P,KAAI,YAA2B,IAAD,mBAC7B,MAAO,CACLhI,OAF2B,KAG3BiW,WAH2B,SAM9B9P,OAAO6R,M2CxHyDnY,GACjE,OAAOgY,EAAU7P,KAAI,YAA6B,IAA1BhI,EAAyB,EAAzBA,OAAQiW,EAAiB,EAAjBA,WAC9B,MAAO,CACLjW,SACA+H,SAAUf,GAAoBhH,EAApBgH,CAA4BnH,GACtCy5B,MAAO/6B,OAAOU,QAAQgX,EAAW4C,aAC9B7Q,KAAI,YAAyB,IAAD,mBAAtBkR,EAAsB,KAAX9Z,EAAW,KAC3B,MAAO,CACL8Z,YACArP,SAAUzK,EAAMhB,KAChBS,KAAMO,EAAMP,SAGfsH,QAAO,gBAAGtH,EAAH,EAAGA,KAAH,OACM,MAAZkf,GAAmBlf,IAASkf,SAKpC,MAAO,G3C4FX,IAACrG,K2CxFD,EAAwBxQ,IAAMiF,UAAS,GAAvC,mBAAOL,EAAP,KAAagG,EAAb,KACMynB,EAAc,WAClBznB,GAAQ,IAOJ0nB,EAAiB,SACrBx5B,EACA6J,EACAkU,GAEAgb,EAAS/4B,EAAQ6J,EAAUkU,GAC3Bwb,KAGIE,EAAqC,GAuC3C,OAtCAT,EAA0B95B,SAAQ,SAACw6B,GACjCD,EAAa95B,KACX,eAACg6B,GAAA,EAAD,CACEv6B,MAAK,UAAKs6B,EAAS15B,OAAd,YAAwB05B,EAAS7vB,UACtCnB,QAAS,wBACP8wB,EACEE,EAAS15B,OADG,UAEZ05B,EAAS7vB,gBAFG,QAES,GACrB6vB,EAAS3b,WANf,SAWG2b,EAAS3xB,UAFL2xB,EAAS15B,YAMpBq5B,EAAgCn6B,SAAQ,SAACw6B,GACvCD,EAAa95B,KAAK,eAACi6B,GAAA,EAAD,UAAgBF,EAAS3xB,YAC3C2xB,EAASJ,MAAMp6B,SAAQ,SAAC26B,EAAY5xB,GAClCwxB,EAAa95B,KACX,eAACg6B,GAAA,EAAD,CACEv6B,MAAK,UAAKs6B,EAAS15B,OAAd,YAAwB65B,EAAWhwB,UACxCnB,QAAS,kBACP8wB,EACEE,EAAS15B,OACT65B,EAAWhwB,SACXgwB,EAAWh7B,OANjB,SAWGg7B,EAAW3gB,WAXd,UASUwgB,EAAS15B,OATnB,YAS6B65B,EAAWhwB,kBAS5C,gBAACiwB,GAAA,EAAD,CAAa52B,MAAO,CAAEsL,SAAU,IAAKurB,SAAU,KAA/C,UACE,eAACC,GAAA,EAAD,UAAe/2B,GAAgB,gBAC/B,eAACg3B,GAAA,EAAD,CACE76B,MAAK,UAAK05B,EAAL,YAAuB7yB,GAC5B6F,KAAMA,EACNG,QAASstB,EACTW,OA3Da,WACjBpoB,GAAQ,IAsDN,SAMG2nB,IAEFT,EAA0B5yB,OACzBizB,EAAgCjzB,SAChC,GAAK,eAACsV,GAAA,EAAD,CAAgBxL,OAAO,EAAvB,yBAKb,SAASipB,GAAuBzzB,GAC9B,OAAQA,GACN,KAAKrD,GACH,OAAOyT,GACT,KAAKzT,GACH,OAAOyT,GACT,KAAKzT,GACH,OAAOyT,IClIN,IAAMqkB,GAAgBjzB,IAAMC,MAEhC,YAAiB,IAAd6W,EAAa,EAAbA,OACE5W,EAAWC,cACjB,OACE,uCACE,eAAC,GAAD,CACE0W,SAAUjI,GACVgjB,eAAgBxxB,YAAY+X,GAA+BrB,IAC3D/X,iBAAkBqB,YAAYgY,GAAiCtB,IAC/D+a,SAAU,SAAC/4B,EAAQ6J,GAAT,OACRzC,EAASmpB,GAAqB,CAAEvS,SAAQhe,SAAQ6J,eAElD5G,MAAM,iBAER,eAAC,GAAD,CACE8a,SAAUjI,GACVgjB,eAAgBxxB,YACduY,GAAoC7B,IAEtC/X,iBAAkBqB,YAChBwY,GAAsC9B,IAExC+a,SAAU,SAAC/4B,EAAQ6J,GAAT,OACRzC,EAASopB,GAA0B,CAAExS,SAAQhe,SAAQ6J,eAEvD5G,MAAM,sBAER,eAAC,GAAD,CACE8a,SAAUjI,GACVgjB,eAAgBxxB,YAAY2Y,GAAiCjC,IAC7D/X,iBAAkBqB,YAChB4Y,GAAmClC,IAErC+a,SAAU,SAAC/4B,EAAQ6J,GAAT,OACRzC,EAASqpB,GAAuB,CAAEzS,SAAQhe,SAAQ6J,eAEpD5G,MAAM,mBAER,eAAC,GAAD,CACE8a,SAAUjI,GACVgjB,eAAgBxxB,YAAYqY,GAA6B3B,IACzD/X,iBAAkBqB,YAAYsY,GAA+B5B,IAC7D+a,SAAU,SAAC/4B,EAAQ6J,GAAT,OACRzC,EAASipB,GAAmB,CAAErS,SAAQhe,SAAQ6J,eAEhD5G,MAAM,eAER,eAACm3B,GAAD,CAAWpc,OAAQA,UAKnBoc,GAAYlzB,IAAMC,MAErB,YAAiB,IAAd6W,EAAa,EAAbA,OACJ,OACE,gBAACqc,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,GAAA,EAAD,CAAM7zB,MAAI,EAAC+zB,GAAI,EAAf,SACE,eAAC,GAAD,UACE,eAACC,GAAD,CAAgBxc,OAAQA,QAG5B,eAACqc,GAAA,EAAD,CAAM7zB,MAAI,EAAC+zB,GAAI,EAAf,SACE,gBAACF,GAAA,EAAD,WACE,eAAC,GAAD,UACE,eAACI,GAAD,CAAqBzc,OAAQA,MAE/B,eAAC,GAAD,UACE,eAAC0c,GAAD,CAAkB1c,OAAQA,iBAQhC0U,GAAcppB,YAAOspB,KAAPtpB,EAAc,gBAAGgD,EAAH,EAAGA,MAAH,MAAgB,CAChD5J,QAAS4J,EAAMQ,QAAQ,GACvBrD,OAAQ6C,EAAMQ,QAAQ,GACtByM,UAAW,SACXlO,MAAOiB,EAAMU,QAAQ2tB,KAAKC,cAGtBJ,GAAiBtzB,IAAMC,MAE1B,YAAiB,IAAd6W,EAAa,EAAbA,OACEnU,EAAWvC,YAAYgY,GAAiCtB,IACxDhe,EAASsH,YAAY+X,GAA+BrB,IAC1D,OAAgB,MAAZnU,EAEA,eAACgU,GAAmBwP,SAApB,CACEjuB,MAAO,CAAEY,SAAQ6J,WAAUkU,SAAUjI,GAAqBkI,UAD5D,SAGE,eAACmV,GAAD,MAIG,oEAILsH,GAAsBvzB,IAAMC,MAE/B,YAAiB,IAAd6W,EAAa,EAAbA,OACEnU,EAAWvC,YAAYwY,GAAsC9B,IAC7Dhe,EAASsH,YAAYuY,GAAoC7B,IAC/D,OAAgB,MAAZnU,EAEA,eAACgU,GAAmBwP,SAApB,CACEjuB,MAAO,CACLY,SACA6J,WACAkU,SAAUjI,GACVkI,UALJ,SAQE,eAAC2Y,GAAD,MAIG,oEAIL+D,GAAmBxzB,IAAMC,MAE5B,YAAiB,IAAd6W,EAAa,EAAbA,OACEnU,EAAWvC,YAAY4Y,GAAmClC,IAC1Dhe,EAASsH,YAAY2Y,GAAiCjC,IAC5D,OAAgB,MAAZnU,EAEA,eAACgU,GAAmBwP,SAApB,CACEjuB,MAAO,CAAEY,SAAQ6J,WAAUkU,SAAUjI,GAAwBkI,UAD/D,SAGE,eAACsa,GAAD,MAIG,oECvJEuC,GAAU3zB,IAAMC,MAAK,WAChC,I1CgHC0C,E0ChHiBzL,EAAS8I,IAAM+b,WAAWpF,IAApChU,SACFsZ,EAAY7b,a1C+GjBuC,E0C/GoDzL,E1C+G/B,SAACyB,GAAD,OACpB+c,GAA2B/S,EAA3B+S,CAAqC/c,IACrC8b,GAAkB9b,GAAO8c,IAAI9S,GAAUkG,W0ChHnCmT,EAAgB5b,YAAYsV,GAA2Bxe,IACvDglB,EAAc9b,Y1CkHpB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpB+c,GAA2B/S,EAA3B+S,CAAqC/c,IACrC8b,GAAkB9b,GAAO8c,IAAI9S,GAAUmG,W0CpHT8qB,CAAyB18B,IACnD8R,EAAQ5I,Y1CsGkB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACtD+c,GAA2B/S,EAA3B+S,CAAqC/c,GACjC8b,GAAkB9b,GAAO8c,IAAI9S,GAAUqG,MACvC,M0CzGsB6qB,CAAmB38B,IAEvCgJ,EAAWC,cAMjB,OALAH,IAAMK,WAAU,WACT2b,GACH9b,EAASsW,GAAW,CAAEtf,YAEvB,CAACgJ,EAAU8b,EAAe9kB,IACzB+kB,EACK,eAACxV,GAAA,EAAD,IACW,MAATuC,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBkT,EACF,eAAC4X,GAAD,IAEA,QAILA,GAAe9zB,IAAMC,MAAS,WAClC,IAAkB/I,EAAS8I,IAAM+b,WAAWpF,IAApChU,SACFmqB,EAAY1sB,YAAYoV,GAActe,GAAO81B,IAE7CC,EAA0BK,KAAe,CAC7CC,SAAU,MACVC,QAAS,GACTC,OAAQ,MACR3gB,MAAO,IACNhM,KAAI,SAACoQ,EAAG2L,GACT,MAAO,CAAEiL,IAAK5W,EAAGkJ,OAAQkW,OAAOzT,EAAM,OAGlC3hB,EAAO8E,IAAMsc,SACjB,iBAAM,CACJ,CACEoR,EAAGZ,EACHn1B,KAAM,UACNM,KAAM,MACNg1B,WAAYA,EAAWnsB,KAAI,SAAC5I,GAC1B,IAAIkiB,EAAiBuT,WAAWz1B,EAAMkiB,QAChCwT,EAAoBX,EAAWnsB,KAAI,SAACoQ,GACxC,OAAOyc,WAAWzc,EAAEkJ,WAStB,OANIA,IAAWvW,KAAKsX,IAAL,MAAAtX,KAAI,aAAQ+pB,MACzBxT,EAAS,GAEPA,IAAWvW,KAAKgqB,IAAL,MAAAhqB,KAAI,aAAQ+pB,MACzBxT,EAAS,GAEJ,CAACA,EAAQliB,EAAM4vB,QAExBgG,aAAa,EAEbtU,SAAS,EACTkY,YAAY,MAGhB,CAAC5E,EAAWG,IAGRkB,EAASnuB,IAAMsc,SACnB,iBAAO,CACLtX,MAAO9N,EAAK6T,MAAM,KAAKC,UAAU,GACjCzI,OAAQ,CACN6rB,EAAG,GACHC,EAAG,IACHrd,EAAG,IAELsd,SAAU,MACVC,MAAO,CACLC,WAAW,EACX7T,UAAU,EACV8T,UAAU,EACVC,MAAO,IAETC,MAAO,CACLH,UAAW,WACX7T,UAAU,EACV8T,UAAU,EACVC,MAAO,OAGX,CAACx3B,IAOH,OACE,sBAAK2U,UAAU,iBAAf,SACE,eAAC,KAAD,CAAa3Q,KAAMA,EAAMizB,OAAQA,EAAQrmB,OAP9B,CACbunB,gBAAgB,EAEhBC,YAAY,UAShB,SAAStC,GACPnyB,EACAmW,GAEA,OAAS,MAALnW,GAAkB,MAALmW,EACRG,GAAsBtW,EAAGmW,QAEnB5T,IAANvC,QAAyBuC,IAAN4T,EC1GvB,IAAM+iB,GAAc/zB,IAAMC,MAAK,WACpC,I3CoIC0C,E2CpIiBzL,EAAS8I,IAAM+b,WAAWpF,IAApChU,SACFzC,EAAWC,cACX8b,EAAY7b,a3CkIjBuC,E2ClIwDzL,E3CkInC,SAACyB,GAAD,OACpBgd,GAA+BhT,EAA/BgT,CAAyChd,IACzC8b,GAAkB9b,GAAOid,QAAQjT,GAAUkG,W2CnIvCmT,EAAgB5b,YAAYuV,GAA+Bze,IAC3D8R,EAAQ5I,Y3C0Hd,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpBgd,GAA+BhT,EAA/BgT,CAAyChd,GACrC8b,GAAkB9b,GAAOid,QAAQjT,GAAUqG,MAC3C,M2C7HoBgrB,CAAuB98B,IAC3CglB,EAAc9b,Y3CoIpB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpBgd,GAA+BhT,EAA/BgT,CAAyChd,IACzC8b,GAAkB9b,GAAOid,QAAQjT,GAAUmG,W2CtIbmrB,CAA6B/8B,IAM7D,OALA8I,IAAMK,WAAU,WACT2b,GACH9b,EAASuW,GAAe,CAAEvf,YAE3B,CAACgJ,EAAU8b,EAAe9kB,IACzB+kB,EACK,eAACxV,GAAA,EAAD,IACW,MAATuC,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBkT,EACF,eAACgY,GAAD,IAEA,QAILA,GAAmBl0B,IAAMC,MAAK,WAClC,I3C+FgC0C,E2C/FhC,EAAmC3C,IAAM+b,WAAWpF,IAAlCzf,EAAlB,EAAQyL,SAAgBmU,EAAxB,EAAwBA,OAElBqd,EAAc/zB,a3C6FYuC,E2C5FZzL,E3C4FiC,SAACyB,GAAD,mCACrD8b,GAAkB9b,GAAOid,QAAQjT,UADoB,aACrD,EAA4CzH,YADS,QACD,K2C5FlDk5B,IAGIzY,EAASvb,YAAYsb,GAAwB5E,IAC7C+E,EAASzb,YAAYwb,GAAwB9E,IAC7CoR,EAAW7wB,OAAOuH,KAAKu1B,GAAaj1B,OAAS,EAE7ChE,EAAO8E,IAAMsc,SACjB,iBAAM,CACJ,CACEpgB,EACEyf,EAASuM,EACL7wB,OAAOC,OAAO68B,EAAYxY,IAC1BtkB,OAAOC,OAAO68B,EAAYjM,IAChC/rB,EACE0f,EAASqM,EACL7wB,OAAOC,OAAO68B,EAAYtY,IAC1BxkB,OAAOC,OAAO68B,EAAYjM,IAChCvwB,KAAM,UACNwV,KAAM,UACNsmB,KAAMp8B,OAAOuH,KAAKu1B,EAAY,IAC9BE,aAAc,aACdC,SAAU,CACRC,OAAQ,uBAEVC,OAAQ,CACN1yB,KAAM,EACNqC,MAAO9M,OAAOuH,KAAKu1B,EAAY,SAIrC,CAACA,EAAaxY,EAAQE,EAAQqM,IAG1BiG,EAASnuB,IAAMsc,SACnB,iBAAO,CACLtX,MAAO9N,EAAK6T,MAAM,KAAKC,UAAU,GACjCzI,OAAQ,CACN6rB,EAAG,GACHC,EAAG,GACHrd,EAAG,IAELsd,SAAU,MACVmC,UAAU,EACVlC,MAAO,CACLvpB,MAAO,CACLyuB,KAAK,MAAD,OACF9X,EAAStkB,OAAOuH,KAAKu1B,GAAaj1B,OAASyc,EAASuM,GAEtDuM,KAAM,CACJF,OAAQ,yBACRzyB,KAAM,GACNqC,MAAO,aAIbwqB,MAAO,CACL3pB,MAAO,CACLyuB,KAAK,MAAD,OACF5X,EAASxkB,OAAOuH,KAAKu1B,GAAaj1B,OAAS2c,EAASqM,GAEtDuM,KAAM,CACJF,OAAQ,yBACRzyB,KAAM,GACNqC,MAAO,gBAKf,CAACwX,EAAQE,EAAQqM,EAAUhxB,EAAMi9B,IAQnC,OAAO,eAAC,KAAD,CAAaj5B,KAAMA,EAAMizB,OAAQA,EAAQrmB,OALjC,CACbunB,gBAAgB,EAChBC,YAAY,QAMhB,SAAS8E,GACPv5B,EACAmW,GAEA,GAAS,MAALnW,GAAkB,MAALmW,EAAW,CAC1B,IAAM6f,EAASx5B,OAAOuH,KAAK/D,GACrBi2B,EAASz5B,OAAOuH,KAAKoS,GAC3B,OACEnW,IAAMmW,GACL6f,EAAO3xB,SAAW4xB,EAAO5xB,QACxB2xB,EAAO5f,OAAM,SAAC8f,EAAMhwB,GAElB,OADa+vB,EAAO/vB,KACJgwB,KAItB,YAAa3zB,IAANvC,QAAyBuC,IAAN4T,EChIvB,IAAM0jB,GAAU10B,IAAMC,MAAK,WAChC,I5C8JC0C,E4C9JiBzL,EAAS8I,IAAM+b,WAAWpF,IAApChU,SACFzC,EAAWC,cACX8b,EAAY7b,a5C4JjBuC,E4C5JoDzL,E5C4J/B,SAACyB,GAAD,OACpBkd,GAA2BlT,EAA3BkT,CAAqCld,IACrC8b,GAAkB9b,GAAOmd,IAAInT,GAAUkG,W4C7JnCmT,EAAgB5b,YAAYyV,GAA2B3e,IACvD8R,EAAQ5I,Y5CoJkB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACtDkd,GAA2BlT,EAA3BkT,CAAqCld,GACjC8b,GAAkB9b,GAAOmd,IAAInT,GAAUqG,MACvC,M4CvJsB2rB,CAAmBz9B,IACvCglB,EAAc9b,Y5C8JpB,SAACuC,GAAD,OAAsB,SAAChK,GAAD,OACpBkd,GAA2BlT,EAA3BkT,CAAqCld,IACrC8b,GAAkB9b,GAAOmd,IAAInT,GAAUmG,W4ChKT8rB,CAAyB19B,IAMzD,OALA8I,IAAMK,WAAU,WACT2b,GACH9b,EAASwW,GAAW,CAAExf,YAEvB,CAACgJ,EAAU8b,EAAe9kB,IACzB+kB,EACK,eAACxV,GAAA,EAAD,IACW,MAATuC,EACF,eAACjH,EAAA,EAAD,CAAYoC,MAAM,QAAlB,SAA2B6E,IACzBkT,EACF,eAAC2Y,GAAD,IAEA,QAILA,GAAe70B,IAAMC,MAAK,WAC9B,I5C0H4B0C,E4C1HVzL,EAAS8I,IAAM+b,WAAWpF,IAApChU,SAEFmyB,EAAU10B,a5CwHYuC,E4CxHczL,E5CwHO,SAACyB,GAAD,mCACjD8b,GAAkB9b,GAAOmd,IAAInT,UADoB,aACjD,EAAwCzH,YADS,QACD,K4CzHC65B,IAE3C75B,EAAO8E,IAAMsc,SACjB,iBAAM,CACJ,CACEpgB,EAAG7E,OAAOuH,KAAKk2B,EAAQ,IACvB34B,EAAG9E,OAAOC,OAAOw9B,EAAQ,IACzBn9B,KAAM,UAGV,CAACm9B,IAGG3G,EAASnuB,IAAMsc,SACnB,iBAAO,CACLtX,MAAO9N,EAAK6T,MAAM,KAAKC,UAAU,GACjCzI,OAAQ,CACN6rB,EAAG,GACHC,EAAG,GACHrd,EAAG,IAELsd,SAAU,MACVmC,UAAU,KAEZ,CAACv5B,IASH,OAAO,eAAC,KAAD,CAAagE,KAAMA,EAAMizB,OAAQA,EAAQrmB,OANjC,CACbunB,gBAAgB,EAEhBC,YAAY,QAMhB,SAASyF,GAAkBl6B,EAAwBmW,GACjD,GAAS,MAALnW,GAAkB,MAALmW,EAAW,CAC1B,IAAM6f,EAASx5B,OAAOuH,KAAK/D,GACrBi2B,EAASz5B,OAAOuH,KAAKoS,GAC3B,OACEnW,IAAMmW,GACL6f,EAAO3xB,SAAW4xB,EAAO5xB,QACxB2xB,EAAO5f,OAAM,SAAC8f,EAAMhwB,GAElB,OADa+vB,EAAO/vB,KACJgwB,KAItB,YAAa3zB,IAANvC,QAAyBuC,IAAN4T,ECtEvB,IAAMgkB,GAAkBh1B,IAAMC,MAElC,YAAiB,IAAd6W,EAAa,EAAbA,OACEnU,EAAWvC,YAAY+Y,GAA4BrC,IACnDhe,EAASsH,YAAY8Y,GAA0BpC,IAC/CD,EAAWzW,YAAY6Y,GAAwBnC,IACrD,OAAgB,MAAZnU,GAAgC,MAAZkU,EAEpB,eAACF,GAAmBwP,SAApB,CACEjuB,MAAO,CAAEY,SAAQ6J,WAAUkU,WAAUC,UADvC,SAGE,eAACme,GAAD,CAAape,SAAUA,MAIpB,oEAILoe,GAAcj1B,IAAMC,MAEvB,YACD,OADmB,EAAf4W,UAEF,KAAKjI,GACH,OAAO,eAACkN,GAAD,IACT,KAAKlN,GACH,OAAO,eAAC6gB,GAAD,IACT,KAAK7gB,GACH,OAAO,eAACwiB,GAAD,IACT,KAAKxiB,GACH,OAAO,eAACqd,GAAD,IACT,KAAKrd,GACH,OAAO,eAAC+kB,GAAD,IACT,KAAK/kB,GACH,OAAO,eAACmlB,GAAD,IACT,KAAKnlB,GACH,OAAO,eAAC8lB,GAAD,IACT,QACE,OAAO,SCpDAQ,GAAwBl1B,IAAMC,MACzC,YAAiB,IAAd6W,EAAa,EAAbA,OACK5W,EAAWC,cAMjB,OACE,eAAC0B,EAAA,EAAD,CAAYL,QAL8C,SAACuhB,GAC3DA,EAAEiJ,kBACF9rB,EAAS0oB,GAAoB9R,KAGChV,KAAK,QAAnC,SACE,eAAC,IAAD,SCMKqzB,GAA2B,WACtC,OACE,qCACE,eAAC,GAAD,OAKAC,GAAyB,WAC7B,IAAMC,EAAaj1B,YAAY0X,GAA2B/G,IAC1D,OACE,gBAAC5J,GAAA,EAAD,CAAKhF,QAAQ,OAAOmzB,SAAS,OAAO3X,EAAG,EAAGC,EAAG,EAA7C,UACGyX,EAAWv0B,KAAI,SAACgW,GAAD,OACd,eAACye,GAAD,CAAMze,OAAQA,GAAaA,MAE7B,eAAC,GAAD,QAKAye,GAAOv1B,IAAMC,MAAyB,YAAiB,IAAd6W,EAAa,EAAbA,OACvCI,EAAW9W,YAAY4X,GAAwBlB,IAE/C5W,EAAWC,cAIXq1B,EAAap1B,aACjB,SAACzH,GAAD,OAAsB8e,GAA8B9e,KAAWme,KAE3D1R,EAAQC,eAEd,OACE,gBAACqmB,GAAA,EAAD,CACE1pB,QAAQ,WAERhG,MAAO,CACLV,MAAO,OACPiH,OAAQ6C,EAAMQ,QAAQ,GACtBpK,QAAS4J,EAAMQ,QAAQ,GACvB6vB,OAAQ,UACR5vB,YAAa2vB,EAAapwB,EAAMU,QAAQiH,QAAQC,WAAQ5P,GAE1DoE,QAnBa,WACftB,EAASgpB,GAAWpS,KAQpB,UAYE,eAAC3P,GAAA,EAAD,CAAKhF,QAAQ,OAAO4iB,eAAe,WAAnC,SACE,eAAC5d,GAAA,EAAD,UACE,eAAC,GAAD,CAAc+P,SAAUA,EAAUJ,OAAQA,QAG9C,eAAC4e,GAAD,CAAYxe,SAAUA,EAAUJ,OAAQA,MAfnCA,MAoBL6e,GAGD,SAAC,GAA0B,IAAxBze,EAAuB,EAAvBA,SAAUJ,EAAa,EAAbA,OAChB,OAAQI,GACN,IAAK,cACH,OAAO,eAAC6U,GAAD,CAAyBjV,OAAQA,IAC1C,IAAK,YACH,OAAO,eAACoe,GAAD,CAAuBpe,OAAQA,IACxC,QACE,MAAM,IAAI1X,MAAM,oBAIhBs2B,GAAa11B,IAAMC,MAGtB,YAA2B,IAAxBiX,EAAuB,EAAvBA,SAAUJ,EAAa,EAAbA,OACd,OAAQI,GACN,IAAK,YACH,OAAO,eAAC+b,GAAD,CAAenc,OAAQA,IAChC,IAAK,cACH,OAAO,eAACke,GAAD,CAAiBle,OAAQA,IAClC,QACE,MAAM,IAAI1X,MAAM,sB,8BC/FTw2B,GAAsB51B,IAAMC,MAGtC,YAAmC,IAAhCia,EAA+B,EAA/BA,OAAQ2b,EAAuB,EAAvBA,iBACN/vB,EAAsCoU,EAAOpZ,KAAI,SAAC5I,GACtD,MAAO,CACLkiB,OAAQliB,EAAMkiB,OACdjW,MAAOjM,EAAM4vB,QAqBjB,EAAwB7iB,oBAAS,GAAjC,mBAAOL,EAAP,KAAagG,EAAb,KAEA,OACE,eAAC,yBAAD,CACEhG,KAAMA,EACNgG,QAAS,kBAAMA,GAAShG,IAExBtJ,MAAO,IACPw6B,SAAU,GACVC,cAAe,GACfjwB,QAASA,EACTkwB,gBA5BoB,SAAClwB,GACvB,IAAMmwB,EAAYnwB,EAAQhF,KAAI,SAAC5I,GAC7B,IACMg+B,EADQh+B,EAAMiM,MACCgyB,QAAQ,WAAY,IAAIprB,MAAM,KAC7C+c,EAAM,CACVsO,EAAGre,OAAOme,EAAO,IACjBG,EAAGte,OAAOme,EAAO,IACjBllB,EAAG+G,OAAOme,EAAO,KAEnB,MAAO,CACLpO,IAAI,OAAD,OAASA,EAAIsO,EAAb,aAAmBtO,EAAIuO,EAAvB,aAA6BvO,EAAI9W,EAAjC,KACHoJ,OAAQliB,EAAMkiB,WAGlByb,EAAiBI,IAefK,WAAW,EATb,SAWE,eAAC,GAAD,SAUAC,GAAkD,SAAC,GAGlD,IAFL1E,EAEI,EAFJA,SACA1tB,EACI,EADJA,MAEA,OACE,eAAC,KAAD,CACEA,MAAOA,EACP7I,MAAM,QAEN8P,SAAU,SAACorB,GACT,MAAuBA,EAAE1O,IAAjBsO,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGrlB,EAAd,EAAcA,EAAGnW,EAAjB,EAAiBA,EACT,OAARg3B,QAAQ,IAARA,KAAQ,cAAUuE,EAAV,aAAgBC,EAAhB,aAAsBrlB,EAAtB,KAA4BnW,OCnB/B47B,GAA4B,WACvC,IAAM3f,EAAS9W,IAAM+b,WAAW2a,IAC1Bx2B,EAAWC,cAKXwC,EAAWvC,YAAY+Y,GAA4BrC,IAEjDzN,EAAiBF,GAAgBhO,IAAjCkO,aAKF6Q,EAAS9Z,YAAY6Z,GAAsBnD,IAK3C6f,EAAgBv2B,Y5CwDW,SAAC0W,GAAD,OAAoB,SAACne,GACtD,IACuB,IAEW,IAH5B2G,EAAOsY,GAAqBjf,GAAOme,GACzC,GAAIM,GAAY9X,GACd,2BAAOA,EAAKkZ,eAAZ,aAAO,EAAc1f,cAArB,QAA+B,KAC1B,GAAIme,GAAgB3X,GACzB,2BAAOA,EAAK4Y,UAAUM,eAAtB,aAAO,EAAwB1f,cAA/B,QAAyC,KAEzC,MAAM,IAAIsG,MAAM,+B4C/DgBw3B,CAAoB9f,IAChD+f,EAAkBz2B,YAAYgZ,GAAsBtC,IAI1D,OACE,uBAAK9a,MAAO,CAAEuG,OAAQ,OAAQ/G,QAAS,IAAvC,UACE,eAAC6O,GAAD,CACE1H,SAAQ,OAAEA,QAAF,IAAEA,IAAY,GACtB2H,aAzBoB,SAACpT,GACzBgJ,EAASspB,GAAmB,CAAE1wB,OAAQ,KAAM6J,SAAUzL,EAAM4f,YAC5D5W,EAASypB,GAAsB,CAAE7S,aAwB7BzN,aAnBqB,SAACxB,EAAoBjK,GAC9CyL,EAAaxB,EAAUjK,IAmBnB4M,aAAchG,GACdiG,kBAAkB,iBAEpB,eAAC,GAAD,CACE1L,iBAAkB83B,EAClBjF,eAAgB+E,EAChB9E,SAfsB,SAAC/4B,EAAgB6J,GAC3CzC,EAASipB,GAAmB,CAAErS,SAAQhe,SAAQ6J,eAe1CkU,SAAUjI,GACV7S,MAAO,eAET,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC65B,GAAD,CAAqB1b,OAAQA,EAAQ2b,iBA/BjB,SAACI,GACvB/1B,EAASiqB,GAAmB,CAAErT,SAAQoD,OAAQ+b,YAmC5Ca,GAA2B,WAC/B,IAAMhgB,EAAS9W,IAAM+b,WAAW2a,IAC1Bpd,EAAiBlZ,YAAYiZ,GAA8BvC,IAC3D5W,EAAWC,cAMjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAS1E,EAAgBlO,SAPxB,WACpBlL,EACE4pB,GAA2B,CAAEhT,SAAQwC,gBAAiBA,QAMtDvd,MAAM,oBAKNg7B,GAAqB,WACzB,IAAMjgB,EAAS9W,IAAM+b,WAAW2a,IAC1B9c,EAAWxZ,YAAYuZ,GAAwB7C,IAC/C5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAASpE,EAAUxO,SALlB,WACpBlL,EAAS8pB,GAAqB,CAAElT,SAAQ8C,UAAWA,QAKjD7d,MAAM,cAKNi7B,GAAqB,WACzB,IAAMlgB,EAAS9W,IAAM+b,WAAW2a,IAC1B5c,EAAW1Z,YAAYyZ,GAAwB/C,IAC/C5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAASlE,EAAU1O,SALlB,WACpBlL,EAAS+pB,GAAqB,CAAEnT,SAAQgD,UAAWA,QAKjD/d,MAAM,cAKNk7B,GAAsB,WAC1B,IAAMngB,EAAS9W,IAAM+b,WAAW2a,IAC1B1c,EAAY5Z,YAAY2Z,GAAyBjD,IACjD5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAShE,EAAW5O,SALnB,WACpBlL,EAASgqB,GAAsB,CAAEpT,SAAQkD,WAAYA,QAKnDje,MAAM,eAKNm7B,GAAoB,WACxB,IAAMpgB,EAAS9W,IAAM+b,WAAW2a,IAC1Bld,EAAUpZ,YAAYmZ,GAAuBzC,IAC7C5W,EAAWC,cAIjB,OACE,gBAACyyB,GAAA,EAAD,CAAa5wB,QAAQ,WAAWzB,GAAI,CAAEqd,EAAG,EAAGtW,SAAU,KAAtD,UACE,eAACwrB,GAAA,EAAD,qBACA,gBAACC,GAAA,EAAD,CAAQh3B,MAAM,SAAS7D,MAAOshB,EAASpO,SANtB,SAACC,GACpBnL,EAAS6pB,GAAoB,CAAEjT,SAAQ0C,QAASnO,EAAME,OAAOrT,UAK3D,UACE,eAACu6B,GAAA,EAAD,CAAUv6B,MAAO,OAAjB,kBACA,eAACu6B,GAAA,EAAD,CAAUv6B,MAAO,OAAjB,kBACA,eAACu6B,GAAA,EAAD,CAAUv6B,MAAO,QAAjB,0BAMFi/B,GAA0B,WAC9B,IAAMrgB,EAAS9W,IAAM+b,WAAW2a,IAC1BvgB,EAAa/V,YAAYqZ,GAA0B3C,IACnDV,EAAWhW,YAAYsZ,GAAwB5C,IAC/CsgB,IAAejhB,EAAa,GAC5BjW,EAAWC,cAcXwC,EAAWvC,YAAY+Y,GAA4BrC,IAgBzD,OACE,gBAAC3P,GAAA,EAAD,CAAK5G,GAAI,CAAE4B,QAAS,OAAQiF,WAAY,cAAxC,UACE,eAAC6W,GAAA,EAAD,CACEjV,MAAOouB,EACPz/B,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SArCgB,SAACC,GACrB,IAAM2W,EAAkC,KAAvB3W,EAAME,OAAOrT,MAAe,GAAK6f,OAAO1M,EAAME,OAAOrT,OAC9C,kBAAb8pB,GACT9hB,EAASkqB,GAAuB,CAAEtT,SAAQX,WAAY6L,MAmCpD9pB,MAAOie,EACPkhB,WAAYD,EAAa,iBAAch6B,IAT3C,IAYE,eAAC6gB,GAAA,EAAD,CACEtmB,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SAzCc,SAACC,GACnB,IAAM2W,EAAkC,KAAvB3W,EAAME,OAAOrT,MAAe,GAAK6f,OAAO1M,EAAME,OAAOrT,OAC9C,kBAAb8pB,GACT9hB,EAASmqB,GAAqB,CAAEvT,SAAQV,SAAU4L,MAuChD9pB,MAAOke,IAET,eAACjQ,GAAA,EAAD,CACErE,KAAK,QACL+J,UAAU,WACV7J,QAAQ,YACRR,QAxCgB,WAChB2U,EAAa,IACfjW,EAASypB,GAAsB,CAAE7S,SAAQX,aAAYC,cACpC,OAAbzT,GACFzC,EACEgW,GAAa,CACXhf,KAAMyL,EACNwT,WAAU,OAAEA,QAAF,IAAEA,IAAc,EAC1BC,SAAQ,OAAEA,QAAF,IAAEA,IAAY,QA4B5B,sBC1NOkhB,GAA0B,WACrC,IAAMxgB,EAAS9W,IAAM+b,WAAW2a,IAC1B/zB,EAAWvC,YAAY+Y,GAA4BrC,IACnD5W,EAAWC,cAITkJ,EAAiBF,GAAgBhO,IAAjCkO,aAKR,OACE,uBAAKrN,MAAO,CAAEuG,OAAQ,OAAQ/G,QAAS,IAAvC,UACE,eAAC6O,GAAD,CACE1H,SAAQ,OAAEA,QAAF,IAAEA,IAAY,GACtB2H,aAZe,SAACpT,GACpBgJ,EAASspB,GAAmB,CAAE1wB,OAAQ,KAAM6J,SAAUzL,EAAM4f,aAYxDzN,aATqB,SAACxB,EAAoBjK,GAC9CyL,EAAaxB,EAAUjK,IASnB4M,aAAchG,GACdiG,kBAAkB,eAEpB,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,QAKA8sB,GAAsB,WAC1B,IAAMzgB,EAAS9W,IAAM+b,WAAW2a,IAC1BtzB,EAAYhD,YAAYmb,GAAuBzE,IAC/C5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAS5a,EAAWgI,SALnB,WACpBlL,EAASgrB,GAAoB,CAAEpU,SAAQ1T,WAAYA,QAKjDrH,MAAM,eAKNy7B,GAAsB,WAC1B,IAAM1gB,EAAS9W,IAAM+b,WAAW2a,IAC1BxzB,EAAY9C,YAAYob,GAAuB1E,IAE/C5W,EAAWC,cASjB,OACE,+BACE,eAAC8d,GAAA,EAAD,CACEliB,MAAM,SACNC,MAAO,CAAEV,MAAO,IAChB3D,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SAjBoB,SAACC,GACzB,IAAM2W,EACmB,KAAvB3W,EAAME,OAAOrT,MAAe,KAAO6f,OAAO1M,EAAME,OAAOrT,QACxC,OAAb8pB,GAAqBA,GAAY,IACnC9hB,EAASirB,GAAoB,CAAErU,SAAQ5T,UAAW8e,MAchD9pB,MAAOgL,OAMTu0B,GAAqB,WACzB,IAAM3gB,EAAS9W,IAAM+b,WAAW2a,IAC1BvzB,EAAW/C,YAAYqb,GAAsB3E,IAC7C5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAS7a,EAAUiI,SALlB,WACpBlL,EAASkrB,GAAmB,CAAEtU,SAAQ3T,UAAWA,QAK/CpH,MAAM,cCxFC27B,GAA8B,WACzC,IAAM5gB,EAAS9W,IAAM+b,WAAW2a,IAC1Bx2B,EAAWC,cACX+Z,EAAS9Z,YAAYkb,GAAwBxE,IAInD,OACE,uCACE,eAAC,GAAD,IACA,eAAC8e,GAAD,CAAqB1b,OAAQA,EAAQ2b,iBANjB,SAACI,GACvB/1B,EAAS+qB,GAAqB,CAAEnU,SAAQoD,OAAQ+b,YAU9CgB,GAAsB,WAC1B,IAAMngB,EAAS9W,IAAM+b,WAAW2a,IAC1B1c,EAAY5Z,YAAYib,GAA2BvE,IACnD5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAShE,EAAW5O,SALnB,WACpBlL,EAAS8qB,GAAwB,CAAElU,SAAQkD,WAAYA,QAKrDje,MAAM,eChBC47B,GAAiC,WAC5C,OACE,uBAAK37B,MAAO,CAAEuG,OAAQ,OAAQ/G,QAAS,IAAvC,UACE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,QAKAo8B,GAAmB,WACvB,IAAM9gB,EAAS9W,IAAM+b,WAAW2a,IAC1Btc,EAASha,YAAY+Z,GAA2BrD,IAChD5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAS5D,EAAQhP,SALhB,WACpBlL,EAASoqB,GAAwB,CAAExT,SAAQsD,QAASA,QAKlDre,MAAM,YAKN87B,GAAiB,WACrB,IAAM/gB,EAAS9W,IAAM+b,WAAW2a,IAC1Bpc,EAAOla,YAAYia,GAAyBvD,IAE5C5W,EAAWC,cAOjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QACE,eAACG,GAAA,EAAD,CACEtmB,KAAK,SACLqE,MAAO,CAAEV,MAAO,OAChB4iB,gBAAiB,CACfC,QAAQ,GAEV/S,SAfS,SAACC,GAChB,IAAM2W,EAAkC,KAAvB3W,EAAME,OAAOrT,MAAe,GAAK6f,OAAO1M,EAAME,OAAOrT,OAC9C,kBAAb8pB,GACT9hB,EAASqqB,GAAsB,CAAEzT,SAAQwD,KAAM0H,MAa3C8V,aAAcxd,IAGlBve,MAAM,gBAKNi7B,GAAqB,WACzB,IAAMlgB,EAAS9W,IAAM+b,WAAW2a,IAC1B5c,EAAW1Z,YAAYma,GAA6BzD,IAEpD5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAASlE,EAAU1O,SALlB,WACpBlL,EAASsqB,GAA0B,CAAE1T,SAAQgD,UAAWA,QAKtD/d,MAAM,cAKNg7B,GAAqB,WACzB,IAAMjgB,EAAS9W,IAAM+b,WAAW2a,IAC1B9c,EAAWxZ,YAAYoa,GAA6B1D,IAEpD5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAASpE,EAAUxO,SALlB,WACpBlL,EAASuqB,GAA0B,CAAE3T,SAAQ8C,UAAWA,QAKtD7d,MAAM,cAKNg8B,GAA2B,WAC/B,IAAMjhB,EAAS9W,IAAM+b,WAAW2a,IAC1Bpd,EAAiBlZ,YAAYqa,GAAmC3D,IAEhE5W,EAAWC,cASjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAS1E,EAAgBlO,SAVxB,WACpBlL,EACEwqB,GAAgC,CAC9B5T,SACAwC,gBAAiBA,QAOnBvd,MAAM,oBAKNi8B,GAAqB,WACzB,IAAMlhB,EAAS9W,IAAM+b,WAAW2a,IAC1B/b,EAAWva,YAAYsa,GAA6B5D,IAEpD5W,EAAWC,cAIjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAASrD,EAAUvP,SALlB,WACpBlL,EAASyqB,GAA0B,CAAE7T,SAAQ6D,UAAWA,QAKtD5e,MAAM,cAKNk8B,GAAmB,WACvB,IAAMnhB,EAAS9W,IAAM+b,WAAW2a,IAC1B7b,EAASza,YAAYwa,GAA2B9D,IAEhD5W,EAAWC,cAcjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QACE,+CAEE,eAACG,GAAA,EAAD,CACEjiB,MAAO,CAAEV,MAAO,IAChB3D,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SAxBW,SAACC,GACpB,IAAM6sB,EAAiC,KAAvB7sB,EAAME,OAAOrT,MAAe,GAAK6f,OAAO1M,EAAME,OAAOrT,OAC9C,kBAAZggC,GACTh4B,EAAS0qB,GAA4B,CAAE9T,SAAQmR,KAAMiQ,MAsB/CJ,aAAcjd,EAAOoN,OATzB,SAYE,eAAChK,GAAA,EAAD,CACEjiB,MAAO,CAAEV,MAAO,IAChB3D,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SA5BY,SAACC,GACrB,IAAM8sB,EAAkC,KAAvB9sB,EAAME,OAAOrT,MAAe,GAAK6f,OAAO1M,EAAME,OAAOrT,OAC9C,kBAAbigC,GACTj4B,EAAS2qB,GAA6B,CAAE/T,SAAQ7J,MAAOkrB,MA0BjDL,aAAcjd,EAAO5N,WAI3BlR,MAAM,MC1LCq8B,GAA0B,WAarC,OACE,gCCVSC,GAA8B,WACzC,OACE,uBAAKr8B,MAAO,CAAEuG,OAAQ,OAAQ/G,QAAS,IAAvC,UACE,eAAC,GAAD,IACA,eAAC,GAAD,QAKA88B,GAAmB,WACvB,IAAMxhB,EAAS9W,IAAM+b,WAAW2a,IAC1B/a,EAASvb,YAAYsb,GAAwB5E,IAE7C5W,EAAWC,cASjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QACE,uCACE,eAACG,GAAA,EAAD,CACEjiB,MAAO,CAAEV,MAAO,IAChB3D,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SAlBa,SAACC,GACtB,IAAM2W,EACmB,KAAvB3W,EAAME,OAAOrT,MAAe,KAAO6f,OAAO1M,EAAME,OAAOrT,OACxC,OAAb8pB,GAAqBA,GAAY,GACnC9hB,EAASmrB,GAAqB,CAAEvU,SAAQ6E,OAAQqG,MAe1C8V,aAAcnc,IARlB,YAaF5f,MAAM,MAKNw8B,GAAmB,WACvB,IAAMzhB,EAAS9W,IAAM+b,WAAW2a,IAC1B7a,EAASzb,YAAYwb,GAAwB9E,IAE7C5W,EAAWC,cASjB,OACE,eAAC0d,GAAA,EAAD,CACEC,QACE,uCACE,eAACG,GAAA,EAAD,CACEjiB,MAAO,CAAEV,MAAO,IAChB3D,KAAK,SACLumB,gBAAiB,CACfC,QAAQ,GAEV/S,SAlBa,SAACC,GACtB,IAAM2W,EACmB,KAAvB3W,EAAME,OAAOrT,MAAe,KAAO6f,OAAO1M,EAAME,OAAOrT,OACxC,OAAb8pB,GAAqBA,GAAY,GACnC9hB,EAASorB,GAAqB,CAAExU,SAAQ+E,OAAQmG,MAe1C8V,aAAcjc,IARlB,YAaF9f,MAAM,MCnFCy8B,GAA0B,WACrC,OAAO,sBAAKx8B,MAAO,CAAEuG,OAAQ,OAAQ/G,QAAS,OCwCnCi9B,GAAsB,WACjC,IAAM9gB,EAAiBvX,YAAYqX,IACnC,OACE,uCACqB,MAAlBE,EACC,eAAC+e,GAAsBvQ,SAAvB,CAAgCjuB,MAAOyf,EAAvC,SACE,gBAACxQ,GAAA,EAAD,CAAKyW,EAAG,EAAR,UACE,eAAC,GAAD,IACA,eAAC,GAAD,SAIJ,wBAEF,4BAKO8Y,GAAwB12B,IAAM4W,cAAsBG,KAE3D2hB,GAA2B,WAC/B,IAAM5hB,EAAS9W,IAAM+b,WAAW2a,IAC1Bx2B,EAAWC,cACXw4B,EAAcv4B,YnD1CpB,SAAC0W,GAAD,OAAoB,SAACne,GAAD,OAClBqf,GAAwBlB,EAAxBkB,CAAgCrf,KAChCqe,ImDwC8B4hB,CAAmC9hB,IAInE,OACE,eAAC8b,GAAA,EAAD,CAAa52B,MAAO,CAAEsL,SAAU,IAAK3B,aAAc,IAAnD,SACE,eAACkY,GAAA,EAAD,CACEC,QAAS,eAACC,GAAA,EAAD,CAAQC,QAAS2a,EAAavtB,SANvB,WACpBlL,EAASwpB,GAAwB5S,OAM7B/a,MAAM,kBAMR88B,GAAmB,WACvB,IAAM/hB,EAAS9W,IAAM+b,WAAW2a,IAEhC,OADiBt2B,YAAY4X,GAAwBlB,KAEnD,KAAKE,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAAC,GAAD,MAIP8hB,GAAgC,WACpC,OACE,iCACE,gBAAC5W,GAAA,EAAD,WACE,eAACsB,GAAA,EAAD,CACEC,WAAY,eAAC,IAAD,IACZ,gBAAc,kBACd3nB,GAAG,iBAHL,SAKE,eAACiG,EAAA,EAAD,4BAEF,eAAC2hB,GAAA,EAAD,UACE,eAAC,GAAD,SAIJ,gBAACxB,GAAA,EAAD,WACE,eAACsB,GAAA,EAAD,CACEC,WAAY,eAAC,IAAD,IACZ,gBAAc,kBACd3nB,GAAG,iBAHL,SAKE,eAACiG,EAAA,EAAD,iCAEF,eAAC2hB,GAAA,EAAD,UACE,eAAC,GAAD,SAIJ,gBAACxB,GAAA,EAAD,WACE,eAACsB,GAAA,EAAD,CACEC,WAAY,eAAC,IAAD,IACZ,gBAAc,kBACd3nB,GAAG,iBAHL,SAKE,eAACiG,EAAA,EAAD,8BAEF,eAAC2hB,GAAA,EAAD,UACE,eAAC,GAAD,aAOJqV,GAAkC,WACtC,IAAMjiB,EAAS9W,IAAM+b,WAAW2a,IAC1B7f,EAAWzW,YAAY6Y,GAAwBnC,IAC/C8a,EAAiBxxB,YAAY8Y,GAA0BpC,IACvD/X,EAAmBqB,YAAY+Y,GAA4BrC,IAEjE,EAAgC7R,mBAG7B,CACD4R,SAAU,QACVlU,SAAU,OALZ,mBAAOq2B,EAAP,KAAiBC,EAAjB,KAQA54B,qBAAU,WACR44B,EAAY,CAAEpiB,WAAUlU,SAAU5D,MACjC,CAACA,EAAkB8X,IAEtB,IAAM3W,EAAWC,cAOjB,OACE,uCACE,eAAC,GAAD,CACEyxB,eAAgBA,EAChB7yB,iBAAkBA,EAClB8yB,SAXW,SAAC/4B,EAAgB6J,EAAkBkU,GAClD3W,EAASspB,GAAmB,CAAE1S,SAAQhe,SAAQ6J,WAAUkU,cACxD3W,EAASypB,GAAsB,CAAE7S,YACjC5W,EAAS2rB,GAAkBmN,OAUzB,sBAAKh9B,MAAO,CAAEqnB,UAAW,GAAzB,SACE,eAAC,GAAD,CAAexM,SAAUA,UAM3BqiB,GAED,SAAC,GAEJ,OAFqB,EAAfriB,UAGJ,KAAKjI,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAAC,GAAD,IACT,KAAKA,GACH,OAAO,eAAC,GAAD,IACT,QACE,OAAO,OC3KPmY,GAAU3kB,YAAO,MAAPA,CAAc,CAC5BD,QAAS,SAGLikB,GAAehkB,YAAOikB,IAAPjkB,CAAA,aACnB9G,MAAO2rB,GACPX,WAAY,GAFO,aAGZC,IAAcC,OAAU,CAC7BlrB,MAAO2rB,MAILkS,GAAuB/2B,YAAO,MAAPA,CAAc,CACzCF,SAAU,SAGNukB,GAAerkB,YAAO,OAAPA,CAAe,CAClCD,QAAS,OACT+kB,cAAe,SACf1mB,SAAU,EACVjF,OAAQ,UAGK69B,GAxCa,WAC1B,OACE,gBAAC,GAAD,WACE,gBAAC,GAAD,CAAcp3B,QAAQ,YAAtB,UACE,eAAC,IAAD,IACA,eAACm3B,GAAD,UACE,eAAC,GAAD,SAGJ,gBAAC,GAAD,WACE,eAAC,IAAD,IACA,eAAC,GAAD,W,sNChBFE,GAAoB,SAAC1gC,GAAD,OAAsBA,EAAM2gC,aAEzCC,GAAwC,SAAC5gC,GAAD,MACf,kBAApC0gC,GAAkB1gC,GAAOqW,QAKdwqB,GAAoC,SAAC7gC,GAAD,MACX,cAApC0gC,GAAkB1gC,GAAOqW,QAEdyqB,GAAgC,SAAC9gC,GAAD,MACP,UAApC0gC,GAAkB1gC,GAAOqW,QAEd0qB,GAAgC,SAAC/gC,GAC5C,IAAM2gC,EAAcD,GAAkB1gC,GACtC,GAA2B,UAAvB2gC,EAAYtqB,OACd,OAAOsqB,EAAYrnB,QAEnB,MAAM,IAAI7S,MAAM,oCAIdu6B,GAAuB,SAAChhC,GAC5B,IAAM2gC,EAAcD,GAAkB1gC,GACtC,GAA2B,cAAvB2gC,EAAYtqB,OACd,OAAOsqB,EAAYM,eAEnB,MAAM,IAAIx6B,MAAM,wCAIPy6B,GAA0B,SAAClhC,GAAD,OACrCtB,OAAOuH,KAAK+6B,GAAqBhhC,KAEtBmhC,GAAmB,SAACtpB,GAAD,OAAiB,SAAC7X,GAAD,OAC/CghC,GAAqBhhC,GAAO6X,KAKjBupB,GAAuB,SAACvpB,GAAD,OAAiB,SAAC7X,GAAD,OACnDmhC,GAAiBtpB,EAAjBspB,CAAsBnhC,GAAOV,OAoBlB+hC,GACX,SAACxpB,EAAa1X,GAAd,OAAiC,SAACH,GAAD,OAC/BghC,GAAqBhhC,GAAO6X,GAAKypB,UAAUnhC,K,+DC5DlCohC,GAAuBl6B,IAAMC,MACxC,YACE,OADc,EAAb+O,QAEC,IAAK,QACH,OAAO,eAAC,KAAD,CAAkB7K,MAAM,UACjC,IAAK,UACH,OAAO,eAAC,KAAD,CAAUA,MAAM,YACzB,IAAK,UACH,OAAO,eAAC,KAAD,CAAoBA,MAAM,gBCK5Bg2B,GAER,SAAC,GAAc,IAAZv1B,EAAW,EAAXA,KACN,OACE,eAACw1B,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,CAAW95B,GAAI,CAAE+5B,cAAe,EAAGC,WAAY,GAAKC,QAAS,EAA7D,SACE,eAACC,GAAA,EAAD,CAAUC,GAAI91B,EAAM+1B,QAAQ,OAAOC,eAAa,EAAhD,SACE,gBAACzzB,GAAA,EAAD,CAAK5E,OAAQ,EAAb,UACE,eAACR,EAAA,EAAD,CAAYC,QAAQ,KAAK64B,cAAY,EAACC,UAAU,MAAhD,qBAGA,gBAACC,GAAA,EAAD,CAAOj5B,KAAK,QAAQ,aAAW,YAA/B,UACE,eAAC,GAAD,IACA,eAAC,GAAD,iBASRk5B,GAAiB,WACrB,OACE,eAACC,GAAA,EAAD,UACE,gBAACb,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,uBACA,eAACA,GAAA,EAAD,4BAMFa,GAAiB,WACrB,IAAM1qB,EAAMxQ,IAAM+b,WAAWof,IACvBC,EAAah7B,YFOnB,SAACoQ,GAAD,OAAiB,SAAC7X,GAAD,OACftB,OAAOuH,KAAK+6B,GAAqBhhC,GAAO6X,GAAKypB,YEP7CoB,CAAmC7qB,GACnCO,IAEF,OACE,eAACuqB,GAAA,EAAD,UACGF,EAAWt6B,KAAI,SAAChI,GAAD,OACd,eAACyiC,GAAD,CAAoBziC,OAAQA,UAM9ByiC,GAAqBv7B,IAAMC,MAAyB,YAAiB,IAAdnH,EAAa,EAAbA,OACrD0X,EAAMxQ,IAAM+b,WAAWof,IACvBljC,EAAOmI,YFAb,SAACoQ,EAAa1X,GAAd,OAAiC,SAACH,GAAD,OAC/BqhC,GAAyBxpB,EAAK1X,EAA9BkhC,CAAsCrhC,GAAOV,MEDtBujC,CAA6BhrB,EAAK1X,IACrDkW,EAAS5O,YFGf,SAACoQ,EAAa1X,GAAd,OAAiC,SAACH,GAAD,OAC/BqhC,GAAyBxpB,EAAK1X,EAA9BkhC,CAAsCrhC,GAAOqW,QEJpBysB,CAA+BjrB,EAAK1X,IAC/D,OACE,gBAACshC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAWS,UAAU,KAAKY,MAAM,MAAhC,SACGzjC,IAEH,eAACoiC,GAAA,EAAD,UACE,eAACH,GAAD,CAAsBlrB,OAAQA,QALnBlW,MChDZ,SAAe6iC,KAAtB,gC,8CAAO,4BAAA9gC,EAAA,sEACkBE,IAAMC,IAAN,UAAaR,GAAb,iBADlB,cACCS,EADD,yBAEEA,EAASC,MAFX,4C,sBAYA,SAAe0gC,GAAtB,mC,8CAAO,WAAqCprB,GAArC,eAAA3V,EAAA,sEACkBE,IAAM8gC,OAAN,UAAgBrhC,GAAhB,wBAAwCgW,IAD1D,cACCvV,EADD,yBAEEA,EAASC,MAFX,4C,sBCrCA,IAAM4gC,GAAyB,cCQzBH,GAAiBjhC,YAAgB,UACzCohC,GADyC,0DAE5C,WAAOnhC,EAAGC,GAAV,eAAAC,EAAA,+EAE2BkhC,KAF3B,cAEU9gC,EAFV,yBAGWA,GAHX,yDAKWL,EAASE,gBAAT,OALX,yDAF4C,yDAwBjC8gC,GAAwBlhC,YAAgB,UAChDohC,GADgD,iEAEnD,WAAOtrB,EAAK5V,GAAZ,eAAAC,EAAA,+EAE2BmhC,GAAyBxrB,GAFpD,cAEUvV,EAFV,yBAGWA,GAHX,yDAKWL,EAASE,gBAAT,OALX,yDAFmD,yDCOxCmhC,GAA4B,WACvC,IAAMrzB,EAAkBxI,YAAYm5B,IAC9Brd,EAAc9b,YAAYo5B,IAC1B0C,EAAU97B,YAAYq5B,IACtBv5B,EAAWC,cAMjB,OALAH,IAAMK,WAAU,WACVuI,GACF1I,EAASy7B,QAEV,CAACz7B,EAAU0I,IACVsT,EACK,eAAC,GAAD,IACEggB,EACF,eAAC,GAAD,IAEA,MAILC,GAAiC,WACrC,IAAMlqB,EAAU7R,YAAYs5B,IAC5B,OACE,gBAAC0C,GAAA,EAAD,CAAOC,SAAS,QAAhB,UACE,eAACC,GAAA,EAAD,2CACCrqB,MAKMkpB,GAAuBn7B,IAAM4W,cAAsB,IAE1D2lB,GAAuB,WAC3B,IAAMC,EAAUp8B,YAAYy5B,GAAyB9oB,IAC/C7Q,EAAWC,cAIjB,OACE,gBAACgH,GAAA,EAAD,WACE,eAACA,GAAA,EAAD,CACE5G,GAAI,CACF4B,QAAS,OACT4iB,eAAgB,YAHpB,SAME,eAAC5e,GAAA,EAAD,CACE5F,GAAI,CACFoF,aAAc,SAACP,GAAD,OAAWA,EAAMQ,QAAQ,KAEzC5D,QAAQ,WACR4iB,QAAS,eAAC,KAAD,IACTpjB,QAjBc,WACpBtB,EAASy7B,OAUL,sBAWF,eAACc,GAAA,EAAD,CAAgB3B,UAAWpP,KAAOtJ,UAAW,EAAGpgB,QAAQ,WAAxD,SACE,gBAAC+4B,GAAA,EAAD,CAAO,aAAW,oBAAlB,UACE,eAACE,GAAA,EAAD,UACE,eAAC,GAAD,MAEF,eAACK,GAAA,EAAD,UACGkB,EAAQ17B,KAAI,SAAC0P,GAAD,OACX,eAAC2qB,GAAqBhV,SAAtB,CAA+BjuB,MAAOsY,EAAtC,SACE,eAAC,GAAD,GAAUA,IADoCA,iBAWxDwqB,GAAiB,WACrB,OACE,gBAACZ,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,IACA,eAACA,GAAA,EAAD,wBACA,eAACA,GAAA,EAAD,mBACA,eAACA,GAAA,EAAD,sBACA,eAACA,GAAA,EAAD,qBACA,eAACA,GAAA,EAAD,yBAKAqC,GAAgB,WACpB,IAAMlsB,EAAMxQ,IAAM+b,WAAWof,IACvBwB,EAAYv8B,YNvFqB,SAACoQ,GAAD,OAAiB,SAAC7X,GAAD,OACxDmhC,GAAiBtpB,EAAjBspB,CAAsBnhC,GAAOgkC,WMsFCC,CAA0BpsB,IAClDxB,EAAS5O,YNjFf,SAACoQ,GAAD,OACA,SAAC7X,GACC,IAAMshC,EAAYN,GAAqBhhC,GAAO6X,GAAKypB,UAC7C4C,EAAaxlC,OAAOC,OAAO2iC,GAAWn5B,KAAI,SAACg8B,GAAD,OAAOA,EAAE9tB,UACzD,OAAI6tB,EAAW/+B,WAAU,SAACkR,GAAD,MAAuB,UAAXA,MAAuB,EACnD,QACE6tB,EAAW/+B,WAAU,SAACkR,GAAD,MAAuB,YAAXA,MAAyB,EAC5D,UAEA,WMwEgB+tB,CAAuBvsB,IAC5CvY,EAAOmI,YAAY25B,GAAqBvpB,IAC9C,EAAwBxQ,IAAMiF,UAAS,GAAvC,mBAAOL,EAAP,KAAagG,EAAb,KACA,OACE,gBAAC,IAAMoyB,SAAP,WACE,gBAAC5C,GAAA,EAAD,CACE75B,GAAE,aACA,QAAS,CACPgiB,aAAc,UAFhB,aAIO0a,KAAiBC,MAAS,CAC/BC,kBAAmB,IANzB,UAUE,eAAC9C,GAAA,EAAD,UACE,eAACx4B,EAAA,EAAD,CACE,aAAW,aACXC,KAAK,QACLN,QAAS,kBAAMoJ,GAAQ,SAACqJ,GAAD,OAAeA,MAHxC,SAKGrP,EAAO,eAAC,KAAD,IAA0B,eAAC,KAAD,QAGtC,eAACy1B,GAAA,EAAD,CAAWS,UAAU,KAAKY,MAAM,MAAhC,SACGiB,IAEH,eAACtC,GAAA,EAAD,UAAYpiC,IACZ,eAACoiC,GAAA,EAAD,UACE,eAACH,GAAD,CAAsBlrB,OAAQA,MAEhC,eAACqrB,GAAA,EAAD,UACE,eAACx4B,EAAA,EAAD,UACE,eAAC,KAAD,CAAYsC,MAAM,gBAGtB,eAACk2B,GAAA,EAAD,UACE,eAAC,GAAD,SAGJ,eAAC,GAAD,CAAkBz1B,KAAMA,QAKxBw4B,GAAmC,WACvC,IAAMl9B,EAAWC,cACXqQ,EAAMxQ,IAAM+b,WAAWof,IAEvBljC,EAAOmI,YAAY25B,GAAqBvpB,IAC9C,EAAwBxQ,IAAMiF,UAAS,GAAvC,mBAAOL,EAAP,KAAagG,EAAb,KAYA,OACE,uCACE,eAAC/I,EAAA,EAAD,CAAYL,QAZI,WAClBoJ,GAAQ,IAWN,SACE,eAAC,KAAD,CAAmBzG,MAAM,YAE3B,gBAACmB,GAAA,EAAD,CAAQV,KAAMA,EAAd,UACE,gBAACY,GAAA,EAAD,8CAA8CvN,EAA9C,OACA,gBAACiO,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAQ3E,QAfM,WACpBoJ,GAAQ,IAc8B5I,QAAQ,WAAWmC,MAAM,UAAzD,oBAGA,eAACgC,GAAA,EAAD,CAAQ3E,QAfE,WAChBoJ,GAAQ,GACR1K,EAAS07B,GAAsBprB,KAaGxO,QAAQ,WAAW+c,WAAS,EAAxD,0BClLKse,GApBc,WAC3B,OACE,sBAAKrhC,MAAO,CAAEmG,QAAS,QAAvB,SACE,wBACEnG,MAAO,CACLmG,QAAS,OACT+kB,cAAe,SACf1mB,SAAU,EACVjF,OAAQ,QACRC,QAAS,IANb,UASE,eAAC,IAAD,IAEA,eAAC,GAAD,UCeD,SAAe8hC,GAAtB,mC,8CAAO,WAAmBpiC,GAAnB,eAAAL,EAAA,sEAIkBE,IAAMoN,KAAN,UAAc3N,GAAd,QAA8BU,EAAKqiC,SAJrD,cAICtiC,EAJD,yBAKEA,EAASC,MALX,4C,sBAwBA,SAAeyV,GAAtB,mC,8CAAO,WAAyBzV,GAAzB,mBAAAL,EAAA,6DAIG2V,EAA2BtV,EAA3BsV,IAAKgtB,EAAsBtiC,EAAtBsiC,kBAJR,SAKkBziC,IAAMoN,KAAN,UAAc3N,GAAd,uBAAqCgW,GAAO,CACjEgtB,sBANG,cAKCviC,EALD,yBAQEA,EAASC,MARX,4C,sBC7CA,IAAMoiC,GAAM5iC,YAAgB,UAI9B8T,GAJ8B,+CAIH,aAA6B5T,GAA7B,mBAAAC,EAAA,6DAAS2V,EAAT,EAASA,IAAKnB,EAAd,EAAcA,YAAd,kBAEDouB,GAAW,CAAEF,QAASluB,EAAamB,QAFlC,cAEtBktB,EAFsB,yBAGrBA,GAHqB,yDAKrB9iC,EAASE,gBAAT,OALqB,yDAJG,yDAatB6iC,GAAgBjjC,YAAgB,UAMxC8T,GANwC,yDAMH,aAAgB5T,GAAhB,mBAAAC,EAAA,6DAAS2V,EAAT,EAASA,IAC3CgtB,EAAoB9sB,GAAiCF,EAAjCE,CACxB9V,EAASgjC,YAF6B,kBAKXjtB,GAAU,CAAEH,MAAKgtB,sBALN,cAKhCE,EALgC,yBAM/BA,GAN+B,yDAQ/B9iC,EAASE,gBAAT,OAR+B,yDANG,yDCThC+iC,GAAgBrhC,YAAY,CACvCvE,KAAMuW,GACN5S,aAP6B,CAC7B6U,UAAW,GACXd,WAAY,IAMZlT,SAAU,CACRqhC,eADQ,SACOnlC,EAAOgE,GACpB,IAAM4O,EAASlU,OAAOC,OAAOqB,EAAM8X,WAAWvT,MAC5C,SAACiS,GAAD,OACEA,EAASH,SAAWP,IACpBU,EAASqB,MAAQ7T,EAAOC,WAEd,MAAV2O,IACFA,EAAOyD,OAASP,GAChB9V,EAAMgX,WAAWouB,SAIvBh7B,cAAe,SAACC,GACdA,EACGC,QAAQq6B,GAAIz0B,SAAS,SAAClQ,EAAOgE,GAC5BhE,EAAM8X,UAAU9T,EAAO8oB,KAAK7d,WAAa,CACvCoH,OAAQP,OAGXxL,QAAQq6B,GAAIx0B,WAAW,SAACnQ,EAAOgE,GAC9B,IAAM0S,EAAc1S,EAAO8oB,KAAK5U,IAAIxB,YAC9BmB,EAAM7T,EAAOC,QACnBjE,EAAM8X,UAAU9T,EAAO8oB,KAAK7d,WAAa,CACvC4I,MACAxB,OAAQP,GACRkC,UAAWvB,GAAoBC,GAC/BA,eAEF1W,EAAMgX,WAAWlX,KAAK+X,MAEvBvN,QAAQq6B,GAAIxR,UAAU,SAACnzB,EAAOgE,GAC7BhE,EAAM8X,UAAU9T,EAAO8oB,KAAK7d,WAAa,CACvCoH,OAAQP,OAGXxL,QAAQ06B,GAAc70B,WAAW,SAACnQ,EAAOgE,GACxC,IAAM4O,EAASlU,OAAOC,OAAOqB,EAAM8X,WAAWvT,MAC5C,SAACiS,GAAD,OACEA,EAASH,SAAWP,IACpBU,EAASqB,MAAQ7T,EAAO8oB,KAAK5U,IAAIL,OAEvB,MAAVjF,GAAkBA,EAAOyD,SAAWP,KACtClD,EAAOoF,UAAP,2BACKpF,EAAOoF,WxEJf,SAA4B9Y,GACjC,IAAMT,EAAoB,GAkB1B,OAjBAC,OAAOU,QAAQF,GAAKG,SAAQ,YAA8B,IAAD,mBAA3Bc,EAA2B,KAAnBklC,EAAmB,KACjDrL,EAAaqL,EAAcrsB,YACJ,YAAzBqsB,EAAchvB,QAAsC,MAAd2jB,EACxCv7B,EAAO0B,GAAU,CACfkW,OAAQN,GACRuD,QAAS+rB,EAAc/rB,QACvBha,KAAM+lC,EAAc/lC,KACpB0Z,YAAanC,GAAoBmjB,IAGnCv7B,EAAO0B,GAAU,CACfkW,OAAQN,GACRuD,QAAS+rB,EAAc/rB,QACvBha,KAAM+lC,EAAc/lC,SAInBb,EwEdM6mC,CAAmBthC,EAAOC,UAKK,IAHPvF,OAAOC,OAAOiU,EAAOoF,WAAW1R,OAC3D6P,IAEuB5P,SAEvBqM,EAAOyD,OAASP,QAIrBxL,QAAQ06B,GAAc7R,UAAU,SAACnzB,EAAOgE,GACvC,IAAM4O,EAASlU,OAAOC,OAAOqB,EAAM8X,WAAWvT,MAC5C,SAACiS,GAAD,OACED,GAAkBC,IAAaA,EAASqB,MAAQ7T,EAAO8oB,KAAK5U,IAAIL,OAEtD,MAAVjF,IACFA,EAAOyD,OAASP,UAMXqvB,GAAmBD,GAAcx/B,QAAjCy/B,eAEAD,MAAf,QCxEO,SAASK,KACd,IAAMh+B,EAAwBC,cAC9B,EAAsBH,IAAMiF,WAA5B,mBAAOuL,EAAP,KAAY2tB,EAAZ,KACMC,EAAah+B,aAAY,SAACzH,GAAD,OACtB,MAAP6X,GxE+HoC,SAACA,GAAD,OAAiB,SAAC7X,GAExD,OADiB4X,GAAsBC,EAAtBD,CAA2B5X,GAC5BqW,SAAWP,IwEjIX4vB,CAAyB7tB,EAAzB6tB,CAA8B1lC,MAExC2lC,EAAmBl+B,aAAY,SAACzH,GAAD,OAC5B,MAAP6X,GxEkIF,SAACA,GAAD,OAAiB,SAAC7X,GAEhB,OADiB4X,GAAsBC,EAAtBD,CAA2B5X,GAC5BqW,SAAWP,IwEpIb8vB,CAA+B/tB,EAA/B+tB,CAAoC5lC,MAE9C0rB,EAAsBjkB,YAAYpB,IAClCqQ,EAAcjP,YAAYyP,IAC1B0U,EAAoBvkB,IAAMsJ,aAC9B,SAACk1B,GACCt+B,EAASo9B,GAAI,CAAE9sB,IAAKguB,EAAQnvB,iBACzBovB,SACAC,MAAK,SAACtnC,GAAD,OAAY+mC,EAAO/mC,QAE7B,CAAC8I,EAAUmP,IAEPiV,EAAuBtkB,IAAMsJ,aAAY,WAClC,MAAPkH,GACFtQ,EAAS49B,GAAettB,MAEzB,CAACtQ,EAAUsQ,IACdxQ,IAAMK,WAAU,WACd,IAAMs+B,EAAaC,aAAY,WACzBN,IAAqBF,GAAqB,MAAP5tB,GACrCtQ,EAASy9B,GAAc,CAAEntB,IAAKA,OA/Bb,KAkCrB,OAAO,WACLquB,cAAcF,MAEf,CAACz+B,EAAUsQ,EAAK4tB,EAAYE,IAC/B,IAAMtvB,EAAS5O,aAAY,SAACzH,GAAD,OAClB,MAAP6X,ExE2FgC,SAACA,GAAD,OAAiB,SAAC7X,GAEpD,OADiB4X,GAAsBC,EAAtBD,CAA2B5X,GAC5BqW,QwE7FA8vB,CAAqBtuB,EAArBsuB,CAA0BnmC,GAAS,mBAEnD,MAAO,CACL0rB,sBACA7T,MACAxB,SACAuV,oBACAD,wB,oCCREyC,GAAU3kB,YAAO,MAAPA,EAAc,kBAAgB,CAC5C5B,SAAU,EACVu+B,gBAF4B,EAAG35B,MAERU,QAAQ+G,WAAW2Z,UAGtCwY,GAAe58B,YAAO68B,IAAP78B,EAAe,kBAAgB,CAClD88B,OADkC,EAAG95B,MACvB85B,OAAOC,OAAS,MAShC,SAASC,GAASl4B,GAChB,IAAQzP,EAAqCyP,EAArCzP,SAAUS,EAA2BgP,EAA3BhP,MAAO8d,EAAoB9O,EAApB8O,MAAUqpB,EAAnC,YAA6Cn4B,EAA7C,IAEA,OACE,8CACEo4B,KAAK,WACLC,OAAQrnC,IAAU8d,EAClBla,GAAE,0BAAqBka,GACvB,uCAA+BA,IAC3BqpB,GALN,aAOGnnC,IAAU8d,GAAS,eAACjU,EAAA,EAAD,UAAatK,OAKvC,SAAS+nC,GAAUxpB,GACjB,MAAO,CACLla,GAAG,cAAD,OAAgBka,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIzBypB,OA7EU,WACvB,MAA0Bz/B,IAAMiF,SAAS,GAAzC,mBAAO/M,EAAP,KAAcwnC,EAAd,KAKMC,EAAczB,KAEpB,OACE,gBAAC,GAAD,WACE,eAACc,GAAD,CAAc/iC,SAAS,QAAvB,SACE,gBAAC2qB,EAAA,EAAD,CAAS5kB,QAAQ,QAAjB,UACE,eAACD,EAAA,EAAD,CAAYC,QAAQ,KAApB,sBACA,gBAAC49B,EAAA,EAAD,CACEr/B,GAAI,CAAEjF,MAAO,QACbpD,MAAOA,EACPkT,SAdW,SAACC,EAA8B2W,GAClD0d,EAAS1d,IAcD6d,UAAQ,EACRC,UAAU,UALZ,UAOE,eAACC,EAAA,EAAD,aAAKhkC,MAAM,cAAiByjC,GAAU,KACtC,eAACO,EAAA,EAAD,aAAKhkC,MAAM,aAAgByjC,GAAU,KACrC,eAACO,EAAA,EAAD,aAAKhkC,MAAM,cAAiByjC,GAAU,aAI5C,eAACJ,GAAD,CAAUlnC,MAAOA,EAAO8d,MAAO,EAA/B,SACE,eAAC,GAAD,eAAe2pB,MAEjB,eAACP,GAAD,CAAUlnC,MAAOA,EAAO8d,MAAO,EAA/B,SACE,eAAC,GAAD,MAEF,eAACopB,GAAD,CAAUlnC,MAAOA,EAAO8d,MAAO,EAA/B,SACE,eAAC,GAAD,UCzBFgqB,GAA8D,SAAC,GAE9D,IADLC,EACI,EADJA,YAEQC,EAAkBzb,cAAlByb,cACR,OACE,eAACr+B,EAAA,EAAD,CAAYL,QAAS,kBAAM0+B,EAAcD,IAAcn+B,KAAK,QAA5D,SACE,eAAC,IAAD,CAAO9F,MAAO,CAAEmI,MAAO,cAKdg8B,GAxBO,WACpB,OACE,eAAC,IAAD,CACEC,SAAU,EACVzjC,OAAQ,SAACsjC,GAAD,OACN,eAAC,GAAD,CAAqBA,YAAaA,KAHtC,SAME,eAAC,GAAD,OCDSI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,UCgBCO,GAZmBrkC,YAAY,CAC5CvE,KAAMmC,EACNwB,aAPsC,CACtC3B,UAAU,EACVE,KAAM,IAMNsC,SAAU,GACVsG,cAAe,SAACC,GACdA,EAAQC,QAAQxI,GAAYqO,WAAW,SAACnQ,EAAOgE,GAC7ChE,EAAMwB,KAAOX,EAAsBmD,EAAOC,SAC1CjE,EAAMsB,UAAW,QAKvB,QClBa6mC,GAAoBtkC,YAAY,CAC3CvE,KAAMuP,GACN5L,aAJiC,GAKjCa,SAAU,CACRskC,yBADQ,SACiBpoC,EAAOgE,GAC9BhE,EAAMgE,EAAOC,SAAW+L,KAG5B5F,cAAe,SAACC,GACdA,EACGC,QAAQwE,IAAmB,SAAC9O,EAAOgE,GAClC,MAA+BA,EAAOC,QAA9BsL,EAAR,EAAQA,QACRvP,EADA,EAAiBiP,WACAmB,kBAAoBb,KAEtCjF,QAAQ0E,GAAWkB,SAAS,SAAClQ,EAAOgE,GACnC,MAAgCA,EAAO8oB,KAAK5U,IAApCjT,EAAR,EAAQA,SAAUgK,EAAlB,EAAkBA,UACZo5B,EAAeroC,EAAMiP,GAC3BjP,EAAMiP,GAAN,2BACKo5B,GADL,IAEEpjC,WACAgL,iBAAiB,EACjBC,SAAS,EACTC,WAAW,EACXC,kBAAmB,OAGtB9F,QAAQ0E,GAAWmB,WAAW,SAACnQ,EAAOgE,GACrC,IAAQiL,EAAcjL,EAAO8oB,KAAK5U,IAA1BjJ,UACAQ,EAAezL,EAAOC,QAAtBwL,WACF44B,EAAeroC,EAAMiP,GAC3BjP,EAAMiP,GAAN,2BACKo5B,GADL,IAEE9pC,KAAMkR,EACNS,SAAS,EACTC,WAAW,OAGd7F,QAAQ0E,GAAWmkB,UAAU,SAACnzB,EAAOgE,GACpC,IAAQiL,EAAcjL,EAAO8oB,KAAK5U,IAA1BjJ,UACFo5B,EAAeroC,EAAMiP,GAC3BjP,EAAMiP,GAAN,2BACKo5B,GADL,IAEEn4B,SAAS,EACTC,WAAW,EACXE,MAAOrM,EAAOqM,MAAMiJ,gBAQf6uB,IAF6BA,GAAkBziC,QAA/C0iC,yBAEAD,GAAf,SCzDO,SAASG,GAAsBppC,GACpC,OAAOA,EAAIiJ,KAAI,SAACvJ,GAAD,OACbA,EAAK2pC,MACD,CACEhqC,KAAMK,EAAKL,KACXe,KAAMV,EAAKU,KACX0O,OAAO,EACPG,MAAOm6B,GAAsB1pC,EAAKuP,QAEpC,CACE5P,KAAMK,EAAKL,KACXe,KAAMV,EAAKU,KACX0O,OAAO,MCFjB,IAgFew6B,GA/Ee3kC,YAAY,CACxCvE,KAAMsM,GACN3I,aAH8B,GAI9Ba,SAAU,GACVsG,cAAe,SAACC,GACdA,EACGC,QAAQwB,GAAaoE,SAAS,SAAClQ,EAAOgE,GAErChE,EADiBgE,EAAO8oB,KAAK5U,KACX,CAChBvK,WAAW,EACXrM,UAAU,EACVE,KAAM,OAGT8I,QAAQwB,GAAaqE,WAAW,SAACnQ,EAAOgE,GACvC,IAAM6N,EAAe7N,EAAO8oB,KAAK5U,IACjClY,EAAM6R,GAAcrQ,KAAO8mC,GAAsBtkC,EAAOC,SACxDjE,EAAM6R,GAAcvQ,UAAW,EAC/BtB,EAAM6R,GAAclE,WAAY,KAEjCrD,QAAQ0E,GAAWkB,SAAS,SAAClQ,EAAOgE,GACnC,IAAQ6B,EAAa7B,EAAO8oB,KAAK5U,IAAzBrS,SACJA,IAAarD,GACwB,MAAnCxC,EAAM6L,IACR7L,EAAM6L,IAA0BvK,UAAW,EAE3CtB,EAAM6L,IAA4B,CAChC8B,WAAW,EACXrM,UAAU,EACVE,KAAM,IAGDqE,IAAarD,GACe,MAAjCxC,EAAM6L,IACR7L,EAAM6L,IAAwBvK,UAAW,EAEzCtB,EAAM6L,IAA0B,CAC9B8B,WAAW,EACXrM,UAAU,EACVE,KAAM,IAGDqE,IAAarD,GACgB,MAAlCxC,EAAM6L,IACR7L,EAAM6L,IAAyBvK,UAAW,EAE1CtB,EAAM6L,IAA2B,CAC/B8B,WAAW,EACXrM,UAAU,EACVE,KAAM,IAI2B,MAAjCxB,EAAM6L,IACR7L,EAAM6L,IAAwBvK,UAAW,EAEzCtB,EAAM6L,IAA0B,CAC9B8B,WAAW,EACXrM,UAAU,EACVE,KAAM,OAKb8I,QAAQ0E,GAAWmB,WAAW,SAACnQ,EAAOgE,GACrC,IAAQ6B,EAAa7B,EAAO8oB,KAAK5U,IAAzBrS,SACJA,IAAarD,GACfxC,EAAM6L,IAA0BvK,UAAW,EAClCuE,IAAarD,GACtBxC,EAAM6L,IAAwBvK,UAAW,EAChCuE,IAAarD,GACtBxC,EAAM6L,IAAyBvK,UAAW,EAE1CtB,EAAM6L,IAAwBvK,UAAW,QAMnD,QC1FO,SAASgnC,GAAsBppC,GACpC,OAAOA,EAAIiJ,KAAI,SAACvJ,GAAD,OACbA,EAAKoP,MACD,CACE1O,KAAMV,EAAKU,KACX0O,OAAO,EACPG,MAAOm6B,GAAsB1pC,EAAKuP,OAClC5P,KAAMK,EAAKL,MAEb,CACEe,KAAMV,EAAKU,KACX0O,OAAO,EACPsY,MAAO1nB,EAAK0nB,MACZ/nB,KAAMK,EAAKL,KACXgoB,OAAQ3nB,EAAK2nB,WCVvB,IA0BekiB,GArBU5kC,YAAY,CACnCvE,KAAMumB,GACN5iB,aAP6B,CAC7B3B,UAAU,EACVqM,WAAW,EACXnM,KAAM,IAKNsC,SAAU,GACVsG,cAAe,SAACC,GACdA,EACGC,QAAQwb,GAAY5V,SAAS,SAAClQ,EAAOgE,IAC5B,CACN2J,WAAW,EACXrM,UAAU,EACVE,KAAM,QAGT8I,QAAQwb,GAAY3V,WAAW,SAACnQ,EAAOgE,GACtChE,EAAMwB,KAAO8mC,GAAsBtkC,EAAOC,SAC1CjE,EAAMsB,UAAW,EACjBtB,EAAM2N,WAAY,QAK1B,QCxBO,SAAS+6B,GACdxpC,GAEA,IAAM+hC,EAAqC,GAI3C,OAHAviC,OAAOU,QAAQF,GAAKG,SAAQ,YAAmB,IAAD,mBAAhBwY,EAAgB,KAAXtY,EAAW,KAC5C0hC,EAAeppB,GAKZ,SAAiC3Y,GACtC,IAAMoiC,EAAsD,GAS5D,OARA5iC,OAAOU,QAAQF,EAAIypC,UAAUtpC,SAAQ,YAAoB,IAAD,mBAAjBC,EAAiB,KAAXC,EAAW,KACtD+hC,EAAU/hC,EAAMqpC,WAAa,CAC3BtpC,OACAa,OAAQZ,EAAMqpC,UACdC,QAAStpC,EAAM+D,SACf+S,OAAQyyB,GAA0BvpC,EAAMwpC,aAGrC,CACLlxB,IAAK3Y,EAAI0pC,UACT5E,UAAW9kC,EAAI8kC,UACf1kC,KAAMJ,EAAII,KACVgiC,aAnBsB0H,CAAwBzpC,MAEzC0hC,EAqBT,SAAS6H,GAA0B5pC,GACjC,OAAQA,GACN,IAAK,UACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,QACH,MAAO,QACT,QACE,MAAM,IAAIuH,MAAM,4CCvCtB,IAsDewiC,GAlDiBplC,YAAY,CAC1CvE,KAAM6jC,GACNlgC,aANgC,CAChCoT,OAAQ,iBAMRvS,SAAU,GACVsG,cAAe,SAACC,GACdA,EACGC,QAAQq6B,GAAIx0B,WAAW,WACtB,MAAO,CACLkG,OAAQ,oBAGX/L,QAAQ04B,GAAe9yB,SAAS,WAC/B,MAAO,CACLmG,OAAQ,cAGX/L,QAAQ04B,GAAe7yB,WAAW,SAACnQ,EAAOgE,GAEzC,MAAO,CACLqS,OAAQ,YACR4qB,eAHqByH,GAA4B1kC,EAAOC,aAM3DqG,QAAQ04B,GAAe7P,UAAU,SAACnzB,EAAOgE,GACxC,MAAO,CACLqS,OAAQ,QACRiD,QAAStV,EAAOqM,MAAMiJ,YAGzBhP,QAAQ24B,GAAsB9yB,WAAW,SAACnQ,EAAOgE,GAC5CA,EAAOC,SAA4B,cAAjBjE,EAAMqW,eACnBrW,EAAMihC,eAAej9B,EAAO8oB,KAAK5U,QAG3C5N,QAAQ06B,GAAc70B,WAAW,SAACnQ,EAAOgE,GACxC,GAAqB,cAAjBhE,EAAMqW,OAAwB,CAChC,IAAMwB,EAAM7T,EAAO8oB,KAAK5U,IAAIL,IACtBjF,EAAS5S,EAAMihC,eAAeppB,GACpCnZ,OAAOU,QAAQ4E,EAAOC,SAAS5E,SAAQ,YAAsB,IAAD,mBAAnBc,EAAmB,KAAXZ,EAAW,KACrC,YAAjBA,EAAM8W,OACRzD,EAAO0uB,UAAUnhC,GAAQkW,OAAS,UACR,UAAjB9W,EAAM8W,SACfzD,EAAO0uB,UAAUnhC,GAAQkW,OAAS,mBAQhD,QCxCa6yB,GAAQC,YAAe,CAClCC,QAAS,CACPhoC,cAAeioC,GACfppC,cAAeqpC,GACfvtB,YAAawtB,GACbh5B,aAAci5B,GACdziC,YAAa0iC,GACb7jC,UAAW8jC,GACXj+B,YAAak+B,GACbh+B,UAAWi+B,GACX10B,IAAK20B,GACLvd,YAAawd,GACb/qB,eAAgBgrB,GAChBv0B,UAAWw0B,GACXxzB,SAAUyzB,GACVrkB,KAAMskB,GACNvJ,YAAawJ,MAIjBC,aAAelB,GAAM3hC,U,yBCtCRkF,GAAQ49B,aAAY,CAC/BC,WAAY,CACVC,aAAc,CACZC,aAAc,CACZnhC,QAAS,aAGbohC,UAAW,CACTD,aAAc,CACZnhC,QAAS,gBCAjBqhC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAU1B,MAAOA,GAAjB,SACE,eAAC2B,GAAA,EAAD,CAAep+B,MAAOA,GAAtB,SACE,eAAC,GAAD,UAINq+B,SAASC,eAAe,SAM1BrD,M","file":"static/js/main.d37b7833.chunk.js","sourcesContent":["import {\n  ParamDTO,\n  ParamChild,\n  ParamParent,\n  ParamType,\n  ParamMap,\n} from './ParamType'\n\nexport function getChildParam(\n  path: string,\n  ParamMap: ParamMap,\n): ParamChild | null {\n  let result: ParamChild | null = null\n  for (const node of Object.values(ParamMap)) {\n    if (isParamChild(node)) {\n      if (node.path === path) {\n        result = node\n      }\n    } else {\n      result = getChildParam(path, node.children)\n    }\n    if (result != null) {\n      break\n    }\n  }\n  return result\n}\n\nexport function isParamChild(param: ParamType): param is ParamChild {\n  return param.type === 'child'\n}\n\nexport function isParamParent(param: ParamType): param is ParamParent {\n  return param.type === 'parent'\n}\n\nfunction isDictObject(value: unknown): value is { [key: string]: unknown } {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\nconst PATH_SEPARATOR = '/'\n\nexport function convertToParamMap(dto: ParamDTO, keyList?: string[]): ParamMap {\n  const ParamMap: ParamMap = {}\n  Object.entries(dto).forEach(([name, value]) => {\n    const kList = keyList ?? []\n    if (isDictObject(value)) {\n      kList.push(name)\n      ParamMap[name] = {\n        type: 'parent',\n        children: convertToParamMap(value, kList),\n      }\n    } else {\n      ParamMap[name] = {\n        type: 'child',\n        value,\n        path: kList.concat([name]).join(PATH_SEPARATOR),\n      }\n    }\n  })\n  return ParamMap\n}\n","import { RootState } from 'store/store'\n\nimport { getChildParam } from 'store/utils/param/ParamUtils'\n\nexport const selectAlgorithmNode = (state: RootState) => state.algorithmNode\n\nexport const selectAlgorithmNodeDefined =\n  (nodeId: string) => (state: RootState) =>\n    Object.keys(state.algorithmNode).includes(nodeId)\n\nexport const selectAlgorithmFunctionPath =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].functionPath\n\nexport const selectAlgorithmName = (nodeId: string) => (state: RootState) =>\n  selectAlgorithmNode(state)[nodeId].name\n\nexport const selectAlgorithmParams = (nodeId: string) => (state: RootState) =>\n  selectAlgorithmNode(state)[nodeId].params\n\nexport const selectAlgorithmParamsExit =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].params !== null\n\nexport const selectAlgorithmParamsKeyList =\n  (nodeId: string) => (state: RootState) =>\n    Object.keys(selectAlgorithmNode(state)[nodeId]?.params ?? {})\n\nexport const selectAlgorithmParamsValue =\n  (nodeId: string, path: string) => (state: RootState) => {\n    const params = selectAlgorithmParams(nodeId)(state)\n    if (params != null) {\n      const target = getChildParam(path, params)\n      return target?.value\n    } else {\n      throw new Error('AlgorithmParam is null')\n    }\n  }\n\nexport const selectAlgorithmParam =\n  (nodeId: string, paramKey: string) => (state: RootState) => {\n    const params = selectAlgorithmParams(nodeId)(state)\n    if (params != null) {\n      return params[paramKey]\n    } else {\n      throw new Error('AlgorithmParam is null')\n    }\n  }\n\nexport const selectAlgorithmSelectedOutputKey =\n  (nodeId: string) => (state: RootState) =>\n    selectAlgorithmNode(state)[nodeId].selectedOutputKey\n","import {\n  AlgorithmNodeType,\n  AlgoListDTO,\n  AlgorithmInfo,\n  AlgorithmChild,\n  AlgorithmParent,\n  AlgorithmListTree,\n} from './AlgorithmListType'\n\nexport function isAlgoChild(\n  algoNode: AlgorithmNodeType,\n): algoNode is AlgorithmChild {\n  return algoNode.type === 'child'\n}\n\nexport function isAlgoParent(\n  algoNode: AlgorithmNodeType,\n): algoNode is AlgorithmParent {\n  return algoNode.type === 'parent'\n}\n\nexport function getAlgoChild(\n  algoList: AlgorithmListTree,\n  algoName: string,\n): AlgorithmChild | null {\n  let result: AlgorithmChild | null = null\n  for (const [name, node] of Object.entries(algoList)) {\n    if (isAlgoChild(node)) {\n      if (name === algoName) {\n        result = node\n      }\n    } else {\n      result = getAlgoChild(node.children, algoName)\n    }\n    if (result != null) {\n      break\n    }\n  }\n  return result\n}\n\nexport function convertToAlgoListType(dto: AlgoListDTO) {\n  const algoList: AlgorithmListTree = {}\n  Object.entries(dto).forEach(([name, value]) => {\n    if (Object.prototype.hasOwnProperty.call(value, 'children')) {\n      algoList[name] = {\n        type: 'parent',\n        children: convertToAlgoListType(\n          (\n            value as {\n              children: AlgoListDTO\n            }\n          ).children as AlgoListDTO,\n        ),\n      }\n    } else {\n      const dto = value as {\n        args: AlgorithmInfo[]\n        returns: AlgorithmInfo[]\n        path: string\n      }\n      algoList[name] = {\n        type: 'child',\n        functionPath: dto.path,\n        args: dto.args,\n        returns: dto.returns,\n      }\n    }\n  })\n  return algoList\n}\n","import { RootState } from 'store/store'\nimport { selectAlgorithmName } from '../AlgorithmNode/AlgorithmNodeSelectors'\nimport { getAlgoChild } from './AlgorithmListUtils'\n\nexport const selectAlgorithmList = (state: RootState) => state.algorithmList\n\nexport const selectAlgorithmListIsLated = (state: RootState) =>\n  selectAlgorithmList(state).isLatest\n\nexport const selectAlgorithmListTree = (state: RootState) =>\n  selectAlgorithmList(state).tree\n\nexport const selectAlgoArgs = (nodeId: string) => (state: RootState) => {\n  const algoName = selectAlgorithmName(nodeId)(state)\n  if (algoName != null) {\n    const algoListChild = getAlgoChild(selectAlgorithmListTree(state), algoName)\n    return algoListChild?.args\n  } else {\n    return undefined\n  }\n}\n\nexport const selectAlgoReturns = (nodeId: string) => (state: RootState) => {\n  const algoName = selectAlgorithmName(nodeId)(state)\n  if (algoName != null) {\n    const algoListChild = getAlgoChild(selectAlgorithmListTree(state), algoName)\n    return algoListChild?.returns\n  } else {\n    return undefined\n  }\n}\n","export const ALGORITHM_LIST_SLICE_NAME = 'algorithmList'\n\nexport type AlgorithmListType = {\n  isLatest: boolean\n  tree: AlgorithmListTree\n}\n\nexport type AlgorithmListTree = {\n  [algoName: string]: AlgorithmNodeType\n}\n\nexport type AlgorithmNodeType = AlgorithmChild | AlgorithmParent\nexport type AlgorithmChild = {\n  type: 'child'\n  args: AlgorithmInfo[]\n  returns: AlgorithmInfo[]\n  functionPath: string\n}\nexport type AlgorithmParent = {\n  type: 'parent'\n  children: {\n    [name: string]: AlgorithmNodeType\n  }\n}\nexport type AlgorithmInfo = {\n  name: string\n  type: string\n  isNone?: boolean\n}\n\nexport type AlgoListDTO = {\n  [name: string]:\n    | {\n        args: AlgorithmInfo[]\n        returns: AlgorithmInfo[]\n        path: string\n      }\n    | { children: AlgoListDTO }\n}\n","const HOST = process.env.REACT_APP_SERVER_HOST\nconst PORT = process.env.REACT_APP_SERVER_PORT\n\nexport const BASE_URL = `http://${HOST}:${PORT}`\nexport const WS_BASE_URL = `ws://${HOST}:${PORT}`\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { AlgoListDTO, ALGORITHM_LIST_SLICE_NAME } from './AlgorithmListType'\nimport { BASE_URL } from 'const/API'\n\nexport const getAlgoList = createAsyncThunk<AlgoListDTO, void>(\n  `${ALGORITHM_LIST_SLICE_NAME}/getAlgoList`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/algolist`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","export const INPUT_NODE_SLICE_NAME = 'inputNode'\n\nexport const FILE_TYPE_SET = {\n  CSV: 'csv',\n  IMAGE: 'image',\n  HDF5: 'hdf5',\n  // NWB:\"nwb\"\n  // JSON:\"json\"\n} as const\n\nexport type FILE_TYPE = typeof FILE_TYPE_SET[keyof typeof FILE_TYPE_SET]\n\nexport type InputNode = {\n  [nodeId: string]: InputNodeType\n}\n\nexport type InputNodeType = CsvInputNode | ImageInputNode | HDF5InputNode\n\ninterface InputNodeBaseType<\n  T extends FILE_TYPE,\n  P extends { [key: string]: unknown },\n> {\n  fileType: T\n  selectedFilePath?: string // 複数ファイル指定の予定あり\n  selectedFileName?: string\n  param: P\n}\n\nexport type CsvInputParamType = {\n  setColumn: number | null\n  setIndex: boolean\n  transpose: boolean\n}\n\nexport interface CsvInputNode\n  extends InputNodeBaseType<'csv', CsvInputParamType> {}\n\nexport interface ImageInputNode extends InputNodeBaseType<'image', {}> {}\n\nexport interface HDF5InputNode extends InputNodeBaseType<'hdf5', {}> {\n  hdf5Path?: string\n}\n","import { Elements, FlowTransform } from 'react-flow-renderer'\n\nexport const FLOW_ELEMENT_SLICE_NAME = 'flowElement'\n\nexport const NODE_TYPE_SET = {\n  INPUT: 'input',\n  ALGORITHM: 'algorithm',\n} as const\n\nexport type NODE_TYPE = typeof NODE_TYPE_SET[keyof typeof NODE_TYPE_SET]\n\nexport type NodeData = AlgorithmNodeData | InputNodeData\n\ninterface NodeDataBaseType<T extends NODE_TYPE> {\n  label: string\n  type: T\n}\n\nexport interface InputNodeData\n  extends NodeDataBaseType<typeof NODE_TYPE_SET.INPUT> {}\n\nexport interface AlgorithmNodeData\n  extends NodeDataBaseType<typeof NODE_TYPE_SET.ALGORITHM> {}\n\nexport interface ElementCoord {\n  x: number\n  y: number\n}\n\nexport interface FlowElement {\n  flowElements: Elements<NodeData>\n  flowPosition: FlowTransform\n  elementCoord: ElementCoord\n}\n","export const INITIAL_IMAGE_ELEMENT_ID = '0'\nexport const INITIAL_IMAGE_ELEMENT_NAME = 'NoName'\nexport const INITIAL_ALGO_ELEMENT_ID = '1'\nexport const INITIAL_ALGO_ELEMENT_NAME = 'dummy_image2image'\nexport const INITIAL_EDGE_ID = '2'\n\nexport const INITIAL_ALGO_STYLE: React.CSSProperties = {\n  width: 180,\n  height: 100,\n  padding: 0,\n  borderRadius: 0,\n} as const\n\nexport const INITIAL_DATA_STYLE: React.CSSProperties = {\n  border: '1px solid #777',\n  height: 120,\n} as const\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  Elements,\n  removeElements,\n  Node,\n  Position,\n  isNode,\n  FlowTransform,\n} from 'react-flow-renderer'\nimport {\n  FLOW_ELEMENT_SLICE_NAME,\n  FlowElement,\n  NODE_TYPE_SET,\n  NodeData,\n  ElementCoord,\n} from './FlowElementType'\nimport {\n  INITIAL_ALGO_STYLE,\n  INITIAL_DATA_STYLE,\n  INITIAL_IMAGE_ELEMENT_ID,\n  INITIAL_IMAGE_ELEMENT_NAME,\n} from 'const/flowchart'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\n\nconst initialElements: Elements<NodeData> = [\n  {\n    id: INITIAL_IMAGE_ELEMENT_ID,\n    type: 'ImageFileNode',\n    data: {\n      type: NODE_TYPE_SET.INPUT,\n      label: INITIAL_IMAGE_ELEMENT_NAME,\n    },\n    style: INITIAL_DATA_STYLE,\n    position: { x: 50, y: 60 },\n  },\n]\n\nconst initialFlowPosition: FlowTransform = {\n  x: 0,\n  y: 0,\n  zoom: 0.8,\n}\n\nconst initialElementCoord: ElementCoord = {\n  x: 350,\n  y: 60,\n}\n\nconst initialState: FlowElement = {\n  flowElements: initialElements,\n  flowPosition: initialFlowPosition,\n  elementCoord: initialElementCoord,\n}\n\nexport const flowElementSlice = createSlice({\n  name: FLOW_ELEMENT_SLICE_NAME,\n  initialState,\n  reducers: {\n    setFlowPosition: (state, action: PayloadAction<FlowTransform>) => {\n      state.flowPosition = action.payload\n    },\n    setFlowElements: (state, action: PayloadAction<Elements>) => {\n      state.flowElements = action.payload\n    },\n    deleteFlowElements: (state, action: PayloadAction<Elements>) => {\n      state.flowElements = removeElements(action.payload, state.flowElements)\n    },\n    deleteFlowElementsById: (state, action: PayloadAction<string>) => {\n      const element = state.flowElements.find(\n        (edge) => edge.id === action.payload,\n      )\n      if (element !== undefined) {\n        state.flowElements = removeElements([element], state.flowElements)\n      }\n    },\n    addFlowElementNode: (\n      state,\n      action: PayloadAction<{\n        node: Node<NodeData>\n        inputNodeInfo?: { fileType: FILE_TYPE }\n        algoNodeInfo?: { functionPath: string; name: string }\n      }>,\n    ) => {\n      let { node } = action.payload\n      if (node.data?.type === NODE_TYPE_SET.INPUT) {\n        node = {\n          ...node,\n          style: {\n            ...node.style,\n            ...INITIAL_DATA_STYLE,\n          },\n          targetPosition: Position.Left,\n          sourcePosition: Position.Right,\n        }\n      } else if (node.data?.type === NODE_TYPE_SET.ALGORITHM) {\n        node = {\n          ...node,\n          style: {\n            ...node.style,\n            ...INITIAL_ALGO_STYLE,\n          },\n          targetPosition: Position.Left,\n          sourcePosition: Position.Right,\n        }\n      }\n      state.flowElements.push(node)\n    },\n    edifFlowElementsLabelById: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        fileName: string\n      }>,\n    ) => {\n      let { nodeId, fileName } = action.payload\n      const elementIdx = state.flowElements.findIndex(\n        (ele) => ele.id === nodeId,\n      )\n      if (state.flowElements[elementIdx].data?.label) {\n        state.flowElements[elementIdx].data!.label = fileName\n      }\n    },\n    editFlowElementPositionById: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        coord: {\n          x: number\n          y: number\n        }\n      }>,\n    ) => {\n      let { nodeId, coord } = action.payload\n      const elementIdx = state.flowElements.findIndex(\n        (ele) => ele.id === nodeId,\n      )\n      const targetItem = state.flowElements[elementIdx]\n      if (isNode(targetItem)) {\n        targetItem.position = coord\n      }\n    },\n    setElementCoord: (state) => {\n      const x = state.elementCoord.x\n      const y = state.elementCoord.y\n      if (x > 800 || y > 200) {\n        state.elementCoord.x = 300\n        state.elementCoord.y = 100\n      } else {\n        state.elementCoord.x += 250\n      }\n    },\n  },\n})\n\nexport const {\n  setFlowPosition,\n  setFlowElements,\n  addFlowElementNode,\n  deleteFlowElements,\n  deleteFlowElementsById,\n  edifFlowElementsLabelById,\n  editFlowElementPositionById,\n  setElementCoord,\n} = flowElementSlice.actions\n\nexport default flowElementSlice.reducer\n","import {\n  CsvInputNode,\n  ImageInputNode,\n  HDF5InputNode,\n  InputNodeType,\n  FILE_TYPE_SET,\n} from './InputNodeType'\n\nexport function isImageInputNode(\n  inputNode: InputNodeType,\n): inputNode is ImageInputNode {\n  return inputNode.fileType === FILE_TYPE_SET.IMAGE\n}\n\nexport function isCsvInputNode(\n  inputNode: InputNodeType,\n): inputNode is CsvInputNode {\n  return inputNode.fileType === FILE_TYPE_SET.CSV\n}\n\nexport function isHDF5InputNode(\n  inputNode: InputNodeType,\n): inputNode is HDF5InputNode {\n  return inputNode.fileType === FILE_TYPE_SET.HDF5\n}\n","import { RootState } from 'store/store'\nimport { isHDF5InputNode, isCsvInputNode } from './InputNodeUtils'\n\nexport const selectInputNode = (state: RootState) => state.inputNode\n\nexport const selectInputNodeById = (nodeId: string) => (state: RootState) =>\n  state.inputNode[nodeId]\n\nexport const selectInputNodeDefined = (nodeId: string) => (state: RootState) =>\n  Object.keys(state.inputNode).includes(nodeId)\nexport const selectInputNodeFileType = (nodeId: string) => (state: RootState) =>\n  selectInputNodeById(nodeId)(state).fileType\n\nexport const selectInputNodeSelectedFilePath =\n  (nodeId: string) => (state: RootState) =>\n    selectInputNodeById(nodeId)(state).selectedFilePath\n\nexport const selectFilePathIsUndefined = (state: RootState) =>\n  Object.values(state.inputNode).filter(\n    (inputNode) => inputNode.selectedFilePath === undefined,\n  ).length > 0\n\nexport const selectInputNodeParam = (nodeId: string) => (state: RootState) =>\n  selectInputNodeById(nodeId)(state).param\n\nconst selectCsvInputNodeParam = (nodeId: string) => (state: RootState) => {\n  const inputNode = selectInputNodeById(nodeId)(state)\n  if (isCsvInputNode(inputNode)) {\n    return inputNode.param\n  } else {\n    throw new Error(`The InputNode is not CsvInputNode. (nodeId: ${nodeId})`)\n  }\n}\n\nexport const selectCsvInputNodeParamSetColumn =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).setColumn\n\nexport const selectCsvInputNodeParamSetIndex =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).setIndex\n\nexport const selectCsvInputNodeParamTranspose =\n  (nodeId: string) => (state: RootState) =>\n    selectCsvInputNodeParam(nodeId)(state).transpose\n\nexport const selectInputNodeHDF5Path =\n  (nodeId: string) => (state: RootState) => {\n    const item = selectInputNodeById(nodeId)(state)\n    if (isHDF5InputNode(item)) {\n      return item.hdf5Path\n    } else {\n      return undefined\n    }\n  }\n","import { FlowElement, isNode, Node } from 'react-flow-renderer'\nimport {\n  AlgorithmNodeData,\n  NodeData,\n  NODE_TYPE_SET,\n  InputNodeData,\n} from './FlowElementType'\n\nexport function isNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<NodeData> {\n  return node != null && isNode(node) && node.data != null\n}\n\nexport function isAlgorithmNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<AlgorithmNodeData> {\n  return isNodeData(node) && node.data?.type === NODE_TYPE_SET.ALGORITHM\n}\n\nexport function isInputNodeData(\n  node: FlowElement<NodeData> | undefined,\n): node is Node<InputNodeData> {\n  return isNodeData(node) && node.data?.type === NODE_TYPE_SET.INPUT\n}\n","import { isEdge } from 'react-flow-renderer'\nimport { RootState } from 'store/store'\nimport {\n  selectAlgorithmFunctionPath,\n  selectAlgorithmParams,\n} from '../AlgorithmNode/AlgorithmNodeSelectors'\nimport {\n  selectInputNodeHDF5Path,\n  selectInputNodeSelectedFilePath,\n} from '../InputNode/InputNodeSelectors'\nimport { NODE_TYPE_SET } from './FlowElementType'\nimport { isNodeData } from './FlowElementUtils'\n\nexport const selectFlowElements = (state: RootState) =>\n  state.flowElement.flowElements\n\nexport const selectFlowPosition = (state: RootState) =>\n  state.flowElement.flowPosition\n\nexport const selectElementCoord = (state: RootState) =>\n  state.flowElement.elementCoord\n\nexport const selectNodeById = (nodeId: string) => (state: RootState) =>\n  selectFlowElements(state)\n    .filter(isNodeData)\n    .find((node) => node.id === nodeId)\n\nexport const selectNodeTypeById = (nodeId: string) => (state: RootState) =>\n  selectNodeById(nodeId)(state)?.data?.type\n\nexport const selectNodeLabelById = (nodeId: string) => (state: RootState) =>\n  selectNodeById(nodeId)(state)?.data?.label\n\nexport const selectEdgeListForRun = (state: RootState) =>\n  selectFlowElements(state).filter(isEdge)\n\nexport const selectElementListForRun = (state: RootState) => {\n  const elements = selectFlowElements(state)\n  const nodeList = elements.filter(isNodeData).map((element) => {\n    if (element.data) {\n      if (element.data.type === NODE_TYPE_SET.ALGORITHM) {\n        const param = selectAlgorithmParams(element.id)(state) ?? {}\n        const functionPath = selectAlgorithmFunctionPath(element.id)(state)\n        return {\n          ...element,\n          data: {\n            ...element.data,\n            param,\n            path: functionPath,\n          },\n        }\n      } else if (element.data.type === NODE_TYPE_SET.INPUT) {\n        const filePath = selectInputNodeSelectedFilePath(element.id)(state)\n        const hdf5Path = selectInputNodeHDF5Path(element.id)(state)\n        return {\n          ...element,\n          data: {\n            ...element.data,\n            path: filePath,\n            hdf5Path: hdf5Path,\n          },\n        }\n      }\n    }\n    return element\n  })\n  const edgeList = elements.filter(isEdge)\n  return { nodeList, edgeList }\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { nanoid } from '@reduxjs/toolkit'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem, { treeItemClasses } from '@mui/lab/TreeItem'\nimport { styled, Typography } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight'\nimport IconButton from '@mui/material/IconButton'\nimport AddIcon from '@mui/icons-material/Add'\n\nimport {\n  selectAlgorithmListIsLated,\n  selectAlgorithmListTree,\n} from 'store/slice/AlgorithmList/AlgorithmListSelectors'\nimport { AlgorithmNodeType } from 'store/slice/AlgorithmList/AlgorithmListType'\nimport { isAlgoChild } from 'store/slice/AlgorithmList/AlgorithmListUtils'\nimport { getAlgoList } from 'store/slice/AlgorithmList/AlgorithmListActions'\nimport { FILE_TYPE, FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  NodeData,\n  NODE_TYPE,\n  NODE_TYPE_SET,\n} from 'store/slice/FlowElement/FlowElementType'\nimport {\n  addFlowElementNode,\n  setElementCoord,\n} from 'store/slice/FlowElement/FlowElementSlice'\nimport { Node } from 'react-flow-renderer'\nimport { selectElementCoord } from 'store/slice/FlowElement/FlowElementSelectors'\n\nexport const AlgorithmTreeView = React.memo(() => {\n  const dispatch = useDispatch()\n  const algoList = useSelector(selectAlgorithmListTree)\n  const isLatest = useSelector(selectAlgorithmListIsLated)\n\n  useEffect(() => {\n    if (!isLatest) {\n      dispatch(getAlgoList())\n    }\n  }, [dispatch, isLatest])\n\n  const elementCoord = useSelector(selectElementCoord)\n\n  const onAlgoNodeClick = (nodeName: string, functionPath: string) => {\n    const name = nodeName\n    const position = {\n      x: elementCoord.x,\n      y: elementCoord.y,\n    }\n    dispatch(setElementCoord())\n\n    const newNode: Node<NodeData> = {\n      id: nanoid(),\n      type: 'AlgorithmNode',\n      position,\n      data: { label: name, type: NODE_TYPE_SET.ALGORITHM },\n    }\n    dispatch(\n      addFlowElementNode({\n        node: newNode,\n        algoNodeInfo: { name, functionPath },\n      }),\n    )\n  }\n\n  return (\n    <TreeView\n      sx={{\n        flexGrow: 1,\n        height: '100%',\n      }}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      <TreeItem nodeId=\"Data\" label=\"Data\">\n        <InputNodeComponent\n          fileName={'image'}\n          nodeName={'imageData'}\n          fileType={FILE_TYPE_SET.IMAGE}\n        />\n        <InputNodeComponent\n          fileName={'csv'}\n          nodeName={'csvData'}\n          fileType={FILE_TYPE_SET.CSV}\n        />\n        <InputNodeComponent\n          fileName={'hdf5'}\n          nodeName={'hdf5Data'}\n          fileType={FILE_TYPE_SET.HDF5}\n        />\n      </TreeItem>\n      <TreeItem nodeId=\"Algorithm\" label=\"Algorithm\">\n        {Object.entries(algoList).map(([name, node], i) => (\n          <AlgoNodeComponent\n            name={name}\n            node={node}\n            onAlgoNodeClick={(name, functionPath) =>\n              onAlgoNodeClick(name, functionPath)\n            }\n            key={i.toFixed()}\n          />\n        ))}\n      </TreeItem>\n    </TreeView>\n  )\n})\n\nconst InputNodeComponent = React.memo<{\n  fileName: string\n  nodeName: string\n  fileType: FILE_TYPE\n}>(({ fileName, nodeName, fileType }) => {\n  const dispatch = useDispatch()\n  const elementCoord = useSelector(selectElementCoord)\n\n  const onDataNodeClick = (\n    nodeType: NODE_TYPE,\n    nodeName: string,\n    fileType: FILE_TYPE,\n  ) => {\n    const position = {\n      x: elementCoord.x,\n      y: elementCoord.y,\n    }\n    dispatch(setElementCoord())\n\n    let componentType = ''\n    switch (fileType) {\n      case FILE_TYPE_SET.CSV:\n        componentType = 'CsvFileNode'\n        break\n      case FILE_TYPE_SET.IMAGE:\n        componentType = 'ImageFileNode'\n        fileType = FILE_TYPE_SET.IMAGE\n        break\n      case FILE_TYPE_SET.HDF5:\n        componentType = 'HDF5FileNode'\n        fileType = FILE_TYPE_SET.HDF5\n        break\n    }\n    const newNode: Node<NodeData> = {\n      id: nanoid(),\n      type: componentType,\n      position,\n      data: { label: nodeName, type: nodeType },\n    }\n    dispatch(addFlowElementNode({ node: newNode, inputNodeInfo: { fileType } }))\n  }\n\n  return (\n    <LeafItem\n      nodeId={fileName}\n      label={\n        <AddButton\n          name={fileName}\n          onClick={() =>\n            onDataNodeClick(NODE_TYPE_SET.INPUT, nodeName, fileType)\n          }\n        />\n      }\n    />\n  )\n})\n\nconst AlgoNodeComponent = React.memo<{\n  name: string\n  node: AlgorithmNodeType\n  onAlgoNodeClick: (nodeName: string, functionPath: string) => void\n}>(({ name, node, onAlgoNodeClick }) => {\n  if (isAlgoChild(node)) {\n    return (\n      <LeafItem\n        nodeId={name}\n        label={\n          <AddButton\n            name={name}\n            onClick={() => onAlgoNodeClick(name, node.functionPath)}\n          />\n        }\n      />\n    )\n  } else {\n    return (\n      <TreeItem nodeId={name} label={name}>\n        {Object.entries(node.children).map(([name, node], i) => (\n          <AlgoNodeComponent\n            name={name}\n            node={node}\n            key={i.toFixed()}\n            onAlgoNodeClick={(name, functionPath) =>\n              onAlgoNodeClick(name, functionPath)\n            }\n          />\n        ))}\n      </TreeItem>\n    )\n  }\n})\n\nconst AddButton = React.memo<{\n  name: string\n  onClick: () => void\n}>(({ name, onClick }) => {\n  return (\n    <>\n      <IconButton aria-label=\"add\" style={{ padding: 2 }} size=\"large\">\n        <AddIcon onClick={() => onClick()} />\n      </IconButton>\n      <Typography\n        variant=\"inherit\"\n        style={{\n          textOverflow: 'ellipsis',\n          overflow: 'visible',\n          width: '8rem',\n          display: 'inline-block',\n        }}\n      >\n        {name}\n      </Typography>\n    </>\n  )\n})\n\n// 未使用icon分の幅を消す\nconst LeafItem = styled(TreeItem)({\n  [`& .${treeItemClasses.iconContainer}`]: {\n    margin: 0,\n    width: 0,\n  },\n})\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { INITIAL_IMAGE_ELEMENT_ID } from 'const/flowchart'\nimport {\n  addFlowElementNode,\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport { isNodeData } from '../FlowElement/FlowElementUtils'\nimport {\n  CsvInputParamType,\n  FILE_TYPE_SET,\n  InputNode,\n  INPUT_NODE_SLICE_NAME,\n} from './InputNodeType'\nimport { isCsvInputNode, isHDF5InputNode } from './InputNodeUtils'\n\nconst initialState: InputNode = {\n  [INITIAL_IMAGE_ELEMENT_ID]: {\n    fileType: FILE_TYPE_SET.IMAGE,\n    param: {},\n  },\n}\n\nexport const inputNodeSlice = createSlice({\n  name: INPUT_NODE_SLICE_NAME,\n  initialState,\n  reducers: {\n    deleteInputNode(state, action: PayloadAction<string>) {\n      delete state[action.payload]\n    },\n    setInputImageNodeFile(\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        filePath: string\n      }>,\n    ) {\n      const { nodeId, filePath } = action.payload\n      state[nodeId].selectedFilePath = filePath\n    },\n    setInputNodeFilePath(\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        filePath: string\n      }>,\n    ) {\n      const { nodeId, filePath } = action.payload\n      state[nodeId].selectedFilePath = filePath\n    },\n    setCsvInputNodeParam(\n      state,\n      action: PayloadAction<{ nodeId: string; param: CsvInputParamType }>,\n    ) {\n      const { nodeId, param } = action.payload\n      const inputNode = state[nodeId]\n      if (isCsvInputNode(inputNode)) {\n        inputNode.param = param\n      }\n    },\n    setInputNodeHDF5Path(\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        path: string\n      }>,\n    ) {\n      const { nodeId, path } = action.payload\n      const item = state[nodeId]\n      if (isHDF5InputNode(item)) {\n        item.hdf5Path = path\n      }\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addCase(addFlowElementNode, (state, action) => {\n        const { node, inputNodeInfo } = action.payload\n        if (node.data?.type === NODE_TYPE_SET.INPUT && inputNodeInfo != null) {\n          const fileType = inputNodeInfo.fileType\n          switch (fileType) {\n            case FILE_TYPE_SET.CSV:\n              state[node.id] = {\n                fileType,\n                param: {\n                  setColumn: null,\n                  setIndex: false,\n                  transpose: false,\n                },\n              }\n              break\n            case FILE_TYPE_SET.IMAGE:\n              state[node.id] = {\n                fileType,\n                param: {},\n              }\n              break\n            case FILE_TYPE_SET.HDF5:\n              state[node.id] = {\n                fileType,\n                param: {},\n              }\n              break\n          }\n        }\n      })\n      .addCase(deleteFlowElements, (state, action) => {\n        action.payload\n          .filter((node) => isNodeData(node))\n          .forEach((node) => {\n            if (node.data?.type === NODE_TYPE_SET.INPUT) {\n              delete state[node.id]\n            }\n          })\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (Object.keys(state).includes(action.payload)) {\n          delete state[action.payload]\n        }\n      }),\n})\n\nexport const {\n  setInputNodeFilePath,\n  setInputImageNodeFile,\n  setCsvInputNodeParam,\n  setInputNodeHDF5Path,\n} = inputNodeSlice.actions\n\nexport default inputNodeSlice.reducer\n","import * as MuiColors from '@mui/material/colors'\n\nexport const HANDLE_COLOR_PRESET_MAP = new Map<number, string>([\n  [0, MuiColors.red[500]],\n  [1, MuiColors.indigo[500]],\n  [2, MuiColors.yellow[500]],\n  [3, MuiColors.blue[500]],\n  [4, MuiColors.green[500]],\n  [5, MuiColors.lightGreen[500]],\n  [6, MuiColors.deepPurple[500]],\n  [7, MuiColors.cyan[500]],\n  [8, MuiColors.lime[500]],\n  [9, MuiColors.deepOrange[500]],\n])\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { HANDLE_COLOR_PRESET_MAP } from 'const/HandleColor'\n\nexport type HandleTypeColor = {\n  colorMap: { [type: string]: string }\n  /**\n   * HANDLE_COLOR_PRESET_MAPのkey\n   */\n  nextKey: number\n}\n\nconst initialState: HandleTypeColor = { colorMap: {}, nextKey: 0 }\n\nconst SLICE_NAME = 'handleTypeColor'\n\nexport const handleTypeColorSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    addColor: (state, action: PayloadAction<string>) => {\n      const nextColor =\n        HANDLE_COLOR_PRESET_MAP.get(state.nextKey) ??\n        '#' + Math.floor(Math.random() * 0xffffff).toString(16)\n      state.colorMap[action.payload] = nextColor\n      state.nextKey++\n    },\n  },\n})\n\nexport const { addColor } = handleTypeColorSlice.actions\n\nexport default handleTypeColorSlice.reducer\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectHandleTypeColor } from 'store/slice/HandleTypeColor/HandleTypeColorSelectors'\nimport { addColor } from 'store/slice/HandleTypeColor/HandleTypeColorSlice'\n\nexport function useHandleColor(type: string) {\n  const dispatch = useDispatch()\n  const color = useSelector(selectHandleTypeColor(type))\n  React.useEffect(() => {\n    if (color === undefined) {\n      dispatch(addColor(type))\n    }\n  }, [type, color, dispatch])\n  return color\n}\n","import { RootState } from '../../store'\n\nexport const selectHandleTypeColor = (key: string) => (state: RootState) => {\n  if (state.handleColor.colorMap[key] != null) {\n    return state.handleColor.colorMap[key]\n  } else {\n    return undefined\n  }\n}\n","import { RootState } from '../../store'\nimport { FILE_TREE_TYPE } from './FilesTreeType'\n\nexport const selectFilesTree =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) => {\n    if (state.filesTree[fileType] != null) {\n      return state.filesTree[fileType]\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectFilesTreeNodes =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.tree\n\nexport const selectFilesIsLatest =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.isLatest ?? false\n\nexport const selectFilesIsLoading =\n  (fileType: FILE_TREE_TYPE) => (state: RootState) =>\n    selectFilesTree(fileType)(state)?.isLoading ?? false\n","export const FILES_TREE_SLICE_NAME = 'filesTree'\n\nexport type TreeNodeTypeDTO = DirNodeDTO | FileNodeDTO\n\nexport interface NodeBaseDTO {\n  path: string\n  name: string\n  isdir: boolean\n}\n\nexport interface DirNodeDTO extends NodeBaseDTO {\n  isdir: true\n  nodes: TreeNodeTypeDTO[]\n}\n\nexport interface FileNodeDTO extends NodeBaseDTO {\n  isdir: false\n}\n\nexport type TreeNodeType = DirNode | FileNode\n\nexport interface NodeBase {\n  path: string\n  name: string\n  isDir: boolean\n}\n\nexport interface DirNode extends NodeBase {\n  isDir: true\n  nodes: TreeNodeType[]\n}\n\nexport interface FileNode extends NodeBase {\n  isDir: false\n}\n\nexport interface FilesTree {\n  [fileType: string]: {\n    isLatest: boolean\n    isLoading: boolean\n    tree: TreeNodeType[]\n  }\n}\n\nexport const FILE_TREE_TYPE_SET = {\n  IMAGE: 'image',\n  CSV: 'csv',\n  HDF5: 'hdf5',\n  ALL: 'all',\n} as const\n\nexport type FILE_TREE_TYPE =\n  typeof FILE_TREE_TYPE_SET[keyof typeof FILE_TREE_TYPE_SET]\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\n\nimport {\n  FILES_TREE_SLICE_NAME,\n  FILE_TREE_TYPE,\n  TreeNodeTypeDTO,\n} from './FilesTreeType'\n\nexport const getFilesTree = createAsyncThunk<TreeNodeTypeDTO[], FILE_TREE_TYPE>(\n  `${FILES_TREE_SLICE_NAME}/getFilesTree`,\n  async (fileType, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/files`, {\n        params: {\n          file_type: fileType,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import Dialog from '@mui/material/Dialog'\nimport { useDispatch, useSelector } from 'react-redux'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem from '@mui/lab/TreeItem'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport Typography from '@mui/material/Typography'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport Button from '@mui/material/Button'\nimport { useTheme } from '@mui/material/styles'\nimport React from 'react'\n\nimport {\n  selectFilesIsLatest,\n  selectFilesIsLoading,\n  selectFilesTreeNodes,\n} from 'store/slice/FilesTree/FilesTreeSelectors'\nimport { getFilesTree } from 'store/slice/FilesTree/FilesTreeAction'\nimport {\n  FILE_TREE_TYPE,\n  FILE_TREE_TYPE_SET,\n  TreeNodeType,\n} from 'store/slice/FilesTree/FilesTreeType'\n\ntype FileSelectDialogProps = {\n  selectedFilePath: string\n  onClickOk: (path: string) => void\n  fileType?: FILE_TREE_TYPE\n  title?: string\n  open: boolean\n  onClickCancel: () => void\n  onClose?: () => void\n}\n\nexport const FileSelectDialog = React.memo<FileSelectDialogProps>(\n  ({\n    open,\n    selectedFilePath,\n    onClickCancel,\n    onClickOk,\n    onClose,\n    title,\n    fileType = FILE_TREE_TYPE_SET.ALL,\n  }) => {\n    const [clickedFilePath, setClickedFilePath] =\n      React.useState(selectedFilePath)\n    const theme = useTheme()\n    return (\n      <Dialog open={open} onClose={onClose} fullWidth>\n        <DialogTitle>{title ?? 'Select File'}</DialogTitle>\n        <DialogContent dividers>\n          <div\n            style={{\n              height: 300,\n              overflow: 'auto',\n              marginBottom: theme.spacing(1),\n              border: '1px solid',\n              padding: theme.spacing(1),\n              borderColor: theme.palette.divider,\n            }}\n          >\n            <FileTreeView\n              onClickFile={setClickedFilePath}\n              fileType={fileType}\n            />\n          </div>\n          <Typography variant=\"subtitle1\">Select File</Typography>\n          <Typography variant=\"subtitle2\">\n            {!!clickedFilePath ? clickedFilePath : '---'}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n            cancel\n          </Button>\n          <Button\n            onClick={() => onClickOk(clickedFilePath)}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  },\n)\n\nconst FileTreeView = React.memo<{\n  onClickFile: (path: string) => void\n  fileType: FILE_TREE_TYPE\n}>(({ onClickFile, fileType }) => {\n  const [tree, isLoading] = useFileTree(fileType)\n  return (\n    <div>\n      {isLoading && <LinearProgress />}\n      <TreeView>\n        {tree?.map((node) => (\n          <TreeNode node={node} onClickFile={onClickFile} />\n        ))}\n      </TreeView>\n    </div>\n  )\n})\n\nconst TreeNode = React.memo<{\n  node: TreeNodeType\n  onClickFile: (path: string) => void\n}>(({ node, onClickFile }) => {\n  if (node.isDir) {\n    return (\n      <TreeItem\n        icon={<FolderIcon htmlColor=\"skyblue\" />}\n        nodeId={node.path}\n        label={node.name}\n      >\n        {node.nodes.map((childNode, i) => (\n          <TreeNode node={childNode} key={i} onClickFile={onClickFile} />\n        ))}\n      </TreeItem>\n    )\n  } else {\n    return (\n      <TreeItem\n        icon={<InsertDriveFileOutlinedIcon fontSize=\"small\" />}\n        nodeId={node.path}\n        label={node.name}\n        onClick={() => onClickFile(node.path)}\n      />\n    )\n  }\n})\n\nfunction useFileTree(\n  fileType: FILE_TREE_TYPE,\n): [TreeNodeType[] | undefined, boolean] {\n  const dispatch = useDispatch()\n  const tree = useSelector(selectFilesTreeNodes(fileType))\n  const isLatest = useSelector(selectFilesIsLatest(fileType))\n  const isLoading = useSelector(selectFilesIsLoading(fileType))\n  React.useEffect(() => {\n    if (!isLatest && !isLoading) {\n      dispatch(getFilesTree(fileType))\n    }\n  }, [isLatest, isLoading, fileType, dispatch])\n  return [tree, isLoading]\n}\n","import React from 'react'\nimport LinearProgress, {\n  LinearProgressProps,\n} from '@mui/material/LinearProgress'\nimport Typography from '@mui/material/Typography'\nimport Box from '@mui/material/Box'\n\nexport const LinearProgressWithLabel = React.memo<\n  LinearProgressProps & { value: number }\n>((props) => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  )\n})\n","export const FILE_UPLOADER_SLICE_NAME = 'fileUploader'\n\nexport type FileUploader = {\n  [id: string]: FileUploaderType\n}\n\nexport type FileUploaderType = {\n  path?: string\n  fileName?: string\n  isUninitialized: boolean\n  pending: boolean\n  fulfilled: boolean\n  uploadingProgress?: number\n  error?: string\n}\n","import { createAsyncThunk, createAction } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\n\nimport { FILE_UPLOADER_SLICE_NAME } from './FileUploaderType'\n\nexport const setUploadProgress = createAction<{\n  requestId: string\n  progess: number\n  total: number\n}>(`${FILE_UPLOADER_SLICE_NAME}/setUploadProgress`)\n\nexport const uploadFile = createAsyncThunk<\n  {\n    resultPath: string\n  },\n  {\n    requestId: string\n    fileName: string\n    formData: FormData\n    fileType?: FILE_TYPE\n  }\n>(\n  `${FILE_UPLOADER_SLICE_NAME}/uploadFile`,\n  async ({ requestId, fileName, formData }, thunkAPI) => {\n    try {\n      const config = getUploadConfig((percent, total) => {\n        thunkAPI.dispatch(\n          setUploadProgress({\n            requestId,\n            progess: percent,\n            total,\n          }),\n        )\n      })\n      const response = await axios.post(\n        `${BASE_URL}/files/upload/${fileName}`,\n        formData,\n        config,\n      )\n      const data = response.data\n      return {\n        resultPath: data.file_path,\n      }\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nfunction getUploadConfig(\n  onUpdateProgressFn: (percent: number, totalSize: number) => void,\n) {\n  return {\n    onUploadProgress: function (progressEvent: any) {\n      const percentCompleted = Math.round(\n        (progressEvent.loaded * 100) / progressEvent.total,\n      )\n      onUpdateProgressFn(percentCompleted, progressEvent.total)\n    },\n  }\n}\n","import { FileUploaderType } from './FileUploaderType'\n\nexport const inistialUploaderState: FileUploaderType = {\n  path: undefined,\n  fileName: undefined,\n  isUninitialized: true,\n  pending: false,\n  fulfilled: false,\n  uploadingProgress: undefined,\n  error: undefined,\n}\n","import { RootState } from 'store/store'\nimport { inistialUploaderState } from './FileUploaderInitlalState'\n\nexport const selectFileUploader = (id: string) => (state: RootState) => {\n  if (Object.keys(state.fileUploader).includes(id)) {\n    return state.fileUploader[id]\n  } else {\n    return inistialUploaderState\n  }\n}\n\nexport const selectUploadFilePath = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).path\n\nexport const selectUploadFileName = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).fileName\n\nexport const selectFileUploadIsUninitialized =\n  (id: string) => (state: RootState) =>\n    selectFileUploader(id)(state).isUninitialized\n\nexport const selectFileUploadIsPending = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).pending\n\nexport const selectFileUploadIsFulfilled = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).fulfilled\n\nexport const selectFileUploadProgress = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).uploadingProgress\n\nexport const selectFileUploadError = (id: string) => (state: RootState) =>\n  selectFileUploader(id)(state).error\n","import { nanoid } from '@reduxjs/toolkit'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { uploadFile } from './FileUploaderActions'\nimport {\n  selectFileUploadIsPending,\n  selectUploadFilePath,\n  selectFileUploadIsFulfilled,\n  selectFileUploadProgress,\n  selectFileUploadIsUninitialized,\n  selectFileUploadError,\n} from './FileUploaderSelectors'\nimport { FILE_TYPE } from '../InputNode/InputNodeType'\n\nexport function useFileUploader(fileType?: FILE_TYPE) {\n  const dispatch = useDispatch()\n  const id = React.useRef(nanoid())\n  // React.useEffect(() => { // todo 解明\n  //   dispatch(setFileUploaderStateById(id.current))\n  // }, [dispatch, id.current])\n  const onUploadFile = React.useCallback(\n    (formData: FormData, fileName: string) => {\n      dispatch(\n        uploadFile({ requestId: id.current, fileName, formData, fileType }),\n      )\n    },\n    [dispatch, fileType],\n  )\n  const uninitialized = useSelector(selectFileUploadIsUninitialized(id.current))\n  const filePath = useSelector(selectUploadFilePath(id.current))\n  const pending = useSelector(selectFileUploadIsPending(id.current))\n  const fulfilled = useSelector(selectFileUploadIsFulfilled(id.current))\n  const progress = useSelector(selectFileUploadProgress(id.current))\n  const error = useSelector(selectFileUploadError(id.current))\n  return {\n    filePath,\n    uninitialized,\n    pending,\n    fulfilled,\n    progress,\n    error,\n    onUploadFile,\n  }\n}\n","import React from 'react'\nimport { Button, Typography } from '@mui/material'\nimport ButtonGroup from '@mui/material/ButtonGroup'\n\nimport { FileSelectDialog } from 'components/FileSelectDialog'\nimport {\n  FILE_TREE_TYPE,\n  FILE_TREE_TYPE_SET,\n} from 'store/slice/FilesTree/FilesTreeType'\nimport { LinearProgressWithLabel } from './LinerProgressWithLabel'\nimport { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\n\ntype FileSelectProps = {\n  filePath: string\n  onUploadFile: (formData: FormData, fileName: string) => void\n  onSelectFile: (path: string) => void\n  fileTreeType?: FILE_TREE_TYPE\n  selectButtonLabel?: string\n  uploadButtonLabel?: string\n}\n\nexport const FileSelect = React.memo<{\n  filePath: string\n  fileType: FILE_TYPE\n  onChangeFilePath: (path: string) => void\n}>(({ filePath, fileType, onChangeFilePath }) => {\n  const {\n    filePath: uploadedFilePath,\n    onUploadFile,\n    pending,\n    uninitialized,\n    progress,\n    error,\n  } = useFileUploader(fileType)\n\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n    if (uploadedFilePath != null) {\n      onChangeFilePath(uploadedFilePath)\n    }\n  }\n\n  const onSelectFile = (selectedPath: string) => {\n    onChangeFilePath(selectedPath)\n  }\n\n  return (\n    <>\n      {!uninitialized && pending && progress != null && (\n        <div style={{ marginLeft: 2, marginRight: 2 }}>\n          <LinearProgressWithLabel value={progress} />\n        </div>\n      )}\n      <FileSelectImple\n        filePath={filePath}\n        onSelectFile={onSelectFile}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={fileType}\n        selectButtonLabel={`Select ${fileType}`}\n      />\n      {error != null && (\n        <Typography variant=\"caption\" color=\"error\">\n          {error}\n        </Typography>\n      )}\n    </>\n  )\n})\n\nexport const FileSelectImple = React.memo<FileSelectProps>(\n  ({\n    filePath,\n    onSelectFile,\n    onUploadFile,\n    fileTreeType,\n    selectButtonLabel,\n    uploadButtonLabel,\n  }) => {\n    const onFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      event.preventDefault()\n      if (event.target.files != null && event.target.files[0] != null) {\n        const file = event.target.files[0]\n        const formData = new FormData()\n        formData.append('file', file)\n        const fileName = file.name\n        onUploadFile(formData, fileName)\n      }\n    }\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const onClick = () => {\n      if (inputRef.current != null) {\n        inputRef.current.click()\n      }\n    }\n    const [open, setOpen] = React.useState(false)\n    const accept = getFileInputAccept(fileTreeType)\n    const fileName = filePath.split('/').reverse()[0]\n    return (\n      <div\n        style={{\n          padding: 5,\n        }}\n      >\n        <ButtonGroup size=\"small\" style={{ marginRight: 4 }}>\n          <Button variant=\"outlined\" onClick={() => setOpen(true)}>\n            {!!selectButtonLabel ? selectButtonLabel : 'Select File'}\n          </Button>\n          <Button onClick={onClick} variant=\"outlined\">\n            {!!uploadButtonLabel ? uploadButtonLabel : 'or Upload'}\n          </Button>\n        </ButtonGroup>\n        <div>\n          <input\n            ref={inputRef}\n            type=\"file\"\n            onChange={onFileInputChange}\n            accept={accept}\n            style={{\n              visibility: 'hidden',\n              width: 0,\n              height: 0,\n            }}\n          />\n          <Typography className=\"selectFilePath\" variant=\"caption\">\n            {!!fileName ? fileName : 'No file is selected.'}\n          </Typography>\n        </div>\n        <FileSelectDialog\n          selectedFilePath={fileName ?? ''}\n          open={open}\n          onClickOk={(path) => {\n            onSelectFile(path)\n            setOpen(false)\n          }}\n          onClickCancel={() => {\n            setOpen(false)\n          }}\n          onClose={() => setOpen(false)}\n          fileType={fileTreeType}\n        />\n      </div>\n    )\n  },\n)\n\nfunction getFileInputAccept(fileType: FILE_TREE_TYPE | undefined) {\n  switch (fileType) {\n    case FILE_TREE_TYPE_SET.IMAGE:\n      return '.tif'\n    case FILE_TREE_TYPE_SET.CSV:\n      return '.csv'\n    case FILE_TREE_TYPE_SET.HDF5:\n      return '.hdf5,.nwb'\n    default:\n      return undefined\n  }\n}\n","import { Connection } from 'react-flow-renderer'\n\nexport function toHandleId(nodeId: string, name: string, type: string) {\n  return `${nodeId}--${name}--${type}`\n}\n\nexport function getHandleType(handleId: string) {\n  return handleId.split('--')[2]\n}\n\nexport function isValidConnection(connection: Connection) {\n  if (connection.sourceHandle != null && connection.targetHandle != null) {\n    return (\n      getHandleType(connection.sourceHandle) ===\n      getHandleType(connection.targetHandle)\n    )\n  } else {\n    return true\n  }\n}\n","import React, { CSSProperties } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport { alpha, useTheme } from '@mui/material/styles'\nimport { IconButton } from '@mui/material'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport {\n  selectInputNodeDefined,\n  selectInputNodeSelectedFilePath,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport { setInputImageNodeFile } from 'store/slice/InputNode/InputNodeSlice'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n\nimport { useHandleColor } from './HandleColorHook'\nimport { FileSelect } from './FileSelect'\nimport { toHandleId, isValidConnection } from './FlowChartUtils'\nimport {\n  deleteFlowElementsById,\n  edifFlowElementsLabelById,\n} from 'store/slice/FlowElement/FlowElementSlice'\n\n// Connection部分のレイアウト\nconst sourceHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  top: 15,\n  border: '1px solid',\n  // borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const ImageFileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <ImageFileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst ImageFileNodeImple = React.memo<NodeProps>(\n  ({ id: nodeId, selected: elementSelected }) => {\n    const dispatch = useDispatch()\n    const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n    const onChangeFilePath = (path: string) => {\n      dispatch(\n        setInputImageNodeFile({\n          nodeId,\n          filePath: path,\n        }),\n      )\n      const fileName = path.split('/').reverse()[0]\n      dispatch(\n        edifFlowElementsLabelById({\n          nodeId,\n          fileName,\n        }),\n      )\n    }\n\n    const theme = useTheme()\n    const returnType = 'ImageData'\n    const imageColor = useHandleColor(returnType)\n\n    const onClickDeleteIcon = () => {\n      dispatch(deleteFlowElementsById(nodeId))\n    }\n\n    return (\n      <div\n        style={{\n          height: '100%',\n          width: '250px',\n          background: elementSelected\n            ? alpha(theme.palette.primary.light, 0.1)\n            : undefined,\n        }}\n      >\n        <IconButton\n          aria-label=\"delete\"\n          style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n          onClick={onClickDeleteIcon}\n          size=\"large\"\n        >\n          <CloseOutlinedIcon />\n        </IconButton>\n        <FileSelect\n          onChangeFilePath={onChangeFilePath}\n          fileType={FILE_TYPE_SET.IMAGE}\n          filePath={filePath ?? ''}\n        />\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id={toHandleId(nodeId, 'image', returnType)}\n          style={{\n            ...sourceHandleStyle,\n            background: imageColor,\n          }}\n          isValidConnection={isValidConnection}\n        />\n      </div>\n    )\n  },\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\n\ntype RightDrawer = {\n  open: boolean\n  mode: RIGHT_DRAWER_MODE_TYPE\n  currendNodeId: string | null\n}\n\nexport const RIGHT_DRAWER_MODE = {\n  NONE: 'none',\n  NWB: 'nwb',\n  PARAM_FORM: 'paramForm',\n  SNAKEMAKE: 'snakemake',\n} as const\n\nexport type RIGHT_DRAWER_MODE_TYPE =\n  typeof RIGHT_DRAWER_MODE[keyof typeof RIGHT_DRAWER_MODE]\n\nconst initialState: RightDrawer = {\n  open: false,\n  mode: RIGHT_DRAWER_MODE.NONE,\n  currendNodeId: null,\n}\nexport const rightDrawerSlice = createSlice({\n  name: 'rightDrawer',\n  initialState,\n  reducers: {\n    openRightDrawer: (state, action: PayloadAction<RIGHT_DRAWER_MODE_TYPE>) => {\n      state.open = true\n      state.mode = action.payload\n    },\n    closeRightDrawer: (state) => {\n      state.open = false\n      state.mode = RIGHT_DRAWER_MODE.NONE\n    },\n    toggleParamForm: (state, action: PayloadAction<string>) => {\n      if (\n        state.open &&\n        state.mode === RIGHT_DRAWER_MODE.PARAM_FORM &&\n        state.currendNodeId === action.payload\n      ) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n        state.currendNodeId = null\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.PARAM_FORM\n        state.currendNodeId = action.payload\n      }\n    },\n    toggleNwb: (state) => {\n      if (state.open && state.mode === RIGHT_DRAWER_MODE.NWB) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.NWB\n      }\n      state.currendNodeId = null\n    },\n    toggleSnakemake: (state) => {\n      if (state.open && state.mode === RIGHT_DRAWER_MODE.SNAKEMAKE) {\n        state.open = false\n        state.mode = RIGHT_DRAWER_MODE.NONE\n      } else {\n        state.open = true\n        state.mode = RIGHT_DRAWER_MODE.SNAKEMAKE\n      }\n      state.currendNodeId = null\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(deleteFlowElements, (state, action) => {\n        if (\n          action.payload.findIndex((elm) => elm.id === state.currendNodeId) > 0\n        ) {\n          state.currendNodeId = null\n        }\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (action.payload === state.currendNodeId) {\n          state.currendNodeId = null\n        }\n      })\n  },\n})\n\nexport const {\n  toggleParamForm,\n  toggleNwb,\n  toggleSnakemake,\n  openRightDrawer,\n  closeRightDrawer,\n} = rightDrawerSlice.actions\n\nexport default rightDrawerSlice.reducer\n","import { getChildParam } from 'store/utils/param/ParamUtils'\nimport { RootState } from '../../store'\n\nexport const selectNwb = (state: RootState) => state.nwb\n\nexport const selectNwbParams = (state: RootState) => selectNwb(state).params\n\nexport const selectNwbParamsKeyList = (state: RootState) =>\n  Object.keys(selectNwb(state).params)\n\nexport const selectNwbParam = (paramKey: string) => (state: RootState) =>\n  selectNwb(state).params[paramKey]\n\nexport const selectNwbParamsValue = (path: string) => (state: RootState) => {\n  const params = selectNwb(state).params\n  if (params != null) {\n    const target = getChildParam(path, params)\n    return target?.value\n  } else {\n    throw new Error('Param is null')\n  }\n}\n","import { getChildParam } from 'store/utils/param/ParamUtils'\nimport { RootState } from '../../store'\n\nconst selectSnakemake = (state: RootState) => state.snakemake\nexport const selectSnakemakeParams = (state: RootState) =>\n  selectSnakemake(state).params\n\nexport const selectSnakemakeParamsKeyList = (state: RootState) =>\n  Object.keys(selectSnakemakeParams(state))\n\nexport const selectSnakemakeParam = (paramKey: string) => (state: RootState) =>\n  selectSnakemakeParams(state)[paramKey]\n\nexport const selectSnakemakeParamsValue =\n  (path: string) => (state: RootState) => {\n    const params = selectSnakemakeParams(state)\n    if (params != null) {\n      const target = getChildParam(path, params)\n      return target?.value\n    } else {\n      throw new Error('Param is null')\n    }\n  }\n","import { RunPostData } from 'api/run/Run'\nimport { DATA_TYPE } from '../DisplayData/DisplayDataType'\n\nexport const PIPELINE_SLICE_NAME = 'pipeline'\n\nexport type Pipeline = {\n  pipelines: {\n    [requestId: string]: PipelineType\n  }\n  uidHistory: string[]\n}\n\nexport const RUN_STATUS = {\n  /**\n   * 開始リクエスト中\n   */\n  START_PENDING: 'StartPending',\n  /**\n   * 開始できなかった\n   */\n  START_ERROR: 'StartError',\n  /**\n   * 正常に開始した\n   */\n  START_SUCCESS: 'StartSuccess',\n  /**\n   * 全て終了\n   */\n  FINISHED: 'Finished',\n  /**\n   * 途中終了\n   */\n  ABORTED: 'Aborted',\n  /**\n   * キャンセルされた\n   */\n  CANCELED: 'Canceled',\n} as const\n\nexport type RUN_STATUS_TYPE = typeof RUN_STATUS[keyof typeof RUN_STATUS]\n\nexport type PipelineType =\n  | StartedPipeline\n  | {\n      status: typeof RUN_STATUS.START_ERROR | typeof RUN_STATUS.START_PENDING\n    }\n\nexport type StartedPipeline = {\n  uid: string\n  status:\n    | typeof RUN_STATUS.START_SUCCESS\n    | typeof RUN_STATUS.FINISHED\n    | typeof RUN_STATUS.ABORTED\n    | typeof RUN_STATUS.CANCELED\n  runPostData: RunPostData\n  runResult: RunResult\n}\n\nexport type RunResult = {\n  [nodeId: string]: NodeResult\n}\n\nexport type NodeResult = NodeResultPending | NodeResultSuccess | NodeResultError\n\nexport const NODE_RESULT_STATUS = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  PENDING: 'pending',\n} as const\n\nexport type NODE_RESULT_STATUS_TYPE =\n  typeof NODE_RESULT_STATUS[keyof typeof NODE_RESULT_STATUS]\n\nexport interface NodeResultBaseType<T extends NODE_RESULT_STATUS_TYPE> {\n  status: T\n  message?: string\n  name: string\n}\n\nexport interface NodeResultPending\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.PENDING> {}\n\nexport interface NodeResultSuccess\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.SUCCESS> {\n  outputPaths: OutputPaths\n}\n\nexport type OutputPaths = {\n  [outputKey: string]: {\n    path: string\n    type: DATA_TYPE\n  }\n}\n\nexport interface NodeResultError\n  extends NodeResultBaseType<typeof NODE_RESULT_STATUS.ERROR> {\n  message: string\n}\n","export const DISPLAY_DATA_SLICE_NAME = 'displayData'\n\nexport type DisplayData = {\n  timeSeries: {\n    [filePath: string]: TimeSeriesDisplayData\n  }\n  heatMap: {\n    [filePath: string]: HeatMapDisplayData\n  }\n  image: {\n    [filePath: string]: ImageDisplayData\n  }\n  csv: {\n    [filePath: string]: CsvDisplayData\n  }\n  roi: {\n    [filePath: string]: RoiDisplayData\n  }\n  scatter: {\n    [filePath: string]: ScatterDisplayData\n  }\n  bar: {\n    [filePath: string]: BarDisplayData\n  }\n  hdf5: {\n    [filePath: string]: HDF5DisplayData\n  }\n}\n\nexport const DATA_TYPE_SET = {\n  TIME_SERIES: 'timeSeries',\n  HEAT_MAP: 'heatMap',\n  IMAGE: 'image',\n  CSV: 'csv',\n  ROI: 'roi',\n  SCATTER: 'scatter',\n  BAR: 'bar',\n  HDF5: 'hdf5',\n} as const\n\nexport type DATA_TYPE = typeof DATA_TYPE_SET[keyof typeof DATA_TYPE_SET]\n\ninterface BaseDisplay<T extends DATA_TYPE, Data> {\n  type: T\n  data: Data\n  pending: boolean\n  error: string | null\n  fulfilled: boolean\n}\n\nexport interface TimeSeriesDisplayData\n  extends BaseDisplay<'timeSeries', TimeSeriesData> {}\nexport type TimeSeriesData = {\n  [key: string]: {\n    [key: number]: number\n  }\n}\n\nexport interface HeatMapDisplayData\n  extends BaseDisplay<'heatMap', HeatMapData> {}\nexport type HeatMapData = number[][]\n\nexport interface ImageDisplayData extends BaseDisplay<'image', ImageData> {}\nexport type ImageData = number[][][]\n\nexport interface CsvDisplayData extends BaseDisplay<'csv', CsvData> {\n  // columns: string[]\n}\nexport type CsvData = number[][]\n\nexport interface RoiDisplayData extends BaseDisplay<'roi', RoiData> {}\nexport type RoiData = number[][][]\n\nexport interface ScatterDisplayData\n  extends BaseDisplay<'scatter', ScatterData> {}\nexport type ScatterData = number[][][]\n\nexport interface BarDisplayData extends BaseDisplay<'bar', BarData> {}\nexport type BarData = number[][][]\n\nexport interface HDF5DisplayData extends BaseDisplay<'hdf5', HDF5Data> {}\nexport type HDF5Data = number[][][]\n","import { DATA_TYPE, DATA_TYPE_SET } from './DisplayDataType'\n\n/**\n * サーバーサイドの値をマッピング\n */\nexport function toDataType(value: string): DATA_TYPE {\n  switch (value) {\n    case 'images':\n      return DATA_TYPE_SET.IMAGE\n    case 'timeseries':\n      return DATA_TYPE_SET.TIME_SERIES\n    case 'heatmap':\n      return DATA_TYPE_SET.HEAT_MAP\n    case 'roi':\n      return DATA_TYPE_SET.ROI\n    case 'scatter':\n      return DATA_TYPE_SET.SCATTER\n    case 'bar':\n      return DATA_TYPE_SET.BAR\n    default:\n      throw new Error(`failed to map dataType: ${value}`)\n  }\n}\n","import { RunPostData, RunResultDTO, OutputPathsDTO } from 'api/run/Run'\n\nimport { toDataType } from '../DisplayData/DisplayDataUtils'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport {\n  RunResult,\n  OutputPaths,\n  NODE_RESULT_STATUS,\n  PipelineType,\n  RUN_STATUS,\n  StartedPipeline,\n  NodeResultPending,\n  NodeResultError,\n  NodeResultSuccess,\n  NodeResult,\n} from './PipelineType'\n\nexport function isNodeResultPending(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultPending {\n  return nodeResult.status === NODE_RESULT_STATUS.PENDING\n}\n\nexport function isNodeResultSuccess(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultSuccess {\n  return nodeResult.status === NODE_RESULT_STATUS.SUCCESS\n}\n\nexport function isNodeResultError(\n  nodeResult: NodeResult,\n): nodeResult is NodeResultError {\n  return nodeResult.status === NODE_RESULT_STATUS.ERROR\n}\n\nexport function isStartedPipeline(\n  pipeline: PipelineType,\n): pipeline is StartedPipeline {\n  return (\n    pipeline.status === RUN_STATUS.START_SUCCESS ||\n    pipeline.status === RUN_STATUS.FINISHED ||\n    pipeline.status === RUN_STATUS.ABORTED ||\n    pipeline.status === RUN_STATUS.CANCELED\n  )\n}\n\nexport function getInitialRunResult(runPostData: RunPostData) {\n  const initialResult: RunResult = {}\n  runPostData.nodeList\n    .filter(({ data }) => data?.type === NODE_TYPE_SET.ALGORITHM)\n    .forEach(({ id, data }) => {\n      initialResult[id] = {\n        status: NODE_RESULT_STATUS.PENDING,\n        name: data?.label ?? '',\n      }\n    })\n  return initialResult\n}\n\nexport function convertToRunResult(dto: RunResultDTO) {\n  const result: RunResult = {}\n  Object.entries(dto).forEach(([nodeId, nodeResultDto]) => {\n    const outputPath = nodeResultDto.outputPaths\n    if (nodeResultDto.status === 'success' && outputPath != null) {\n      result[nodeId] = {\n        status: NODE_RESULT_STATUS.SUCCESS,\n        message: nodeResultDto.message,\n        name: nodeResultDto.name,\n        outputPaths: convertToOutputPath(outputPath),\n      }\n    } else {\n      result[nodeId] = {\n        status: NODE_RESULT_STATUS.ERROR,\n        message: nodeResultDto.message,\n        name: nodeResultDto.name,\n      }\n    }\n  })\n  return result\n}\n\nfunction convertToOutputPath(dto: OutputPathsDTO) {\n  const result: OutputPaths = {}\n  Object.entries(dto).forEach(([functionPath, value]) => {\n    result[functionPath] = {\n      path: value.path,\n      type: toDataType(value.type),\n    }\n  })\n  return result\n}\n","import { Node } from 'react-flow-renderer'\n\nimport {\n  AlgorithmNodePostData,\n  InputNodePostData,\n  NodePostDataType,\n  RunPostData,\n} from 'api/run/Run'\n\nimport { RootState } from 'store/store'\nimport {\n  selectEdgeListForRun,\n  selectFlowElements,\n} from '../FlowElement/FlowElementSelectors'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport {\n  isAlgorithmNodeData,\n  isNodeData,\n} from '../FlowElement/FlowElementUtils'\nimport { selectNwbParams } from '../NWB/NWBSelectors'\nimport { selectSnakemakeParams } from '../Snakemake/SnakemakeSelectors'\nimport {\n  NodeResult,\n  NodeResultPending,\n  NodeResultSuccess,\n  RUN_STATUS,\n  StartedPipeline,\n} from './PipelineType'\nimport {\n  isNodeResultPending,\n  isStartedPipeline,\n  isNodeResultSuccess,\n} from './PipelineUtils'\n\nimport {\n  selectAlgorithmFunctionPath,\n  selectAlgorithmParams,\n} from '../AlgorithmNode/AlgorithmNodeSelectors'\nimport {\n  selectInputNodeHDF5Path,\n  selectInputNodeParam,\n  selectInputNodeSelectedFilePath,\n} from '../InputNode/InputNodeSelectors'\n\nexport const selectPipelineLatestUid = (state: RootState) => {\n  const history = state.pipeline.uidHistory\n  if (history.length > 0) {\n    return history.slice(-1)[0]\n  } else {\n    return undefined\n  }\n}\n\nexport const selectRunPostData = (state: RootState) => {\n  const nwbParam = selectNwbParams(state)\n  const snakemakeParam = selectSnakemakeParams(state)\n  const edgeListForRun = selectEdgeListForRun(state)\n  const nodePostDataList = selectNodePostDataListForRun(state)\n  const runPostData: RunPostData = {\n    nwbParam,\n    snakemakeParam,\n    edgeList: edgeListForRun,\n    nodeList: nodePostDataList,\n  }\n  return runPostData\n}\n\nexport const selectNodePostDataListForRun = (\n  state: RootState,\n): Node<NodePostDataType>[] => {\n  const elements = selectFlowElements(state)\n  const nodeList = elements.filter(isNodeData).map((node) => {\n    if (isAlgorithmNodeData(node)) {\n      const param = selectAlgorithmParams(node.id)(state) ?? {}\n      const functionPath = selectAlgorithmFunctionPath(node.id)(state)\n      const algorithmNodePostData: Node<AlgorithmNodePostData> = {\n        ...node,\n        data: {\n          ...node.data,\n          label: node.data?.label ?? '',\n          type: NODE_TYPE_SET.ALGORITHM,\n          path: functionPath,\n          param,\n        },\n      }\n      return algorithmNodePostData\n    } else {\n      const filePath = selectInputNodeSelectedFilePath(node.id)(state)\n      const param = selectInputNodeParam(node.id)(state)\n      const hdf5Path = selectInputNodeHDF5Path(node.id)(state)\n      const inputNodePosyData: Node<InputNodePostData> = {\n        ...node,\n        data: {\n          ...node.data,\n          label: node.data?.label ?? '',\n          type: NODE_TYPE_SET.INPUT,\n          path: filePath ?? '',\n          param,\n          hdf5Path: hdf5Path,\n        },\n      }\n      return inputNodePosyData\n    }\n  })\n  return nodeList\n}\n\nexport const selectStartedPipeline = (uid: string) => (state: RootState) => {\n  const pipeline = Object.values(state.pipeline.pipelines).find(\n    (value) => isStartedPipeline(value) && value.uid === uid,\n  )\n  if (pipeline != null) {\n    return pipeline as StartedPipeline\n  } else {\n    throw new Error(`invalid uid: ${uid}`)\n  }\n}\n\nexport const selectRunResultPendingList =\n  (uid: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(uid)(state)\n    return Object.values(pipeline.runResult).filter(isNodeResultPending)\n  }\n\nexport const selectRunResultPendingNodeIdList =\n  (uid: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(uid)(state)\n    return Object.entries(pipeline.runResult)\n      .map(([nodeId, nodeResult]) => ({ nodeId, nodeResult }))\n      .filter(isNodeResultPendingAndNodeId)\n      .map(({ nodeId }) => nodeId)\n  }\n\nfunction isNodeResultPendingAndNodeId(arg: {\n  nodeId: string\n  nodeResult: NodeResult\n}): arg is {\n  nodeId: string\n  nodeResult: NodeResultPending\n} {\n  return isNodeResultPending(arg.nodeResult)\n}\n\nexport const selectPipelineStatus = (uid: string) => (state: RootState) => {\n  const pipeline = selectStartedPipeline(uid)(state)\n  return pipeline.status\n}\n\nexport const selectPipelineIsCanceled = (uid: string) => (state: RootState) => {\n  const pipeline = selectStartedPipeline(uid)(state)\n  return pipeline.status === RUN_STATUS.CANCELED\n}\n\nexport const selectPipelineIsStartedSuccess =\n  (uid: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(uid)(state)\n    return pipeline.status === RUN_STATUS.START_SUCCESS\n  }\n\nexport const selectPipelineRunResult = (uid: string) => (state: RootState) => {\n  const pipeline = selectStartedPipeline(uid)(state)\n  return pipeline.runResult\n}\n\nexport const selectPipelineNodeResultSuccessList =\n  (uid: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(uid)(state)\n    return Object.entries(pipeline.runResult)\n      .map(([nodeId, nodeResult]) => {\n        return {\n          nodeId,\n          nodeResult,\n        }\n      })\n      .filter(isNodeResultSuccessAndNodeId)\n  }\n\n// selectPipelineNodeResultSuccessListの返り値の型を正しく認識させるためだけに作った\nfunction isNodeResultSuccessAndNodeId(arg: {\n  nodeId: string\n  nodeResult: NodeResult\n}): arg is {\n  nodeId: string\n  nodeResult: NodeResultSuccess\n} {\n  return isNodeResultSuccess(arg.nodeResult)\n}\n\nexport const selectPipelineNodeResultStatus =\n  (uid: string, nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(uid)(state)\n    if (Object.keys(pipeline.runResult).includes(nodeId)) {\n      return pipeline.runResult[nodeId].status\n    } else {\n      return null\n    }\n  }\n\nexport const selectPipelineNodeResultMessage =\n  (uid: string, nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(uid)(state)\n    if (Object.keys(pipeline.runResult).includes(nodeId)) {\n      return pipeline.runResult[nodeId].message\n    } else {\n      return null\n    }\n  }\n\nexport const selectPipelineNodeResultOutputKeyList =\n  (uid: string, nodeId: string) => (state: RootState) => {\n    const pipeline = selectStartedPipeline(uid)(state)\n    if (Object.keys(pipeline.runResult).includes(nodeId)) {\n      const nodeResult = pipeline.runResult[nodeId]\n      if (isNodeResultSuccess(nodeResult)) {\n        return Object.keys(nodeResult.outputPaths)\n      }\n    }\n    return []\n  }\n","export function arrayEqualityFn<T>(a: T[], b: T[]) {\n  return a === b || (a.length === b.length && a.every((v, i) => v === b[i]))\n}\n\nexport function twoDimarrayEqualityFn<T>(a: T[][], b: T[][]) {\n  return (\n    a === b ||\n    (a.length === b.length && a.every((v, i) => arrayEqualityFn(v, b[i])))\n  )\n}\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport {\n  alpha,\n  Typography,\n  useTheme,\n  Tooltip,\n  FormHelperText,\n  IconButton,\n  Button,\n  LinearProgress,\n} from '@mui/material'\nimport ErrorIcon from '@mui/icons-material/Error'\nimport Popover from '@mui/material/Popover'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { AlgorithmInfo } from 'store/slice/AlgorithmList/AlgorithmListType'\nimport {\n  selectAlgoArgs,\n  selectAlgoReturns,\n} from 'store/slice/AlgorithmList/AlgorithmListSelectors'\nimport { selectAlgorithmNodeDefined } from 'store/slice/AlgorithmNode/AlgorithmNodeSelectors'\nimport { NodeData } from 'store/slice/FlowElement/FlowElementType'\n\nimport { useHandleColor } from './HandleColorHook'\nimport { toHandleId, isValidConnection } from './FlowChartUtils'\nimport { toggleParamForm } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectPipelineLatestUid,\n  selectPipelineNodeResultMessage,\n  selectPipelineNodeResultOutputKeyList,\n  selectPipelineNodeResultStatus,\n} from 'store/slice/Pipeline/PipelineSelectors'\nimport { RootState } from 'store/store'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { NODE_RESULT_STATUS } from 'store/slice/Pipeline/PipelineType'\n\nconst leftHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  border: '1px solid',\n  borderRadius: 0,\n}\nconst rightHandleStyle: CSSProperties = {\n  width: '4%',\n  height: '13%',\n  border: '1px solid',\n  borderRadius: 0,\n}\n\nexport const AlgorithmNode = React.memo<NodeProps<NodeData>>((element) => {\n  const defined = useSelector(selectAlgorithmNodeDefined(element.id))\n  if (defined) {\n    return <AlgorithmNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst AlgorithmNodeImple = React.memo<NodeProps<NodeData>>(\n  ({ id: nodeId, selected: elementSelected, isConnectable, data }) => {\n    const theme = useTheme()\n    const dispatch = useDispatch()\n\n    const onClickParamButton = () => {\n      dispatch(toggleParamForm(nodeId))\n    }\n\n    const onClickDeleteIcon = () => {\n      dispatch(deleteFlowElementsById(nodeId))\n    }\n\n    const latestUid = useSelector(selectPipelineLatestUid)\n    const outputKeyList = useSelector(\n      (state: RootState) =>\n        latestUid != null\n          ? selectPipelineNodeResultOutputKeyList(latestUid, nodeId)(state)\n          : [],\n      arrayEqualityFn,\n    )\n\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '110%',\n          background: elementSelected\n            ? alpha(theme.palette.primary.light, 0.15)\n            : undefined,\n          border: '1px solid',\n        }}\n      >\n        <IconButton\n          aria-label=\"delete\"\n          style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n          onClick={onClickDeleteIcon}\n          size=\"large\"\n        >\n          <CloseOutlinedIcon />\n        </IconButton>\n        <AlgoName nodeId={nodeId} data={data} />\n        <Button size=\"small\" variant=\"outlined\" onClick={onClickParamButton}>\n          Param\n          {/* <DehazeIcon fontSize='small'/> */}\n        </Button>\n        <AlgoArgs nodeId={nodeId} />\n        <AlgoReturns nodeId={nodeId} isConnectable={isConnectable} />\n        {outputKeyList != null &&\n          outputKeyList.length > 0 &&\n          outputKeyList.map((outputKey) => <li>{outputKey}</li>)}\n      </div>\n    )\n  },\n)\n\nconst AlgoName = React.memo<{\n  nodeId: string\n  data: NodeData\n}>(({ nodeId, data }) => {\n  const theme = useTheme()\n  const latestUid = useSelector(selectPipelineLatestUid)\n\n  const message = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultMessage(latestUid, nodeId)(state) ?? null\n      : null,\n  )\n\n  const status = useSelector((state: RootState) =>\n    latestUid != null\n      ? selectPipelineNodeResultStatus(latestUid, nodeId)(state)\n      : 'uninitialized',\n  )\n  return (\n    <div\n      style={{\n        padding: 8,\n        paddingLeft: 8,\n      }}\n      className=\"algoName\"\n    >\n      {status === NODE_RESULT_STATUS.PENDING && <LinearProgress />}\n      <Typography\n        style={{\n          textAlign: 'left',\n          color:\n            status === NODE_RESULT_STATUS.ERROR\n              ? theme.palette.error.main\n              : undefined,\n        }}\n      >\n        {data.label}\n        <ErrorMessage\n          error={status === NODE_RESULT_STATUS.ERROR ? message : null}\n        />\n      </Typography>\n    </div>\n  )\n})\n\nconst AlgoArgs = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const algoArgs = useSelector(selectAlgoArgs(nodeId), algoInfoListEqualtyFn)\n\n  return (\n    <>\n      {algoArgs != null\n        ? algoArgs\n            .filter((info) => info.type !== 'params')\n            .map((algoInfo, i) => {\n              return <ArgHandle algoInfo={algoInfo} i={i} nodeId={nodeId} />\n            })\n        : null}\n    </>\n  )\n})\n\nconst AlgoReturns = React.memo<{\n  nodeId: string\n  isConnectable: boolean\n}>(({ nodeId, isConnectable }) => {\n  const algoReturns = useSelector(\n    selectAlgoReturns(nodeId),\n    algoInfoListEqualtyFn,\n  )\n  return (\n    <>\n      {algoReturns != null ? (\n        algoReturns?.map((algoInfo, i) => {\n          return <ReturnHandle algoInfo={algoInfo} i={i} nodeId={nodeId} />\n        })\n      ) : (\n        // algoReturns.lengthが0の場合の応急処置\n        <Handle\n          type=\"source\"\n          position={Position.Right}\n          id={`${nodeId}`}\n          style={{\n            ...rightHandleStyle,\n            top: 15,\n          }}\n          isConnectable={isConnectable}\n        />\n      )}\n    </>\n  )\n})\n\ntype HandleProps = {\n  algoInfo: AlgorithmInfo\n  nodeId: string\n  i: number\n}\n\nfunction hexToRgb(hex: string | undefined, isNone: boolean | undefined) {\n  if (hex !== undefined) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    if (result !== null) {\n      if (isNone) {\n        return `rgba(${parseInt(result[1], 16)}, ${parseInt(\n          result[2],\n          16,\n        )}, ${parseInt(result[3], 16)}, 0.55)`\n      } else {\n        return `rgba(${parseInt(result[1], 16)}, ${parseInt(\n          result[2],\n          16,\n        )}, ${parseInt(result[3], 16)}, 1)`\n      }\n    } else {\n      return undefined\n    }\n  } else {\n    return undefined\n  }\n}\n\nconst ArgHandle = React.memo<HandleProps>(\n  ({ algoInfo: { name, type, isNone }, nodeId, i }) => {\n    const hex_color = useHandleColor(type)\n    const id = toHandleId(nodeId, name, type)\n    const [isHover, setHover] = React.useState(false)\n    const rgb_color = hexToRgb(hex_color, isNone)\n    return (\n      <Handle\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        key={i.toFixed()}\n        type=\"target\"\n        position={Position.Left}\n        id={id}\n        style={{\n          ...leftHandleStyle,\n          background: rgb_color,\n          top: i * 25 + 15,\n        }}\n        isValidConnection={isValidConnection}\n      >\n        <Tooltip\n          title={\n            <>\n              <Typography color=\"inherit\">name: {name}</Typography>\n              <Typography color=\"inherit\">type: {type}</Typography>\n            </>\n          }\n          open={isHover}\n          placement=\"left-end\"\n          arrow\n        >\n          <div />\n        </Tooltip>\n      </Handle>\n    )\n  },\n)\n\nconst ReturnHandle = React.memo<HandleProps>(\n  ({ algoInfo: { name, type }, nodeId, i }) => {\n    const color = useHandleColor(type)\n    const id = toHandleId(nodeId, name, type)\n    const [isHover, setHover] = React.useState(false)\n    return (\n      <Handle\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        key={i.toFixed()}\n        type=\"source\"\n        position={Position.Right}\n        id={id}\n        style={{\n          ...rightHandleStyle,\n          background: color,\n          top: i * 25 + 15,\n        }}\n        isValidConnection={isValidConnection}\n      >\n        <Tooltip\n          title={\n            <>\n              <Typography color=\"inherit\">name: {name}</Typography>\n              <Typography color=\"inherit\">type: {type}</Typography>\n            </>\n          }\n          open={isHover}\n          placement=\"right-end\"\n          arrow\n        >\n          <div />\n        </Tooltip>\n      </Handle>\n    )\n  },\n)\n\nconst ErrorMessage = React.memo<{\n  error: string | null\n}>(({ error }) => {\n  const anchorElRef = React.useRef<HTMLButtonElement | null>(null)\n  const [open, setOpen] = React.useState(false)\n  const theme = useTheme()\n  if (error != null) {\n    return (\n      <>\n        <IconButton\n          ref={anchorElRef}\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n          size=\"small\"\n          style={{ color: theme.palette.error.main }}\n        >\n          <ErrorIcon />\n        </IconButton>\n        <Popover\n          open={open}\n          anchorEl={anchorElRef.current}\n          onClose={() => setOpen(false)}\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n          transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n        >\n          <div style={{ margin: 8 }}>\n            <FormHelperText error={true}>{error}</FormHelperText>\n          </div>\n        </Popover>\n      </>\n    )\n  } else {\n    return null\n  }\n})\n\nfunction algoInfoListEqualtyFn(\n  a: AlgorithmInfo[] | undefined,\n  b: AlgorithmInfo[] | undefined,\n) {\n  if (a != null && b != null) {\n    return (\n      a === b ||\n      (a.length === b.length &&\n        a.every((v, i) => v.type === b[i].type && v.name === b[i].name))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import { RootState } from 'store/store'\n\nconst selectDisplayData = (state: RootState) => state.displayData\n\nexport const selectTimeSeriesData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).timeSeries[filePath].data\n\nexport const selectTimeSeriesDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).timeSeries).includes(filePath)\n\nexport const selectTimeSeriesDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).timeSeries[filePath].pending\n\nexport const selectTimeSeriesDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).timeSeries[filePath].fulfilled\n\nexport const selectTimeSeriesDataError =\n  (filePath: string) => (state: RootState) =>\n    selectTimeSeriesDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).timeSeries[filePath].error\n      : null\n\nexport const selectHeatMapData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).heatMap[filePath].data\n\nexport const selectHeatMapDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).heatMap).includes(filePath)\n\nexport const selectHeatMapDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).heatMap[filePath].pending\n\nexport const selectHeatMapDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).heatMap[filePath].fulfilled\n\nexport const selectHeatMapDataError =\n  (filePath: string) => (state: RootState) =>\n    selectHeatMapDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).heatMap[filePath].error\n      : null\n\nexport const selectImageData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).image[filePath]\n\nexport const selectImageDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).image).includes(filePath)\n\nexport const selectImageDataError = (filePath: string) => (state: RootState) =>\n  selectImageDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).image[filePath].error\n    : null\n\nexport const selectImageDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectImageDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).image[filePath].pending\n\nexport const selectImageDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectImageDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).image[filePath].fulfilled\n\nexport const selectImageDataStartIndex =\n  (filePath: string) => (state: RootState) => {\n    if (!selectImageDataIsPending(filePath)(state)) {\n      return 0\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectImageDataEndIndex =\n  (filePath: string) => (state: RootState) => {\n    if (!selectImageDataIsPending(filePath)(state)) {\n      return selectImageData(filePath)(state).data.length - 1\n    } else {\n      return undefined\n    }\n  }\n\nexport const selectActiveImageData =\n  (filePath: string, activeIndex: number) => (state: RootState) => {\n    return selectImageData(filePath)(state).data[activeIndex]\n  }\n\nexport const selectCsvData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).csv[filePath].data\n\nexport const selectCsvDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).csv).includes(filePath)\n\nexport const selectCsvDataError = (filePath: string) => (state: RootState) =>\n  selectCsvDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).csv[filePath].error\n    : null\n\nexport const selectCsvDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectCsvDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).csv[filePath].pending\n\nexport const selectCsvDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectCsvDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).csv[filePath].fulfilled\n\nexport const selectRoiData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).roi[filePath]?.data[0] ?? []\n\nexport const selectRoiDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).roi).includes(filePath)\n\nexport const selectRoiDataError = (filePath: string) => (state: RootState) =>\n  selectRoiDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).roi[filePath].error\n    : null\n\nexport const selectRoiDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectRoiDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).roi[filePath].pending\n\nexport const selectRoiDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectRoiDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).roi[filePath].fulfilled\n\nexport const selectScatterData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).scatter[filePath]?.data ?? []\n\nexport const selectScatterDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).scatter).includes(filePath)\n\nexport const selectScatterDataError =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state)\n      ? selectDisplayData(state).scatter[filePath].error\n      : null\n\nexport const selectScatterDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).scatter[filePath].pending\n\nexport const selectScatterDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectScatterDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).scatter[filePath].fulfilled\n\nexport const selectBarData = (filePath: string) => (state: RootState) =>\n  selectDisplayData(state).bar[filePath]?.data ?? []\n\nexport const selectBarDataIsInitialized =\n  (filePath: string) => (state: RootState) =>\n    Object.keys(selectDisplayData(state).bar).includes(filePath)\n\nexport const selectBarDataError = (filePath: string) => (state: RootState) =>\n  selectBarDataIsInitialized(filePath)(state)\n    ? selectDisplayData(state).bar[filePath].error\n    : null\n\nexport const selectBarDataIsPending =\n  (filePath: string) => (state: RootState) =>\n    selectBarDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).bar[filePath].pending\n\nexport const selectBarDataIsFulfilled =\n  (filePath: string) => (state: RootState) =>\n    selectBarDataIsInitialized(filePath)(state) &&\n    selectDisplayData(state).bar[filePath].fulfilled\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport {\n  ImageData,\n  TimeSeriesData,\n  DISPLAY_DATA_SLICE_NAME,\n  HeatMapData,\n  CsvData,\n  RoiData,\n  ScatterData,\n  BarData,\n} from './DisplayDataType'\n\nexport const getTimeSeriesData = createAsyncThunk<\n  { data: TimeSeriesData },\n  { path: string; index: number }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getTimeSeriesData`,\n  async ({ path, index }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/timedata/${path}`, {\n        params: {\n          index: index,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getHeatMapData = createAsyncThunk<\n  { data: HeatMapData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getHeatMapData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/data/${path}`)\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getImageData = createAsyncThunk<\n  { data: ImageData },\n  { path: string; startIndex?: number; endIndex?: number }\n>(\n  `${DISPLAY_DATA_SLICE_NAME}/getImageData`,\n  async ({ path, startIndex, endIndex }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/image/${path}`, {\n        params: {\n          start_index: startIndex,\n          end_index: endIndex,\n        },\n      })\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getCsvData = createAsyncThunk<\n  {\n    data: CsvData\n  },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getCsvData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/csv/${path}`)\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getRoiData = createAsyncThunk<{ data: RoiData }, { path: string }>(\n  `${DISPLAY_DATA_SLICE_NAME}/getRoiData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/image/${path}`, {})\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\nexport const getScatterData = createAsyncThunk<\n  { data: ScatterData },\n  { path: string }\n>(`${DISPLAY_DATA_SLICE_NAME}/getScatterData`, async ({ path }, thunkAPI) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/outputs/data/${path}`, {})\n    return response.data\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const getBarData = createAsyncThunk<{ data: BarData }, { path: string }>(\n  `${DISPLAY_DATA_SLICE_NAME}/getBarData`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/outputs/data/${path}`, {})\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import React from 'react'\nimport { DATA_TYPE } from 'store/slice/DisplayData/DisplayDataType'\n\nexport const DisplayDataContext = React.createContext<{\n  nodeId: string | null\n  filePath: string\n  dataType: DATA_TYPE\n  itemId: number\n}>({ nodeId: '', filePath: '', dataType: 'csv', itemId: NaN })\n","import { DATA_TYPE, DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\n\nexport type VisualaizeItem = {\n  selectedItemId: number | null\n  items: {\n    [itemId: number]: VisualaizeItemType\n  }\n}\n\nexport type VisualaizeItemType = MultiPlotItem | DisplayDataItem\n\nexport interface ItemBaseType<T extends VISUALIZE_ITEM_TYPE> {\n  itemType: T\n}\n\nexport type ColorType = {\n  rgb: string\n  offset: string\n}\n\nexport const VISUALIZE_ITEM_TYPE_SET = {\n  MULTI_PLOT: 'MultiPlot',\n  DISPLAY_DATA: 'displayData',\n} as const\n\nexport type VISUALIZE_ITEM_TYPE =\n  typeof VISUALIZE_ITEM_TYPE_SET[keyof typeof VISUALIZE_ITEM_TYPE_SET]\n\nexport type DisplayDataItem =\n  | ImageItem\n  | TimeSeriesItem\n  | HeatMapItem\n  | CsvItem\n  | RoiItem\n  | ScatterItem\n  | BarItem\n  | HDF5Item\n\nexport interface DisplayDataItemBaseType extends ItemBaseType<'displayData'> {\n  filePath: string | null\n  nodeId: string | null\n  dataType: DATA_TYPE | null\n}\n\nexport interface MultiPlotItem extends ItemBaseType<'MultiPlot'> {\n  imageItem: ImageItem\n  timeSeriesItem: TimeSeriesItem\n  heatMapItem: HeatMapItem\n  otherItem?: DisplayDataItem\n}\n\nexport interface ImageItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.IMAGE\n  activeIndex: number\n  startIndex: number\n  endIndex: number\n  showticklabels: boolean\n  zsmooth: string | boolean\n  showline: boolean\n  showgrid: boolean\n  showscale: boolean\n  colors: ColorType[]\n  roiItem: RoiItem | null\n}\n\nexport interface TimeSeriesItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.TIME_SERIES\n  offset: boolean\n  span: number\n  showgrid: boolean\n  showline: boolean\n  showticklabels: boolean\n  zeroline: boolean\n  xrange: {\n    left: number | undefined\n    right: number | undefined\n  }\n  maxIndex: number\n  displayNumbers: number[]\n}\n\nexport interface HeatMapItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HEAT_MAP\n  showscale: boolean\n  colors: ColorType[]\n}\nexport interface CsvItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.CSV\n  setColumn: number | null\n  setIndex: boolean\n  transpose: boolean\n}\nexport interface RoiItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.ROI\n  // colors: ColorType[]\n}\n\nexport interface ScatterItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.SCATTER\n  xIndex: number\n  yIndex: number\n}\n\nexport interface BarItem extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.BAR\n}\n\nexport interface HDF5Item extends DisplayDataItemBaseType {\n  dataType: typeof DATA_TYPE_SET.HDF5\n}\n","import { DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\nimport {\n  VisualaizeItemType,\n  MultiPlotItem,\n  DisplayDataItem,\n  VISUALIZE_ITEM_TYPE_SET,\n  ImageItem,\n  TimeSeriesItem,\n  HeatMapItem,\n  RoiItem,\n  ScatterItem,\n  CsvItem,\n} from './VisualizeItemType'\n\nexport function isMultiPlotItem(\n  item: VisualaizeItemType,\n): item is MultiPlotItem {\n  return item.itemType === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT\n}\n\nexport function isDisplayDataItem(\n  item: VisualaizeItemType,\n): item is DisplayDataItem {\n  return item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA\n}\n\nexport function isImageItem(item: VisualaizeItemType): item is ImageItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.IMAGE\n  )\n}\n\nexport function isTimeSeriesItem(\n  item: VisualaizeItemType,\n): item is TimeSeriesItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.TIME_SERIES\n  )\n}\n\nexport function isCsvItem(item: VisualaizeItemType): item is CsvItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.CSV\n  )\n}\n\nexport function isHeatMapItem(item: VisualaizeItemType): item is HeatMapItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.HEAT_MAP\n  )\n}\n\nexport function isRoiItem(item: VisualaizeItemType): item is RoiItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.ROI\n  )\n}\n\nexport function isScatterItem(item: VisualaizeItemType): item is ScatterItem {\n  return (\n    item.itemType === VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA &&\n    item.dataType === DATA_TYPE_SET.SCATTER\n  )\n}\n","import { RootState } from 'store/store'\nimport { selectRoiData } from '../DisplayData/DisplayDataSelectors'\nimport { VISUALIZE_ITEM_TYPE_SET } from './VisualizeItemType'\nimport {\n  isDisplayDataItem,\n  isImageItem,\n  isTimeSeriesItem,\n  isHeatMapItem,\n  isMultiPlotItem,\n  isCsvItem,\n  isScatterItem,\n} from './VisualizeItemUtils'\n\nexport const selectSelectedVisualizeItemId = (state: RootState) =>\n  state.visualaizeItem.selectedItemId\n\nconst selectVisualizeItems = (state: RootState) => state.visualaizeItem.items\n\nexport const selectVisualizeItemIdList = (state: RootState) =>\n  Object.keys(selectVisualizeItems(state)).map((key) => Number(key))\n\nexport const selectVisualizeItemType = (itemId: number) => (state: RootState) =>\n  selectVisualizeItems(state)[itemId].itemType\n\nexport const selectVisualizeItemTypeIsMultiPlot =\n  (itemId: number) => (state: RootState) =>\n    selectVisualizeItemType(itemId)(state) ===\n    VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT\n\nexport const selectMultiPlotImageItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.imageItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotImageItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotImageItem(itemId)(state).nodeId\n\nexport const selectMultiPlotImageItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotImageItem(itemId)(state).filePath\n\nexport const selectMultiPlotTimeSeriesItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotRoiItem = (itemId: number) => (state: RootState) =>\n  selectMultiPlotImageItem(itemId)(state).roiItem\n\nexport const selectMultiPlotRoiItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotRoiItem(itemId)(state)?.nodeId ?? null\n\nexport const selectMultiPlotRoiItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotRoiItem(itemId)(state)?.filePath ?? null\n\nexport const selectMultiPlotTimeSeriesItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotTimeSeriesItem(itemId)(state).nodeId\n\nexport const selectMultiPlotTimeSeriesItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotTimeSeriesItem(itemId)(state).filePath\n\nexport const selectMultiPlotHeatMapItem =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      return item.heatMapItem\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotHeatMapItemNodeId =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotHeatMapItem(itemId)(state).nodeId\n\nexport const selectMultiPlotHeatMapItemFilePath =\n  (itemId: number) => (state: RootState) =>\n    selectMultiPlotHeatMapItem(itemId)(state).filePath\n\nexport const selectVisualizeDataType =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.dataType\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectVisualizeDataNodeId =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.nodeId\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectVisualizeDataFilePath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isDisplayDataItem(item)) {\n      return item.filePath\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.filePath\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectRoiItemNodeId = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.roiItem?.nodeId ?? null\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.roiItem?.nodeId ?? null\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectRoiItemFilePath = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.roiItem?.filePath ?? null\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.roiItem?.filePath ?? null\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectImageItemShowticklabels =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showticklabels\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showticklabels\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemZsmooth =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.zsmooth\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.zsmooth\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemStartIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.startIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.startIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemEndIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.endIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.endIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showline\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowGrid =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showgrid\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showgrid\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemShowScale =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.showscale\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.showscale\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectImageItemColors = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isImageItem(item)) {\n    return item.colors\n  } else if (isMultiPlotItem(item)) {\n    return item.imageItem.colors\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectImageItemActiveIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isImageItem(item)) {\n      return item.activeIndex\n    } else if (isMultiPlotItem(item)) {\n      return item.imageItem.activeIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemOffset =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.offset\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.offset\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemSpan =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.span\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.span\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowGrid =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showgrid\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showgrid\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showline\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemShowTickLabels =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.showticklabels\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.showticklabels\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemZeroLine =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.zeroline\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.zeroline\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemXrange =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.xrange\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.xrange\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectTimeSeriesItemDisplayNumbers =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      return item.displayNumbers\n    } else if (isMultiPlotItem(item)) {\n      return item.timeSeriesItem.displayNumbers\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectRoiItemIndex =\n  (itemId: number, roiFilePath: string | null) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isTimeSeriesItem(item)) {\n      const maxIdx = item.maxIndex\n      if (maxIdx !== 0) {\n        return maxIdx\n      }\n    } else if (isMultiPlotItem(item)) {\n      const maxIdx = item.timeSeriesItem.maxIndex\n      if (maxIdx !== 0) {\n        return maxIdx\n      }\n    }\n\n    if (roiFilePath !== null) {\n      return selectRoiItemMaxNumber(roiFilePath)(state)\n    } else {\n      return 0\n    }\n  }\n\nexport const selectRoiItemMaxNumber =\n  (roiFilePath: string) => (state: RootState) => {\n    const roiData = selectRoiData(roiFilePath)(state)\n    if (roiData.length !== 0) {\n      return Math.max(...roiData.map((arr) => Math.max(...arr)))\n    } else {\n      return 0\n    }\n  }\n\nexport const selectHeatMapItemShowScale =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isHeatMapItem(item)) {\n      return item.showscale\n    } else if (isMultiPlotItem(item)) {\n      return item.heatMapItem.showscale\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectHeatMapItemColors =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isHeatMapItem(item)) {\n      return item.colors\n    } else if (isMultiPlotItem(item)) {\n      return item.heatMapItem.colors\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemTranspose =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isCsvItem(item)) {\n      return item.transpose\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemSetColumn =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isCsvItem(item)) {\n      return item.setColumn\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectCsvItemSetIndex = (itemId: number) => (state: RootState) => {\n  const item = selectVisualizeItems(state)[itemId]\n  if (isCsvItem(item)) {\n    return item.setIndex\n  } else {\n    throw new Error('invalid VisualaizeItemType')\n  }\n}\n\nexport const selectScatterItemXIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isScatterItem(item)) {\n      return item.xIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectScatterItemYIndex =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isScatterItem(item)) {\n      return item.yIndex\n    } else {\n      throw new Error('invalid VisualaizeItemType')\n    }\n  }\n\nexport const selectMultiPlotTimeSeriesItemFilepath =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      const targetItem = selectMultiPlotTimeSeriesItem(itemId)(state)\n      const timeSeriesFilePath = targetItem.filePath\n      return timeSeriesFilePath\n    }\n    return null\n  }\n\nexport const selectMultiPlotTimeSeriesItemDisplayNumbers =\n  (itemId: number) => (state: RootState) => {\n    const item = selectVisualizeItems(state)[itemId]\n    if (isMultiPlotItem(item)) {\n      const targetItem = selectMultiPlotTimeSeriesItem(itemId)(state)\n      const displayNumbers = targetItem.displayNumbers\n      return displayNumbers\n    }\n    return null\n  }\n","import React from 'react'\nimport { LinearProgress, Typography } from '@mui/material'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectCsvData,\n  selectCsvDataError,\n  selectCsvDataIsFulfilled,\n  selectCsvDataIsInitialized,\n  selectCsvDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getCsvData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { CsvData } from 'store/slice/DisplayData/DisplayDataType'\nimport { DataGrid, GridColDef } from '@mui/x-data-grid'\nimport {\n  selectCsvItemSetColumn,\n  selectCsvItemSetIndex,\n  selectCsvItemTranspose,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nexport const CsvPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const isInitialized = useSelector(selectCsvDataIsInitialized(path))\n  const isPending = useSelector(selectCsvDataIsPending(path))\n  const isFulfilled = useSelector(selectCsvDataIsFulfilled(path))\n  const error = useSelector(selectCsvDataError(path))\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getCsvData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <CsvPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst CsvPlotImple = React.memo(() => {\n  const { itemId, filePath: path } = React.useContext(DisplayDataContext)\n  const transpose = useSelector(selectCsvItemTranspose(itemId))\n  const setColumn = useSelector(selectCsvItemSetColumn(itemId))\n  const setIndex = useSelector(selectCsvItemSetIndex(itemId))\n  return (\n    <PresentationalCsvPlot\n      path={path}\n      transpose={transpose}\n      setColumn={setColumn}\n      setIndex={setIndex}\n    />\n  )\n})\n\n/**\n * CsvFileNodeの設定時に表示するプレビューでも使用することを想定\n *\n * DisplayDataContextに依存しない\n */\nexport const PresentationalCsvPlot = React.memo<{\n  path: string\n  transpose: boolean\n  setColumn: number | null\n  setIndex: boolean\n}>(({ path, transpose, setIndex, setColumn }) => {\n  const data = useSelector(\n    selectCsvData(path),\n    (a: CsvData | undefined, b: CsvData | undefined) => {\n      if (a != null && b != null) {\n        return twoDimarrayEqualityFn(a, b)\n      } else {\n        return a === undefined && b === undefined\n      }\n    },\n  )\n\n  const csvData = React.useMemo(() => {\n    if (transpose) {\n      return data[0].map((col, i) => data.map((row) => row[i]))\n    }\n    return data\n  }, [data, transpose])\n\n  const columns: GridColDef[] = React.useMemo(() => {\n    const columnData = () => {\n      if (setColumn === null) {\n        return csvData[0]\n      } else {\n        if (setColumn >= csvData.length) {\n          return csvData[csvData.length - 1]\n        } else {\n          return csvData[setColumn]\n        }\n      }\n    }\n\n    if (setIndex) {\n      return [\n        { field: 'col0', headerName: 'index', width: 150 },\n        ...columnData().map((value, idx) => {\n          return {\n            field: `col${idx + 1}`,\n            headerName: `${setColumn === null ? idx : value}`,\n            width: 150,\n          }\n        }),\n      ]\n    } else {\n      return columnData().map((value, idx) => {\n        return {\n          field: `col${idx + 1}`,\n          headerName: `${setColumn === null ? idx : value}`,\n          width: 150,\n        }\n      })\n    }\n  }, [csvData, setColumn, setIndex])\n  const rows = csvData\n    .map((row, row_id) => {\n      let rowObj = Object.fromEntries(\n        [row_id, ...row].map((value, index) => {\n          return [`col${index}`, value]\n        }),\n      )\n      rowObj['id'] = row_id\n      return rowObj\n    })\n    .filter(\n      (value, idx) =>\n        setColumn === null || (setColumn !== null && idx > setColumn),\n    )\n\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  )\n})\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\nimport { alpha, useTheme } from '@mui/material/styles'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  IconButton,\n  DialogTitle,\n  DialogActions,\n  Switch,\n  FormControlLabel,\n  TextField,\n  Box,\n  LinearProgress,\n  Typography,\n} from '@mui/material'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  selectCsvInputNodeParamSetColumn,\n  selectCsvInputNodeParamSetIndex,\n  selectCsvInputNodeParamTranspose,\n  selectInputNodeDefined,\n  selectInputNodeSelectedFilePath,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport {\n  setCsvInputNodeParam,\n  setInputNodeFilePath,\n} from 'store/slice/InputNode/InputNodeSlice'\nimport { toHandleId } from './FlowChartUtils'\nimport { FileSelect } from './FileSelect'\nimport {\n  deleteFlowElementsById,\n  edifFlowElementsLabelById,\n} from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectCsvDataError,\n  selectCsvDataIsFulfilled,\n  selectCsvDataIsInitialized,\n  selectCsvDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getCsvData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { PresentationalCsvPlot } from 'components/Visualize/Plot/CsvPlot'\n\nconst sourceHandleStyle: CSSProperties = {\n  width: 8,\n  height: 15,\n  top: 15,\n  border: '1px solid',\n  borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const CsvFileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <CsvFileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst CsvFileNodeImple = React.memo<NodeProps>(({ id: nodeId, selected }) => {\n  const dispatch = useDispatch()\n  const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n  const onChangeFilePath = (path: string) => {\n    dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n    const fileName = path.split('/').reverse()[0]\n    dispatch(\n      edifFlowElementsLabelById({\n        nodeId,\n        fileName,\n      }),\n    )\n  }\n  const theme = useTheme()\n\n  const onClickDeleteIcon = () => {\n    dispatch(deleteFlowElementsById(nodeId))\n  }\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        width: '230px',\n        background: selected\n          ? alpha(theme.palette.primary.light, 0.1)\n          : undefined,\n      }}\n    >\n      <IconButton\n        aria-label=\"delete\"\n        style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n        onClick={onClickDeleteIcon}\n        size=\"large\"\n      >\n        <CloseOutlinedIcon />\n      </IconButton>\n      <FileSelect\n        onChangeFilePath={onChangeFilePath}\n        fileType={FILE_TYPE_SET.CSV}\n        filePath={filePath ? filePath.split('/').reverse()[0] : ''}\n      />\n      {!!filePath && <ParamSettingDialog nodeId={nodeId} filePath={filePath} />}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={toHandleId(nodeId, 'csv', 'CsvData')}\n        style={sourceHandleStyle}\n      />\n    </div>\n  )\n})\n\nconst ParamSettingDialog = React.memo<{ nodeId: string; filePath: string }>(\n  ({ nodeId, filePath }) => {\n    const [open, setOpen] = React.useState(false)\n    // OK時のみStoreに反映させるため一時的な値をuseStateで保持しておく。\n    // useStateの初期値はselectorで取得。\n    const [setColumn, setSetColumn] = React.useState(\n      useSelector(selectCsvInputNodeParamSetColumn(nodeId)),\n    )\n    const [setIndex, setSetIndex] = React.useState(\n      useSelector(selectCsvInputNodeParamSetIndex(nodeId)),\n    )\n    const [transpose, setTranspose] = React.useState(\n      useSelector(selectCsvInputNodeParamTranspose(nodeId)),\n    )\n    const dispatch = useDispatch()\n    const onClickCancel = () => {\n      setOpen(false)\n    }\n    const onClickOk = () => {\n      setOpen(false)\n      dispatch(\n        setCsvInputNodeParam({\n          nodeId,\n          param: { setColumn, setIndex, transpose },\n        }),\n      )\n    }\n\n    return (\n      <>\n        <Button onClick={() => setOpen(true)}>Settings</Button>\n        <Dialog open={open}>\n          <DialogTitle>Csv Setting</DialogTitle>\n          <DialogContent dividers>\n            <Box sx={{ display: 'flex', p: 1, m: 1, alignItems: 'flex-start' }}>\n              <FormControlLabel\n                sx={{ margin: (theme) => theme.spacing(0, 1, 0, 1) }}\n                control={\n                  <Switch\n                    checked={transpose}\n                    onChange={(event) => setTranspose(event.target.checked)}\n                  />\n                }\n                label=\"Transpose\"\n              />\n              <TextField\n                label=\"Column\"\n                sx={{\n                  width: 100,\n                  margin: (theme) => theme.spacing(0, 1, 0, 1),\n                }}\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={(event) => {\n                  const value = Number(event.target.value)\n                  if (value >= 0) {\n                    setSetColumn(Number(event.target.value))\n                  }\n                }}\n                value={setColumn}\n              />\n              <FormControlLabel\n                sx={{ margin: (theme) => theme.spacing(0, 1, 0, 1) }}\n                control={\n                  <Switch\n                    checked={setIndex}\n                    onChange={(event) => setSetIndex(event.target.checked)}\n                  />\n                }\n                label=\"Set Index\"\n              />\n            </Box>\n            <Typography variant=\"h6\">Preview</Typography>\n            <CsvPreview\n              filePath={filePath}\n              transpose={transpose}\n              setColumn={setColumn}\n              setIndex={setIndex}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n              cancel\n            </Button>\n            <Button onClick={onClickOk} color=\"primary\" variant=\"outlined\">\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </>\n    )\n  },\n)\n\nconst CsvPreview = React.memo<{\n  filePath: string\n  transpose: boolean\n  setColumn: number | null\n  setIndex: boolean\n}>(({ filePath: path, ...otherProps }) => {\n  const isInitialized = useSelector(selectCsvDataIsInitialized(path))\n  const isPending = useSelector(selectCsvDataIsPending(path))\n  const isFulfilled = useSelector(selectCsvDataIsFulfilled(path))\n  const error = useSelector(selectCsvDataError(path))\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getCsvData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <PresentationalCsvPlot path={path} {...otherProps} />\n  } else {\n    return null\n  }\n})\n","import { RootState } from '../../store'\n\nexport const selectHDF5 = (state: RootState) => {\n  if (state.hdf5 != null) {\n    return state.hdf5\n  } else {\n    return undefined\n  }\n}\n\nexport const selectHDF5Nodes = () => (state: RootState) =>\n  selectHDF5(state)?.tree\n\nexport const selectHDF5IsLatest = () => (state: RootState) =>\n  selectHDF5(state)?.isLatest ?? false\n\nexport const selectHDF5IsLoading = () => (state: RootState) =>\n  selectHDF5(state)?.isLoading ?? false\n","export const HDF5_SLICE_NAME = 'hdf5'\n\nexport type HDF5TreeDTO = HDF5DirDTO | HDF5FileDTO\n\nexport interface HDF5DirDTO {\n  isDir: true\n  name: string\n  nodes: HDF5TreeDTO[]\n  path: string\n}\n\nexport interface HDF5FileDTO {\n  isDir: false\n  name: string\n  shape: [number]\n  path: string\n  nbytes: string\n}\n\nexport interface HDF5Tree {\n  isLatest: boolean\n  isLoading: boolean\n  tree: HDF5TreeDTO[]\n}\n\nexport const HDF5_TYPE_SET = {\n  ALL: 'all',\n} as const\n\nexport type HDF5_TYPE = typeof HDF5_TYPE_SET[keyof typeof HDF5_TYPE_SET]\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\n\nimport { HDF5_SLICE_NAME, HDF5TreeDTO } from './HDF5Type'\n\nexport const getHDF5Tree = createAsyncThunk<HDF5TreeDTO[], { path: string }>(\n  `${HDF5_SLICE_NAME}/getHDF5Tree`,\n  async ({ path }, thunkAPI) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/hdf5/${path}`)\n      return response.data\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import React, { CSSProperties } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Handle, Position, NodeProps } from 'react-flow-renderer'\n\nimport { alpha, useTheme } from '@mui/material/styles'\nimport Dialog from '@mui/material/Dialog'\nimport TreeView from '@mui/lab/TreeView'\nimport TreeItem from '@mui/lab/TreeItem'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport IconButton from '@mui/material/IconButton'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport Button from '@mui/material/Button'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\n\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  selectInputNodeDefined,\n  selectInputNodeHDF5Path,\n  selectInputNodeSelectedFilePath,\n} from 'store/slice/InputNode/InputNodeSelectors'\nimport {\n  setInputNodeFilePath,\n  setInputNodeHDF5Path,\n} from 'store/slice/InputNode/InputNodeSlice'\nimport { toHandleId } from './FlowChartUtils'\nimport { FileSelect } from './FileSelect'\nimport {\n  deleteFlowElementsById,\n  edifFlowElementsLabelById,\n} from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectHDF5IsLatest,\n  selectHDF5IsLoading,\n  selectHDF5Nodes,\n} from 'store/slice/HDF5/HDF5Selectors'\nimport { getHDF5Tree } from 'store/slice/HDF5/HDF5Action'\nimport { HDF5TreeDTO } from 'store/slice/HDF5/HDF5Type'\nimport { Typography } from '@mui/material'\n\nconst sourceHandleStyle: CSSProperties = {\n  width: 8,\n  height: 15,\n  top: 15,\n  border: '1px solid',\n  borderColor: '#555',\n  borderRadius: 0,\n}\n\nexport const HDF5FileNode = React.memo<NodeProps>((element) => {\n  const defined = useSelector(selectInputNodeDefined(element.id))\n  if (defined) {\n    return <HDF5FileNodeImple {...element} />\n  } else {\n    return null\n  }\n})\n\nconst HDF5FileNodeImple = React.memo<NodeProps>(({ id: nodeId, selected }) => {\n  const dispatch = useDispatch()\n  const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n  const onChangeFilePath = (path: string) => {\n    dispatch(setInputNodeFilePath({ nodeId, filePath: path }))\n    const fileName = path.split('/').reverse()[0]\n    dispatch(\n      edifFlowElementsLabelById({\n        nodeId,\n        fileName,\n      }),\n    )\n  }\n  const theme = useTheme()\n\n  const onClickDeleteIcon = () => {\n    dispatch(deleteFlowElementsById(nodeId))\n  }\n\n  return (\n    <div\n      style={{\n        height: '100%',\n        width: '230px',\n        background: selected\n          ? alpha(theme.palette.primary.light, 0.1)\n          : undefined,\n      }}\n    >\n      <IconButton\n        aria-label=\"delete\"\n        style={{ color: 'black', position: 'absolute', top: -20, right: -5 }}\n        onClick={onClickDeleteIcon}\n      >\n        <CloseOutlinedIcon />\n      </IconButton>\n      <FileSelect\n        onChangeFilePath={onChangeFilePath}\n        fileType={FILE_TYPE_SET.HDF5}\n        filePath={filePath ? filePath.split('/').reverse()[0] : ''}\n      />\n      {filePath !== undefined && <ItemSelect nodeId={nodeId} />}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={toHandleId(nodeId, 'hdf5', 'HDF5Data')}\n        style={sourceHandleStyle}\n      />\n    </div>\n  )\n})\n\nconst ItemSelect = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const [open, setOpen] = React.useState(false)\n\n  const structureFileName = useSelector(selectInputNodeHDF5Path(nodeId))\n\n  return (\n    <>\n      <Button variant=\"outlined\" size=\"small\" onClick={() => setOpen(true)}>\n        {'Structure'}\n      </Button>\n      <Typography className=\"selectStructure\" variant=\"caption\">\n        {!!structureFileName ? structureFileName : 'No structure is selected.'}\n      </Typography>\n\n      <Dialog open={open} onClose={() => setOpen(false)} fullWidth>\n        <DialogTitle>{'Select File'}</DialogTitle>\n        <Structure nodeId={nodeId} />\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} variant=\"outlined\">\n            cancel\n          </Button>\n          <Button\n            onClick={() => setOpen(false)}\n            color=\"primary\"\n            variant=\"outlined\"\n            autoFocus\n          >\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n})\n\nconst Structure = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const theme = useTheme()\n  return (\n    <DialogContent dividers>\n      <div\n        style={{\n          height: 300,\n          overflow: 'auto',\n          marginBottom: theme.spacing(1),\n          border: '1px solid',\n          padding: theme.spacing(1),\n          borderColor: theme.palette.divider,\n        }}\n      >\n        <FileTreeView nodeId={nodeId} />\n      </div>\n    </DialogContent>\n  )\n})\n\nconst FileTreeView = React.memo<{\n  nodeId: string\n}>(({ nodeId }) => {\n  const [tree, isLoading] = useHDF5Tree(nodeId)\n  return (\n    <div>\n      {isLoading && <LinearProgress />}\n      <TreeView>\n        {tree?.map((node) => (\n          <TreeNode node={node} nodeId={nodeId} />\n        ))}\n      </TreeView>\n    </div>\n  )\n})\n\nconst TreeNode = React.memo<{\n  node: HDF5TreeDTO\n  nodeId: string\n}>(({ node, nodeId }) => {\n  const dispatch = useDispatch()\n\n  const onClickFile = (path: string) => {\n    dispatch(setInputNodeHDF5Path({ nodeId, path }))\n  }\n\n  if (node.isDir) {\n    // Directory\n    return (\n      <TreeItem\n        icon={<FolderIcon htmlColor=\"skyblue\" />}\n        nodeId={node.path}\n        label={node.name}\n      >\n        {node.nodes.map((childNode, i) => (\n          <TreeNode node={childNode} key={i} nodeId={nodeId} />\n        ))}\n      </TreeItem>\n    )\n  } else {\n    // File\n    return (\n      <TreeItem\n        icon={<InsertDriveFileOutlinedIcon fontSize=\"small\" />}\n        nodeId={node.path}\n        label={node.name + `   (shape=${node.shape}, nbytes=${node.nbytes})`}\n        onClick={() => onClickFile(node.path)}\n      />\n    )\n  }\n})\n\nfunction useHDF5Tree(nodeId: string): [HDF5TreeDTO[] | undefined, boolean] {\n  const dispatch = useDispatch()\n  const tree = useSelector(selectHDF5Nodes())\n  const isLatest = useSelector(selectHDF5IsLatest())\n  const isLoading = useSelector(selectHDF5IsLoading())\n  const filePath = useSelector(selectInputNodeSelectedFilePath(nodeId))\n  React.useEffect(() => {\n    if (!isLatest && !isLoading && filePath) {\n      dispatch(getHDF5Tree({ path: filePath }))\n    }\n  }, [isLatest, isLoading, filePath, dispatch])\n  return [tree, isLoading]\n}\n","import { useDispatch } from 'react-redux'\nimport {\n  EdgeProps,\n  getBezierPath,\n  getMarkerEnd,\n  getEdgeCenter,\n} from 'react-flow-renderer'\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined'\nimport { deleteFlowElementsById } from 'store/slice/FlowElement/FlowElementSlice'\n\nconst foreignObjectSize = 40\n\nexport const CustomEdge: React.FC<EdgeProps> = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {},\n  data,\n  arrowHeadType,\n  markerEndId,\n}) => {\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  })\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId)\n  const [edgeCenterX, edgeCenterY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n  })\n\n  const dispatch = useDispatch()\n\n  const onEdgeClick = () => {\n    dispatch(deleteFlowElementsById(id))\n  }\n\n  return (\n    <>\n      <path\n        id={id}\n        style={style}\n        className=\"react-flow__edge-path\"\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n      <foreignObject\n        width={foreignObjectSize}\n        height={foreignObjectSize}\n        x={edgeCenterX - foreignObjectSize / 2}\n        y={edgeCenterY - foreignObjectSize / 2}\n        className=\"edgebutton-foreignobject\"\n      >\n        <CloseOutlinedIcon onClick={onEdgeClick} />\n      </foreignObject>\n    </>\n  )\n}\n","import React, { useState, DragEvent, MouseEvent } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  Controls,\n  OnLoadParams,\n  Elements,\n  Connection,\n  Edge,\n  Node,\n  FlowTransform,\n} from 'react-flow-renderer'\n\nimport 'style/flow.css'\nimport {\n  NodeData,\n  NODE_TYPE_SET,\n} from 'store/slice/FlowElement/FlowElementType'\nimport { FILE_TYPE, FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport {\n  addFlowElementNode,\n  deleteFlowElements,\n  editFlowElementPositionById,\n  setFlowElements,\n  setFlowPosition,\n} from 'store/slice/FlowElement/FlowElementSlice'\nimport {\n  selectFlowElements,\n  selectFlowPosition,\n} from 'store/slice/FlowElement/FlowElementSelectors'\nimport { ImageFileNode } from './FlowChartNode/ImageFileNode'\nimport { AlgorithmNode } from './FlowChartNode/AlgorithmNode'\nimport { CsvFileNode } from './FlowChartNode/CsvFileNode'\nimport { HDF5FileNode } from './FlowChartNode/HDF5FileNode'\nimport { CustomEdge } from './CustomEdge'\nimport { nanoid } from '@reduxjs/toolkit'\n\nconst componentTypes = {\n  ImageFileNode,\n  CsvFileNode,\n  HDF5FileNode,\n  AlgorithmNode,\n} as const\n\nconst edgeTypes = {\n  buttonedge: CustomEdge,\n} as const\n\nexport const ReactFlowComponent = React.memo(() => {\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>()\n  const flowElements = useSelector(selectFlowElements)\n  const dispatch = useDispatch()\n\n  const onConnect = (params: Connection | Edge) => {\n    dispatch(\n      setFlowElements(\n        addEdge(\n          {\n            ...params,\n            animated: false,\n            style: { width: 5 },\n            type: 'buttonedge',\n          },\n          flowElements,\n        ),\n      ),\n    )\n  }\n\n  const onElementsRemove = (elementsToRemove: Elements) => {\n    dispatch(deleteFlowElements(elementsToRemove))\n  }\n\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\n    setReactFlowInstance(_reactFlowInstance)\n\n  const onDragOver = (event: DragEvent) => {\n    event.preventDefault()\n    event.dataTransfer.dropEffect = 'move'\n  }\n\n  const onDrop = (event: DragEvent) => {\n    event.preventDefault()\n    const id = nanoid()\n    if (reactFlowInstance) {\n      const position = reactFlowInstance.project({\n        x: event.clientX - 50 - 250,\n        y: event.clientY - 100,\n      })\n      const name = event.dataTransfer.getData('nodeName')\n      const nodeType = event.dataTransfer.getData('nodeType')\n      if (nodeType === NODE_TYPE_SET.INPUT) {\n        let fileType: FILE_TYPE = FILE_TYPE_SET.CSV\n        let componentType = ''\n        switch (event.dataTransfer.getData('fileType')) {\n          case FILE_TYPE_SET.CSV:\n            componentType = 'CsvFileNode'\n            break\n          case FILE_TYPE_SET.IMAGE:\n            componentType = 'ImageFileNode'\n            fileType = FILE_TYPE_SET.IMAGE\n            break\n          case FILE_TYPE_SET.HDF5:\n            componentType = 'HDF5FileNode'\n            fileType = FILE_TYPE_SET.HDF5\n            break\n        }\n\n        const newNode: Node<NodeData> = {\n          id,\n          type: componentType,\n          position,\n          data: { label: name, type: nodeType },\n        }\n        dispatch(\n          addFlowElementNode({ node: newNode, inputNodeInfo: { fileType } }),\n        )\n      } else if (nodeType === NODE_TYPE_SET.ALGORITHM) {\n        const functionPath = event.dataTransfer.getData('functionPath')\n        const newNode: Node<NodeData> = {\n          id,\n          type: 'AlgorithmNode',\n          position,\n          data: { label: name, type: nodeType },\n        }\n        dispatch(\n          addFlowElementNode({\n            node: newNode,\n            algoNodeInfo: { name, functionPath },\n          }),\n        )\n      }\n    }\n  }\n\n  const onNodeDragStop = (event: MouseEvent, node: Node) => {\n    dispatch(\n      editFlowElementPositionById({\n        nodeId: node.id,\n        coord: { x: node.position.x, y: node.position.y },\n      }),\n    )\n  }\n\n  const flowPosition = useSelector(selectFlowPosition)\n\n  const onMoveEnd = (event: FlowTransform | undefined) => {\n    if (event !== undefined) {\n      dispatch(setFlowPosition(event))\n    }\n  }\n\n  return (\n    <div className=\"flow\">\n      <ReactFlowProvider>\n        <div className=\"reactflow-wrapper\">\n          <ReactFlow\n            elements={flowElements}\n            onElementsRemove={onElementsRemove}\n            onConnect={onConnect}\n            onLoad={onLoad}\n            onDrop={onDrop}\n            onDragOver={onDragOver}\n            onNodeDragStop={onNodeDragStop}\n            nodeTypes={componentTypes}\n            edgeTypes={edgeTypes}\n            defaultPosition={[flowPosition.x, flowPosition.y]}\n            defaultZoom={flowPosition.zoom}\n            onMoveEnd={onMoveEnd}\n          >\n            <Controls />\n          </ReactFlow>\n        </div>\n      </ReactFlowProvider>\n    </div>\n  )\n})\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { NWB_SLICE_NAME } from './NWBType'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\n\nexport const getNWBParams = createAsyncThunk<ParamDTO, void>(\n  `${NWB_SLICE_NAME}/getNWBParams`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/nwb`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const NWB_SLICE_NAME = 'NWB'\n\nexport type NWBType = {\n  params: ParamMap\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { getNWBParams } from './NWBAction'\nimport { NWBType, NWB_SLICE_NAME } from './NWBType'\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\n\nconst initialState: NWBType = {\n  params: {},\n}\n\nexport const nwbSlice = createSlice({\n  name: NWB_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { path, newValue } = action.payload\n      const targetNode = getChildParam(path, state.params)\n      if (targetNode != null) {\n        targetNode.value = newValue\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getNWBParams.fulfilled, (state, action) => {\n      state.params = convertToParamMap(action.payload)\n    })\n  },\n})\n\nexport const { updateParam } = nwbSlice.actions\n\nexport default nwbSlice.reducer\n","import MuiAccordion, { AccordionProps } from '@mui/material/Accordion'\nimport { styled } from '@mui/material/styles'\n\nexport const Accordion = styled((props: AccordionProps) => (\n  <MuiAccordion disableGutters elevation={0} square {...props} />\n))(({ theme }) => ({\n  border: '1px solid',\n  borderColor: theme.palette.divider,\n  boxShadow: 'none',\n  '&:not(:last-child)': {\n    borderBottom: 0,\n  },\n  '&:before': {\n    display: 'none',\n  },\n}))\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AnyAction } from '@reduxjs/toolkit'\nimport Switch from '@mui/material/Switch'\nimport TextField from '@mui/material/TextField'\nimport Box from '@mui/material/Box'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport AccordionDetails from '@mui/material/AccordionDetails'\nimport AccordionSummary from '@mui/material/AccordionSummary'\nimport Typography from '@mui/material/Typography'\n\nimport { isParamChild } from 'store/utils/param/ParamUtils'\nimport { ParamType } from 'store/utils/param/ParamType'\nimport { RootState } from 'store/store'\nimport { Accordion } from 'components/Accordion'\n\ntype ParamSelectorType = (paramKey: string) => (state: RootState) => ParamType\ntype ParamValueSelectorType = (path: string) => (state: RootState) => unknown\ntype ParamUpdateActionCreatorType = (\n  path: string,\n  newValue: unknown,\n) => AnyAction\n\nexport type CreateParamFormItemComponentProps = {\n  paramSelector: ParamSelectorType\n  paramValueSelector: ParamValueSelectorType\n  paramUpdateActionCreator: ParamUpdateActionCreatorType\n}\n\nexport function createParamFormItemComponent({\n  paramSelector,\n  paramValueSelector,\n  paramUpdateActionCreator,\n}: CreateParamFormItemComponentProps): React.FC<{ paramKey: string }> {\n  function useParamValueUpdate(\n    path: string,\n  ): [unknown, (newValue: unknown) => AnyAction] {\n    const value = useSelector(paramValueSelector(path))\n    const updateParamAction = (newValue: unknown) => {\n      return paramUpdateActionCreator(path, newValue)\n    }\n    return [value, updateParamAction]\n  }\n  const ParamItemForString = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    const onChange = (\n      e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    ) => {\n      const newValue = e.target.value as string\n      dispatch(updateParamAction(newValue))\n    }\n    return <TextField value={value} onChange={onChange} multiline />\n  })\n  const ParamItemForNumber = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    if (typeof value === 'number') {\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue =\n          event.target.value === '' ? '' : Number(event.target.value)\n        if (typeof newValue === 'number') {\n          dispatch(updateParamAction(newValue))\n        }\n      }\n      return (\n        <TextField\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={value}\n          onChange={onChange}\n        />\n      )\n    } else {\n      return null\n    }\n  })\n  const ParamItemForBoolean = React.memo<ParamChildItemProps>(({ path }) => {\n    const dispatch = useDispatch()\n    const [value, updateParamAction] = useParamValueUpdate(path)\n    if (typeof value === 'boolean') {\n      const onChange = () => {\n        dispatch(updateParamAction(!value))\n      }\n      return <Switch checked={value} onChange={onChange} />\n    } else {\n      return null\n    }\n  })\n  const ParamItemForValueType = React.memo<ParamChildItemProps>(({ path }) => {\n    const [value] = useParamValueUpdate(path)\n    if (typeof value === 'number') {\n      return <ParamItemForNumber path={path} />\n    } else if (typeof value === 'string') {\n      return <ParamItemForString path={path} />\n    } else if (typeof value === 'boolean') {\n      return <ParamItemForBoolean path={path} />\n    } else {\n      return <ParamItemForString path={path} />\n    }\n  })\n  const ParamChildItem = React.memo<ParamChildItemProps & { name: string }>(\n    ({ path, name }) => {\n      return (\n        <Box\n          sx={{\n            display: 'flex',\n            marginTop: (theme) => theme.spacing(2),\n            marginBottom: (theme) => theme.spacing(2),\n            alignItems: 'center',\n            overflow: 'scroll',\n          }}\n        >\n          <Box\n            style={{ verticalAlign: 'middle' }}\n            sx={{\n              flexGrow: 1,\n              width: '50%',\n            }}\n          >\n            <Typography style={{ overflow: 'scroll' }}>{name}</Typography>\n          </Box>\n          <Box sx={{ width: '50%' }}>\n            <ParamItemForValueType path={path} />\n          </Box>\n        </Box>\n      )\n    },\n  )\n  const ParamItem = React.memo<ParamItemProps>(({ paramKey, param }) => {\n    if (isParamChild(param)) {\n      return <ParamChildItem path={param.path} name={paramKey} />\n    } else {\n      return (\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            {paramKey}\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              {Object.entries(param.children).map(([paramKey, param], i) => (\n                <ParamItem param={param} paramKey={paramKey} />\n              ))}\n            </div>\n          </AccordionDetails>\n        </Accordion>\n      )\n    }\n  })\n  return React.memo<{ paramKey: string }>(({ paramKey }) => {\n    const param = useSelector(paramSelector(paramKey)) // 一階層目\n    return <ParamItem paramKey={paramKey} param={param} />\n  })\n}\n\ntype ParamItemProps = {\n  paramKey: string\n  param: ParamType\n}\n\ntype ParamChildItemProps = {\n  path: string\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Button from '@mui/material/Button'\n\nimport { updateParam } from 'store/slice/NWB/NWBSlice'\nimport { getNWBParams } from 'store/slice/NWB/NWBAction'\nimport { toggleNwb } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectNwbParam,\n  selectNwbParamsKeyList,\n  selectNwbParamsValue,\n} from 'store/slice/NWB/NWBSelectors'\nimport { createParamFormItemComponent } from 'components/ParamFormItemCreator'\n\nexport const NWBSettingButton = React.memo(() => {\n  const dispatch = useDispatch()\n  const handleClick = () => {\n    dispatch(toggleNwb())\n  }\n  return (\n    <Button\n      variant=\"contained\"\n      onClick={handleClick}\n      sx={{\n        margin: (theme) => theme.spacing(1),\n      }}\n    >\n      NWB setting\n    </Button>\n  )\n})\n\nexport const NWBSettingContents = React.memo(() => {\n  const dispatch = useDispatch()\n\n  const paramKeyList = useSelector(selectNwbParamsKeyList, arrayEqualityFn)\n  useEffect(() => {\n    if (paramKeyList.length === 0) {\n      dispatch(getNWBParams())\n    }\n  })\n\n  return (\n    <div className=\"nwbParam\" style={{ margin: 4 }}>\n      {paramKeyList.map((paramKey, i) => (\n        <ParamItem key={i} paramKey={paramKey} />\n      ))}\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const Component = createParamFormItemComponent({\n    paramSelector: selectNwbParam,\n    paramValueSelector: selectNwbParamsValue,\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const SNAKEMAKE_SLICE_NAME = 'Snakemake'\n\nexport type SnakemakeType = {\n  params: ParamMap\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { SNAKEMAKE_SLICE_NAME } from './SnakemakeType'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\n\nexport const getSnakemakeParams = createAsyncThunk<ParamDTO, void>(\n  `${SNAKEMAKE_SLICE_NAME}/getSnakemakeParams`,\n  async (_, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/snakemake`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\nimport { getSnakemakeParams } from './SnakemakeAction'\nimport { SnakemakeType, SNAKEMAKE_SLICE_NAME } from './SnakemakeType'\n\nconst initialState: SnakemakeType = {\n  params: {},\n}\n\nexport const SnakemakeSlice = createSlice({\n  name: SNAKEMAKE_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { path, newValue } = action.payload\n      const target = getChildParam(path, state.params)\n      if (target != null) {\n        target.value = newValue\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getSnakemakeParams.fulfilled, (state, action) => {\n      state.params = convertToParamMap(action.payload)\n    })\n  },\n})\n\nexport const { updateParam } = SnakemakeSlice.actions\n\nexport default SnakemakeSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Button from '@mui/material/Button'\n\nimport { updateParam } from 'store/slice/Snakemake/SnakemakeSlice'\nimport { getSnakemakeParams } from 'store/slice/Snakemake/SnakemakeAction'\nimport { toggleSnakemake } from 'store/slice/RightDrawer/RightDrawerSlice'\nimport {\n  selectSnakemakeParam,\n  selectSnakemakeParamsKeyList,\n  selectSnakemakeParamsValue,\n} from 'store/slice/Snakemake/SnakemakeSelectors'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { createParamFormItemComponent } from 'components/ParamFormItemCreator'\n\nexport const SnakemakeButton = React.memo(() => {\n  const dispatch = useDispatch()\n  const handleClick = () => {\n    dispatch(toggleSnakemake())\n  }\n  return (\n    <Button\n      variant=\"contained\"\n      onClick={handleClick}\n      sx={{\n        margin: (theme) => theme.spacing(1),\n      }}\n    >\n      Snakemake\n    </Button>\n  )\n})\n\nexport const SnakemakeContents = React.memo(() => {\n  const dispatch = useDispatch()\n  const paramKeyList = useSelector(\n    selectSnakemakeParamsKeyList,\n    arrayEqualityFn,\n  )\n  useEffect(() => {\n    if (paramKeyList.length === 0) {\n      dispatch(getSnakemakeParams())\n    }\n  })\n  return (\n    <div className=\"SnakemakeParam\" style={{ margin: 4 }}>\n      {paramKeyList.map((paramKey, i) => (\n        <ParamItem key={i} paramKey={paramKey} />\n      ))}\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const Component = createParamFormItemComponent({\n    paramSelector: selectSnakemakeParam,\n    paramValueSelector: selectSnakemakeParamsValue,\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import React from 'react'\n\nimport Button from '@mui/material/Button'\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow'\nimport CloseIcon from '@mui/icons-material/Close'\n\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport { RUN_STATUS } from 'store/slice/Pipeline/PipelineType'\nimport { useSnackbar } from 'notistack'\n\nexport const RunButtons = React.memo<UseRunPipelineReturnType>((props) => {\n  const {\n    status,\n    filePathIsUndefined,\n    handleCancelPipeline,\n    handleRunPipeline,\n  } = props\n  const { enqueueSnackbar } = useSnackbar()\n  const onClickRun = () => {\n    if (!filePathIsUndefined) {\n      handleRunPipeline()\n    } else {\n      enqueueSnackbar('please select input file', { variant: 'error' })\n    }\n  }\n  const onClickCancel = () => {\n    handleCancelPipeline()\n  }\n\n  // タブ移動による再レンダリングするたびにスナックバーが実行されてしまう挙動を回避するために前回の値を保持\n  const [prevStatus, setPrevStatus] = React.useState(status)\n  React.useEffect(() => {\n    if (prevStatus !== status) {\n      if (status === RUN_STATUS.FINISHED) {\n        enqueueSnackbar('Finished', { variant: 'success' })\n      } else if (status === RUN_STATUS.ABORTED) {\n        enqueueSnackbar('Aborted', { variant: 'error' })\n      } else if (status === RUN_STATUS.CANCELED) {\n        enqueueSnackbar('Canceled', { variant: 'info' })\n      }\n      setPrevStatus(status)\n    }\n  }, [status, prevStatus, enqueueSnackbar])\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        endIcon={<PlayArrowIcon />}\n        onClick={onClickRun}\n        disabled={status === RUN_STATUS.START_SUCCESS}\n        sx={{\n          margin: (theme) => theme.spacing(1),\n        }}\n      >\n        Run\n      </Button>\n      <Button\n        variant=\"outlined\"\n        endIcon={<CloseIcon />}\n        onClick={onClickCancel}\n        sx={{\n          margin: (theme) => theme.spacing(1),\n        }}\n      >\n        Cancel\n      </Button>\n    </>\n  )\n})\n","import React from 'react'\nimport Box from '@mui/material/Box'\n\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\nimport { NWBSettingButton } from './FlowChart/NWB'\nimport { SnakemakeButton } from './FlowChart/Snakemake'\nimport { RunButtons } from './RunButtons'\n\nexport const ToolBar = React.memo<UseRunPipelineReturnType>((props) => (\n  <div style={{ width: '100%' }}>\n    <Box display=\"flex\" justifyContent=\"flex-end\" style={{ padding: 4 }}>\n      <SnakemakeButton />\n      <NWBSettingButton />\n      <RunButtons {...props} />\n    </Box>\n  </div>\n))\n","import { RootState } from 'store/store'\n\nexport const selectRightDrawerIsOpen = (state: RootState) =>\n  state.rightDrawer.open\n\nexport const selectRightDrawerMode = (state: RootState) =>\n  state.rightDrawer.mode\n\nexport const selectRightDrawerCurrentNodeId = (state: RootState) =>\n  state.rightDrawer.currendNodeId\n","import { ParamMap } from 'store/utils/param/ParamType'\n\nexport const ALGORITHM_NODE_SLICE_NAME = 'algorithmNode'\n\nexport type AlgorithmNode = {\n  [nodeId: string]: AlgrithmNodeType\n}\n\ntype AlgrithmNodeType = {\n  functionPath: string\n  name: string\n  params: ParamMap | null\n  selectedOutputKey: string | null\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BASE_URL } from 'const/API'\nimport { ParamDTO } from 'store/utils/param/ParamType'\nimport { ALGORITHM_NODE_SLICE_NAME } from './AlgorithmNodeType'\n\nexport const getAlgoParams = createAsyncThunk<\n  ParamDTO,\n  { nodeId: string; algoName: string }\n>(\n  `${ALGORITHM_NODE_SLICE_NAME}/getAlgoParams`,\n  async ({ algoName }, thunkAPI) => {\n    const { rejectWithValue } = thunkAPI\n    try {\n      const response = await axios.get(`${BASE_URL}/params/${algoName}`)\n      return response.data\n    } catch (e) {\n      return rejectWithValue(e)\n    }\n  },\n)\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { convertToParamMap, getChildParam } from 'store/utils/param/ParamUtils'\nimport {\n  addFlowElementNode,\n  deleteFlowElements,\n  deleteFlowElementsById,\n} from '../FlowElement/FlowElementSlice'\nimport { isNodeData } from '../FlowElement/FlowElementUtils'\nimport { NODE_TYPE_SET } from '../FlowElement/FlowElementType'\nimport { getAlgoParams } from './AlgorithmNodeActions'\nimport { ALGORITHM_NODE_SLICE_NAME, AlgorithmNode } from './AlgorithmNodeType'\n\nconst initialState: AlgorithmNode = {}\n\nexport const algorithmNodeSlice = createSlice({\n  name: ALGORITHM_NODE_SLICE_NAME,\n  initialState,\n  reducers: {\n    updateParam: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        // paramKey: string\n        path: string\n        newValue: unknown\n      }>,\n    ) => {\n      const { nodeId, path, newValue } = action.payload\n      const param = state[nodeId].params\n      if (param != null) {\n        const target = getChildParam(path, param)\n        if (target != null) {\n          target.value = newValue\n        }\n      }\n    },\n    setSelectedOutputKey: (\n      state,\n      action: PayloadAction<{\n        nodeId: string\n        selectedOutputKey: string\n      }>,\n    ) => {\n      const { nodeId, selectedOutputKey } = action.payload\n      state[nodeId].selectedOutputKey = selectedOutputKey\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getAlgoParams.fulfilled, (state, action) => {\n        const { nodeId } = action.meta.arg\n        state[nodeId].params = convertToParamMap(action.payload)\n      })\n      .addCase(addFlowElementNode, (state, action) => {\n        const { node, algoNodeInfo } = action.payload\n        if (\n          node.data?.type === NODE_TYPE_SET.ALGORITHM &&\n          algoNodeInfo != null\n        ) {\n          state[node.id] = {\n            ...algoNodeInfo,\n            params: null,\n            selectedOutputKey: null,\n          }\n        }\n      })\n      .addCase(deleteFlowElements, (state, action) => {\n        action.payload\n          .filter((node) => isNodeData(node))\n          .forEach((node) => {\n            if (node.data?.type === NODE_TYPE_SET.ALGORITHM) {\n              delete state[node.id]\n            }\n          })\n      })\n      .addCase(deleteFlowElementsById, (state, action) => {\n        if (Object.keys(state).includes(action.payload)) {\n          delete state[action.payload]\n        }\n      })\n  },\n})\n\nexport const { updateParam, setSelectedOutputKey } = algorithmNodeSlice.actions\nexport default algorithmNodeSlice.reducer\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Typography from '@mui/material/Typography'\n\nimport {\n  selectAlgorithmName,\n  selectAlgorithmParamsExit,\n  selectAlgorithmParamsKeyList,\n  selectAlgorithmParamsValue,\n  selectAlgorithmParam,\n} from 'store/slice/AlgorithmNode/AlgorithmNodeSelectors'\nimport { updateParam } from 'store/slice/AlgorithmNode/AlgorithmNodeSlice'\nimport { getAlgoParams } from 'store/slice/AlgorithmNode/AlgorithmNodeActions'\n\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { createParamFormItemComponent } from '../ParamFormItemCreator'\nimport { ParamFormContext } from './RightDrawer'\n\nexport const AlgorithmParamForm = React.memo(() => {\n  const nodeId = React.useContext(ParamFormContext)\n  const dispatch = useDispatch()\n  const algoName = useSelector(selectAlgorithmName(nodeId))\n  const algoParamIsLoaded = useSelector(selectAlgorithmParamsExit(nodeId))\n  const paramKeyList = useSelector(\n    selectAlgorithmParamsKeyList(nodeId),\n    arrayEqualityFn,\n  )\n  useEffect(() => {\n    if (!algoParamIsLoaded) {\n      dispatch(getAlgoParams({ nodeId, algoName }))\n    }\n  }, [dispatch, nodeId, algoName, algoParamIsLoaded])\n  return (\n    <div style={{ padding: 8 }}>\n      <Typography variant=\"h5\">{algoName}</Typography>\n      <div style={{ paddingLeft: 8 }}>\n        {paramKeyList.map((paramKey) => (\n          <ParamItem key={paramKey} paramKey={paramKey} />\n        ))}\n      </div>\n    </div>\n  )\n})\n\nconst ParamItem = React.memo<{ paramKey: string }>(({ paramKey }) => {\n  const nodeId = React.useContext(ParamFormContext)\n  const Component = createParamFormItemComponent({\n    paramSelector: (paramKey) => selectAlgorithmParam(nodeId, paramKey),\n    paramValueSelector: (path) => selectAlgorithmParamsValue(nodeId, path),\n    paramUpdateActionCreator: (path, newValue) =>\n      updateParam({ nodeId, path, newValue }),\n  })\n  return <Component paramKey={paramKey} />\n})\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport Toolbar from '@mui/material/Toolbar'\nimport Typography from '@mui/material/Typography'\nimport Divider from '@mui/material/Divider'\nimport IconButton from '@mui/material/IconButton'\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight'\nimport Box from '@mui/material/Box'\nimport {\n  selectRightDrawerCurrentNodeId,\n  selectRightDrawerIsOpen,\n  selectRightDrawerMode,\n} from 'store/slice/RightDrawer/RightDrawerSelectors'\nimport {\n  closeRightDrawer,\n  RIGHT_DRAWER_MODE,\n} from 'store/slice/RightDrawer/RightDrawerSlice'\nimport { NWBSettingContents } from './NWB'\nimport { RootState } from 'store/store'\nimport { AlgorithmParamForm } from './AlgorithmParamForm'\nimport { SnakemakeContents } from './Snakemake'\n\nconst RightDrawer: React.FC = () => {\n  const open = useSelector(selectRightDrawerIsOpen)\n  const dispatch = useDispatch()\n  const onClick = () => dispatch(closeRightDrawer())\n  const title = useSelector((state: RootState) => {\n    const mode = selectRightDrawerMode(state)\n    switch (mode) {\n      case RIGHT_DRAWER_MODE.NWB:\n        return 'NWB Setting'\n      case RIGHT_DRAWER_MODE.PARAM_FORM:\n        return 'Param From'\n      case RIGHT_DRAWER_MODE.SNAKEMAKE:\n        return 'Snakemake'\n      default:\n        return 'none'\n    }\n  })\n  return (\n    <StyledDrawer open={open} anchor=\"right\" variant=\"persistent\">\n      <Toolbar />\n      <Box display=\"flex\" alignItems=\"center\">\n        <IconButton color=\"inherit\" onClick={onClick} size=\"large\">\n          <ChevronRightIcon />\n        </IconButton>\n        <Typography variant=\"h6\">{title}</Typography>\n      </Box>\n      <Divider />\n      <MainContents>\n        <Contents />\n      </MainContents>\n    </StyledDrawer>\n  )\n}\n\nconst Contents: React.FC = () => {\n  const mode = useSelector(selectRightDrawerMode)\n  switch (mode) {\n    case RIGHT_DRAWER_MODE.NWB:\n      return <NWBSettingContents />\n    case RIGHT_DRAWER_MODE.PARAM_FORM:\n      return <ParamFormConetent />\n    case RIGHT_DRAWER_MODE.SNAKEMAKE:\n      return <SnakemakeContents />\n    default:\n      return null\n  }\n}\n\n/**\n * nodeId\n */\nexport const ParamFormContext = React.createContext<string>('')\n\nconst ParamFormConetent: React.FC = () => {\n  const nodeId = useSelector(selectRightDrawerCurrentNodeId)\n  if (nodeId != null) {\n    return (\n      <ParamFormContext.Provider value={nodeId}>\n        <AlgorithmParamForm />\n      </ParamFormContext.Provider>\n    )\n  } else {\n    return null\n  }\n}\n\nexport const rightDrawerWidth = 320\n\nconst StyledDrawer = styled(Drawer)({\n  width: rightDrawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: rightDrawerWidth,\n  },\n})\n\nconst MainContents = styled('main')({\n  height: '100%',\n})\n\nexport default RightDrawer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport { AlgorithmTreeView } from './TreeView'\nimport { ReactFlowComponent } from './ReactFlowComponent'\nimport { ToolBar } from '../ToolBar'\nimport RightDrawer, { rightDrawerWidth } from './RightDrawer'\nimport { selectRightDrawerIsOpen } from 'store/slice/RightDrawer/RightDrawerSelectors'\nimport { UseRunPipelineReturnType } from 'store/slice/Pipeline/PipelineHook'\n\nconst FlowChart = React.memo<UseRunPipelineReturnType>((props) => {\n  const open = useSelector(selectRightDrawerIsOpen)\n  return (\n    <RootDiv>\n      <StyledDrawer variant=\"permanent\">\n        <MuiToolbar />\n        <DrawerContents>\n          <AlgorithmTreeView />\n        </DrawerContents>\n      </StyledDrawer>\n      <MainContents open={open}>\n        <MuiToolbar />\n        <ToolBar {...props} />\n        <ReactFlowComponent />\n      </MainContents>\n      <RightDrawer />\n    </RootDiv>\n  )\n})\n\nexport const drawerWidth = 240\n\nconst RootDiv = styled('div')({\n  display: 'flex',\n})\n\nconst StyledDrawer = styled(Drawer)({\n  width: drawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: drawerWidth,\n  },\n})\n\nconst DrawerContents = styled('div')({\n  overflow: 'auto',\n})\n\nconst MainContents = styled('main')<{ open: boolean }>(\n  ({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    height: '100vh',\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginRight: -rightDrawerWidth,\n  }),\n  ({ open, theme }) =>\n    open\n      ? {\n          transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n          }),\n          marginRight: 0,\n        }\n      : undefined,\n)\n\nexport default FlowChart\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { DATA_TYPE, DATA_TYPE_SET } from '../DisplayData/DisplayDataType'\n\nimport {\n  MultiPlotItem,\n  HeatMapItem,\n  ImageItem,\n  CsvItem,\n  TimeSeriesItem,\n  RoiItem,\n  ScatterItem,\n  VisualaizeItem,\n  VISUALIZE_ITEM_TYPE_SET,\n  BarItem,\n  HDF5Item,\n} from './VisualizeItemType'\nimport {\n  isMultiPlotItem,\n  isDisplayDataItem,\n  isHeatMapItem,\n  isImageItem,\n  isTimeSeriesItem,\n  isCsvItem,\n  isScatterItem,\n} from './VisualizeItemUtils'\n\nexport const initialState: VisualaizeItem = {\n  items: {},\n  selectedItemId: null,\n}\nconst displayDataCommonInitialValue = {\n  itemType: VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA,\n  filePath: null,\n  nodeId: null,\n}\nconst imageItemInitialValue: ImageItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.IMAGE,\n  startIndex: 1,\n  endIndex: 10,\n  showticklabels: false,\n  showline: true,\n  zsmooth: 'best',\n  showgrid: false,\n  showscale: false,\n  colors: [\n    { rgb: `rgb(0, 0, 0)`, offset: '0' },\n    { rgb: `rgb(255, 255, 255)`, offset: '1.0' },\n  ],\n  activeIndex: 0,\n  roiItem: null,\n}\nconst timeSeriesItemInitialValue: TimeSeriesItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.TIME_SERIES,\n  offset: false,\n  span: 3,\n  showgrid: true,\n  showline: true,\n  showticklabels: true,\n  zeroline: false,\n  xrange: {\n    left: undefined,\n    right: undefined,\n  },\n  maxIndex: 0,\n  displayNumbers: [0],\n}\nconst heatMapItemInitialValue: HeatMapItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HEAT_MAP,\n  showscale: true,\n  colors: [\n    { rgb: `rgb(0, 0, 255)`, offset: '0' },\n    { rgb: `rgb(200, 200, 200)`, offset: '0.5' },\n    { rgb: `rgb(255, 0, 0)`, offset: '1.0' },\n  ],\n}\nconst csvItemInitialValue: CsvItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.CSV,\n  setColumn: null,\n  setIndex: false,\n  transpose: false,\n}\nconst roiItemInitialValue: RoiItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.ROI,\n}\nconst scatterItemInitialValue: ScatterItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.SCATTER,\n  xIndex: 0,\n  yIndex: 1,\n}\nconst barItemInitialValue: BarItem = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.BAR,\n}\nconst hdf5ItemInitialValue: HDF5Item = {\n  ...displayDataCommonInitialValue,\n  dataType: DATA_TYPE_SET.HDF5,\n}\n\nfunction getDisplayDataItemInitialValue(dataType: DATA_TYPE) {\n  switch (dataType) {\n    case DATA_TYPE_SET.IMAGE:\n      return imageItemInitialValue\n    case DATA_TYPE_SET.HEAT_MAP:\n      return heatMapItemInitialValue\n    case DATA_TYPE_SET.TIME_SERIES:\n      return timeSeriesItemInitialValue\n    case DATA_TYPE_SET.CSV:\n      return csvItemInitialValue\n    case DATA_TYPE_SET.ROI:\n      return roiItemInitialValue\n    case DATA_TYPE_SET.SCATTER:\n      return scatterItemInitialValue\n    case DATA_TYPE_SET.BAR:\n      return barItemInitialValue\n    case DATA_TYPE_SET.HDF5:\n      return hdf5ItemInitialValue\n  }\n}\n\nconst MultiPlotItemInitialValue: MultiPlotItem = {\n  itemType: VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT,\n  imageItem: imageItemInitialValue,\n  timeSeriesItem: timeSeriesItemInitialValue,\n  heatMapItem: heatMapItemInitialValue,\n}\nexport const visualaizeItemSlice = createSlice({\n  name: 'visualaizeItem',\n  initialState,\n  reducers: {\n    deleteVisualizeItem: (state, action: PayloadAction<number>) => {\n      const itemId = action.payload\n      delete state.items[itemId]\n      if (itemId === state.selectedItemId) {\n        state.selectedItemId = null\n      }\n    },\n    addInitialItem: (state) => {\n      const nextId = getMaxItemId(state) + 1\n      state.items[nextId] = getDisplayDataItemInitialValue(DATA_TYPE_SET.IMAGE)\n      state.selectedItemId = nextId\n    },\n    selectItem: (state, action: PayloadAction<number>) => {\n      state.selectedItemId = action.payload\n    },\n    setRoiItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (targetItem.imageItem.roiItem != null) {\n          targetItem.imageItem.roiItem.filePath = filePath\n          targetItem.imageItem.roiItem.nodeId = nodeId\n        } else {\n          targetItem.imageItem.roiItem = {\n            ...roiItemInitialValue,\n            filePath,\n            nodeId,\n          }\n        }\n      } else if (isImageItem(targetItem)) {\n        if (targetItem.roiItem != null) {\n          targetItem.roiItem.filePath = filePath\n          targetItem.roiItem.nodeId = nodeId\n        } else {\n          targetItem.roiItem = {\n            ...roiItemInitialValue,\n            filePath,\n            nodeId,\n          }\n        }\n      }\n    },\n    setFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n        dataType?: string\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId, dataType } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (dataType === DATA_TYPE_SET.IMAGE) {\n          targetItem.imageItem.filePath = filePath\n          targetItem.imageItem.nodeId = nodeId\n        } else if (dataType === DATA_TYPE_SET.TIME_SERIES) {\n          targetItem.timeSeriesItem.filePath = filePath\n          targetItem.timeSeriesItem.nodeId = nodeId\n        } else if (dataType === DATA_TYPE_SET.HEAT_MAP) {\n          targetItem.heatMapItem.filePath = filePath\n          targetItem.heatMapItem.nodeId = nodeId\n        }\n      } else if (isDisplayDataItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      } else {\n        throw new Error('error')\n      }\n    },\n    setImageItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.filePath = filePath\n        targetItem.imageItem.nodeId = nodeId\n      } else if (isImageItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setTimeSeriesItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.filePath = filePath\n        targetItem.timeSeriesItem.nodeId = nodeId\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setHeatMapItemFilePath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.filePath = filePath\n        targetItem.heatMapItem.nodeId = nodeId\n      } else if (isHeatMapItem(targetItem)) {\n        targetItem.filePath = filePath\n        targetItem.nodeId = nodeId\n      }\n    },\n    setDisplayDataPath: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        filePath: string\n        nodeId: string | null\n        dataType?: DATA_TYPE\n      }>,\n    ) => {\n      const { itemId, filePath, nodeId, dataType } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        if (dataType != null && targetItem.imageItem.dataType !== dataType) {\n          state.items[itemId] = {\n            ...getDisplayDataItemInitialValue(dataType),\n            filePath,\n            nodeId,\n          }\n        } else {\n          targetItem.imageItem.filePath = filePath\n          targetItem.imageItem.nodeId = nodeId\n        }\n      } else if (isDisplayDataItem(targetItem)) {\n        if (dataType != null && targetItem.dataType !== dataType) {\n          state.items[itemId] = {\n            ...getDisplayDataItemInitialValue(dataType),\n            filePath,\n            nodeId,\n          }\n        } else {\n          targetItem.filePath = filePath\n          targetItem.nodeId = nodeId\n        }\n      } else {\n        throw new Error('invalid VisualaizeItemType')\n      }\n    },\n    setItemType: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        type: typeof VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT | DATA_TYPE\n      }>,\n    ) => {\n      const { itemId, type } = action.payload\n      if (type === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT) {\n        state.items[itemId] = MultiPlotItemInitialValue\n      } else {\n        state.items[itemId] = getDisplayDataItemInitialValue(type)\n      }\n    },\n    toggleItemTypeMultiPlot: (state, action: PayloadAction<number>) => {\n      const itemId = action.payload\n      if (state.items[itemId].itemType === VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT) {\n        state.items[itemId] = {\n          ...getDisplayDataItemInitialValue(DATA_TYPE_SET.IMAGE), // FIXME dataTypeの型をNullableに変更して影響箇所も修正する\n        }\n      } else {\n        state.items[itemId] = MultiPlotItemInitialValue\n      }\n    },\n    resetImageActiveIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        startIndex?: number\n        endIndex?: number\n      }>,\n    ) => {\n      const { itemId, startIndex, endIndex } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex = 0\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex = 0\n        if (startIndex != null) {\n          targetItem.imageItem.startIndex = startIndex\n        }\n        if (endIndex != null) {\n          targetItem.imageItem.endIndex = endIndex\n        }\n      }\n    },\n    incrementImageActiveIndex: (\n      state,\n      action: PayloadAction<{ itemId: number }>,\n    ) => {\n      const { itemId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex++\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex++\n      }\n    },\n    decrementImageActiveIndex: (\n      state,\n      action: PayloadAction<{ itemId: number }>,\n    ) => {\n      const { itemId } = action.payload\n      const targetItem = state.items[itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.activeIndex--\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.activeIndex--\n      }\n    },\n    setImageItemShowticklabels: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showticklabels: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showticklabels = action.payload.showticklabels\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showticklabels = action.payload.showticklabels\n      }\n    },\n    setImageItemZsmooth: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        zsmooth: string | boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.zsmooth = action.payload.zsmooth\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.zsmooth = action.payload.zsmooth\n      }\n    },\n    setImageItemShowLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showline = action.payload.showline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showline = action.payload.showline\n      }\n    },\n    setImageItemShowGrid: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showgrid: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showgrid = action.payload.showgrid\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showgrid = action.payload.showgrid\n      }\n    },\n    setImageItemShowScale: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showscale: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.showscale = action.payload.showscale\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.showscale = action.payload.showscale\n      }\n    },\n    setImageItemColors: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        colors: {\n          rgb: string\n          offset: string\n        }[]\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.colors = action.payload.colors\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.colors = action.payload.colors\n      }\n    },\n    setImageItemStartIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        startIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.startIndex = action.payload.startIndex\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.startIndex = action.payload.startIndex\n      }\n    },\n    setImageItemEndIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        endIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isImageItem(targetItem)) {\n        targetItem.endIndex = action.payload.endIndex\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.imageItem.endIndex = action.payload.endIndex\n      }\n    },\n    setTimeSeriesItemOffset: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        offset: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.offset = action.payload.offset\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.offset = action.payload.offset\n      }\n    },\n    setTimeSeriesItemSpan: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        span: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.span = action.payload.span\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.span = action.payload.span\n      }\n    },\n    setTimeSeriesItemShowGrid: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showgrid: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showgrid = action.payload.showgrid\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showgrid = action.payload.showgrid\n      }\n    },\n    setTimeSeriesItemShowLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showline = action.payload.showline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showline = action.payload.showline\n      }\n    },\n    setTimeSeriesItemShowTickLabels: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showticklabels: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.showticklabels = action.payload.showticklabels\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.showticklabels = action.payload.showticklabels\n      }\n    },\n    setTimeSeriesItemZeroLine: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        zeroline: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.zeroline = action.payload.zeroline\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.zeroline = action.payload.zeroline\n      }\n    },\n    setTimeSeriesItemXrangeLeft: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        left: number | undefined\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.xrange.left = action.payload.left\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.xrange.left = action.payload.left\n      }\n    },\n    setTimeSeriesItemXrangeRight: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        right: number | undefined\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isTimeSeriesItem(targetItem)) {\n        targetItem.xrange.right = action.payload.right\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.xrange.right = action.payload.right\n      }\n    },\n    setTimeSeriesItemDisplayNumbers: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        displayNumbers: number[]\n      }>,\n    ) => {\n      const { itemId, displayNumbers } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.displayNumbers = displayNumbers\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.displayNumbers = displayNumbers\n      }\n    },\n    setTimeSeriesItemMaxIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        maxIndex: number\n      }>,\n    ) => {\n      const { itemId, maxIndex } = action.payload\n      const targetItem = state.items[itemId]\n      if (isMultiPlotItem(targetItem)) {\n        targetItem.timeSeriesItem.maxIndex = maxIndex\n      } else if (isTimeSeriesItem(targetItem)) {\n        targetItem.maxIndex = maxIndex\n      }\n    },\n    setHeatMapItemShowScale: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        showscale: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isHeatMapItem(targetItem)) {\n        targetItem.showscale = action.payload.showscale\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.showscale = action.payload.showscale\n      }\n    },\n    setHeatMapItemColors: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        colors: {\n          rgb: string\n          offset: string\n        }[]\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isHeatMapItem(targetItem)) {\n        targetItem.colors = action.payload.colors\n      } else if (isMultiPlotItem(targetItem)) {\n        targetItem.heatMapItem.colors = action.payload.colors\n      }\n    },\n    setCsvItemTranspose: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        transpose: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.transpose = action.payload.transpose\n      }\n    },\n    setCsvItemSetColumn: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        setColumn: number | null\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.setColumn = action.payload.setColumn\n      }\n    },\n    setCsvItemSetIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        setIndex: boolean\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isCsvItem(targetItem)) {\n        targetItem.setIndex = action.payload.setIndex\n      }\n    },\n    setScatterItemXIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        xIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isScatterItem(targetItem)) {\n        targetItem.xIndex = action.payload.xIndex\n      }\n    },\n    setScatterItemYIndex: (\n      state,\n      action: PayloadAction<{\n        itemId: number\n        yIndex: number\n      }>,\n    ) => {\n      const targetItem = state.items[action.payload.itemId]\n      if (isScatterItem(targetItem)) {\n        targetItem.yIndex = action.payload.yIndex\n      }\n    },\n  },\n})\n\nfunction getMaxItemId(state: VisualaizeItem) {\n  const idList = Object.keys(state.items).map((key) => Number(key))\n  const maxId = idList.length > 0 ? idList.reduce((a, b) => Math.max(a, b)) : 0\n  return maxId\n}\n\nexport const {\n  addInitialItem,\n  deleteVisualizeItem,\n  selectItem,\n  setItemType,\n  toggleItemTypeMultiPlot,\n  setFilePath,\n  setHeatMapItemFilePath,\n  setImageItemFilePath,\n  setTimeSeriesItemFilePath,\n  setRoiItemFilePath,\n  setDisplayDataPath,\n  resetImageActiveIndex,\n  incrementImageActiveIndex,\n  decrementImageActiveIndex,\n  setImageItemShowticklabels,\n  setImageItemZsmooth,\n  setImageItemShowLine,\n  setImageItemShowGrid,\n  setImageItemShowScale,\n  setImageItemColors,\n  setImageItemStartIndex,\n  setImageItemEndIndex,\n  setTimeSeriesItemOffset,\n  setTimeSeriesItemSpan,\n  setTimeSeriesItemShowGrid,\n  setTimeSeriesItemShowLine,\n  setTimeSeriesItemShowTickLabels,\n  setTimeSeriesItemZeroLine,\n  setTimeSeriesItemXrangeLeft,\n  setTimeSeriesItemXrangeRight,\n  setTimeSeriesItemDisplayNumbers,\n  setTimeSeriesItemMaxIndex,\n  setHeatMapItemShowScale,\n  setHeatMapItemColors,\n  setCsvItemTranspose,\n  setCsvItemSetColumn,\n  setCsvItemSetIndex,\n  setScatterItemXIndex,\n  setScatterItemYIndex,\n} = visualaizeItemSlice.actions\n\nexport default visualaizeItemSlice.reducer\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport AddIcon from '@mui/icons-material/Add'\nimport Button from '@mui/material/Button'\nimport { addInitialItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const VisualizeItemAddButton: React.FC = () => {\n  const dispatch = useDispatch()\n  const onClick = () => {\n    dispatch(addInitialItem())\n  }\n  return (\n    <StyledPaper elevation={1} variant=\"outlined\">\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"100%\"\n      >\n        <StyledButton onClick={onClick}>\n          <AddIcon fontSize=\"large\" color=\"primary\" />\n        </StyledButton>\n      </Box>\n    </StyledPaper>\n  )\n}\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  width: 260,\n  height: 255,\n  border: 'dashed',\n  borderWidth: 2,\n  borderColor: theme.palette.divider,\n  margin: theme.spacing(1),\n}))\n\nconst StyledButton = styled(Button)({\n  width: '100%',\n  height: '100%',\n})\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n  DisplayData,\n  DISPLAY_DATA_SLICE_NAME,\n} from './DisplayDataType'\nimport {\n  getCsvData,\n  getHeatMapData,\n  getImageData,\n  getTimeSeriesData,\n  getRoiData,\n  getScatterData,\n  getBarData,\n} from './DisplayDataActions'\n\nconst initialState: DisplayData = {\n  timeSeries: {},\n  heatMap: {},\n  image: {},\n  csv: {},\n  roi: {},\n  scatter: {},\n  bar: {},\n  hdf5: {},\n}\n\nexport const displayDataSlice = createSlice({\n  name: DISPLAY_DATA_SLICE_NAME,\n  initialState,\n  reducers: {\n    deleteDisplayItem: (\n      state,\n      action: PayloadAction<{\n        dataType: DATA_TYPE\n        filePath: string | null\n      }>,\n    ) => {\n      const { dataType, filePath } = action.payload\n      if (filePath !== null) {\n        if (dataType === DATA_TYPE_SET.IMAGE) {\n          delete state.image[filePath]\n        } else if (dataType === DATA_TYPE_SET.TIME_SERIES) {\n          delete state.timeSeries[filePath]\n        } else if (dataType === DATA_TYPE_SET.CSV) {\n          delete state.csv[filePath]\n        } else if (dataType === DATA_TYPE_SET.HEAT_MAP) {\n          delete state.heatMap[filePath]\n        } else if (dataType === DATA_TYPE_SET.ROI) {\n          delete state.roi[filePath]\n        } else if (dataType === DATA_TYPE_SET.SCATTER) {\n          delete state.scatter[filePath]\n        } else if (dataType === DATA_TYPE_SET.BAR) {\n          delete state.bar[filePath]\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getTimeSeriesData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        if (!state.timeSeries.hasOwnProperty(path)) {\n          state.timeSeries[path] = {\n            type: 'timeSeries',\n            data: {},\n            pending: true,\n            fulfilled: false,\n            error: null,\n          }\n        } else {\n          state.timeSeries[path].pending = true\n          state.timeSeries[path].fulfilled = false\n          state.timeSeries[path].error = null\n        }\n      })\n      .addCase(getTimeSeriesData.fulfilled, (state, action) => {\n        const { path, index } = action.meta.arg\n        state.timeSeries[path].pending = false\n        state.timeSeries[path].fulfilled = true\n        state.timeSeries[path].error = null\n        if (Object.keys(state.timeSeries[path].data).length === 0) {\n          state.timeSeries[path].data = action.payload.data\n        } else {\n          state.timeSeries[path].data[index] = action.payload.data[index]\n        }\n      })\n      .addCase(getTimeSeriesData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.timeSeries[path] = {\n          type: 'timeSeries',\n          data: {},\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getHeatMapData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getHeatMapData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getHeatMapData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.heatMap[path] = {\n          type: 'heatMap',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getImageData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getImageData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getImageData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.image[path] = {\n          type: 'image',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getCsvData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getCsvData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getCsvData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.csv[path] = {\n          type: 'csv',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getRoiData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getRoiData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getRoiData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.roi[path] = {\n          type: 'roi',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getScatterData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getScatterData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getScatterData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.scatter[path] = {\n          type: 'scatter',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n      .addCase(getBarData.pending, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: [],\n          pending: true,\n          fulfilled: false,\n          error: null,\n        }\n      })\n      .addCase(getBarData.fulfilled, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: action.payload.data,\n          pending: false,\n          fulfilled: true,\n          error: null,\n        }\n      })\n      .addCase(getBarData.rejected, (state, action) => {\n        const { path } = action.meta.arg\n        state.bar[path] = {\n          type: 'bar',\n          data: [],\n          pending: false,\n          fulfilled: false,\n          error: action.error.message ?? 'rejected',\n        }\n      })\n  },\n})\n\nexport const { deleteDisplayItem } = displayDataSlice.actions\n\nexport default displayDataSlice.reducer\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { deleteVisualizeItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport {\n  selectVisualizeDataFilePath,\n  selectVisualizeDataType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { deleteDisplayItem } from 'store/slice/DisplayData/DisplayDataSlice'\n\nexport const DisplayItemDeleteButton = React.memo<{ itemId: number }>(\n  ({ itemId }) => {\n    const dispatch = useDispatch()\n\n    const dataType = useSelector(selectVisualizeDataType(itemId))\n    const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n    const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n      e.stopPropagation() // 親divのonClickを反応させないため\n      dispatch(deleteVisualizeItem(itemId))\n      // visualize Itemで同じpathのデータ個数を調べて、1だったら、displayも削除\n      dispatch(deleteDisplayItem({ dataType, filePath }))\n    }\n    return (\n      <IconButton onClick={onClick} size=\"large\">\n        <CloseIcon />\n      </IconButton>\n    )\n  },\n)\n","import React, { useEffect } from 'react'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  Button,\n  LinearProgress,\n  MobileStepper,\n  Typography,\n  useTheme,\n} from '@mui/material'\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight'\n\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport { DisplayDataContext } from '../DataContext'\n\nimport {\n  selectImageDataError,\n  selectImageDataIsInitialized,\n  selectImageDataIsPending,\n  selectImageDataIsFulfilled,\n  selectActiveImageData,\n  selectRoiData,\n  selectImageDataEndIndex,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport {\n  getImageData,\n  getRoiData,\n  getTimeSeriesData,\n} from 'store/slice/DisplayData/DisplayDataActions'\nimport {\n  selectImageItemShowticklabels,\n  selectImageItemZsmooth,\n  selectImageItemShowLine,\n  selectImageItemShowGrid,\n  selectImageItemShowScale,\n  selectImageItemColors,\n  selectImageItemActiveIndex,\n  selectImageItemStartIndex,\n  selectImageItemEndIndex,\n  selectRoiItemFilePath,\n  selectMultiPlotTimeSeriesItemFilepath,\n  selectMultiPlotTimeSeriesItemDisplayNumbers,\n  selectRoiItemIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  decrementImageActiveIndex,\n  incrementImageActiveIndex,\n  setTimeSeriesItemDisplayNumbers,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { RootState } from 'store/store'\nimport { Datum, LayoutAxis, PlotData } from 'plotly.js'\nimport createColormap from 'colormap'\n\nexport const ImagePlot = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  const startIndex = useSelector(selectImageItemStartIndex(itemId))\n  const endIndex = useSelector(selectImageItemEndIndex(itemId))\n  const isPending = useSelector(selectImageDataIsPending(path))\n  const isInitialized = useSelector(selectImageDataIsInitialized(path))\n  const isFulfilled = useSelector(selectImageDataIsFulfilled(path))\n  const error = useSelector(selectImageDataError(path))\n\n  const roiFilePath = useSelector(selectRoiItemFilePath(itemId))\n\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(\n        getImageData({\n          path,\n          startIndex: startIndex ?? 1,\n          endIndex: endIndex ?? 10,\n        }),\n      )\n    }\n    if (roiFilePath != null) {\n      dispatch(getRoiData({ path: roiFilePath }))\n    }\n  }, [dispatch, isInitialized, path, startIndex, endIndex, roiFilePath])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <ImagePlotImple />\n  } else {\n    return null\n  }\n})\n\nconst ImagePlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const itemStartIndex = useSelector(selectImageItemStartIndex(itemId))\n  const itemEndIndex = useSelector(selectImageItemEndIndex(itemId))\n  const endIndex = useSelector(selectImageDataEndIndex(path))\n  const activeIndex = useSelector(selectImageItemActiveIndex(itemId))\n  const dispatch = useDispatch()\n  const handleNext = () => dispatch(incrementImageActiveIndex({ itemId }))\n  const handleBack = () => dispatch(decrementImageActiveIndex({ itemId }))\n  const theme = useTheme()\n  return (\n    <>\n      <MobileStepper\n        steps={itemEndIndex}\n        position=\"static\"\n        variant=\"text\"\n        activeStep={activeIndex + itemStartIndex - 1}\n        nextButton={\n          <Button\n            size=\"small\"\n            onClick={handleNext}\n            disabled={activeIndex === (endIndex ?? 0)}\n          >\n            <Typography>Next</Typography>\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowLeft />\n            ) : (\n              <KeyboardArrowRight />\n            )}\n          </Button>\n        }\n        backButton={\n          <Button\n            size=\"small\"\n            onClick={handleBack}\n            disabled={activeIndex === 0}\n          >\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowRight />\n            ) : (\n              <KeyboardArrowLeft />\n            )}\n            <Typography>Back</Typography>\n          </Button>\n        }\n      />\n      <ImagePlotChart activeIndex={activeIndex} />\n    </>\n  )\n})\n\nconst ImagePlotChart = React.memo<{\n  activeIndex: number\n}>(({ activeIndex }) => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const imageData = useSelector(\n    selectActiveImageData(path, activeIndex),\n    imageDataEqualtyFn,\n  )\n  const roiFilePath = useSelector(selectRoiItemFilePath(itemId))\n  const roiData = useSelector(\n    (state: RootState) =>\n      roiFilePath != null ? selectRoiData(roiFilePath)(state) : [],\n    imageDataEqualtyFn,\n  )\n\n  const showticklabels = useSelector(selectImageItemShowticklabels(itemId))\n  const showline = useSelector(selectImageItemShowLine(itemId))\n  const zsmooth = useSelector(selectImageItemZsmooth(itemId))\n  const showgrid = useSelector(selectImageItemShowGrid(itemId))\n  const showscale = useSelector(selectImageItemShowScale(itemId))\n  const colorscale = useSelector(selectImageItemColors(itemId))\n\n  const timeDataMaxIndex = useSelector(selectRoiItemIndex(itemId, roiFilePath))\n\n  const colorscaleRoi = createColormap({\n    colormap: 'jet',\n    nshades: 100, //timeDataMaxIndex >= 6 ? timeDataMaxIndex : 6,\n    format: 'hex',\n    alpha: 1,\n  })\n\n  const data = React.useMemo(\n    () => [\n      {\n        z: imageData,\n        type: 'heatmap',\n        name: 'images',\n        colorscale: colorscale.map((value) => {\n          let offset: number = parseFloat(value.offset)\n          const offsets: number[] = colorscale.map((v) => {\n            return parseFloat(v.offset)\n          })\n          // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n          if (offset === Math.max(...offsets)) {\n            offset = 1.0\n          }\n          if (offset === Math.min(...offsets)) {\n            offset = 0.0\n          }\n          return [offset, value.rgb]\n        }),\n        hoverongaps: false,\n        showscale: showscale,\n        zsmooth: zsmooth, // ['best', 'fast', false]\n        // showlegend: true,\n      },\n      {\n        z: roiData,\n        type: 'heatmap',\n        name: 'roi',\n        hovertemplate: 'cell id: %{z}',\n        colorscale: [...Array(timeDataMaxIndex)].map((_, i) => {\n          const new_i = Math.floor((i % 10) * 10 + i / 10)\n          const offset = i / (timeDataMaxIndex - 1)\n          const rgb = colorscaleRoi[new_i]\n          return [offset, rgb]\n        }),\n        zmin: 1,\n        zmax: timeDataMaxIndex,\n        hoverongaps: false,\n        zsmooth: false,\n        showscale: false,\n      },\n    ],\n    [\n      imageData,\n      roiData,\n      zsmooth,\n      showscale,\n      colorscale,\n      colorscaleRoi,\n      timeDataMaxIndex,\n    ],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 30, // top\n        l: 120, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      xaxis: {\n        autorange: true,\n        showgrid: showgrid,\n        showline: showline,\n        zeroline: false,\n        autotick: true,\n        ticks: '',\n        showticklabels: showticklabels,\n      },\n      yaxis: {\n        automargin: true,\n        autorange: 'reversed',\n        showgrid: showgrid,\n        showline: showline,\n        zeroline: false,\n        autotick: true, // todo\n        ticks: '',\n        showticklabels: showticklabels, // todo\n      },\n    }),\n    [path, showgrid, showline, showticklabels],\n  )\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n    height: '100%',\n  }\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const plotlyHeight = ref.current?.getBoundingClientRect().height\n\n  useEffect(() => {\n    const height =\n      ref.current?.getElementsByClassName('main-svg')[0].clientHeight\n    const plotContainer = (\n      ref.current?.getElementsByClassName(\n        'plot-container',\n      ) as HTMLCollectionOf<HTMLElement>\n    )[0]\n\n    if (height !== undefined && plotContainer !== undefined) {\n      plotContainer.style.height = `${height}px`\n    }\n  }, [plotlyHeight, activeIndex])\n\n  const dispatch = useDispatch()\n  const timeSeriesFilePath = useSelector(\n    selectMultiPlotTimeSeriesItemFilepath(itemId),\n  )\n  const displayNumbers = useSelector(\n    selectMultiPlotTimeSeriesItemDisplayNumbers(itemId),\n  )\n\n  const onClick = (event: any) => {\n    const points: PlotDatum = event.points[0]\n    if (\n      timeSeriesFilePath !== null &&\n      displayNumbers !== null &&\n      points.curveNumber >= 1 &&\n      !displayNumbers.includes(points.z - 1)\n    ) {\n      const newValue = [...displayNumbers, points.z - 1]\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: newValue,\n        }),\n      )\n      dispatch(\n        getTimeSeriesData({\n          path: timeSeriesFilePath,\n          index: points.z - 1,\n        }),\n      )\n    }\n  }\n\n  return (\n    <div ref={ref}>\n      <PlotlyChart\n        data={data}\n        layout={layout}\n        config={config}\n        onClick={onClick}\n      />\n    </div>\n  )\n})\n\nfunction imageDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\ninterface PlotDatum {\n  curveNumber: number\n  data: PlotData\n  customdata: Datum\n  pointIndex: number\n  pointNumber: number\n  x: Datum\n  xaxis: LayoutAxis\n  y: Datum\n  yaxis: LayoutAxis\n  z: number\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LegendClickEvent } from 'plotly.js'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectTimeSeriesData,\n  selectTimeSeriesDataError,\n  selectTimeSeriesDataIsFulfilled,\n  selectTimeSeriesDataIsInitialized,\n  selectTimeSeriesDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getTimeSeriesData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { TimeSeriesData } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectTimeSeriesItemDisplayNumbers,\n  selectTimeSeriesItemOffset,\n  selectTimeSeriesItemShowGrid,\n  selectTimeSeriesItemShowLine,\n  selectTimeSeriesItemShowTickLabels,\n  selectTimeSeriesItemSpan,\n  selectTimeSeriesItemXrange,\n  selectTimeSeriesItemZeroLine,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport createColormap from 'colormap'\nimport { setTimeSeriesItemDisplayNumbers } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const TimeSeriesPlot = React.memo(() => {\n  const { itemId, filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n  const isPending = useSelector(selectTimeSeriesDataIsPending(path))\n  const isInitialized = useSelector(selectTimeSeriesDataIsInitialized(path))\n  const error = useSelector(selectTimeSeriesDataError(path))\n  const isFulfilled = useSelector(selectTimeSeriesDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      displayNumbers.map((v) => dispatch(getTimeSeriesData({ path, index: v })))\n    }\n  }, [dispatch, isInitialized, path, displayNumbers])\n\n  if (!isInitialized) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isPending || isFulfilled) {\n    return <TimeSeriesPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst TimeSeriesPlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  // 0番のデータとkeysだけをとってくる\n  const dispatch = useDispatch()\n  const timeSeriesData = useSelector(\n    selectTimeSeriesData(path),\n    timeSeriesDataEqualityFn,\n  )\n\n  const offset = useSelector(selectTimeSeriesItemOffset(itemId))\n  const span = useSelector(selectTimeSeriesItemSpan(itemId))\n  const showgrid = useSelector(selectTimeSeriesItemShowGrid(itemId))\n  const showline = useSelector(selectTimeSeriesItemShowLine(itemId))\n  const showticklabels = useSelector(selectTimeSeriesItemShowTickLabels(itemId))\n  const zeroline = useSelector(selectTimeSeriesItemZeroLine(itemId))\n  const xrange = useSelector(selectTimeSeriesItemXrange(itemId))\n  const displayNumbers = useSelector(selectTimeSeriesItemDisplayNumbers(itemId))\n\n  const colorScale = createColormap({\n    colormap: 'jet',\n    nshades: 100, //maxIndex >= 6 ? maxIndex : 6,\n    format: 'hex',\n    alpha: 1,\n  })\n\n  const data = React.useMemo(() => {\n    if (timeSeriesData === null) {\n      return []\n    }\n    return Object.keys(timeSeriesData).map((key, i) => {\n      let y = Object.values(timeSeriesData[key])\n      const new_i = Math.floor((i % 10) * 10 + i / 10) % 100\n\n      if (displayNumbers.includes(i)) {\n        if (offset) {\n          const activeIdx: number = displayNumbers.findIndex(\n            (value) => value === i,\n          )\n          const mean: number = y.reduce((a, b) => a + b) / y.length\n          const std: number =\n            span *\n            Math.sqrt(y.reduce((a, b) => a + Math.pow(b - mean, 2)) / y.length)\n          const newArray = y.map((value) => (value - mean) / std + activeIdx)\n          return {\n            name: `(${String(parseInt(key) + 1)})`,\n            x: Object.keys(timeSeriesData[key]),\n            y: newArray,\n            visible: true,\n            line: { color: colorScale[new_i] },\n          }\n        } else {\n          return {\n            name: `(${String(parseInt(key) + 1)})`,\n            x: Object.keys(timeSeriesData[key]),\n            y: y,\n            visible: true,\n            line: { color: colorScale[new_i] },\n          }\n        }\n      } else {\n        return {\n          name: `(${String(parseInt(key) + 1)})`,\n          x: Object.keys(timeSeriesData[key]),\n          y: y,\n          visible: 'legendonly',\n          line: { color: colorScale[new_i] },\n        }\n      }\n    })\n  }, [timeSeriesData, displayNumbers, offset, span, colorScale])\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n      height: 300,\n      xaxis: {\n        range: [xrange.left, xrange.right],\n        showgrid: showgrid,\n        showline: showline,\n        showticklabels: showticklabels,\n        zeroline: zeroline,\n      },\n      yaxis: {\n        showgrid: showgrid,\n        showline: showline,\n        showticklabels: showticklabels,\n        zeroline: zeroline,\n      },\n    }),\n    [path, xrange, showgrid, showline, showticklabels, zeroline],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  const onClick = (event: LegendClickEvent) => {\n    const clickNumber = event.curveNumber\n    if (displayNumbers.includes(clickNumber)) {\n      const newValue = displayNumbers.filter((value) => value !== clickNumber)\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: newValue,\n        }),\n      )\n    } else {\n      const newValue = [...displayNumbers, clickNumber]\n      dispatch(\n        setTimeSeriesItemDisplayNumbers({\n          itemId,\n          displayNumbers: newValue,\n        }),\n      )\n      dispatch(getTimeSeriesData({ path, index: clickNumber }))\n    }\n    return false\n  }\n\n  return (\n    <PlotlyChart\n      data={data}\n      layout={layout}\n      config={config}\n      onLegendClick={onClick}\n    />\n  )\n})\n\nfunction timeSeriesDataEqualityFn(\n  a: TimeSeriesData | undefined,\n  b: TimeSeriesData | undefined,\n) {\n  if (a != null && b != null) {\n    const aArray = Object.entries(a)\n    const bArray = Object.entries(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every(([aKey, aValue], i) => {\n          const [bKey, bValue] = bArray[i]\n          return bKey === aKey && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\nfunction nestEqualityFun(\n  a: {\n    [key: number]: number\n  },\n  b: {\n    [key: number]: number\n  },\n) {\n  const aArray = Object.entries(a)\n  const bArray = Object.entries(b)\n  return (\n    a === b ||\n    (aArray.length === bArray.length &&\n      aArray.every(([aKey, aValue], i) => {\n        const [bKey, bValue] = bArray[i]\n        return bKey === aKey && bValue === aValue\n      }))\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectHeatMapData,\n  selectHeatMapDataError,\n  selectHeatMapDataIsFulfilled,\n  selectHeatMapDataIsInitialized,\n  selectHeatMapDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getHeatMapData } from 'store/slice/DisplayData/DisplayDataActions'\nimport {\n  selectHeatMapItemColors,\n  selectHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nexport const HeatMapPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectHeatMapDataIsPending(path))\n  const isInitialized = useSelector(selectHeatMapDataIsInitialized(path))\n  const error = useSelector(selectHeatMapDataError(path))\n  const isFulfilled = useSelector(selectHeatMapDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getHeatMapData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <HeatMapImple />\n  } else {\n    return null\n  }\n})\n\nconst HeatMapImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n  const heatMapData = useSelector(selectHeatMapData(path), heatMapDataEqualtyFn)\n  const showscale = useSelector(selectHeatMapItemShowScale(itemId))\n  const colorscale = useSelector(selectHeatMapItemColors(itemId))\n\n  const data = React.useMemo(\n    () =>\n      heatMapData != null\n        ? [\n            {\n              z: heatMapData,\n              x: heatMapData.map((_, i) => i),\n              y: heatMapData[0].map((_, i) => i),\n              type: 'heatmap',\n              name: 'heatmap',\n              colorscale: colorscale.map((value) => {\n                let offset: number = parseFloat(value.offset)\n                const offsets: number[] = colorscale.map((v) => {\n                  return parseFloat(v.offset)\n                })\n                // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n                if (offset === Math.max(...offsets)) {\n                  offset = 1.0\n                }\n                if (offset === Math.min(...offsets)) {\n                  offset = 0.0\n                }\n                return [offset, value.rgb]\n              }),\n              hoverongaps: false,\n              showlegend: true,\n              showscale: showscale,\n            },\n          ]\n        : [],\n    [heatMapData, showscale, colorscale],\n  )\n\n  const layout = {\n    title: path.split('/').reverse()[0],\n    dragmode: 'pan',\n    margin: {\n      t: 60, // top\n      l: 50, // left\n      b: 30, // bottom\n    },\n    autosize: true,\n    height: 350,\n  }\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  return <PlotlyChart data={data} layout={layout} config={config} />\n})\n\nfunction heatMapDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport FormControl from '@mui/material/FormControl'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport FormHelperText from '@mui/material/FormHelperText'\nimport Select from '@mui/material/Select'\nimport ListSubheader from '@mui/material/ListSubheader'\n\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport { FILE_TYPE } from 'store/slice/InputNode/InputNodeType'\nimport { RootState } from 'store/store'\nimport { selectInputNode } from 'store/slice/InputNode/InputNodeSelectors'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { selectNodeLabelById } from 'store/slice/FlowElement/FlowElementSelectors'\nimport {\n  selectPipelineLatestUid,\n  selectPipelineNodeResultSuccessList,\n} from 'store/slice/Pipeline/PipelineSelectors'\n\nexport const FilePathSelect: React.FC<{\n  dataType?: DATA_TYPE\n  selectedNodeId: string | null\n  selectedFilePath: string | null\n  onSelect: (nodeId: string, filePath: string, dataType: DATA_TYPE) => void\n  label?: string\n}> = ({ dataType, selectedNodeId, selectedFilePath, onSelect, label }) => {\n  const inputNodeFilePathInfoList = useSelector(\n    (state: RootState) => {\n      const inputNodes = selectInputNode(state)\n      return Object.entries(inputNodes)\n        .map(([nodeId, inputNode]) => ({\n          nodeId,\n          filePath: inputNode.selectedFilePath,\n          fileType: inputNode.fileType,\n          dataType: toDataTypeFromFileType(inputNode.fileType),\n          nodeName: selectNodeLabelById(nodeId)(state),\n        }))\n        .filter(({ filePath }) => filePath != null)\n        .filter(({ dataType: inputNodeDataType }) =>\n          dataType != null ? inputNodeDataType === dataType : true,\n        )\n    },\n    // todo 比較関数\n  )\n\n  const latestUid = useSelector(selectPipelineLatestUid)\n\n  const algorithmNodeOutputPathInfoList = useSelector((state: RootState) => {\n    if (latestUid != null) {\n      const runResult = selectPipelineNodeResultSuccessList(latestUid)(state)\n      return runResult.map(({ nodeId, nodeResult }) => {\n        return {\n          nodeId,\n          nodeName: selectNodeLabelById(nodeId)(state),\n          paths: Object.entries(nodeResult.outputPaths)\n            .map(([outputKey, value]) => {\n              return {\n                outputKey,\n                filePath: value.path,\n                type: value.type,\n              }\n            })\n            .filter(({ type }) =>\n              dataType != null ? type === dataType : true,\n            ),\n        }\n      })\n    } else {\n      return []\n    }\n  })\n\n  const [open, setOpen] = React.useState(false)\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const onSelectHandle = (\n    nodeId: string,\n    filePath: string,\n    dataType: DATA_TYPE,\n  ) => {\n    onSelect(nodeId, filePath, dataType)\n    handleClose()\n  }\n\n  const menuItemList: React.ReactElement[] = []\n  inputNodeFilePathInfoList.forEach((pathInfo) => {\n    menuItemList.push(\n      <MenuItem\n        value={`${pathInfo.nodeId}/${pathInfo.filePath}`}\n        onClick={() =>\n          onSelectHandle(\n            pathInfo.nodeId,\n            pathInfo.filePath ?? '',\n            pathInfo.dataType,\n          )\n        }\n        key={pathInfo.nodeId}\n      >\n        {pathInfo.nodeName}\n      </MenuItem>,\n    )\n  })\n  algorithmNodeOutputPathInfoList.forEach((pathInfo) => {\n    menuItemList.push(<ListSubheader>{pathInfo.nodeName}</ListSubheader>)\n    pathInfo.paths.forEach((outputPath, i) => {\n      menuItemList.push(\n        <MenuItem\n          value={`${pathInfo.nodeId}/${outputPath.filePath}`}\n          onClick={() =>\n            onSelectHandle(\n              pathInfo.nodeId,\n              outputPath.filePath,\n              outputPath.type,\n            )\n          }\n          key={`${pathInfo.nodeId}/${outputPath.filePath}`}\n        >\n          {outputPath.outputKey}\n        </MenuItem>,\n      )\n    })\n  })\n\n  return (\n    <FormControl style={{ minWidth: 150, maxWidth: 220 }}>\n      <InputLabel>{!!label ? label : 'Select Item'}</InputLabel>\n      <Select\n        value={`${selectedNodeId}/${selectedFilePath}`}\n        open={open}\n        onClose={handleClose}\n        onOpen={handleOpen}\n      >\n        {menuItemList}\n      </Select>\n      {inputNodeFilePathInfoList.length +\n        algorithmNodeOutputPathInfoList.length ===\n        0 && <FormHelperText error={true}>no data</FormHelperText>}\n    </FormControl>\n  )\n}\n\nfunction toDataTypeFromFileType(fileType: FILE_TYPE) {\n  switch (fileType) {\n    case FILE_TYPE_SET.IMAGE:\n      return DATA_TYPE_SET.IMAGE\n    case FILE_TYPE_SET.CSV:\n      return DATA_TYPE_SET.CSV\n    case FILE_TYPE_SET.HDF5:\n      return DATA_TYPE_SET.HDF5\n  }\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { styled } from '@mui/material/styles'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\n\nimport {\n  selectMultiPlotImageItemNodeId,\n  selectMultiPlotImageItemFilePath,\n  selectMultiPlotTimeSeriesItemNodeId,\n  selectMultiPlotTimeSeriesItemFilePath,\n  selectMultiPlotHeatMapItemNodeId,\n  selectMultiPlotHeatMapItemFilePath,\n  selectMultiPlotRoiItemNodeId,\n  selectMultiPlotRoiItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { DATA_TYPE_SET } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  setHeatMapItemFilePath,\n  setImageItemFilePath,\n  setTimeSeriesItemFilePath,\n  setRoiItemFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { ImagePlot } from './Plot/ImagePlot'\nimport { DisplayDataContext } from './DataContext'\nimport { TimeSeriesPlot } from './Plot/TimeSeriesPlot'\nimport { HeatMapPlot } from './Plot/HeatMapPlot'\nimport { FilePathSelect } from './FilePathSelect'\n\nexport const MultiPlotItem = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const dispatch = useDispatch()\n  return (\n    <>\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.IMAGE}\n        selectedNodeId={useSelector(selectMultiPlotImageItemNodeId(itemId))}\n        selectedFilePath={useSelector(selectMultiPlotImageItemFilePath(itemId))}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setImageItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select image\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.TIME_SERIES}\n        selectedNodeId={useSelector(\n          selectMultiPlotTimeSeriesItemNodeId(itemId),\n        )}\n        selectedFilePath={useSelector(\n          selectMultiPlotTimeSeriesItemFilePath(itemId),\n        )}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setTimeSeriesItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select timeseries\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.HEAT_MAP}\n        selectedNodeId={useSelector(selectMultiPlotHeatMapItemNodeId(itemId))}\n        selectedFilePath={useSelector(\n          selectMultiPlotHeatMapItemFilePath(itemId),\n        )}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setHeatMapItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select heatmap\"\n      />\n      <FilePathSelect\n        dataType={DATA_TYPE_SET.ROI}\n        selectedNodeId={useSelector(selectMultiPlotRoiItemNodeId(itemId))}\n        selectedFilePath={useSelector(selectMultiPlotRoiItemFilePath(itemId))}\n        onSelect={(nodeId, filePath) =>\n          dispatch(setRoiItemFilePath({ itemId, nodeId, filePath }))\n        }\n        label=\"Select roi\"\n      />\n      <MultiPlot itemId={itemId} />\n    </>\n  )\n})\n\nconst MultiPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  return (\n    <Grid container>\n      <Grid item xs={7}>\n        <StyledPaper>\n          <MultiImagePlot itemId={itemId} />\n        </StyledPaper>\n      </Grid>\n      <Grid item xs={5}>\n        <Grid>\n          <StyledPaper>\n            <MultiTimeSeriesPlot itemId={itemId} />\n          </StyledPaper>\n          <StyledPaper>\n            <MultiHeatMapPlot itemId={itemId} />\n          </StyledPaper>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n})\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(1),\n  margin: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}))\n\nconst MultiImagePlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotImageItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotImageItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType: DATA_TYPE_SET.IMAGE, itemId }}\n      >\n        <ImagePlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst MultiTimeSeriesPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotTimeSeriesItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotTimeSeriesItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{\n          nodeId,\n          filePath,\n          dataType: DATA_TYPE_SET.TIME_SERIES,\n          itemId,\n        }}\n      >\n        <TimeSeriesPlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst MultiHeatMapPlot = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectMultiPlotHeatMapItemFilePath(itemId))\n  const nodeId = useSelector(selectMultiPlotHeatMapItemNodeId(itemId))\n  if (filePath != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType: DATA_TYPE_SET.HEAT_MAP, itemId }}\n      >\n        <HeatMapPlot />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n","import React from 'react'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { DisplayDataContext } from '../DataContext'\nimport { twoDimarrayEqualityFn } from 'utils/EqualityUtils'\nimport {\n  selectRoiData,\n  selectRoiDataError,\n  selectRoiDataIsFulfilled,\n  selectRoiDataIsInitialized,\n  selectRoiDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { LinearProgress, Typography } from '@mui/material'\nimport { getRoiData } from 'store/slice/DisplayData/DisplayDataActions'\nimport createColormap from 'colormap'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const RoiPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const isPending = useSelector(selectRoiDataIsPending(path))\n  const isInitialized = useSelector(selectRoiDataIsInitialized(path))\n  const isFulfilled = useSelector(selectRoiDataIsFulfilled(path))\n  const error = useSelector(selectRoiDataError(path))\n\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getRoiData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <RoiPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst RoiPlotImple = React.memo<{}>(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const imageData = useSelector(selectRoiData(path), imageDataEqualtyFn)\n\n  const colorscale: ColorType[] = createColormap({\n    colormap: 'jet',\n    nshades: 10,\n    format: 'hex',\n    alpha: 1,\n  }).map((v, idx) => {\n    return { rgb: v, offset: String(idx / 9) }\n  })\n\n  const data = React.useMemo(\n    () => [\n      {\n        z: imageData,\n        type: 'heatmap',\n        name: 'roi',\n        colorscale: colorscale.map((value) => {\n          let offset: number = parseFloat(value.offset)\n          const offsets: number[] = colorscale.map((v) => {\n            return parseFloat(v.offset)\n          })\n          // plotlyは端[0.0, 1.0]がないとダメなので、その設定\n          if (offset === Math.max(...offsets)) {\n            offset = 1.0\n          }\n          if (offset === Math.min(...offsets)) {\n            offset = 0.0\n          }\n          return [offset, value.rgb]\n        }),\n        hoverongaps: false,\n        // zsmooth: zsmooth, // ['best', 'fast', false]\n        zsmooth: false,\n        showlegend: true,\n      },\n    ],\n    [imageData, colorscale],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 30, // top\n        l: 120, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      xaxis: {\n        autorange: true,\n        zeroline: false,\n        autotick: true,\n        ticks: '',\n      },\n      yaxis: {\n        autorange: 'reversed',\n        zeroline: false,\n        autotick: true, // todo\n        ticks: '',\n      },\n    }),\n    [path],\n  )\n  const config = {\n    displayModeBar: true,\n    // scrollZoom: true,\n    responsive: true,\n  }\n  return (\n    <div className=\"imagePlotChart\">\n      <PlotlyChart data={data} layout={layout} config={config} />\n    </div>\n  )\n})\n\nfunction imageDataEqualtyFn(\n  a: number[][] | undefined,\n  b: number[][] | undefined,\n) {\n  if (a != null && b != null) {\n    return twoDimarrayEqualityFn(a, b)\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectScatterData,\n  selectScatterDataError,\n  selectScatterDataIsFulfilled,\n  selectScatterDataIsInitialized,\n  selectScatterDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getScatterData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { ScatterData } from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectScatterItemXIndex,\n  selectScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nexport const ScatterPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectScatterDataIsPending(path))\n  const isInitialized = useSelector(selectScatterDataIsInitialized(path))\n  const error = useSelector(selectScatterDataError(path))\n  const isFulfilled = useSelector(selectScatterDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getScatterData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <ScatterPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst ScatterPlotImple = React.memo(() => {\n  const { filePath: path, itemId } = React.useContext(DisplayDataContext)\n\n  const scatterData = useSelector(\n    selectScatterData(path),\n    scatterDataEqualityFn,\n  )\n\n  const xIndex = useSelector(selectScatterItemXIndex(itemId))\n  const yIndex = useSelector(selectScatterItemYIndex(itemId))\n  const maxIndex = Object.keys(scatterData).length - 1\n\n  const data = React.useMemo(\n    () => [\n      {\n        x:\n          xIndex < maxIndex\n            ? Object.values(scatterData[xIndex])\n            : Object.values(scatterData[maxIndex]),\n        y:\n          yIndex < maxIndex\n            ? Object.values(scatterData[yIndex])\n            : Object.values(scatterData[maxIndex]),\n        type: 'scatter',\n        mode: 'markers', //'markers+text',\n        text: Object.keys(scatterData[0]),\n        textposition: 'top center',\n        textfont: {\n          family: 'Raleway, sans-serif',\n        },\n        marker: {\n          size: 5,\n          color: Object.keys(scatterData[0]),\n        },\n      },\n    ],\n    [scatterData, xIndex, yIndex, maxIndex],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n      xaxis: {\n        title: {\n          text: `x: ${\n            xIndex < Object.keys(scatterData).length ? xIndex : maxIndex\n          }`,\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f',\n          },\n        },\n      },\n      yaxis: {\n        title: {\n          text: `y: ${\n            yIndex < Object.keys(scatterData).length ? yIndex : maxIndex\n          }`,\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f',\n          },\n        },\n      },\n    }),\n    [xIndex, yIndex, maxIndex, path, scatterData],\n  )\n\n  const config = {\n    displayModeBar: true,\n    responsive: true,\n  }\n\n  return <PlotlyChart data={data} layout={layout} config={config} />\n})\n\nfunction scatterDataEqualityFn(\n  a: ScatterData | undefined,\n  b: ScatterData | undefined,\n) {\n  if (a != null && b != null) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every((aKey, i) => {\n          const bKey = bArray[i]\n          return bKey === aKey // && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n\n// function nestEqualityFun(\n//   a: {\n//     [key: number]: number\n//   },\n//   b: {\n//     [key: number]: number\n//   },\n// ) {\n//   const aArray = Object.entries(a)\n//   const bArray = Object.entries(b)\n//   return (\n//     a === b ||\n//     (aArray.length === bArray.length &&\n//       aArray.every(([aKey, aValue], i) => {\n//         const [bKey, bValue] = bArray[i]\n//         return bKey === aKey && bValue === aValue\n//       }))\n//   )\n// }\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PlotlyChart from 'react-plotlyjs-ts'\nimport { LinearProgress, Typography } from '@mui/material'\n\nimport { DisplayDataContext } from '../DataContext'\nimport {\n  selectBarData,\n  selectBarDataError,\n  selectBarDataIsFulfilled,\n  selectBarDataIsInitialized,\n  selectBarDataIsPending,\n} from 'store/slice/DisplayData/DisplayDataSelectors'\nimport { getBarData } from 'store/slice/DisplayData/DisplayDataActions'\nimport { BarData } from 'store/slice/DisplayData/DisplayDataType'\n\nexport const BarPlot = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n  const dispatch = useDispatch()\n  const isPending = useSelector(selectBarDataIsPending(path))\n  const isInitialized = useSelector(selectBarDataIsInitialized(path))\n  const error = useSelector(selectBarDataError(path))\n  const isFulfilled = useSelector(selectBarDataIsFulfilled(path))\n  React.useEffect(() => {\n    if (!isInitialized) {\n      dispatch(getBarData({ path }))\n    }\n  }, [dispatch, isInitialized, path])\n  if (isPending) {\n    return <LinearProgress />\n  } else if (error != null) {\n    return <Typography color=\"error\">{error}</Typography>\n  } else if (isFulfilled) {\n    return <BarPlotImple />\n  } else {\n    return null\n  }\n})\n\nconst BarPlotImple = React.memo(() => {\n  const { filePath: path } = React.useContext(DisplayDataContext)\n\n  const barData = useSelector(selectBarData(path), barDataEqualityFn)\n\n  const data = React.useMemo(\n    () => [\n      {\n        x: Object.keys(barData[0]),\n        y: Object.values(barData[0]),\n        type: 'bar',\n      },\n    ],\n    [barData],\n  )\n\n  const layout = React.useMemo(\n    () => ({\n      title: path.split('/').reverse()[0],\n      margin: {\n        t: 60, // top\n        l: 50, // left\n        b: 30, // bottom\n      },\n      dragmode: 'pan',\n      autosize: true,\n    }),\n    [path],\n  )\n\n  const config = {\n    displayModeBar: true,\n    // scrollZoom: true,\n    responsive: true,\n  }\n\n  return <PlotlyChart data={data} layout={layout} config={config} />\n})\n\nfunction barDataEqualityFn(a: BarData | undefined, b: BarData | undefined) {\n  if (a != null && b != null) {\n    const aArray = Object.keys(a)\n    const bArray = Object.keys(b)\n    return (\n      a === b ||\n      (aArray.length === bArray.length &&\n        aArray.every((aKey, i) => {\n          const bKey = bArray[i]\n          return bKey === aKey // && nestEqualityFun(bValue, aValue)\n        }))\n    )\n  } else {\n    return a === undefined && b === undefined\n  }\n}\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  selectVisualizeDataFilePath,\n  selectVisualizeDataNodeId,\n  selectVisualizeDataType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { DisplayDataContext } from './DataContext'\nimport { HeatMapPlot } from './Plot/HeatMapPlot'\nimport { ImagePlot } from './Plot/ImagePlot'\nimport { RoiPlot } from './Plot/RoiPlot'\nimport { ScatterPlot } from './Plot/ScatterPlot'\nimport { CsvPlot } from './Plot/CsvPlot'\nimport { TimeSeriesPlot } from './Plot/TimeSeriesPlot'\nimport { BarPlot } from './Plot/BarPlot'\n\nexport const DisplayDataItem = React.memo<{\n  itemId: number\n}>(({ itemId }) => {\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const nodeId = useSelector(selectVisualizeDataNodeId(itemId))\n  const dataType = useSelector(selectVisualizeDataType(itemId))\n  if (filePath != null && dataType != null) {\n    return (\n      <DisplayDataContext.Provider\n        value={{ nodeId, filePath, dataType, itemId }}\n      >\n        <DisplayPlot dataType={dataType} />\n      </DisplayDataContext.Provider>\n    )\n  } else {\n    return <div>Please select item correctly.</div>\n  }\n})\n\nconst DisplayPlot = React.memo<{\n  dataType: DATA_TYPE\n}>(({ dataType }) => {\n  switch (dataType) {\n    case DATA_TYPE_SET.CSV:\n      return <CsvPlot />\n    case DATA_TYPE_SET.TIME_SERIES:\n      return <TimeSeriesPlot />\n    case DATA_TYPE_SET.HEAT_MAP:\n      return <HeatMapPlot />\n    case DATA_TYPE_SET.IMAGE:\n      return <ImagePlot />\n    case DATA_TYPE_SET.ROI:\n      return <RoiPlot />\n    case DATA_TYPE_SET.SCATTER:\n      return <ScatterPlot />\n    case DATA_TYPE_SET.BAR:\n      return <BarPlot />\n    default:\n      return null\n  }\n})\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { deleteVisualizeItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const MultiPlotDeleteButton = React.memo<{ itemId: number }>(\n  ({ itemId }) => {\n    const dispatch = useDispatch()\n\n    const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n      e.stopPropagation() // 親divのonClickを反応させないため\n      dispatch(deleteVisualizeItem(itemId))\n    }\n    return (\n      <IconButton onClick={onClick} size=\"large\">\n        <CloseIcon />\n      </IconButton>\n    )\n  },\n)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useTheme } from '@mui/material/styles'\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\n\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\n\nimport {\n  selectSelectedVisualizeItemId,\n  selectVisualizeItemIdList,\n  selectVisualizeItemType,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n\nimport { VisualizeItemAddButton } from './VisualizeItemAddButton'\nimport { DisplayItemDeleteButton } from './DisplayItemDeleteButton'\nimport { MultiPlotItem } from './MultiPlotItem'\nimport { DisplayDataItem } from './DisplayDataItem'\nimport { selectItem } from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { RootState } from 'store/store'\nimport { MultiPlotDeleteButton } from './MultiPlotDeleteButton'\n\nexport const VisualizeItems: React.FC = () => {\n  return (\n    <>\n      <FlexItemList />\n    </>\n  )\n}\n\nconst FlexItemList: React.FC = () => {\n  const itemIdList = useSelector(selectVisualizeItemIdList, arrayEqualityFn)\n  return (\n    <Box display=\"flex\" flexWrap=\"wrap\" p={1} m={1}>\n      {itemIdList.map((itemId) => (\n        <Item itemId={itemId} key={itemId} />\n      ))}\n      <VisualizeItemAddButton />\n    </Box>\n  )\n}\n\nconst Item = React.memo<{ itemId: number }>(({ itemId }) => {\n  const itemType = useSelector(selectVisualizeItemType(itemId))\n\n  const dispatch = useDispatch()\n  const onSelect = () => {\n    dispatch(selectItem(itemId))\n  }\n  const isSelected = useSelector(\n    (state: RootState) => selectSelectedVisualizeItemId(state) === itemId,\n  )\n  const theme = useTheme()\n\n  return (\n    <Paper\n      variant=\"outlined\"\n      key={itemId}\n      style={{\n        width: '100%',\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n        cursor: 'pointer',\n        borderColor: isSelected ? theme.palette.primary.light : undefined,\n      }}\n      onClick={onSelect}\n    >\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n        <Box>\n          <DeleteButton itemType={itemType} itemId={itemId} />\n        </Box>\n      </Box>\n      <ItemByType itemType={itemType} itemId={itemId} />\n    </Paper>\n  )\n})\n\nconst DeleteButton: React.FC<{\n  itemType: string\n  itemId: number\n}> = ({ itemType, itemId }) => {\n  switch (itemType) {\n    case 'displayData':\n      return <DisplayItemDeleteButton itemId={itemId} />\n    case 'MultiPlot':\n      return <MultiPlotDeleteButton itemId={itemId} />\n    default:\n      throw new Error('itemType Error')\n  }\n}\n\nconst ItemByType = React.memo<{\n  itemType: string\n  itemId: number\n}>(({ itemType, itemId }) => {\n  switch (itemType) {\n    case 'MultiPlot':\n      return <MultiPlotItem itemId={itemId} />\n    case 'displayData':\n      return <DisplayDataItem itemId={itemId} />\n    default:\n      throw new Error('itemType Error')\n  }\n})\n","import React, { useState } from 'react'\n\nimport { GradientPickerPopover } from 'react-linear-gradient-picker'\nimport { SketchPicker } from 'react-color'\nimport { PALETTE_COLOR_SHAPE_TYPE } from 'react-linear-gradient-picker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const GradientColorPicker = React.memo<{\n  colors: { rgb: string; offset: string }[]\n  dispatchSetColor: (colorCode: ColorType[]) => void\n}>(({ colors, dispatchSetColor }) => {\n  const palette: PALETTE_COLOR_SHAPE_TYPE[] = colors.map((value) => {\n    return {\n      offset: value.offset,\n      color: value.rgb,\n    }\n  })\n\n  const onPaletteChange = (palette: PALETTE_COLOR_SHAPE_TYPE[]) => {\n    const colorCode = palette.map((value) => {\n      const color = value.color\n      const rgbStr = color.replace(/[^0-9,]/g, '').split(',')\n      const rgb = {\n        r: Number(rgbStr[0]),\n        g: Number(rgbStr[1]),\n        b: Number(rgbStr[2]),\n      }\n      return {\n        rgb: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`,\n        offset: value.offset,\n      }\n    })\n    dispatchSetColor(colorCode)\n  }\n\n  const [open, setOpen] = useState(false)\n\n  return (\n    <GradientPickerPopover\n      open={open}\n      setOpen={() => setOpen(!open)}\n      // showAnglePicker={true}\n      width={150}\n      maxStops={10}\n      paletteHeight={25}\n      palette={palette}\n      onPaletteChange={onPaletteChange}\n      flatStyle={true}\n    >\n      <WrappedSketchPicker />\n    </GradientPickerPopover>\n  )\n})\n\ntype WrapperPropTypes = {\n  onSelect?: (color: string, opacity?: number) => void\n  color?: string\n}\n\nconst WrappedSketchPicker: React.FC<WrapperPropTypes> = ({\n  onSelect,\n  color,\n}) => {\n  return (\n    <SketchPicker\n      color={color}\n      width=\"150px\"\n      // styles={{width: \"10px\"}}\n      onChange={(c) => {\n        const { r, g, b, a } = c.rgb\n        onSelect?.(`rgb(${r}, ${g}, ${b})`, a)\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Switch from '@mui/material/Switch'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\n\nimport {\n  selectImageItemShowGrid,\n  selectImageItemShowLine,\n  selectImageItemShowticklabels,\n  selectImageItemZsmooth,\n  selectImageItemShowScale,\n  selectVisualizeDataFilePath,\n  selectImageItemColors,\n  selectRoiItemNodeId,\n  selectRoiItemFilePath,\n  selectImageItemStartIndex,\n  selectImageItemEndIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\n\nimport {\n  setImageItemShowGrid,\n  setImageItemShowLine,\n  setImageItemShowticklabels,\n  setImageItemZsmooth,\n  setImageItemShowScale,\n  setDisplayDataPath,\n  setImageItemStartIndex,\n  setImageItemEndIndex,\n  setImageItemColors,\n  setRoiItemFilePath,\n  resetImageActiveIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nimport 'react-linear-gradient-picker/dist/index.css'\nimport { FileSelectImple } from 'components/FlowChart/FlowChartNode/FileSelect'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { FILE_TREE_TYPE_SET } from 'store/slice/FilesTree/FilesTreeType'\nimport { Box, TextField } from '@mui/material'\nimport { GradientColorPicker } from './GradientColorPicker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\nimport { FilePathSelect } from '../FilePathSelect'\nimport { DATA_TYPE_SET } from 'store/slice/DisplayData/DisplayDataType'\nimport Button from '@mui/material/Button'\nimport { getImageData } from 'store/slice/DisplayData/DisplayDataActions'\n\nexport const ImageItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const onSelectImageFile = (path: string) => {\n    dispatch(setDisplayDataPath({ nodeId: null, filePath: path, itemId }))\n    dispatch(resetImageActiveIndex({ itemId }))\n  }\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n  const { onUploadFile } = useFileUploader(FILE_TYPE_SET.IMAGE)\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n  }\n\n  const colors = useSelector(selectImageItemColors(itemId))\n  const dispathSetColor = (colorCode: ColorType[]) => {\n    dispatch(setImageItemColors({ itemId, colors: colorCode }))\n  }\n\n  const roiItemNodeId = useSelector(selectRoiItemNodeId(itemId))\n  const roiItemFilePath = useSelector(selectRoiItemFilePath(itemId))\n  const onSelectRoiFilePath = (nodeId: string, filePath: string) => {\n    dispatch(setRoiItemFilePath({ itemId, nodeId, filePath }))\n  }\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <FileSelectImple\n        filePath={filePath ?? ''}\n        onSelectFile={onSelectImageFile}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={FILE_TREE_TYPE_SET.IMAGE}\n        selectButtonLabel=\"Select Image\"\n      />\n      <FilePathSelect\n        selectedFilePath={roiItemFilePath}\n        selectedNodeId={roiItemNodeId}\n        onSelect={onSelectRoiFilePath}\n        dataType={DATA_TYPE_SET.ROI}\n        label={'Select Roi'}\n      />\n      <StartEndIndex />\n      <Showticklabels />\n      <ShowLine />\n      <ShowGrid />\n      <ShowScale />\n      <Zsmooth />\n      <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} />\n    </div>\n  )\n}\n\nconst Showticklabels: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showticklabels = useSelector(selectImageItemShowticklabels(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(\n      setImageItemShowticklabels({ itemId, showticklabels: !showticklabels }),\n    )\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showticklabels} onChange={toggleChecked} />}\n      label=\"Showticklabels\"\n    />\n  )\n}\n\nconst ShowLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showline = useSelector(selectImageItemShowLine(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowLine({ itemId, showline: !showline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showline} onChange={toggleChecked} />}\n      label=\"ShowLine\"\n    />\n  )\n}\n\nconst ShowGrid: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showgrid = useSelector(selectImageItemShowGrid(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowGrid({ itemId, showgrid: !showgrid }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showgrid} onChange={toggleChecked} />}\n      label=\"ShowGrid\"\n    />\n  )\n}\n\nconst ShowScale: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showscale = useSelector(selectImageItemShowScale(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setImageItemShowScale({ itemId, showscale: !showscale }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showscale} onChange={toggleChecked} />}\n      label=\"ShowScale\"\n    />\n  )\n}\n\nconst Zsmooth: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const zsmooth = useSelector(selectImageItemZsmooth(itemId))\n  const dispatch = useDispatch()\n  const handleChange = (event: SelectChangeEvent<string | boolean>) => {\n    dispatch(setImageItemZsmooth({ itemId, zsmooth: event.target.value }))\n  }\n  return (\n    <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\n      <InputLabel>smooth</InputLabel>\n      <Select label=\"smooth\" value={zsmooth} onChange={handleChange}>\n        <MenuItem value={'best'}>best</MenuItem>\n        <MenuItem value={'fast'}>fast</MenuItem>\n        <MenuItem value={'false'}>False</MenuItem>\n      </Select>\n    </FormControl>\n  )\n}\n\nconst StartEndIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const startIndex = useSelector(selectImageItemStartIndex(itemId))\n  const endIndex = useSelector(selectImageItemEndIndex(itemId))\n  const inputError = !(startIndex > 0)\n  const dispatch = useDispatch()\n  const onStartChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      dispatch(setImageItemStartIndex({ itemId, startIndex: newValue }))\n    }\n  }\n  const onEndChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      dispatch(setImageItemEndIndex({ itemId, endIndex: newValue }))\n    }\n  }\n\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const onClickButton = () => {\n    if (startIndex > 0) {\n      dispatch(resetImageActiveIndex({ itemId, startIndex, endIndex }))\n      if (filePath !== null) {\n        dispatch(\n          getImageData({\n            path: filePath,\n            startIndex: startIndex ?? 1,\n            endIndex: endIndex ?? 10,\n          }),\n        )\n      }\n    }\n  }\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n      <TextField\n        error={inputError}\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onStartChange}\n        value={startIndex}\n        helperText={inputError ? 'index > 0' : undefined}\n      />\n      ~\n      <TextField\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onEndChange}\n        value={endIndex}\n      />\n      <Button\n        size=\"small\"\n        className=\"ctrl_btn\"\n        variant=\"contained\"\n        onClick={onClickButton}\n      >\n        load\n      </Button>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FileSelectImple } from 'components/FlowChart/FlowChartNode/FileSelect'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport {\n  selectCsvItemSetColumn,\n  selectCsvItemSetIndex,\n  selectCsvItemTranspose,\n  selectVisualizeDataFilePath,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setCsvItemSetColumn,\n  setCsvItemSetIndex,\n  setCsvItemTranspose,\n  setDisplayDataPath,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\nimport { FILE_TREE_TYPE_SET } from 'store/slice/FilesTree/FilesTreeType'\nimport { FormControlLabel, Switch, TextField } from '@mui/material'\n\nexport const CsvItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const filePath = useSelector(selectVisualizeDataFilePath(itemId))\n  const dispatch = useDispatch()\n  const onSelectFile = (path: string) => {\n    dispatch(setDisplayDataPath({ nodeId: null, filePath: path, itemId }))\n  }\n  const { onUploadFile } = useFileUploader(FILE_TYPE_SET.CSV)\n  const onUploadFileHandle = (formData: FormData, fileName: string) => {\n    onUploadFile(formData, fileName)\n  }\n\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <FileSelectImple\n        filePath={filePath ?? ''}\n        onSelectFile={onSelectFile}\n        onUploadFile={onUploadFileHandle}\n        fileTreeType={FILE_TREE_TYPE_SET.CSV}\n        selectButtonLabel=\"Select CSV\"\n      />\n      <Transpose />\n      <SetColumn />\n      <SetIndex />\n    </div>\n  )\n}\n\nconst Transpose: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const transpose = useSelector(selectCsvItemTranspose(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setCsvItemTranspose({ itemId, transpose: !transpose }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={transpose} onChange={toggleChecked} />}\n      label=\"transpose\"\n    />\n  )\n}\n\nconst SetColumn: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const setColumn = useSelector(selectCsvItemSetColumn(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeSetColumn = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue === null || newValue >= 0) {\n      dispatch(setCsvItemSetColumn({ itemId, setColumn: newValue }))\n    }\n  }\n\n  return (\n    <div>\n      <TextField\n        label=\"column\"\n        style={{ width: 50 }}\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onChangeSetColumn}\n        value={setColumn}\n      />\n    </div>\n  )\n}\n\nconst SetIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const setIndex = useSelector(selectCsvItemSetIndex(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setCsvItemSetIndex({ itemId, setIndex: !setIndex }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={setIndex} onChange={toggleChecked} />}\n      label=\"setIndex\"\n    />\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, Switch } from '@mui/material'\nimport {\n  selectHeatMapItemColors,\n  selectHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setHeatMapItemColors,\n  setHeatMapItemShowScale,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport { GradientColorPicker } from './GradientColorPicker'\nimport { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const HeatmapItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const colors = useSelector(selectHeatMapItemColors(itemId))\n  const dispathSetColor = (colorCode: ColorType[]) => {\n    dispatch(setHeatMapItemColors({ itemId, colors: colorCode }))\n  }\n  return (\n    <>\n      <ShowScale />\n      <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} />\n    </>\n  )\n}\n\nconst ShowScale: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showscale = useSelector(selectHeatMapItemShowScale(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setHeatMapItemShowScale({ itemId, showscale: !showscale }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showscale} onChange={toggleChecked} />}\n      label=\"showscale\"\n    />\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, Switch, TextField } from '@mui/material'\nimport {\n  selectTimeSeriesItemOffset,\n  selectTimeSeriesItemShowGrid,\n  selectTimeSeriesItemShowLine,\n  selectTimeSeriesItemShowTickLabels,\n  selectTimeSeriesItemSpan,\n  selectTimeSeriesItemXrange,\n  selectTimeSeriesItemZeroLine,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\nimport {\n  setTimeSeriesItemOffset,\n  setTimeSeriesItemShowGrid,\n  setTimeSeriesItemShowLine,\n  setTimeSeriesItemShowTickLabels,\n  setTimeSeriesItemSpan,\n  setTimeSeriesItemXrangeLeft,\n  setTimeSeriesItemXrangeRight,\n  setTimeSeriesItemZeroLine,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\n\nexport const TimeSeriesItemEditor: React.FC = () => {\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <Offset />\n      <Span />\n      <ShowGrid />\n      <ShowLine />\n      <ShowTickLabels />\n      <ZeroLine />\n      <Xrange />\n    </div>\n  )\n}\n\nconst Offset: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const offset = useSelector(selectTimeSeriesItemOffset(itemId))\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemOffset({ itemId, offset: !offset }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={offset} onChange={toggleChecked} />}\n      label=\"offset\"\n    />\n  )\n}\n\nconst Span: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const span = useSelector(selectTimeSeriesItemSpan(itemId))\n\n  const dispatch = useDispatch()\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newValue === 'number') {\n      dispatch(setTimeSeriesItemSpan({ itemId, span: newValue }))\n    }\n  }\n  return (\n    <FormControlLabel\n      control={\n        <TextField\n          type=\"number\"\n          style={{ width: '6vw' }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={onChange}\n          defaultValue={span}\n        />\n      }\n      label=\"offset std\"\n    />\n  )\n}\n\nconst ShowGrid: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showgrid = useSelector(selectTimeSeriesItemShowGrid(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemShowGrid({ itemId, showgrid: !showgrid }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showgrid} onChange={toggleChecked} />}\n      label=\"showgrid\"\n    />\n  )\n}\n\nconst ShowLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showline = useSelector(selectTimeSeriesItemShowLine(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemShowLine({ itemId, showline: !showline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showline} onChange={toggleChecked} />}\n      label=\"showline\"\n    />\n  )\n}\n\nconst ShowTickLabels: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const showticklabels = useSelector(selectTimeSeriesItemShowTickLabels(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(\n      setTimeSeriesItemShowTickLabels({\n        itemId,\n        showticklabels: !showticklabels,\n      }),\n    )\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={showticklabels} onChange={toggleChecked} />}\n      label=\"showticklabels\"\n    />\n  )\n}\n\nconst ZeroLine: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const zeroline = useSelector(selectTimeSeriesItemZeroLine(itemId))\n\n  const dispatch = useDispatch()\n  const toggleChecked = () => {\n    dispatch(setTimeSeriesItemZeroLine({ itemId, zeroline: !zeroline }))\n  }\n  return (\n    <FormControlLabel\n      control={<Switch checked={zeroline} onChange={toggleChecked} />}\n      label=\"zeroline\"\n    />\n  )\n}\n\nconst Xrange: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const xrange = useSelector(selectTimeSeriesItemXrange(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeLeft = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newLeft = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newLeft === 'number') {\n      dispatch(setTimeSeriesItemXrangeLeft({ itemId, left: newLeft }))\n    }\n  }\n  const onChangeRight = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newRight = event.target.value === '' ? '' : Number(event.target.value)\n    if (typeof newRight === 'number') {\n      dispatch(setTimeSeriesItemXrangeRight({ itemId, right: newRight }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          left:\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeLeft}\n            defaultValue={xrange.left}\n          />\n          right:\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeRight}\n            defaultValue={xrange.right}\n          />\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n","import React from 'react'\n// import { useSelector, useDispatch } from 'react-redux'\n// import { SelectedItemIdContext } from '../VisualizeItemEditor'\n// import { selectRoiItemColors } from 'store/slice/VisualizeItem/VisualizeItemSelectors'\n// import { setRoiItemColors } from 'store/slice/VisualizeItem/VisualizeItemSlice'\n// import { useFileUploader } from 'store/slice/FileUploader/FileUploaderHook'\n// import { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n// import { ColorType } from 'store/slice/VisualizeItem/VisualizeItemType'\n\nexport const RoiItemEditor: React.FC = () => {\n  // const itemId = React.useContext(SelectedItemIdContext)\n  // const dispatch = useDispatch()\n  // const { onUploadFile } = useFileUploader(FILE_TYPE_SET.CSV)\n  // const onUploadFileHandle = (formData: FormData, fileName: string) => {\n  //   onUploadFile(formData, fileName)\n  // }\n\n  // const colors = useSelector(selectRoiItemColors(itemId))\n  // const dispathSetColor = (colorCode: ColorType[]) => {\n  //   dispatch(setRoiItemColors({ itemId, colors: colorCode }))\n  // }\n\n  return (\n    <>\n      {/* <GradientColorPicker /> */}\n      {/* <GradientColorPicker colors={colors} dispatchSetColor={dispathSetColor} /> */}\n    </>\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FormControlLabel, TextField } from '@mui/material'\nimport {\n  selectScatterItemXIndex,\n  selectScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport {\n  setScatterItemXIndex,\n  setScatterItemYIndex,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { SelectedItemIdContext } from '../VisualizeItemEditor'\n\nexport const ScatterItemEditor: React.FC = () => {\n  return (\n    <div style={{ margin: '10px', padding: 10 }}>\n      <XIndex />\n      <YIndex />\n    </div>\n  )\n}\n\nconst XIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const xIndex = useSelector(selectScatterItemXIndex(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeXIndex = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue !== null && newValue >= 0) {\n      dispatch(setScatterItemXIndex({ itemId, xIndex: newValue }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeXIndex}\n            defaultValue={xIndex}\n          />\n          xIndex\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n\nconst YIndex: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const yIndex = useSelector(selectScatterItemYIndex(itemId))\n\n  const dispatch = useDispatch()\n  const onChangeYIndex = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue =\n      event.target.value === '' ? null : Number(event.target.value)\n    if (newValue !== null && newValue >= 0) {\n      dispatch(setScatterItemYIndex({ itemId, yIndex: newValue }))\n    }\n  }\n\n  return (\n    <FormControlLabel\n      control={\n        <>\n          <TextField\n            style={{ width: 50 }}\n            type=\"number\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={onChangeYIndex}\n            defaultValue={yIndex}\n          />\n          yIndex\n        </>\n      }\n      label=\"\"\n    />\n  )\n}\n","import React from 'react'\n\nexport const BarItemEditor: React.FC = () => {\n  return <div style={{ margin: '10px', padding: 10 }}></div>\n}\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport FormControl from '@mui/material/FormControl'\nimport Box from '@mui/material/Box'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  FormControlLabel,\n  Switch,\n  Typography,\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\nimport {\n  selectSelectedVisualizeItemId,\n  selectVisualizeDataFilePath,\n  selectVisualizeDataNodeId,\n  selectVisualizeDataType,\n  selectVisualizeItemType,\n  selectVisualizeItemTypeIsMultiPlot,\n} from 'store/slice/VisualizeItem/VisualizeItemSelectors'\nimport { VISUALIZE_ITEM_TYPE_SET } from 'store/slice/VisualizeItem/VisualizeItemType'\nimport {\n  DATA_TYPE,\n  DATA_TYPE_SET,\n} from 'store/slice/DisplayData/DisplayDataType'\nimport {\n  resetImageActiveIndex,\n  setDisplayDataPath,\n  toggleItemTypeMultiPlot,\n} from 'store/slice/VisualizeItem/VisualizeItemSlice'\nimport { ImageItemEditor } from './Editor/ImageItemEditor'\nimport { CsvItemEditor } from './Editor/CsvItemEditor'\nimport { HeatmapItemEditor } from './Editor/HeatmapItemEditor'\nimport { TimeSeriesItemEditor } from './Editor/TimeSeriesItemEditor'\nimport { RoiItemEditor } from './Editor/RoiItemEditor'\nimport { FilePathSelect } from './FilePathSelect'\nimport { ScatterItemEditor } from './Editor/ScatterItemEditor'\nimport { BarItemEditor } from './Editor/BarItemEditor'\nimport { deleteDisplayItem } from 'store/slice/DisplayData/DisplayDataSlice'\n\nexport const VisualizeItemEditor = () => {\n  const selectedItemId = useSelector(selectSelectedVisualizeItemId)\n  return (\n    <>\n      {selectedItemId != null ? (\n        <SelectedItemIdContext.Provider value={selectedItemId}>\n          <Box m={1}>\n            <ItemTypeSelect />\n            <Editor />\n          </Box>\n        </SelectedItemIdContext.Provider>\n      ) : (\n        'Please select item...'\n      )}\n      <br />\n    </>\n  )\n}\n\nexport const SelectedItemIdContext = React.createContext<number>(NaN)\n\nconst ItemTypeSelect: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dispatch = useDispatch()\n  const isMultiPlot = useSelector(selectVisualizeItemTypeIsMultiPlot(itemId))\n  const onChageToggle = () => {\n    dispatch(toggleItemTypeMultiPlot(itemId))\n  }\n  return (\n    <FormControl style={{ minWidth: 120, marginBottom: 12 }}>\n      <FormControlLabel\n        control={<Switch checked={isMultiPlot} onChange={onChageToggle} />}\n        label=\"Multi plot\"\n      />\n    </FormControl>\n  )\n}\n\nconst Editor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const itemType = useSelector(selectVisualizeItemType(itemId))\n  switch (itemType) {\n    case VISUALIZE_ITEM_TYPE_SET.MULTI_PLOT:\n      return <MultiPlotItemEditor />\n    case VISUALIZE_ITEM_TYPE_SET.DISPLAY_DATA:\n      return <DisplayDataItemEditor />\n  }\n}\n\nconst MultiPlotItemEditor: React.FC = () => {\n  return (\n    <div>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography>ImageEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <ImageItemEditor />\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2a-content\"\n          id=\"panel2a-header\"\n        >\n          <Typography>TimeSeriesEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <TimeSeriesItemEditor />\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel3a-content\"\n          id=\"panel3a-header\"\n        >\n          <Typography>HeatmapEditor</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <HeatmapItemEditor />\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  )\n}\n\nconst DisplayDataItemEditor: React.FC = () => {\n  const itemId = React.useContext(SelectedItemIdContext)\n  const dataType = useSelector(selectVisualizeDataType(itemId))\n  const selectedNodeId = useSelector(selectVisualizeDataNodeId(itemId))\n  const selectedFilePath = useSelector(selectVisualizeDataFilePath(itemId))\n\n  const [prevItem, setPrevItem] = useState<{\n    dataType: DATA_TYPE\n    filePath: string | null\n  }>({\n    dataType: 'image',\n    filePath: null,\n  })\n\n  useEffect(() => {\n    setPrevItem({ dataType, filePath: selectedFilePath })\n  }, [selectedFilePath, dataType])\n\n  const dispatch = useDispatch()\n  const onSelect = (nodeId: string, filePath: string, dataType: DATA_TYPE) => {\n    dispatch(setDisplayDataPath({ itemId, nodeId, filePath, dataType }))\n    dispatch(resetImageActiveIndex({ itemId }))\n    dispatch(deleteDisplayItem(prevItem))\n  }\n\n  return (\n    <>\n      <FilePathSelect\n        selectedNodeId={selectedNodeId}\n        selectedFilePath={selectedFilePath}\n        onSelect={onSelect}\n      />\n      <div style={{ marginTop: 8 }}>\n        <DisplayEditor dataType={dataType} />\n      </div>\n    </>\n  )\n}\n\nconst DisplayEditor: React.FC<{\n  dataType: DATA_TYPE | null\n}> = ({ dataType }) => {\n  /* 他のtypeのEditorも必要になったら追加する */\n  switch (dataType) {\n    case DATA_TYPE_SET.IMAGE:\n      return <ImageItemEditor />\n    case DATA_TYPE_SET.CSV:\n      return <CsvItemEditor />\n    case DATA_TYPE_SET.HEAT_MAP:\n      return <HeatmapItemEditor />\n    case DATA_TYPE_SET.TIME_SERIES:\n      return <TimeSeriesItemEditor />\n    case DATA_TYPE_SET.ROI:\n      return <RoiItemEditor />\n    case DATA_TYPE_SET.SCATTER:\n      return <ScatterItemEditor />\n    case DATA_TYPE_SET.BAR:\n      return <BarItemEditor />\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport Drawer, { drawerClasses } from '@mui/material/Drawer'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport { drawerWidth } from 'components/FlowChart/FlowChart'\nimport { VisualizeItems } from './VisualizeItems'\nimport { VisualizeItemEditor } from './VisualizeItemEditor'\n\nconst Visualize: React.FC = () => {\n  return (\n    <RootDiv>\n      <StyledDrawer variant=\"permanent\">\n        <MuiToolbar />\n        <StyledDrawerContents>\n          <VisualizeItemEditor />\n        </StyledDrawerContents>\n      </StyledDrawer>\n      <MainContents>\n        <MuiToolbar />\n        <VisualizeItems />\n      </MainContents>\n    </RootDiv>\n  )\n}\n\nconst RootDiv = styled('div')({\n  display: 'flex',\n})\n\nconst StyledDrawer = styled(Drawer)({\n  width: drawerWidth,\n  flexShrink: 0,\n  [`& .${drawerClasses.paper}`]: {\n    width: drawerWidth,\n  },\n})\n\nconst StyledDrawerContents = styled('div')({\n  overflow: 'auto',\n})\n\nconst MainContents = styled('main')({\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n  height: '100vh',\n})\n\nexport default Visualize\n","import { RootState } from 'store/store'\nimport { EXPERIMENTS_STATUS } from './ExperimentsType'\n\nconst selectExperiments = (state: RootState) => state.experiments\n\nexport const selectExperimentsSatusIsUninitialized = (state: RootState) =>\n  selectExperiments(state).status === 'uninitialized'\n\nexport const selectExperimentsSatusIsPending = (state: RootState) =>\n  selectExperiments(state).status === 'pending'\n\nexport const selectExperimentsSatusIsFulfilled = (state: RootState) =>\n  selectExperiments(state).status === 'fulfilled'\n\nexport const selectExperimentsSatusIsError = (state: RootState) =>\n  selectExperiments(state).status === 'error'\n\nexport const selectExperimentsErrorMessage = (state: RootState) => {\n  const experiments = selectExperiments(state)\n  if (experiments.status === 'error') {\n    return experiments.message\n  } else {\n    throw new Error('experiments status is not error')\n  }\n}\n\nconst selectExperimentList = (state: RootState) => {\n  const experiments = selectExperiments(state)\n  if (experiments.status === 'fulfilled') {\n    return experiments.experimentList\n  } else {\n    throw new Error('experiments status is not fulfilled')\n  }\n}\n\nexport const selectExperimentUidList = (state: RootState) =>\n  Object.keys(selectExperimentList(state))\n\nexport const selectExperiment = (uid: string) => (state: RootState) =>\n  selectExperimentList(state)[uid]\n\nexport const selectExperimentTimeStamp = (uid: string) => (state: RootState) =>\n  selectExperiment(uid)(state).timestamp\n\nexport const selectExperimentName = (uid: string) => (state: RootState) =>\n  selectExperiment(uid)(state).name\n\nexport const selectExperimentStatus =\n  (uid: string) =>\n  (state: RootState): EXPERIMENTS_STATUS => {\n    const functions = selectExperimentList(state)[uid].functions\n    const statusList = Object.values(functions).map((f) => f.status)\n    if (statusList.findIndex((status) => status === 'error') >= 0) {\n      return 'error'\n    } else if (statusList.findIndex((status) => status === 'running') >= 0) {\n      return 'running'\n    } else {\n      return 'success'\n    }\n  }\n\nexport const selectExperimentFunctionNodeIdList =\n  (uid: string) => (state: RootState) =>\n    Object.keys(selectExperimentList(state)[uid].functions)\n\nexport const selectExperimentFunction =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentList(state)[uid].functions[nodeId]\n\nexport const selectExperimentFunctionName =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentFunction(uid, nodeId)(state).name\n\nexport const selectExperimentFunctionStatus =\n  (uid: string, nodeId: string) => (state: RootState) =>\n    selectExperimentFunction(uid, nodeId)(state).status\n","import React from 'react'\nimport DoneIcon from '@mui/icons-material/Done'\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline'\nimport HorizontalRuleIcon from '@mui/icons-material/HorizontalRule'\n\nimport { EXPERIMENTS_STATUS } from 'store/slice/Experiments/ExperimentsType'\n\nexport const ExperimentStatusIcon = React.memo<{ status: EXPERIMENTS_STATUS }>(\n  ({ status }) => {\n    switch (status) {\n      case 'error':\n        return <ErrorOutlineIcon color=\"error\" />\n      case 'success':\n        return <DoneIcon color=\"success\" />\n      case 'running':\n        return <HorizontalRuleIcon color=\"inherit\" />\n    }\n  },\n)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Box from '@mui/material/Box'\nimport Collapse from '@mui/material/Collapse'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Typography from '@mui/material/Typography'\n\nimport { ExperimentUidContext } from './ExperimentTable'\nimport {\n  selectExperimentFunctionName,\n  selectExperimentFunctionNodeIdList,\n  selectExperimentFunctionStatus,\n} from 'store/slice/Experiments/ExperimentsSelectors'\nimport { ExperimentStatusIcon } from './ExperimentStatusIcon'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\n\nexport const CollapsibleTable: React.FC<{\n  open: boolean\n}> = ({ open }) => {\n  return (\n    <TableRow>\n      <TableCell sx={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <Box margin={1}>\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\n              Details\n            </Typography>\n            <Table size=\"small\" aria-label=\"purchases\">\n              <Head />\n              <Body />\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nconst Head: React.FC = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell>Function</TableCell>\n        <TableCell>Success</TableCell>\n      </TableRow>\n    </TableHead>\n  )\n}\n\nconst Body: React.FC = () => {\n  const uid = React.useContext(ExperimentUidContext)\n  const nodeIdList = useSelector(\n    selectExperimentFunctionNodeIdList(uid),\n    arrayEqualityFn,\n  )\n  return (\n    <TableBody>\n      {nodeIdList.map((nodeId) => (\n        <TableRowOfFunction nodeId={nodeId} />\n      ))}\n    </TableBody>\n  )\n}\n\nconst TableRowOfFunction = React.memo<{ nodeId: string }>(({ nodeId }) => {\n  const uid = React.useContext(ExperimentUidContext)\n  const name = useSelector(selectExperimentFunctionName(uid, nodeId))\n  const status = useSelector(selectExperimentFunctionStatus(uid, nodeId))\n  return (\n    <TableRow key={nodeId}>\n      <TableCell component=\"th\" scope=\"row\">\n        {name}\n      </TableCell>\n      <TableCell>\n        <ExperimentStatusIcon status={status} />\n      </TableCell>\n    </TableRow>\n  )\n})\n","import axios from 'axios'\n\nimport { BASE_URL } from 'const/API'\n\nexport type ExperimentsDTO = {\n  [uid: string]: ExperimentDTO\n}\n\nexport type ExperimentDTO = {\n  function: {\n    [name: string]: {\n      position: {\n        x: number\n        y: number\n      }\n      success: string\n      unique_id: string\n    }\n  }\n  name: string\n  success: string\n  timestamp: string\n  unique_id: string\n}\n\nexport async function getExperiments(): Promise<ExperimentsDTO> {\n  const response = await axios.get(`${BASE_URL}/experiments`)\n  return response.data\n}\n\n// export async function getExperimentByUid(uid: string): Promise<{\n//   // todo\n// }> {\n//   const response = await axios.get(`${BASE_URL}/experiments/${uid}`)\n//   return response.data\n// }\n\nexport async function deleteExperimentByUid(uid: string): Promise<boolean> {\n  const response = await axios.delete(`${BASE_URL}/experiments/${uid}`)\n  return response.data\n}\n","export const EXPERIMENTS_SLICE_NAME = 'experiments'\n\nexport type Experiments =\n  | {\n      status: 'fulfilled'\n      experimentList: ExperimentListType\n    }\n  | {\n      status: 'uninitialized'\n    }\n  | {\n      status: 'pending'\n    }\n  | {\n      status: 'error'\n      message?: string\n    }\n\nexport type ExperimentListType = {\n  [uid: string]: ExperimentType\n}\n\nexport type ExperimentType = {\n  uid: string\n  functions: {\n    [nodeId: string]: ExperimentFunction\n  }\n  name: string\n  timestamp: string\n}\n\nexport type ExperimentFunction = {\n  name: string\n  nodeId: string\n  postion: {\n    x: number\n    y: number\n  }\n  status: EXPERIMENTS_STATUS\n}\n\nexport type EXPERIMENTS_STATUS = 'success' | 'error' | 'running'\n","import { createAsyncThunk } from '@reduxjs/toolkit'\nimport {\n  ExperimentsDTO,\n  getExperiments as getExperimentsApi,\n  deleteExperimentByUid as deleteExperimentByUidApi,\n} from 'api/experiments/Experiments'\nimport { EXPERIMENTS_SLICE_NAME } from './ExperimentsType'\n\nexport const getExperiments = createAsyncThunk<ExperimentsDTO, undefined>(\n  `${EXPERIMENTS_SLICE_NAME}/getExperiments`,\n  async (_, thunkAPI) => {\n    try {\n      const response = await getExperimentsApi()\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n\n// export const getExperimentByUid = createAsyncThunk<{}, string>(\n//   `${EXPERIMENTS_SLICE_NAME}/getExperimentByUid`,\n//   async (uid, thunkAPI) => {\n//     try {\n//       const response = await getExperimentByUidApi(uid)\n//       return response\n//     } catch (e) {\n//       return thunkAPI.rejectWithValue(e)\n//     }\n//   },\n// )\n\nexport const deleteExperimentByUid = createAsyncThunk<boolean, string>(\n  `${EXPERIMENTS_SLICE_NAME}/deleteExperimentByUid`,\n  async (uid, thunkAPI) => {\n    try {\n      const response = await deleteExperimentByUidApi(uid)\n      return response\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e)\n    }\n  },\n)\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from '@mui/material/Button'\nimport Box from '@mui/material/Box'\nimport Alert from '@mui/material/Alert'\nimport AlertTitle from '@mui/material/AlertTitle'\nimport IconButton from '@mui/material/IconButton'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline'\nimport GetAppIcon from '@mui/icons-material/GetApp'\nimport ReplayIcon from '@mui/icons-material/Replay'\n\nimport { CollapsibleTable } from './CollapsibleTable'\nimport {\n  selectExperimentsSatusIsUninitialized,\n  selectExperimentsSatusIsFulfilled,\n  selectExperimentUidList,\n  selectExperimentTimeStamp,\n  selectExperimentName,\n  selectExperimentStatus,\n  selectExperimentsSatusIsError,\n  selectExperimentsErrorMessage,\n} from 'store/slice/Experiments/ExperimentsSelectors'\nimport { deleteExperimentByUid } from 'store/slice/Experiments/ExperimentsActions'\nimport { getExperiments } from 'store/slice/Experiments/ExperimentsActions'\nimport { arrayEqualityFn } from 'utils/EqualityUtils'\nimport { ExperimentStatusIcon } from './ExperimentStatusIcon'\n\nexport const ExperimentTable: React.FC = () => {\n  const isUninitialized = useSelector(selectExperimentsSatusIsUninitialized)\n  const isFulfilled = useSelector(selectExperimentsSatusIsFulfilled)\n  const isError = useSelector(selectExperimentsSatusIsError)\n  const dispatch = useDispatch()\n  React.useEffect(() => {\n    if (isUninitialized) {\n      dispatch(getExperiments())\n    }\n  }, [dispatch, isUninitialized])\n  if (isFulfilled) {\n    return <TableImple />\n  } else if (isError) {\n    return <ExperimentsErrorView />\n  } else {\n    return null\n  }\n}\n\nconst ExperimentsErrorView: React.FC = () => {\n  const message = useSelector(selectExperimentsErrorMessage)\n  return (\n    <Alert severity=\"error\">\n      <AlertTitle>failed to get experiments...</AlertTitle>\n      {message}\n    </Alert>\n  )\n}\n\nexport const ExperimentUidContext = React.createContext<string>('')\n\nconst TableImple: React.FC = () => {\n  const uidList = useSelector(selectExperimentUidList, arrayEqualityFn)\n  const dispatch = useDispatch()\n  const onClickReload = () => {\n    dispatch(getExperiments())\n  }\n  return (\n    <Box>\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n        }}\n      >\n        <Button\n          sx={{\n            marginBottom: (theme) => theme.spacing(1),\n          }}\n          variant=\"outlined\"\n          endIcon={<ReplayIcon />}\n          onClick={onClickReload}\n        >\n          Reload\n        </Button>\n      </Box>\n      <TableContainer component={Paper} elevation={0} variant=\"outlined\">\n        <Table aria-label=\"collapsible table\">\n          <TableHead>\n            <Head />\n          </TableHead>\n          <TableBody>\n            {uidList.map((uid) => (\n              <ExperimentUidContext.Provider value={uid} key={uid}>\n                <Row key={uid} />\n              </ExperimentUidContext.Provider>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  )\n}\n\nconst Head: React.FC = () => {\n  return (\n    <TableRow>\n      <TableCell />\n      <TableCell>Timestamp</TableCell>\n      <TableCell>Name</TableCell>\n      <TableCell>Success</TableCell>\n      <TableCell>Import</TableCell>\n      <TableCell>Delete</TableCell>\n    </TableRow>\n  )\n}\n\nconst Row: React.FC = () => {\n  const uid = React.useContext(ExperimentUidContext)\n  const timestamp = useSelector(selectExperimentTimeStamp(uid))\n  const status = useSelector(selectExperimentStatus(uid))\n  const name = useSelector(selectExperimentName(uid))\n  const [open, setOpen] = React.useState(false)\n  return (\n    <React.Fragment>\n      <TableRow\n        sx={{\n          '& > *': {\n            borderBottom: 'unset',\n          },\n          [`& .${tableCellClasses.root}`]: {\n            borderBottomWidth: 0,\n          },\n        }}\n      >\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen((prevOpen) => !prevOpen)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {timestamp}\n        </TableCell>\n        <TableCell>{name}</TableCell>\n        <TableCell>\n          <ExperimentStatusIcon status={status} />\n        </TableCell>\n        <TableCell>\n          <IconButton>\n            <GetAppIcon color=\"primary\" />\n          </IconButton>\n        </TableCell>\n        <TableCell>\n          <ExperimentDeleteButton />\n        </TableCell>\n      </TableRow>\n      <CollapsibleTable open={open} />\n    </React.Fragment>\n  )\n}\n\nconst ExperimentDeleteButton: React.FC = () => {\n  const dispatch = useDispatch()\n  const uid = React.useContext(ExperimentUidContext)\n\n  const name = useSelector(selectExperimentName(uid))\n  const [open, setOpen] = React.useState(false)\n\n  const onClickOpen = () => {\n    setOpen(true)\n  }\n  const onClickCancel = () => {\n    setOpen(false)\n  }\n  const onClickOk = () => {\n    setOpen(false)\n    dispatch(deleteExperimentByUid(uid))\n  }\n  return (\n    <>\n      <IconButton onClick={onClickOpen}>\n        <DeleteOutlineIcon color=\"error\" />\n      </IconButton>\n      <Dialog open={open}>\n        <DialogTitle>Are you sure you want to delete {name}?</DialogTitle>\n        <DialogActions>\n          <Button onClick={onClickCancel} variant=\"outlined\" color=\"inherit\">\n            Cancel\n          </Button>\n          <Button onClick={onClickOk} variant=\"outlined\" autoFocus>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import React from 'react'\nimport { default as MuiToolbar } from '@mui/material/Toolbar'\nimport { ExperimentTable } from './ExperimentTable'\n\nconst Experiment: React.FC = () => {\n  return (\n    <div style={{ display: 'flex' }}>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          height: '100vh',\n          padding: 16,\n        }}\n      >\n        <MuiToolbar />\n        {/* <VisualizeItems /> */}\n        <ExperimentTable />\n      </main>\n    </div>\n  )\n}\n\nexport default Experiment\n","import axios from 'axios'\n\nimport { BASE_URL } from 'const/API'\n\nimport type { Edge, Node } from 'react-flow-renderer'\nimport type {\n  AlgorithmNodeData,\n  InputNodeData,\n} from 'store/slice/FlowElement/FlowElementType'\nimport type { ParamMap } from 'store/utils/param/ParamType'\n\nexport type RunPostData = {\n  nodeList: Node<NodePostDataType>[]\n  edgeList: Edge[]\n  nwbParam: ParamMap\n  snakemakeParam: ParamMap\n}\n\nexport type NodePostDataType = AlgorithmNodePostData | InputNodePostData\n\nexport interface InputNodePostData extends InputNodeData {\n  path: string\n  param?: {\n    [key: string]: unknown\n  }\n  hdf5Path?: string\n}\n\nexport interface AlgorithmNodePostData extends AlgorithmNodeData {\n  path: string\n  param: ParamMap\n}\n\nexport async function run(data: {\n  runData: RunPostData\n  uid?: string\n}): Promise<string> {\n  const response = await axios.post(`${BASE_URL}/run`, data.runData)\n  return response.data // uid\n}\n\nexport type RunResultDTO = {\n  [nodeId: string]: {\n    status: string\n    message: string\n    name: string\n    outputPaths?: OutputPathsDTO\n  }\n}\n\nexport type OutputPathsDTO = {\n  [outputKey: string]: {\n    path: string\n    type: string\n  }\n}\n\nexport async function runResult(data: {\n  uid: string\n  pendingNodeIdList: string[]\n}): Promise<RunResultDTO> {\n  const { uid, pendingNodeIdList } = data\n  const response = await axios.post(`${BASE_URL}/run/result/${uid}`, {\n    pendingNodeIdList,\n  })\n  return response.data\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit'\n\nimport { ThunkApiConfig } from 'store/store'\nimport { PIPELINE_SLICE_NAME } from './PipelineType'\nimport {\n  run as runRequest,\n  runResult,\n  RunResultDTO,\n  RunPostData,\n} from 'api/run/Run'\nimport { selectRunResultPendingNodeIdList } from './PipelineSelectors'\n\nexport const run = createAsyncThunk<\n  string,\n  { uid: string | undefined; runPostData: RunPostData },\n  ThunkApiConfig\n>(`${PIPELINE_SLICE_NAME}/run`, async ({ uid, runPostData }, thunkAPI) => {\n  try {\n    const responseData = await runRequest({ runData: runPostData, uid })\n    return responseData\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n\nexport const pollRunResult = createAsyncThunk<\n  RunResultDTO,\n  {\n    uid: string\n  },\n  ThunkApiConfig\n>(`${PIPELINE_SLICE_NAME}/pollRunResult`, async ({ uid }, thunkAPI) => {\n  const pendingNodeIdList = selectRunResultPendingNodeIdList(uid)(\n    thunkAPI.getState(),\n  )\n  try {\n    const responseData = await runResult({ uid, pendingNodeIdList })\n    return responseData\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e)\n  }\n})\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { pollRunResult, run } from './PipelineActions'\nimport { Pipeline, PIPELINE_SLICE_NAME, RUN_STATUS } from './PipelineType'\n\nimport {\n  getInitialRunResult,\n  convertToRunResult,\n  isStartedPipeline,\n  isNodeResultPending,\n} from './PipelineUtils'\n\nconst initialState: Pipeline = {\n  pipelines: {},\n  uidHistory: [],\n}\n\nexport const pipelineSlice = createSlice({\n  name: PIPELINE_SLICE_NAME,\n  initialState,\n  reducers: {\n    cancelPipeline(state, action: PayloadAction<string>) {\n      const target = Object.values(state.pipelines).find(\n        (pipeline) =>\n          pipeline.status === RUN_STATUS.START_SUCCESS &&\n          pipeline.uid === action.payload,\n      )\n      if (target != null) {\n        target.status = RUN_STATUS.CANCELED\n        state.uidHistory.pop()\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(run.pending, (state, action) => {\n        state.pipelines[action.meta.requestId] = {\n          status: RUN_STATUS.START_PENDING,\n        }\n      })\n      .addCase(run.fulfilled, (state, action) => {\n        const runPostData = action.meta.arg.runPostData\n        const uid = action.payload\n        state.pipelines[action.meta.requestId] = {\n          uid,\n          status: RUN_STATUS.START_SUCCESS,\n          runResult: getInitialRunResult(runPostData),\n          runPostData,\n        }\n        state.uidHistory.push(uid)\n      })\n      .addCase(run.rejected, (state, action) => {\n        state.pipelines[action.meta.requestId] = {\n          status: RUN_STATUS.START_ERROR,\n        }\n      })\n      .addCase(pollRunResult.fulfilled, (state, action) => {\n        const target = Object.values(state.pipelines).find(\n          (pipeline) =>\n            pipeline.status === RUN_STATUS.START_SUCCESS &&\n            pipeline.uid === action.meta.arg.uid,\n        )\n        if (target != null && target.status === RUN_STATUS.START_SUCCESS) {\n          target.runResult = {\n            ...target.runResult, // pendingのNodeResultはそのままでsuccessもしくはerrorのみ上書き\n            ...convertToRunResult(action.payload),\n          }\n          const runResultPendingList = Object.values(target.runResult).filter(\n            isNodeResultPending,\n          )\n          if (runResultPendingList.length === 0) {\n            // 終了\n            target.status = RUN_STATUS.FINISHED\n          }\n        }\n      })\n      .addCase(pollRunResult.rejected, (state, action) => {\n        const target = Object.values(state.pipelines).find(\n          (pipeline) =>\n            isStartedPipeline(pipeline) && pipeline.uid === action.meta.arg.uid,\n        )\n        if (target != null) {\n          target.status = RUN_STATUS.ABORTED\n        }\n      })\n  },\n})\n\nexport const { cancelPipeline } = pipelineSlice.actions\n\nexport default pipelineSlice.reducer\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  selectPipelineIsCanceled,\n  selectPipelineIsStartedSuccess,\n  selectPipelineStatus,\n  selectRunPostData,\n} from './PipelineSelectors'\nimport { run, pollRunResult } from './PipelineActions'\nimport { cancelPipeline } from './PipelineSlice'\nimport { AppDispatch, RootState } from 'store/store'\nimport { selectFilePathIsUndefined } from '../InputNode/InputNodeSelectors'\n\nconst POLLING_INTERVAL = 5000\n\nexport type UseRunPipelineReturnType = ReturnType<typeof useRunPipeline>\n\nexport function useRunPipeline() {\n  const dispatch: AppDispatch = useDispatch()\n  const [uid, setUid] = React.useState<null | string>()\n  const isCanceled = useSelector((state: RootState) =>\n    uid != null ? selectPipelineIsCanceled(uid)(state) : false,\n  )\n  const isStartedSuccess = useSelector((state: RootState) =>\n    uid != null ? selectPipelineIsStartedSuccess(uid)(state) : false,\n  )\n  const filePathIsUndefined = useSelector(selectFilePathIsUndefined)\n  const runPostData = useSelector(selectRunPostData)\n  const handleRunPipeline = React.useCallback(\n    (newUid?: string) => {\n      dispatch(run({ uid: newUid, runPostData }))\n        .unwrap()\n        .then((result) => setUid(result))\n    },\n    [dispatch, runPostData],\n  )\n  const handleCancelPipeline = React.useCallback(() => {\n    if (uid != null) {\n      dispatch(cancelPipeline(uid))\n    }\n  }, [dispatch, uid])\n  React.useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (isStartedSuccess && !isCanceled && uid != null) {\n        dispatch(pollRunResult({ uid: uid }))\n      }\n    }, POLLING_INTERVAL)\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [dispatch, uid, isCanceled, isStartedSuccess])\n  const status = useSelector((state: RootState) =>\n    uid != null ? selectPipelineStatus(uid)(state) : 'Uninitialized',\n  )\n  return {\n    filePathIsUndefined,\n    uid,\n    status,\n    handleRunPipeline,\n    handleCancelPipeline,\n  }\n}\n","import React from 'react'\nimport AppBar from '@mui/material/AppBar'\nimport Tabs from '@mui/material/Tabs'\nimport Tab from '@mui/material/Tab'\nimport Typography from '@mui/material/Typography'\nimport Toolbar from '@mui/material/Toolbar'\nimport { styled } from '@mui/material/styles'\nimport FlowChart from './FlowChart/FlowChart'\nimport Visualize from './Visualize/Visualize'\nimport Experiment from './Experiment/Experiment'\nimport { useRunPipeline } from 'store/slice/Pipeline/PipelineHook'\n\nconst Layout: React.FC = () => {\n  const [value, setValue] = React.useState(0)\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue)\n  }\n\n  const runPipeline = useRunPipeline() // タブ切り替えによって結果取得処理が止まってしまうのを回避するため、タブの親レイヤーで呼び出している\n\n  return (\n    <RootDiv>\n      <StyledAppBar position=\"fixed\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\">OPTINIST</Typography>\n          <Tabs\n            sx={{ width: '100%' }}\n            value={value}\n            onChange={handleChange}\n            centered\n            textColor=\"inherit\"\n          >\n            <Tab label=\"Flow Chart\" {...a11yProps(0)} />\n            <Tab label=\"Visualize\" {...a11yProps(1)} />\n            <Tab label=\"Experiment\" {...a11yProps(2)} />\n          </Tabs>\n        </Toolbar>\n      </StyledAppBar>\n      <TabPanel value={value} index={0}>\n        <FlowChart {...runPipeline} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Visualize />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Experiment />\n      </TabPanel>\n    </RootDiv>\n  )\n}\n\nconst RootDiv = styled('div')(({ theme }) => ({\n  flexGrow: 1,\n  backgroundColor: theme.palette.background.paper,\n}))\n\nconst StyledAppBar = styled(AppBar)(({ theme }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n}))\n\ninterface TabPanelProps {\n  children?: React.ReactNode\n  index: any\n  value: any\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Typography>{children}</Typography>}\n    </div>\n  )\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  }\n}\n\nexport default Layout\n","import React from 'react'\nimport IconButton from '@mui/material/IconButton'\nimport Close from '@mui/icons-material/Close'\nimport { SnackbarProvider, SnackbarKey, useSnackbar } from 'notistack'\n\nimport AppLayout from './components/Layout'\n\nconst App: React.FC = () => {\n  return (\n    <SnackbarProvider\n      maxSnack={5}\n      action={(snackbarKey) => (\n        <SnackbarCloseButton snackbarKey={snackbarKey} />\n      )}\n    >\n      <AppLayout />\n    </SnackbarProvider>\n  )\n}\n\nconst SnackbarCloseButton: React.FC<{ snackbarKey: SnackbarKey }> = ({\n  snackbarKey,\n}) => {\n  const { closeSnackbar } = useSnackbar()\n  return (\n    <IconButton onClick={() => closeSnackbar(snackbarKey)} size=\"large\">\n      <Close style={{ color: 'white' }} />\n    </IconButton>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { createSlice } from '@reduxjs/toolkit'\nimport {\n  ALGORITHM_LIST_SLICE_NAME,\n  AlgorithmListType,\n} from './AlgorithmListType'\nimport { getAlgoList } from './AlgorithmListActions'\nimport { convertToAlgoListType } from './AlgorithmListUtils'\n\nconst initialState: AlgorithmListType = {\n  isLatest: false,\n  tree: {},\n}\n\nexport const algorithmListSlice = createSlice({\n  name: ALGORITHM_LIST_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getAlgoList.fulfilled, (state, action) => {\n      state.tree = convertToAlgoListType(action.payload)\n      state.isLatest = true\n    })\n  },\n})\n\nexport default algorithmListSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { FileUploader, FILE_UPLOADER_SLICE_NAME } from './FileUploaderType'\nimport { setUploadProgress, uploadFile } from './FileUploaderActions'\nimport { inistialUploaderState } from './FileUploaderInitlalState'\n\nconst initialState: FileUploader = {}\n\nexport const fileUploaderSlice = createSlice({\n  name: FILE_UPLOADER_SLICE_NAME,\n  initialState,\n  reducers: {\n    setFileUploaderStateById(state, action: PayloadAction<string>) {\n      state[action.payload] = inistialUploaderState\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(setUploadProgress, (state, action) => {\n        const { progess, requestId } = action.payload\n        state[requestId].uploadingProgress = progess\n      })\n      .addCase(uploadFile.pending, (state, action) => {\n        const { fileName, requestId } = action.meta.arg\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          fileName,\n          isUninitialized: false,\n          pending: true,\n          fulfilled: false,\n          uploadingProgress: 0,\n        }\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        const { requestId } = action.meta.arg\n        const { resultPath } = action.payload\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          path: resultPath,\n          pending: false,\n          fulfilled: true,\n        }\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        const { requestId } = action.meta.arg\n        const currentState = state[requestId]\n        state[requestId] = {\n          ...currentState,\n          pending: false,\n          fulfilled: false,\n          error: action.error.message,\n        }\n      })\n  },\n})\n\nexport const { setFileUploaderStateById } = fileUploaderSlice.actions\n\nexport default fileUploaderSlice.reducer\n","import { TreeNodeTypeDTO, TreeNodeType } from './FilesTreeType'\n\nexport function convertToTreeNodeType(dto: TreeNodeTypeDTO[]): TreeNodeType[] {\n  return dto.map((node) =>\n    node.isdir\n      ? {\n          path: node.path,\n          name: node.name,\n          isDir: true,\n          nodes: convertToTreeNodeType(node.nodes),\n        }\n      : {\n          path: node.path,\n          name: node.name,\n          isDir: false,\n        },\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { uploadFile } from 'store/slice/FileUploader/FileUploaderActions'\nimport { FILE_TYPE_SET } from 'store/slice/InputNode/InputNodeType'\n\nimport { getFilesTree } from './FilesTreeAction'\nimport {\n  FilesTree,\n  FILES_TREE_SLICE_NAME,\n  FILE_TREE_TYPE_SET,\n} from './FilesTreeType'\nimport { convertToTreeNodeType } from './FilesTreeUtils'\n\nconst initialState: FilesTree = {}\nexport const filesTreeSlice = createSlice({\n  name: FILES_TREE_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getFilesTree.pending, (state, action) => {\n        const fileType = action.meta.arg\n        state[fileType] = {\n          isLoading: true,\n          isLatest: false,\n          tree: [],\n        }\n      })\n      .addCase(getFilesTree.fulfilled, (state, action) => {\n        const fileTreeType = action.meta.arg\n        state[fileTreeType].tree = convertToTreeNodeType(action.payload)\n        state[fileTreeType].isLatest = true\n        state[fileTreeType].isLoading = false\n      })\n      .addCase(uploadFile.pending, (state, action) => {\n        const { fileType } = action.meta.arg\n        if (fileType === FILE_TYPE_SET.IMAGE) {\n          if (state[FILE_TREE_TYPE_SET.IMAGE] != null) {\n            state[FILE_TREE_TYPE_SET.IMAGE].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.IMAGE] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else if (fileType === FILE_TYPE_SET.CSV) {\n          if (state[FILE_TREE_TYPE_SET.CSV] != null) {\n            state[FILE_TREE_TYPE_SET.CSV].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.CSV] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else if (fileType === FILE_TYPE_SET.HDF5) {\n          if (state[FILE_TREE_TYPE_SET.HDF5] != null) {\n            state[FILE_TREE_TYPE_SET.HDF5].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.HDF5] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        } else {\n          if (state[FILE_TREE_TYPE_SET.ALL] != null) {\n            state[FILE_TREE_TYPE_SET.ALL].isLatest = false\n          } else {\n            state[FILE_TREE_TYPE_SET.ALL] = {\n              isLoading: false,\n              isLatest: false,\n              tree: [],\n            }\n          }\n        }\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        const { fileType } = action.meta.arg\n        if (fileType === FILE_TYPE_SET.IMAGE) {\n          state[FILE_TREE_TYPE_SET.IMAGE].isLatest = false\n        } else if (fileType === FILE_TYPE_SET.CSV) {\n          state[FILE_TREE_TYPE_SET.CSV].isLatest = false\n        } else if (fileType === FILE_TYPE_SET.HDF5) {\n          state[FILE_TREE_TYPE_SET.HDF5].isLatest = false\n        } else {\n          state[FILE_TREE_TYPE_SET.ALL].isLatest = false\n        }\n      })\n  },\n})\n\nexport default filesTreeSlice.reducer\n","import { HDF5TreeDTO } from './HDF5Type'\n\nexport function convertToTreeNodeType(dto: HDF5TreeDTO[]): HDF5TreeDTO[] {\n  return dto.map((node) =>\n    node.isDir\n      ? {\n          name: node.name,\n          isDir: true,\n          nodes: convertToTreeNodeType(node.nodes),\n          path: node.path,\n        }\n      : {\n          name: node.name,\n          isDir: false,\n          shape: node.shape,\n          path: node.path,\n          nbytes: node.nbytes,\n        },\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { getHDF5Tree } from './HDF5Action'\nimport { HDF5Tree, HDF5_SLICE_NAME } from './HDF5Type'\nimport { convertToTreeNodeType } from './HDF5Utils'\n\nconst initialState: HDF5Tree = {\n  isLatest: false,\n  isLoading: false,\n  tree: [],\n}\nexport const HDF5Slice = createSlice({\n  name: HDF5_SLICE_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getHDF5Tree.pending, (state, action) => {\n        state = {\n          isLoading: true,\n          isLatest: false,\n          tree: [],\n        }\n      })\n      .addCase(getHDF5Tree.fulfilled, (state, action) => {\n        state.tree = convertToTreeNodeType(action.payload)\n        state.isLatest = true\n        state.isLoading = false\n      })\n  },\n})\n\nexport default HDF5Slice.reducer\n","import type { ExperimentDTO, ExperimentsDTO } from 'api/experiments/Experiments'\nimport type {\n  ExperimentListType,\n  ExperimentType,\n  ExperimentFunction,\n  EXPERIMENTS_STATUS,\n} from './ExperimentsType'\n\nexport function convertToExperimentListType(\n  dto: ExperimentsDTO,\n): ExperimentListType {\n  const experimentList: ExperimentListType = {}\n  Object.entries(dto).forEach(([uid, value]) => {\n    experimentList[uid] = convertToExperimentType(value)\n  })\n  return experimentList\n}\n\nexport function convertToExperimentType(dto: ExperimentDTO): ExperimentType {\n  const functions: { [nodeId: string]: ExperimentFunction } = {}\n  Object.entries(dto.function).forEach(([name, value]) => {\n    functions[value.unique_id] = {\n      name,\n      nodeId: value.unique_id,\n      postion: value.position,\n      status: convertToExperimentStatus(value.success),\n    }\n  })\n  return {\n    uid: dto.unique_id,\n    timestamp: dto.timestamp,\n    name: dto.name,\n    functions,\n  }\n}\n\nfunction convertToExperimentStatus(dto: string): EXPERIMENTS_STATUS {\n  switch (dto) {\n    case 'running':\n      return 'running'\n    case 'success':\n      return 'success'\n    case 'error':\n      return 'error'\n    default:\n      throw new Error('failed to convert to EXPERIMENTS_STATUS')\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { EXPERIMENTS_SLICE_NAME, Experiments } from './ExperimentsType'\nimport { getExperiments, deleteExperimentByUid } from './ExperimentsActions'\nimport { convertToExperimentListType } from './ExperimentsUtils'\nimport { pollRunResult, run } from '../Pipeline/PipelineActions'\n\nconst initialState: Experiments = {\n  status: 'uninitialized',\n}\n\nexport const experimentsSlice = createSlice({\n  name: EXPERIMENTS_SLICE_NAME,\n  initialState: initialState as Experiments,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(run.fulfilled, () => {\n        return {\n          status: 'uninitialized',\n        }\n      })\n      .addCase(getExperiments.pending, () => {\n        return {\n          status: 'pending',\n        }\n      })\n      .addCase(getExperiments.fulfilled, (state, action) => {\n        const experimentList = convertToExperimentListType(action.payload)\n        return {\n          status: 'fulfilled',\n          experimentList,\n        }\n      })\n      .addCase(getExperiments.rejected, (state, action) => {\n        return {\n          status: 'error',\n          message: action.error.message,\n        }\n      })\n      .addCase(deleteExperimentByUid.fulfilled, (state, action) => {\n        if (action.payload && state.status === 'fulfilled') {\n          delete state.experimentList[action.meta.arg]\n        }\n      })\n      .addCase(pollRunResult.fulfilled, (state, action) => {\n        if (state.status === 'fulfilled') {\n          const uid = action.meta.arg.uid\n          const target = state.experimentList[uid]\n          Object.entries(action.payload).forEach(([nodeId, value]) => {\n            if (value.status === 'success') {\n              target.functions[nodeId].status = 'success'\n            } else if (value.status === 'error') {\n              target.functions[nodeId].status = 'error'\n            }\n          })\n        }\n      })\n  },\n})\n\nexport default experimentsSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport {\n  algorithmListReducer,\n  algorithmNodeReducer,\n  displayDataReducer,\n  fileUploaderReducer,\n  flowElementReducer,\n  inputNodeReducer,\n  nwbReducer,\n  filesTreeReducer,\n  handleTypeColorReducer,\n  rightDrawerReducer,\n  visualaizeItemReducer,\n  snakemakeReducer,\n  pipelineReducer,\n  hdf5Reducer,\n  experimentsReducer,\n} from './slice'\n\nexport const store = configureStore({\n  reducer: {\n    algorithmList: algorithmListReducer,\n    algorithmNode: algorithmNodeReducer,\n    displayData: displayDataReducer,\n    fileUploader: fileUploaderReducer,\n    flowElement: flowElementReducer,\n    inputNode: inputNodeReducer,\n    handleColor: handleTypeColorReducer,\n    filesTree: filesTreeReducer,\n    nwb: nwbReducer,\n    rightDrawer: rightDrawerReducer,\n    visualaizeItem: visualaizeItemReducer,\n    snakemake: snakemakeReducer,\n    pipeline: pipelineReducer,\n    hdf5: hdf5Reducer,\n    experiments: experimentsReducer,\n  },\n})\n\nsetupListeners(store.dispatch)\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\nexport type ThunkApiConfig<T = unknown, PendingMeta = unknown> = {\n  state: RootState\n  dispatch: AppDispatch\n  rejectValue: T\n  penfingMeta: PendingMeta\n}\n","import { createTheme } from '@mui/material/styles'\n\nexport const theme = createTheme({\n  components: {\n    MuiTextField: {\n      defaultProps: {\n        variant: 'standard',\n      },\n    },\n    MuiSelect: {\n      defaultProps: {\n        variant: 'standard',\n      },\n    },\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { store } from 'store/store'\n\nimport { ThemeProvider } from '@mui/material/styles'\nimport { theme } from './Theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}